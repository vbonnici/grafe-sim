// Generated from LLVMParser.g4 by ANTLR 4.10.1
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class LLVMParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.10.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		LT=1, EQSIGN=2, GT=3, VDASH=4, COMMA=5, BANG=6, DOTS=7, LPAREN=8, RPAREN=9, 
		LBRACK=10, RBRACK=11, LBRACE=12, RBRACE=13, STAR=14, ACQ_REL=15, ACQUIRE=16, 
		ADD=17, ADDRSPACE=18, ADDRSPACECAST=19, AFN=20, ALIAS=21, ALIGNCOLON=22, 
		ALIGN=23, ALIGNSTACK=24, ALLOCA=25, ALLOCSIZE=26, ALWAYSINLINE=27, AMDGPU_CS=28, 
		AMDGPU_ES=29, AMDGPU_GS=30, AMDGPU_HS=31, AMDGPU_KERNEL=32, AMDGPU_LS=33, 
		AMDGPU_PS=34, AMDGPU_VS=35, AND=36, ANY=37, ANYREGCC=38, APPENDING=39, 
		ARCP=40, ARGCOLON=41, ARGMEMONLY=42, ARM_AAPCSCC=43, ARM_AAPCS_VFPCC=44, 
		ARM_APCSCC=45, ASHR=46, ASM=47, ATOMIC=48, ATOMICRMW=49, ATTRIBUTESCOLON=50, 
		ATTRIBUTES=51, AVAILABLE_EXTERNALLY=52, AVR_INTRCC=53, AVR_SIGNALCC=54, 
		BASETYPECOLON=55, BITCAST=56, BLOCKADDRESS=57, BR=58, BUILTIN=59, BYVAL=60, 
		C=61, CALL=62, CALLER=63, CATCH=64, CATCHPAD=65, CATCHRET=66, CATCHSWITCH=67, 
		CCCOLON=68, CC=69, CCC=70, CHECKSUMCOLON=71, CHECKSUMKINDCOLON=72, CLEANUP=73, 
		CLEANUPPAD=74, CLEANUPRET=75, CMPXCHG=76, COLD=77, COLDCC=78, COLUMNCOLON=79, 
		COMDAT=80, COMMON=81, CONFIGMACROSCOLON=82, CONSTANT=83, CONTAININGTYPECOLON=84, 
		CONTRACT=85, CONVERGENT=86, COUNTCOLON=87, CXX_FAST_TLSCC=88, DATALAYOUT=89, 
		DEBUGINFOFORPROFILINGCOLON=90, DECLARATIONCOLON=91, DECLARE=92, DEFAULT=93, 
		DEFINE=94, DEREFERENCEABLE=95, DEREFERENCEABLE_OR_NULL=96, NOTDIBASICTYPE=97, 
		NOTDICOMPILEUNIT=98, NOTDICOMPOSITETYPE=99, NOTDIDERIVEDTYPE=100, NOTDIENUMERATOR=101, 
		NOTDIEXPRESSION=102, NOTDIFILE=103, NOTDIGLOBALVARIABLE=104, NOTDIGLOBALVARIABLEEXPRESSION=105, 
		NOTDIIMPORTEDENTITY=106, NOTDILEXICALBLOCK=107, NOTDILEXICALBLOCKFILE=108, 
		NOTDILOCALVARIABLE=109, NOTDILOCATION=110, NOTDIMACRO=111, NOTDIMACROFILE=112, 
		NOTDIMODULE=113, NOTDINAMESPACE=114, NOTDIOBJCPROPERTY=115, DIRECTORYCOLON=116, 
		DISCRIMINATORCOLON=117, DISTINCT=118, NOTDISUBPROGRAM=119, NOTDISUBRANGE=120, 
		NOTDISUBROUTINETYPE=121, NOTDITEMPLATETYPEPARAMETER=122, NOTDITEMPLATEVALUEPARAMETER=123, 
		DLLEXPORT=124, DLLIMPORT=125, DOUBLE=126, DSO_LOCAL=127, DSO_PREEMPTABLE=128, 
		DWARFADDRESSSPACECOLON=129, DWOIDCOLON=130, ELEMENTSCOLON=131, EMISSIONKINDCOLON=132, 
		ENCODINGCOLON=133, ENTITYCOLON=134, ENUMSCOLON=135, EQ=136, EXACT=137, 
		EXACTMATCH=138, EXPORTSYMBOLSCOLON=139, EXPRCOLON=140, EXTERNAL=141, EXTERNALLY_INITIALIZED=142, 
		EXTERN_WEAK=143, EXTRACTELEMENT=144, EXTRACTVALUE=145, EXTRADATACOLON=146, 
		FADD=147, FALSE=148, FAST=149, FASTCC=150, FCMP=151, FDIV=152, FENCE=153, 
		FILECOLON=154, FILENAMECOLON=155, FILTER=156, FLAGSCOLON=157, FLOAT=158, 
		FMUL=159, FP128=160, FPEXT=161, FPTOSI=162, FPTOUI=163, FPTRUNC=164, FREM=165, 
		FROM=166, FSUB=167, FULLDEBUG=168, GC=169, NOTGENERICDINODE=170, GETELEMENTPTR=171, 
		GETTERCOLON=172, GHCCC=173, GLOBAL=174, GLOBALSCOLON=175, GNUPUBNAMESCOLON=176, 
		HALF=177, HEADERCOLON=178, HHVMCC=179, HHVM_CCC=180, HIDDEN_VISIB=181, 
		ICMP=182, IDENTIFIERCOLON=183, IFUNC=184, IMPORTSCOLON=185, INACCESSIBLEMEMONLY=186, 
		INACCESSIBLEMEM_OR_ARGMEMONLY=187, INALLOCA=188, INBOUNDS=189, INCLUDEPATHCOLON=190, 
		INDIRECTBR=191, INITIALEXEC=192, INLINEDATCOLON=193, INLINEHINT=194, INRANGE=195, 
		INREG=196, INSERTELEMENT=197, INSERTVALUE=198, INTELDIALECT=199, INTEL_OCL_BICC=200, 
		INTERNAL=201, INTTOPTR=202, INVOKE=203, ISDEFINITIONCOLON=204, ISLOCALCOLON=205, 
		ISOPTIMIZEDCOLON=206, ISUNSIGNEDCOLON=207, ISYSROOTCOLON=208, JUMPTABLE=209, 
		LABEL=210, LANDINGPAD=211, LANGUAGECOLON=212, LARGEST=213, LINECOLON=214, 
		LINETABLESONLY=215, LINKAGENAMECOLON=216, LINKONCE=217, LINKONCE_ODR=218, 
		LOAD=219, LOCALDYNAMIC=220, LOCALEXEC=221, LOCAL_UNNAMED_ADDR=222, LOWERBOUNDCOLON=223, 
		LSHR=224, MACROSCOLON=225, MAX=226, METADATA=227, MIN=228, MINSIZE=229, 
		MODULE=230, MONOTONIC=231, MSP430_INTRCC=232, MUL=233, MUSTTAIL=234, NAKED=235, 
		NAMECOLON=236, NAND=237, NE=238, NEST=239, NINF=240, NNAN=241, NOALIAS=242, 
		NOBUILTIN=243, NOCAPTURE=244, NODEBUG=245, NODESCOLON=246, NODUPLICATE=247, 
		NODUPLICATES=248, NOIMPLICITFLOAT=249, NOINLINE=250, NONE=251, NONLAZYBIND=252, 
		NONNULL=253, NORECURSE=254, NOREDZONE=255, NORETURN=256, NOTAIL=257, NOUNWIND=258, 
		NSW=259, NSZ=260, NULL=261, NUW=262, OEQ=263, OFFSETCOLON=264, OGE=265, 
		OGT=266, OLE=267, OLT=268, ONE=269, OPAQUE=270, OPERANDSCOLON=271, OPTNONE=272, 
		OPTSIZE=273, OR=274, ORD=275, PERSONALITY=276, PHI=277, PPC_FP128=278, 
		PREFIX=279, PRESERVE_ALLCC=280, PRESERVE_MOSTCC=281, PRIVATE=282, PRODUCERCOLON=283, 
		PROLOGUE=284, PROTECTED=285, PTRTOINT=286, PTX_DEVICE=287, PTX_KERNEL=288, 
		READNONE=289, READONLY=290, REASSOC=291, RELEASE=292, RESUME=293, RET=294, 
		RETAINEDTYPESCOLON=295, RETURNED=296, RETURNS_TWICE=297, RUNTIMELANGCOLON=298, 
		RUNTIMEVERSIONCOLON=299, SAFESTACK=300, SAMESIZE=301, SANITIZE_ADDRESS=302, 
		SANITIZE_HWADDRESS=303, SANITIZE_MEMORY=304, SANITIZE_THREAD=305, SCOPECOLON=306, 
		SCOPELINECOLON=307, SDIV=308, SECTION=309, SELECT=310, SEQ_CST=311, SETTERCOLON=312, 
		SEXT=313, SGE=314, SGT=315, SHL=316, SHUFFLEVECTOR=317, SIDEEFFECT=318, 
		SIGNEXT=319, SITOFP=320, SIZECOLON=321, SLE=322, SLT=323, SOURCE_FILENAME=324, 
		SPECULATABLE=325, SPIR_FUNC=326, SPIR_KERNEL=327, SPLITDEBUGFILENAMECOLON=328, 
		SPLITDEBUGINLININGCOLON=329, SREM=330, SRET=331, SSP=332, SSPREQ=333, 
		SSPSTRONG=334, STORE=335, STRICTFP=336, SUB=337, SWIFTCC=338, SWIFTERROR=339, 
		SWIFTSELF=340, SWITCH=341, SYNCSCOPE=342, TAGCOLON=343, TAIL=344, TARGET=345, 
		TEMPLATEPARAMSCOLON=346, THISADJUSTMENTCOLON=347, THREAD_LOCAL=348, THROWNTYPESCOLON=349, 
		TO=350, TOKEN=351, TRIPLE=352, TRUE=353, TRUNC=354, TYPECOLON=355, TYPE=356, 
		TYPESCOLON=357, UDIV=358, UEQ=359, UGE=360, UGT=361, UITOFP=362, ULE=363, 
		ULT=364, UMAX=365, UMIN=366, UNDEF=367, UNE=368, UNITCOLON=369, UNNAMED_ADDR=370, 
		UNO=371, UNORDERED=372, UNREACHABLE=373, UNWIND=374, UREM=375, USELISTORDER=376, 
		USELISTORDER_BB=377, UWTABLE=378, VA_ARG=379, VALUECOLON=380, VARCOLON=381, 
		VARIABLESCOLON=382, VIRTUALINDEXCOLON=383, VIRTUALITYCOLON=384, VOID=385, 
		VTABLEHOLDERCOLON=386, WEAK=387, WEAK_ODR=388, WEBKIT_JSCC=389, WIN64CC=390, 
		WITHIN=391, WRITEONLY=392, X=393, X86_64_SYSVCC=394, X86_FASTCALLCC=395, 
		X86_FP80=396, X86_INTRCC=397, X86_MMX=398, X86_REGCALLCC=399, X86_STDCALLCC=400, 
		X86_THISCALLCC=401, X86_VECTORCALLCC=402, XCHG=403, XOR=404, ZEROEXT=405, 
		ZEROINITIALIZER=406, ZEXT=407, VOLATILE=408, COMMENT=409, WHITESPACE=410, 
		ATTR_GROUP_ID=411, COMDAT_NAME=412, METADATA_NAME=413, METADATA_ID=414, 
		DWARF_TAG=415, DWARF_ATT_ENCODING=416, DI_FLAG=417, DWARF_LANG=418, DWARF_CC=419, 
		CHECKSUM_KIND=420, DWARF_VIRTUALITY=421, DWARF_MACINFO=422, DWARF_OP=423, 
		INT_LIT=424, DECIMAL_LIT=425, DECIMALS=426, FLOAT_LIT=427, FRAC_LIT=428, 
		SIGN=429, SCI_LIT=430, FLOAT_HEX_LIT=431, STRING_LIT=432, QUOTED_STRING=433, 
		INT_TYPE=434, NAME=435, ESCAPE_NAME=436, QUOTED_NAME=437, ID=438, GLOBAL_IDENT=439, 
		GLOBAL_NAME=440, GLOBAL_ID=441, LOCAL_IDENT=442, LOCAL_NAME=443, LOCAL_ID=444, 
		LABEL_IDENT=445;
	public static final int
		RULE_mySingleInstruction = 0, RULE_module = 1, RULE_topLevelEntities = 2, 
		RULE_topLevelEntityList = 3, RULE_topLevelEntity = 4, RULE_sourceFilename = 5, 
		RULE_targetDefinition = 6, RULE_moduleAsm = 7, RULE_typeDef = 8, RULE_comdatDef = 9, 
		RULE_selectionKind = 10, RULE_globalDecl = 11, RULE_globalDef = 12, RULE_optExternallyInitialized = 13, 
		RULE_immutable = 14, RULE_globalAttrs = 15, RULE_globalAttrList = 16, 
		RULE_globalAttr = 17, RULE_indirectSymbolDef = 18, RULE_alias = 19, RULE_functionDecl = 20, 
		RULE_functionDef = 21, RULE_functionHeader = 22, RULE_optGC = 23, RULE_optPrefix = 24, 
		RULE_optPrologue = 25, RULE_optPersonality = 26, RULE_functionBody = 27, 
		RULE_attrGroupDef = 28, RULE_namedMetadataDef = 29, RULE_metadataNodes = 30, 
		RULE_metadataNodeList = 31, RULE_metadataNode = 32, RULE_metadataDef = 33, 
		RULE_optDistinct = 34, RULE_useListOrders = 35, RULE_useListOrderList = 36, 
		RULE_useListOrder = 37, RULE_useListOrderBB = 38, RULE_globalIdent = 39, 
		RULE_localIdent = 40, RULE_labelIdent = 41, RULE_attrGroupID = 42, RULE_comdatName = 43, 
		RULE_metadataName = 44, RULE_metadataID = 45, RULE_llvmType = 46, RULE_concreteNonRecType = 47, 
		RULE_voidType = 48, RULE_intType = 49, RULE_floatType = 50, RULE_floatKind = 51, 
		RULE_mmxType = 52, RULE_optAddrSpace = 53, RULE_addrSpace = 54, RULE_vectorType = 55, 
		RULE_labelType = 56, RULE_tokenType = 57, RULE_metadataType = 58, RULE_arrayType = 59, 
		RULE_structType = 60, RULE_typeList = 61, RULE_opaqueType = 62, RULE_namedType = 63, 
		RULE_value = 64, RULE_inlineAsm = 65, RULE_optSideEffect = 66, RULE_optAlignStack = 67, 
		RULE_optIntelDialect = 68, RULE_constant = 69, RULE_boolConst = 70, RULE_boolLit = 71, 
		RULE_intConst = 72, RULE_intLit = 73, RULE_floatConst = 74, RULE_nullConst = 75, 
		RULE_noneConst = 76, RULE_structConst = 77, RULE_arrayConst = 78, RULE_charArrayConst = 79, 
		RULE_stringLit = 80, RULE_vectorConst = 81, RULE_zeroInitializerConst = 82, 
		RULE_undefConst = 83, RULE_blockAddressConst = 84, RULE_constantExpr = 85, 
		RULE_addExpr = 86, RULE_fAddExpr = 87, RULE_subExpr = 88, RULE_fSubExpr = 89, 
		RULE_mulExpr = 90, RULE_fMulExpr = 91, RULE_uDivExpr = 92, RULE_sDivExpr = 93, 
		RULE_fDivExpr = 94, RULE_uRemExpr = 95, RULE_sRemExpr = 96, RULE_fRemExpr = 97, 
		RULE_shlExpr = 98, RULE_lShrExpr = 99, RULE_ashrExpr = 100, RULE_andExpr = 101, 
		RULE_orExpr = 102, RULE_xorExpr = 103, RULE_extractElementExpr = 104, 
		RULE_insertElementExpr = 105, RULE_shuffleVectorExpr = 106, RULE_extractValueExpr = 107, 
		RULE_insertValueExpr = 108, RULE_getElementPtrExpr = 109, RULE_gepConstIndices = 110, 
		RULE_gepConstIndexList = 111, RULE_gepConstIndex = 112, RULE_optInrange = 113, 
		RULE_truncExpr = 114, RULE_zExtExpr = 115, RULE_sExtExpr = 116, RULE_fPTruncExpr = 117, 
		RULE_fpExtExpr = 118, RULE_fpToUIExpr = 119, RULE_fpToSIExpr = 120, RULE_uiToFPExpr = 121, 
		RULE_siToFPExpr = 122, RULE_ptrToIntExpr = 123, RULE_intToPtrExpr = 124, 
		RULE_bitCastExpr = 125, RULE_addrSpaceCastExpr = 126, RULE_iCmpExpr = 127, 
		RULE_fCmpExpr = 128, RULE_selectExpr = 129, RULE_basicBlockList = 130, 
		RULE_basicBlock = 131, RULE_optLabelIdent = 132, RULE_instructions = 133, 
		RULE_instructionList = 134, RULE_instruction = 135, RULE_valueInstruction = 136, 
		RULE_addInst = 137, RULE_fAddInst = 138, RULE_subInst = 139, RULE_fSubInst = 140, 
		RULE_mulInst = 141, RULE_fMulInst = 142, RULE_uDivInst = 143, RULE_sDivInst = 144, 
		RULE_fDivInst = 145, RULE_uRemInst = 146, RULE_sRemInst = 147, RULE_fRemInst = 148, 
		RULE_shlInst = 149, RULE_lshrInst = 150, RULE_ashrInst = 151, RULE_andInst = 152, 
		RULE_orInst = 153, RULE_xorInst = 154, RULE_extractElementInst = 155, 
		RULE_insertElementInst = 156, RULE_shuffleVectorInst = 157, RULE_extractValueInst = 158, 
		RULE_insertValueInst = 159, RULE_allocaInst = 160, RULE_optInAlloca = 161, 
		RULE_optSwiftError = 162, RULE_loadInst = 163, RULE_storeInst = 164, RULE_fenceInst = 165, 
		RULE_cmpXchgInst = 166, RULE_optWeak = 167, RULE_atomicRMWInst = 168, 
		RULE_binOp = 169, RULE_getElementPtrInst = 170, RULE_truncInst = 171, 
		RULE_zExtInst = 172, RULE_sExtInst = 173, RULE_fpTruncInst = 174, RULE_fpExtInst = 175, 
		RULE_fpToUIInst = 176, RULE_fpToSIInst = 177, RULE_uiToFPInst = 178, RULE_siToFPInst = 179, 
		RULE_ptrToIntInst = 180, RULE_intToPtrInst = 181, RULE_bitCastInst = 182, 
		RULE_addrSpaceCastInst = 183, RULE_iCmpInst = 184, RULE_fCmpInst = 185, 
		RULE_phiInst = 186, RULE_incList = 187, RULE_inc = 188, RULE_selectInst = 189, 
		RULE_callInst = 190, RULE_optTail = 191, RULE_vaArgInst = 192, RULE_landingPadInst = 193, 
		RULE_optCleanup = 194, RULE_clauses = 195, RULE_clauseList = 196, RULE_clause = 197, 
		RULE_catchPadInst = 198, RULE_cleanupPadInst = 199, RULE_terminator = 200, 
		RULE_retTerm = 201, RULE_brTerm = 202, RULE_condBrTerm = 203, RULE_switchTerm = 204, 
		RULE_cases = 205, RULE_caseList = 206, RULE_llvmCase = 207, RULE_indirectBrTerm = 208, 
		RULE_labelList = 209, RULE_label = 210, RULE_invokeTerm = 211, RULE_resumeTerm = 212, 
		RULE_catchSwitchTerm = 213, RULE_catchRetTerm = 214, RULE_cleanupRetTerm = 215, 
		RULE_unreachableTerm = 216, RULE_unwindTarget = 217, RULE_mdTuple = 218, 
		RULE_mdFields = 219, RULE_mdFieldList = 220, RULE_mdField = 221, RULE_metadata = 222, 
		RULE_mdString = 223, RULE_metadataAttachment = 224, RULE_mdNode = 225, 
		RULE_metadataAttachments = 226, RULE_metadataAttachmentList = 227, RULE_optCommaSepMetadataAttachmentList = 228, 
		RULE_commaSepMetadataAttachmentList = 229, RULE_specializedMDNode = 230, 
		RULE_diCompileUnit = 231, RULE_diCompileUnitFields = 232, RULE_diCompileUnitFieldList = 233, 
		RULE_diCompileUnitField = 234, RULE_diFile = 235, RULE_diFileFields = 236, 
		RULE_diFileFieldList = 237, RULE_diFileField = 238, RULE_diBasicType = 239, 
		RULE_diBasicTypeFields = 240, RULE_diBasicTypeFieldList = 241, RULE_diBasicTypeField = 242, 
		RULE_diSubroutineType = 243, RULE_diSubroutineTypeFields = 244, RULE_diSubroutineTypeFieldList = 245, 
		RULE_diSubroutineTypeField = 246, RULE_diDerivedType = 247, RULE_diDerivedTypeFields = 248, 
		RULE_diDerivedTypeFieldList = 249, RULE_diDerivedTypeField = 250, RULE_diCompositeType = 251, 
		RULE_diCompositeTypeFields = 252, RULE_diCompositeTypeFieldList = 253, 
		RULE_diCompositeTypeField = 254, RULE_diSubrange = 255, RULE_diSubrangeFields = 256, 
		RULE_diSubrangeFieldList = 257, RULE_diSubrangeField = 258, RULE_diEnumerator = 259, 
		RULE_diEnumeratorFields = 260, RULE_diEnumeratorFieldList = 261, RULE_diEnumeratorField = 262, 
		RULE_diTemplateTypeParameter = 263, RULE_diTemplateTypeParameterFields = 264, 
		RULE_diTemplateTypeParameterFieldList = 265, RULE_diTemplateTypeParameterField = 266, 
		RULE_diTemplateValueParameter = 267, RULE_diTemplateValueParameterFields = 268, 
		RULE_diTemplateValueParameterFieldList = 269, RULE_diTemplateValueParameterField = 270, 
		RULE_diModule = 271, RULE_diModuleFields = 272, RULE_diModuleFieldList = 273, 
		RULE_diModuleField = 274, RULE_diNamespace = 275, RULE_diNamespaceFields = 276, 
		RULE_diNamespaceFieldList = 277, RULE_diNamespaceField = 278, RULE_diGlobalVariable = 279, 
		RULE_diGlobalVariableFields = 280, RULE_diGlobalVariableFieldList = 281, 
		RULE_diGlobalVariableField = 282, RULE_diSubprogram = 283, RULE_diSubprogramFields = 284, 
		RULE_diSubprogramFieldList = 285, RULE_diSubprogramField = 286, RULE_diLexicalBlock = 287, 
		RULE_diLexicalBlockFields = 288, RULE_diLexicalBlockFieldList = 289, RULE_diLexicalBlockField = 290, 
		RULE_diLexicalBlockFile = 291, RULE_diLexicalBlockFileFields = 292, RULE_diLexicalBlockFileFieldList = 293, 
		RULE_diLexicalBlockFileField = 294, RULE_diLocation = 295, RULE_diLocationFields = 296, 
		RULE_diLocationFieldList = 297, RULE_diLocationField = 298, RULE_diLocalVariable = 299, 
		RULE_diLocalVariableFields = 300, RULE_diLocalVariableFieldList = 301, 
		RULE_diLocalVariableField = 302, RULE_diExpression = 303, RULE_diExpressionFields = 304, 
		RULE_diExpressionFieldList = 305, RULE_diExpressionField = 306, RULE_diGlobalVariableExpression = 307, 
		RULE_diGlobalVariableExpressionFields = 308, RULE_diGlobalVariableExpressionFieldList = 309, 
		RULE_diGlobalVariableExpressionField = 310, RULE_diObjCProperty = 311, 
		RULE_diObjCPropertyFields = 312, RULE_diObjCPropertyFieldList = 313, RULE_diObjCPropertyField = 314, 
		RULE_diImportedEntity = 315, RULE_diImportedEntityFields = 316, RULE_diImportedEntityFieldList = 317, 
		RULE_diImportedEntityField = 318, RULE_diMacro = 319, RULE_diMacroFields = 320, 
		RULE_diMacroFieldList = 321, RULE_diMacroField = 322, RULE_diMacroFile = 323, 
		RULE_diMacroFileFields = 324, RULE_diMacroFileFieldList = 325, RULE_diMacroFileField = 326, 
		RULE_genericDINode = 327, RULE_genericDINodeFields = 328, RULE_genericDINodeFieldList = 329, 
		RULE_genericDINodeField = 330, RULE_fileField = 331, RULE_isOptimizedField = 332, 
		RULE_tagField = 333, RULE_nameField = 334, RULE_sizeField = 335, RULE_alignField = 336, 
		RULE_flagsField = 337, RULE_lineField = 338, RULE_scopeField = 339, RULE_baseTypeField = 340, 
		RULE_offsetField = 341, RULE_templateParamsField = 342, RULE_intOrMDField = 343, 
		RULE_typeField = 344, RULE_linkageNameField = 345, RULE_isLocalField = 346, 
		RULE_isDefinitionField = 347, RULE_declarationField = 348, RULE_columnField = 349, 
		RULE_typeMacinfoField = 350, RULE_checksumkind = 351, RULE_diFlagList = 352, 
		RULE_diFlag = 353, RULE_dwarfAttEncoding = 354, RULE_dwarfCC = 355, RULE_dwarfLang = 356, 
		RULE_dwarfMacinfo = 357, RULE_dwarfOp = 358, RULE_dwarfTag = 359, RULE_dwarfVirtuality = 360, 
		RULE_emissionKind = 361, RULE_typeValues = 362, RULE_typeValueList = 363, 
		RULE_commaSepTypeValueList = 364, RULE_typeValue = 365, RULE_typeConsts = 366, 
		RULE_typeConstList = 367, RULE_typeConst = 368, RULE_alignment = 369, 
		RULE_allocSize = 370, RULE_args = 371, RULE_argList = 372, RULE_arg = 373, 
		RULE_atomicOrdering = 374, RULE_optCallingConv = 375, RULE_callingConv = 376, 
		RULE_optComdat = 377, RULE_comdat = 378, RULE_dereferenceable = 379, RULE_optDLLStorageClass = 380, 
		RULE_dllStorageClass = 381, RULE_optExact = 382, RULE_exceptionArgs = 383, 
		RULE_exceptionArgList = 384, RULE_exceptionArg = 385, RULE_exceptionScope = 386, 
		RULE_fastMathFlags = 387, RULE_fastMathFlagList = 388, RULE_fastMathFlag = 389, 
		RULE_fpred = 390, RULE_funcAttrs = 391, RULE_funcAttrList = 392, RULE_funcAttr = 393, 
		RULE_optInBounds = 394, RULE_indices = 395, RULE_indexList = 396, RULE_index = 397, 
		RULE_iPred = 398, RULE_optLinkage = 399, RULE_linkage = 400, RULE_optExternLinkage = 401, 
		RULE_externLinkage = 402, RULE_operandBundles = 403, RULE_operandBundleList = 404, 
		RULE_operandBundle = 405, RULE_overflowFlags = 406, RULE_overflowFlagList = 407, 
		RULE_overflowFlag = 408, RULE_paramAttrs = 409, RULE_paramAttrList = 410, 
		RULE_paramAttr = 411, RULE_params = 412, RULE_paramList = 413, RULE_param = 414, 
		RULE_optPreemptionSpecifier = 415, RULE_preemptionSpecifier = 416, RULE_returnAttrs = 417, 
		RULE_returnAttrList = 418, RULE_returnAttr = 419, RULE_section = 420, 
		RULE_stackAlignment = 421, RULE_optSyncScope = 422, RULE_threadLocal = 423, 
		RULE_tlsModel = 424, RULE_unnamedAddr = 425, RULE_visibility = 426;
	private static String[] makeRuleNames() {
		return new String[] {
			"mySingleInstruction", "module", "topLevelEntities", "topLevelEntityList", 
			"topLevelEntity", "sourceFilename", "targetDefinition", "moduleAsm", 
			"typeDef", "comdatDef", "selectionKind", "globalDecl", "globalDef", "optExternallyInitialized", 
			"immutable", "globalAttrs", "globalAttrList", "globalAttr", "indirectSymbolDef", 
			"alias", "functionDecl", "functionDef", "functionHeader", "optGC", "optPrefix", 
			"optPrologue", "optPersonality", "functionBody", "attrGroupDef", "namedMetadataDef", 
			"metadataNodes", "metadataNodeList", "metadataNode", "metadataDef", "optDistinct", 
			"useListOrders", "useListOrderList", "useListOrder", "useListOrderBB", 
			"globalIdent", "localIdent", "labelIdent", "attrGroupID", "comdatName", 
			"metadataName", "metadataID", "llvmType", "concreteNonRecType", "voidType", 
			"intType", "floatType", "floatKind", "mmxType", "optAddrSpace", "addrSpace", 
			"vectorType", "labelType", "tokenType", "metadataType", "arrayType", 
			"structType", "typeList", "opaqueType", "namedType", "value", "inlineAsm", 
			"optSideEffect", "optAlignStack", "optIntelDialect", "constant", "boolConst", 
			"boolLit", "intConst", "intLit", "floatConst", "nullConst", "noneConst", 
			"structConst", "arrayConst", "charArrayConst", "stringLit", "vectorConst", 
			"zeroInitializerConst", "undefConst", "blockAddressConst", "constantExpr", 
			"addExpr", "fAddExpr", "subExpr", "fSubExpr", "mulExpr", "fMulExpr", 
			"uDivExpr", "sDivExpr", "fDivExpr", "uRemExpr", "sRemExpr", "fRemExpr", 
			"shlExpr", "lShrExpr", "ashrExpr", "andExpr", "orExpr", "xorExpr", "extractElementExpr", 
			"insertElementExpr", "shuffleVectorExpr", "extractValueExpr", "insertValueExpr", 
			"getElementPtrExpr", "gepConstIndices", "gepConstIndexList", "gepConstIndex", 
			"optInrange", "truncExpr", "zExtExpr", "sExtExpr", "fPTruncExpr", "fpExtExpr", 
			"fpToUIExpr", "fpToSIExpr", "uiToFPExpr", "siToFPExpr", "ptrToIntExpr", 
			"intToPtrExpr", "bitCastExpr", "addrSpaceCastExpr", "iCmpExpr", "fCmpExpr", 
			"selectExpr", "basicBlockList", "basicBlock", "optLabelIdent", "instructions", 
			"instructionList", "instruction", "valueInstruction", "addInst", "fAddInst", 
			"subInst", "fSubInst", "mulInst", "fMulInst", "uDivInst", "sDivInst", 
			"fDivInst", "uRemInst", "sRemInst", "fRemInst", "shlInst", "lshrInst", 
			"ashrInst", "andInst", "orInst", "xorInst", "extractElementInst", "insertElementInst", 
			"shuffleVectorInst", "extractValueInst", "insertValueInst", "allocaInst", 
			"optInAlloca", "optSwiftError", "loadInst", "storeInst", "fenceInst", 
			"cmpXchgInst", "optWeak", "atomicRMWInst", "binOp", "getElementPtrInst", 
			"truncInst", "zExtInst", "sExtInst", "fpTruncInst", "fpExtInst", "fpToUIInst", 
			"fpToSIInst", "uiToFPInst", "siToFPInst", "ptrToIntInst", "intToPtrInst", 
			"bitCastInst", "addrSpaceCastInst", "iCmpInst", "fCmpInst", "phiInst", 
			"incList", "inc", "selectInst", "callInst", "optTail", "vaArgInst", "landingPadInst", 
			"optCleanup", "clauses", "clauseList", "clause", "catchPadInst", "cleanupPadInst", 
			"terminator", "retTerm", "brTerm", "condBrTerm", "switchTerm", "cases", 
			"caseList", "llvmCase", "indirectBrTerm", "labelList", "label", "invokeTerm", 
			"resumeTerm", "catchSwitchTerm", "catchRetTerm", "cleanupRetTerm", "unreachableTerm", 
			"unwindTarget", "mdTuple", "mdFields", "mdFieldList", "mdField", "metadata", 
			"mdString", "metadataAttachment", "mdNode", "metadataAttachments", "metadataAttachmentList", 
			"optCommaSepMetadataAttachmentList", "commaSepMetadataAttachmentList", 
			"specializedMDNode", "diCompileUnit", "diCompileUnitFields", "diCompileUnitFieldList", 
			"diCompileUnitField", "diFile", "diFileFields", "diFileFieldList", "diFileField", 
			"diBasicType", "diBasicTypeFields", "diBasicTypeFieldList", "diBasicTypeField", 
			"diSubroutineType", "diSubroutineTypeFields", "diSubroutineTypeFieldList", 
			"diSubroutineTypeField", "diDerivedType", "diDerivedTypeFields", "diDerivedTypeFieldList", 
			"diDerivedTypeField", "diCompositeType", "diCompositeTypeFields", "diCompositeTypeFieldList", 
			"diCompositeTypeField", "diSubrange", "diSubrangeFields", "diSubrangeFieldList", 
			"diSubrangeField", "diEnumerator", "diEnumeratorFields", "diEnumeratorFieldList", 
			"diEnumeratorField", "diTemplateTypeParameter", "diTemplateTypeParameterFields", 
			"diTemplateTypeParameterFieldList", "diTemplateTypeParameterField", "diTemplateValueParameter", 
			"diTemplateValueParameterFields", "diTemplateValueParameterFieldList", 
			"diTemplateValueParameterField", "diModule", "diModuleFields", "diModuleFieldList", 
			"diModuleField", "diNamespace", "diNamespaceFields", "diNamespaceFieldList", 
			"diNamespaceField", "diGlobalVariable", "diGlobalVariableFields", "diGlobalVariableFieldList", 
			"diGlobalVariableField", "diSubprogram", "diSubprogramFields", "diSubprogramFieldList", 
			"diSubprogramField", "diLexicalBlock", "diLexicalBlockFields", "diLexicalBlockFieldList", 
			"diLexicalBlockField", "diLexicalBlockFile", "diLexicalBlockFileFields", 
			"diLexicalBlockFileFieldList", "diLexicalBlockFileField", "diLocation", 
			"diLocationFields", "diLocationFieldList", "diLocationField", "diLocalVariable", 
			"diLocalVariableFields", "diLocalVariableFieldList", "diLocalVariableField", 
			"diExpression", "diExpressionFields", "diExpressionFieldList", "diExpressionField", 
			"diGlobalVariableExpression", "diGlobalVariableExpressionFields", "diGlobalVariableExpressionFieldList", 
			"diGlobalVariableExpressionField", "diObjCProperty", "diObjCPropertyFields", 
			"diObjCPropertyFieldList", "diObjCPropertyField", "diImportedEntity", 
			"diImportedEntityFields", "diImportedEntityFieldList", "diImportedEntityField", 
			"diMacro", "diMacroFields", "diMacroFieldList", "diMacroField", "diMacroFile", 
			"diMacroFileFields", "diMacroFileFieldList", "diMacroFileField", "genericDINode", 
			"genericDINodeFields", "genericDINodeFieldList", "genericDINodeField", 
			"fileField", "isOptimizedField", "tagField", "nameField", "sizeField", 
			"alignField", "flagsField", "lineField", "scopeField", "baseTypeField", 
			"offsetField", "templateParamsField", "intOrMDField", "typeField", "linkageNameField", 
			"isLocalField", "isDefinitionField", "declarationField", "columnField", 
			"typeMacinfoField", "checksumkind", "diFlagList", "diFlag", "dwarfAttEncoding", 
			"dwarfCC", "dwarfLang", "dwarfMacinfo", "dwarfOp", "dwarfTag", "dwarfVirtuality", 
			"emissionKind", "typeValues", "typeValueList", "commaSepTypeValueList", 
			"typeValue", "typeConsts", "typeConstList", "typeConst", "alignment", 
			"allocSize", "args", "argList", "arg", "atomicOrdering", "optCallingConv", 
			"callingConv", "optComdat", "comdat", "dereferenceable", "optDLLStorageClass", 
			"dllStorageClass", "optExact", "exceptionArgs", "exceptionArgList", "exceptionArg", 
			"exceptionScope", "fastMathFlags", "fastMathFlagList", "fastMathFlag", 
			"fpred", "funcAttrs", "funcAttrList", "funcAttr", "optInBounds", "indices", 
			"indexList", "index", "iPred", "optLinkage", "linkage", "optExternLinkage", 
			"externLinkage", "operandBundles", "operandBundleList", "operandBundle", 
			"overflowFlags", "overflowFlagList", "overflowFlag", "paramAttrs", "paramAttrList", 
			"paramAttr", "params", "paramList", "param", "optPreemptionSpecifier", 
			"preemptionSpecifier", "returnAttrs", "returnAttrList", "returnAttr", 
			"section", "stackAlignment", "optSyncScope", "threadLocal", "tlsModel", 
			"unnamedAddr", "visibility"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'<'", "'='", "'>'", "'|'", "','", "'!'", "'...'", "'('", "')'", 
			"'['", "']'", "'{'", "'}'", "'*'", "'acq_rel'", "'acquire'", "'add'", 
			"'addrspace'", "'addrspacecast'", "'afn'", "'alias'", "'align:'", "'align'", 
			"'alignstack'", "'alloca'", "'allocsize'", "'alwaysinline'", "'amdgpu_cs'", 
			"'amdgpu_es'", "'amdgpu_gs'", "'amdgpu_hs'", "'amdgpu_kernel'", "'amdgpu_ls'", 
			"'amdgpu_ps'", "'amdgpu_vs'", "'and'", "'any'", "'anyregcc'", "'appending'", 
			"'arcp'", "'arg:'", "'argmemonly'", "'arm_aapcscc'", "'arm_aapcs_vfpcc'", 
			"'arm_apcscc'", "'ashr'", "'asm'", "'atomic'", "'atomicrmw'", "'attributes:'", 
			"'attributes'", "'available_externally'", "'avr_intrcc'", "'avr_signalcc'", 
			"'baseType:'", "'bitcast'", "'blockaddress'", "'br'", "'builtin'", "'byval'", 
			"'c'", "'call'", "'caller'", "'catch'", "'catchpad'", "'catchret'", "'catchswitch'", 
			"'cc:'", "'cc'", "'ccc'", "'checksum:'", "'checksumkind:'", "'cleanup'", 
			"'cleanuppad'", "'cleanupret'", "'cmpxchg'", "'cold'", "'coldcc'", "'column:'", 
			"'comdat'", "'common'", "'configMacros:'", "'constant'", "'containingType:'", 
			"'contract'", "'convergent'", "'count:'", "'cxx_fast_tlscc'", "'datalayout'", 
			"'debugInfoForProfiling:'", "'declaration:'", "'declare'", "'default'", 
			"'define'", "'dereferenceable'", "'dereferenceable_or_null'", "'!DIBasicType'", 
			"'!DICompileUnit'", "'!DICompositeType'", "'!DIDerivedType'", "'!DIEnumerator'", 
			"'!DIExpression'", "'!DIFile'", "'!DIGlobalVariable'", "'!DIGlobalVariableExpression'", 
			"'!DIImportedEntity'", "'!DILexicalBlock'", "'!DILexicalBlockFile'", 
			"'!DILocalVariable'", "'!DILocation'", "'!DIMacro'", "'!DIMacroFile'", 
			"'!DIModule'", "'!DINamespace'", "'!DIObjCProperty'", "'directory:'", 
			"'discriminator:'", "'distinct'", "'!DISubprogram'", "'!DISubrange'", 
			"'!DISubroutineType'", "'!DITemplateTypeParameter'", "'!DITemplateValueParameter'", 
			"'dllexport'", "'dllimport'", "'double'", "'dso_local'", "'dso_preemptable'", 
			"'dwarfAddressSpace:'", "'dwoId:'", "'elements:'", "'emissionKind:'", 
			"'encoding:'", "'entity:'", "'enums:'", "'eq'", "'exact'", "'exactmatch'", 
			"'exportSymbols:'", "'expr:'", "'external'", "'externally_initialized'", 
			"'extern_weak'", "'extractelement'", "'extractvalue'", "'extraData:'", 
			"'fadd'", "'false'", "'fast'", "'fastcc'", "'fcmp'", "'fdiv'", "'fence'", 
			"'file:'", "'filename:'", "'filter'", "'flags:'", "'float'", "'fmul'", 
			"'fp128'", "'fpext'", "'fptosi'", "'fptoui'", "'fptrunc'", "'frem'", 
			"'from'", "'fsub'", "'FullDebug'", "'gc'", "'!GenericDINode'", "'getelementptr'", 
			"'getter:'", "'ghccc'", "'global'", "'globals:'", "'gnuPubnames:'", "'half'", 
			"'header:'", "'hhvmcc'", "'hhvm_ccc'", "'hidden'", "'icmp'", "'identifier:'", 
			"'ifunc'", "'imports:'", "'inaccessiblememonly'", "'inaccessiblemem_or_argmemonly'", 
			"'inalloca'", "'inbounds'", "'includePath:'", "'indirectbr'", "'initialexec'", 
			"'inlinedAt:'", "'inlinehint'", "'inrange'", "'inreg'", "'insertelement'", 
			"'insertvalue'", "'inteldialect'", "'intel_ocl_bicc'", "'internal'", 
			"'inttoptr'", "'invoke'", "'isDefinition:'", "'isLocal:'", "'isOptimized:'", 
			"'isUnsigned:'", "'isysroot:'", "'jumptable'", "'label'", "'landingpad'", 
			"'language:'", "'largest'", "'line:'", "'LineTablesOnly'", "'linkageName:'", 
			"'linkonce'", "'linkonce_odr'", "'load'", "'localdynamic'", "'localexec'", 
			"'local_unnamed_addr'", "'lowerBound:'", "'lshr'", "'macros:'", "'max'", 
			"'metadata'", "'min'", "'minsize'", "'module'", "'monotonic'", "'msp430_intrcc'", 
			"'mul'", "'musttail'", "'naked'", "'name:'", "'nand'", "'ne'", "'nest'", 
			"'ninf'", "'nnan'", "'noalias'", "'nobuiltin'", "'nocapture'", "'NoDebug'", 
			"'nodes:'", "'noduplicate'", "'noduplicates'", "'noimplicitfloat'", "'noinline'", 
			"'none'", "'nonlazybind'", "'nonnull'", "'norecurse'", "'noredzone'", 
			"'noreturn'", "'notail'", "'nounwind'", "'nsw'", "'nsz'", "'null'", "'nuw'", 
			"'oeq'", "'offset:'", "'oge'", "'ogt'", "'ole'", "'olt'", "'one'", "'opaque'", 
			"'operands:'", "'optnone'", "'optsize'", "'or'", "'ord'", "'personality'", 
			"'phi'", "'ppc_fp128'", "'prefix'", "'preserve_allcc'", "'preserve_mostcc'", 
			"'private'", "'producer:'", "'prologue'", "'protected'", "'ptrtoint'", 
			"'ptx_device'", "'ptx_kernel'", "'readnone'", "'readonly'", "'reassoc'", 
			"'release'", "'resume'", "'ret'", "'retainedTypes:'", "'returned'", "'returns_twice'", 
			"'runtimeLang:'", "'runtimeVersion:'", "'safestack'", "'samesize'", "'sanitize_address'", 
			"'sanitize_hwaddress'", "'sanitize_memory'", "'sanitize_thread'", "'scope:'", 
			"'scopeLine:'", "'sdiv'", "'section'", "'select'", "'seq_cst'", "'setter:'", 
			"'sext'", "'sge'", "'sgt'", "'shl'", "'shufflevector'", "'sideeffect'", 
			"'signext'", "'sitofp'", "'size:'", "'sle'", "'slt'", "'source_filename'", 
			"'speculatable'", "'spir_func'", "'spir_kernel'", "'splitDebugFilename:'", 
			"'splitDebugInlining:'", "'srem'", "'sret'", "'ssp'", "'sspreq'", "'sspstrong'", 
			"'store'", "'strictfp'", "'sub'", "'swiftcc'", "'swifterror'", "'swiftself'", 
			"'switch'", "'syncscope'", "'tag:'", "'tail'", "'target'", "'templateParams:'", 
			"'thisAdjustment:'", "'thread_local'", "'thrownTypes:'", "'to'", "'token'", 
			"'triple'", "'true'", "'trunc'", "'type:'", "'type'", "'types:'", "'udiv'", 
			"'ueq'", "'uge'", "'ugt'", "'uitofp'", "'ule'", "'ult'", "'umax'", "'umin'", 
			"'undef'", "'une'", "'unit:'", "'unnamed_addr'", "'uno'", "'unordered'", 
			"'unreachable'", "'unwind'", "'urem'", "'uselistorder'", "'uselistorder_bb'", 
			"'uwtable'", "'va_arg'", "'value:'", "'var:'", "'variables:'", "'virtualIndex:'", 
			"'virtuality:'", "'void'", "'vtableHolder:'", "'weak'", "'weak_odr'", 
			"'webkit_jscc'", "'win64cc'", "'within'", "'writeonly'", "'x'", "'x86_64_sysvcc'", 
			"'x86_fastcallcc'", "'x86_fp80'", "'x86_intrcc'", "'x86_mmx'", "'x86_regcallcc'", 
			"'x86_stdcallcc'", "'x86_thiscallcc'", "'x86_vectorcallcc'", "'xchg'", 
			"'xor'", "'zeroext'", "'zeroinitializer'", "'zext'", "'volatile'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "LT", "EQSIGN", "GT", "VDASH", "COMMA", "BANG", "DOTS", "LPAREN", 
			"RPAREN", "LBRACK", "RBRACK", "LBRACE", "RBRACE", "STAR", "ACQ_REL", 
			"ACQUIRE", "ADD", "ADDRSPACE", "ADDRSPACECAST", "AFN", "ALIAS", "ALIGNCOLON", 
			"ALIGN", "ALIGNSTACK", "ALLOCA", "ALLOCSIZE", "ALWAYSINLINE", "AMDGPU_CS", 
			"AMDGPU_ES", "AMDGPU_GS", "AMDGPU_HS", "AMDGPU_KERNEL", "AMDGPU_LS", 
			"AMDGPU_PS", "AMDGPU_VS", "AND", "ANY", "ANYREGCC", "APPENDING", "ARCP", 
			"ARGCOLON", "ARGMEMONLY", "ARM_AAPCSCC", "ARM_AAPCS_VFPCC", "ARM_APCSCC", 
			"ASHR", "ASM", "ATOMIC", "ATOMICRMW", "ATTRIBUTESCOLON", "ATTRIBUTES", 
			"AVAILABLE_EXTERNALLY", "AVR_INTRCC", "AVR_SIGNALCC", "BASETYPECOLON", 
			"BITCAST", "BLOCKADDRESS", "BR", "BUILTIN", "BYVAL", "C", "CALL", "CALLER", 
			"CATCH", "CATCHPAD", "CATCHRET", "CATCHSWITCH", "CCCOLON", "CC", "CCC", 
			"CHECKSUMCOLON", "CHECKSUMKINDCOLON", "CLEANUP", "CLEANUPPAD", "CLEANUPRET", 
			"CMPXCHG", "COLD", "COLDCC", "COLUMNCOLON", "COMDAT", "COMMON", "CONFIGMACROSCOLON", 
			"CONSTANT", "CONTAININGTYPECOLON", "CONTRACT", "CONVERGENT", "COUNTCOLON", 
			"CXX_FAST_TLSCC", "DATALAYOUT", "DEBUGINFOFORPROFILINGCOLON", "DECLARATIONCOLON", 
			"DECLARE", "DEFAULT", "DEFINE", "DEREFERENCEABLE", "DEREFERENCEABLE_OR_NULL", 
			"NOTDIBASICTYPE", "NOTDICOMPILEUNIT", "NOTDICOMPOSITETYPE", "NOTDIDERIVEDTYPE", 
			"NOTDIENUMERATOR", "NOTDIEXPRESSION", "NOTDIFILE", "NOTDIGLOBALVARIABLE", 
			"NOTDIGLOBALVARIABLEEXPRESSION", "NOTDIIMPORTEDENTITY", "NOTDILEXICALBLOCK", 
			"NOTDILEXICALBLOCKFILE", "NOTDILOCALVARIABLE", "NOTDILOCATION", "NOTDIMACRO", 
			"NOTDIMACROFILE", "NOTDIMODULE", "NOTDINAMESPACE", "NOTDIOBJCPROPERTY", 
			"DIRECTORYCOLON", "DISCRIMINATORCOLON", "DISTINCT", "NOTDISUBPROGRAM", 
			"NOTDISUBRANGE", "NOTDISUBROUTINETYPE", "NOTDITEMPLATETYPEPARAMETER", 
			"NOTDITEMPLATEVALUEPARAMETER", "DLLEXPORT", "DLLIMPORT", "DOUBLE", "DSO_LOCAL", 
			"DSO_PREEMPTABLE", "DWARFADDRESSSPACECOLON", "DWOIDCOLON", "ELEMENTSCOLON", 
			"EMISSIONKINDCOLON", "ENCODINGCOLON", "ENTITYCOLON", "ENUMSCOLON", "EQ", 
			"EXACT", "EXACTMATCH", "EXPORTSYMBOLSCOLON", "EXPRCOLON", "EXTERNAL", 
			"EXTERNALLY_INITIALIZED", "EXTERN_WEAK", "EXTRACTELEMENT", "EXTRACTVALUE", 
			"EXTRADATACOLON", "FADD", "FALSE", "FAST", "FASTCC", "FCMP", "FDIV", 
			"FENCE", "FILECOLON", "FILENAMECOLON", "FILTER", "FLAGSCOLON", "FLOAT", 
			"FMUL", "FP128", "FPEXT", "FPTOSI", "FPTOUI", "FPTRUNC", "FREM", "FROM", 
			"FSUB", "FULLDEBUG", "GC", "NOTGENERICDINODE", "GETELEMENTPTR", "GETTERCOLON", 
			"GHCCC", "GLOBAL", "GLOBALSCOLON", "GNUPUBNAMESCOLON", "HALF", "HEADERCOLON", 
			"HHVMCC", "HHVM_CCC", "HIDDEN_VISIB", "ICMP", "IDENTIFIERCOLON", "IFUNC", 
			"IMPORTSCOLON", "INACCESSIBLEMEMONLY", "INACCESSIBLEMEM_OR_ARGMEMONLY", 
			"INALLOCA", "INBOUNDS", "INCLUDEPATHCOLON", "INDIRECTBR", "INITIALEXEC", 
			"INLINEDATCOLON", "INLINEHINT", "INRANGE", "INREG", "INSERTELEMENT", 
			"INSERTVALUE", "INTELDIALECT", "INTEL_OCL_BICC", "INTERNAL", "INTTOPTR", 
			"INVOKE", "ISDEFINITIONCOLON", "ISLOCALCOLON", "ISOPTIMIZEDCOLON", "ISUNSIGNEDCOLON", 
			"ISYSROOTCOLON", "JUMPTABLE", "LABEL", "LANDINGPAD", "LANGUAGECOLON", 
			"LARGEST", "LINECOLON", "LINETABLESONLY", "LINKAGENAMECOLON", "LINKONCE", 
			"LINKONCE_ODR", "LOAD", "LOCALDYNAMIC", "LOCALEXEC", "LOCAL_UNNAMED_ADDR", 
			"LOWERBOUNDCOLON", "LSHR", "MACROSCOLON", "MAX", "METADATA", "MIN", "MINSIZE", 
			"MODULE", "MONOTONIC", "MSP430_INTRCC", "MUL", "MUSTTAIL", "NAKED", "NAMECOLON", 
			"NAND", "NE", "NEST", "NINF", "NNAN", "NOALIAS", "NOBUILTIN", "NOCAPTURE", 
			"NODEBUG", "NODESCOLON", "NODUPLICATE", "NODUPLICATES", "NOIMPLICITFLOAT", 
			"NOINLINE", "NONE", "NONLAZYBIND", "NONNULL", "NORECURSE", "NOREDZONE", 
			"NORETURN", "NOTAIL", "NOUNWIND", "NSW", "NSZ", "NULL", "NUW", "OEQ", 
			"OFFSETCOLON", "OGE", "OGT", "OLE", "OLT", "ONE", "OPAQUE", "OPERANDSCOLON", 
			"OPTNONE", "OPTSIZE", "OR", "ORD", "PERSONALITY", "PHI", "PPC_FP128", 
			"PREFIX", "PRESERVE_ALLCC", "PRESERVE_MOSTCC", "PRIVATE", "PRODUCERCOLON", 
			"PROLOGUE", "PROTECTED", "PTRTOINT", "PTX_DEVICE", "PTX_KERNEL", "READNONE", 
			"READONLY", "REASSOC", "RELEASE", "RESUME", "RET", "RETAINEDTYPESCOLON", 
			"RETURNED", "RETURNS_TWICE", "RUNTIMELANGCOLON", "RUNTIMEVERSIONCOLON", 
			"SAFESTACK", "SAMESIZE", "SANITIZE_ADDRESS", "SANITIZE_HWADDRESS", "SANITIZE_MEMORY", 
			"SANITIZE_THREAD", "SCOPECOLON", "SCOPELINECOLON", "SDIV", "SECTION", 
			"SELECT", "SEQ_CST", "SETTERCOLON", "SEXT", "SGE", "SGT", "SHL", "SHUFFLEVECTOR", 
			"SIDEEFFECT", "SIGNEXT", "SITOFP", "SIZECOLON", "SLE", "SLT", "SOURCE_FILENAME", 
			"SPECULATABLE", "SPIR_FUNC", "SPIR_KERNEL", "SPLITDEBUGFILENAMECOLON", 
			"SPLITDEBUGINLININGCOLON", "SREM", "SRET", "SSP", "SSPREQ", "SSPSTRONG", 
			"STORE", "STRICTFP", "SUB", "SWIFTCC", "SWIFTERROR", "SWIFTSELF", "SWITCH", 
			"SYNCSCOPE", "TAGCOLON", "TAIL", "TARGET", "TEMPLATEPARAMSCOLON", "THISADJUSTMENTCOLON", 
			"THREAD_LOCAL", "THROWNTYPESCOLON", "TO", "TOKEN", "TRIPLE", "TRUE", 
			"TRUNC", "TYPECOLON", "TYPE", "TYPESCOLON", "UDIV", "UEQ", "UGE", "UGT", 
			"UITOFP", "ULE", "ULT", "UMAX", "UMIN", "UNDEF", "UNE", "UNITCOLON", 
			"UNNAMED_ADDR", "UNO", "UNORDERED", "UNREACHABLE", "UNWIND", "UREM", 
			"USELISTORDER", "USELISTORDER_BB", "UWTABLE", "VA_ARG", "VALUECOLON", 
			"VARCOLON", "VARIABLESCOLON", "VIRTUALINDEXCOLON", "VIRTUALITYCOLON", 
			"VOID", "VTABLEHOLDERCOLON", "WEAK", "WEAK_ODR", "WEBKIT_JSCC", "WIN64CC", 
			"WITHIN", "WRITEONLY", "X", "X86_64_SYSVCC", "X86_FASTCALLCC", "X86_FP80", 
			"X86_INTRCC", "X86_MMX", "X86_REGCALLCC", "X86_STDCALLCC", "X86_THISCALLCC", 
			"X86_VECTORCALLCC", "XCHG", "XOR", "ZEROEXT", "ZEROINITIALIZER", "ZEXT", 
			"VOLATILE", "COMMENT", "WHITESPACE", "ATTR_GROUP_ID", "COMDAT_NAME", 
			"METADATA_NAME", "METADATA_ID", "DWARF_TAG", "DWARF_ATT_ENCODING", "DI_FLAG", 
			"DWARF_LANG", "DWARF_CC", "CHECKSUM_KIND", "DWARF_VIRTUALITY", "DWARF_MACINFO", 
			"DWARF_OP", "INT_LIT", "DECIMAL_LIT", "DECIMALS", "FLOAT_LIT", "FRAC_LIT", 
			"SIGN", "SCI_LIT", "FLOAT_HEX_LIT", "STRING_LIT", "QUOTED_STRING", "INT_TYPE", 
			"NAME", "ESCAPE_NAME", "QUOTED_NAME", "ID", "GLOBAL_IDENT", "GLOBAL_NAME", 
			"GLOBAL_ID", "LOCAL_IDENT", "LOCAL_NAME", "LOCAL_ID", "LABEL_IDENT"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "LLVMParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public LLVMParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class MySingleInstructionContext extends ParserRuleContext {
		public InstructionContext instruction() {
			return getRuleContext(InstructionContext.class,0);
		}
		public TerminatorContext terminator() {
			return getRuleContext(TerminatorContext.class,0);
		}
		public MySingleInstructionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mySingleInstruction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMySingleInstruction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMySingleInstruction(this);
		}
	}

	public final MySingleInstructionContext mySingleInstruction() throws RecognitionException {
		MySingleInstructionContext _localctx = new MySingleInstructionContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_mySingleInstruction);
		try {
			setState(856);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case ADDRSPACECAST:
			case ALLOCA:
			case AND:
			case ASHR:
			case ATOMICRMW:
			case BITCAST:
			case CALL:
			case CATCHPAD:
			case CLEANUPPAD:
			case CMPXCHG:
			case EXTRACTELEMENT:
			case EXTRACTVALUE:
			case FADD:
			case FCMP:
			case FDIV:
			case FENCE:
			case FMUL:
			case FPEXT:
			case FPTOSI:
			case FPTOUI:
			case FPTRUNC:
			case FREM:
			case FSUB:
			case GETELEMENTPTR:
			case ICMP:
			case INSERTELEMENT:
			case INSERTVALUE:
			case INTTOPTR:
			case LANDINGPAD:
			case LOAD:
			case LSHR:
			case MUL:
			case MUSTTAIL:
			case NOTAIL:
			case OR:
			case PHI:
			case PTRTOINT:
			case SDIV:
			case SELECT:
			case SEXT:
			case SHL:
			case SHUFFLEVECTOR:
			case SITOFP:
			case SREM:
			case STORE:
			case SUB:
			case TAIL:
			case TRUNC:
			case UDIV:
			case UITOFP:
			case UREM:
			case VA_ARG:
			case XOR:
			case ZEXT:
			case LOCAL_IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(854);
				instruction();
				}
				break;
			case BR:
			case CATCHRET:
			case CATCHSWITCH:
			case CLEANUPRET:
			case INDIRECTBR:
			case INVOKE:
			case RESUME:
			case RET:
			case SWITCH:
			case UNREACHABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(855);
				terminator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModuleContext extends ParserRuleContext {
		public TopLevelEntitiesContext topLevelEntities() {
			return getRuleContext(TopLevelEntitiesContext.class,0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterModule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitModule(this);
		}
	}

	public final ModuleContext module() throws RecognitionException {
		ModuleContext _localctx = new ModuleContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_module);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(858);
			topLevelEntities();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TopLevelEntitiesContext extends ParserRuleContext {
		public TopLevelEntityListContext topLevelEntityList() {
			return getRuleContext(TopLevelEntityListContext.class,0);
		}
		public TopLevelEntitiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_topLevelEntities; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTopLevelEntities(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTopLevelEntities(this);
		}
	}

	public final TopLevelEntitiesContext topLevelEntities() throws RecognitionException {
		TopLevelEntitiesContext _localctx = new TopLevelEntitiesContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_topLevelEntities);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(861);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (ATTRIBUTES - 51)) | (1L << (DECLARE - 51)) | (1L << (DEFINE - 51)))) != 0) || _la==MODULE || ((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & ((1L << (SOURCE_FILENAME - 324)) | (1L << (TARGET - 324)) | (1L << (USELISTORDER - 324)) | (1L << (USELISTORDER_BB - 324)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (COMDAT_NAME - 412)) | (1L << (METADATA_NAME - 412)) | (1L << (METADATA_ID - 412)) | (1L << (GLOBAL_IDENT - 412)) | (1L << (LOCAL_IDENT - 412)))) != 0)) {
				{
				setState(860);
				topLevelEntityList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TopLevelEntityListContext extends ParserRuleContext {
		public TopLevelEntityContext topLevelEntity() {
			return getRuleContext(TopLevelEntityContext.class,0);
		}
		public TopLevelEntityListContext topLevelEntityList() {
			return getRuleContext(TopLevelEntityListContext.class,0);
		}
		public TopLevelEntityListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_topLevelEntityList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTopLevelEntityList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTopLevelEntityList(this);
		}
	}

	public final TopLevelEntityListContext topLevelEntityList() throws RecognitionException {
		return topLevelEntityList(0);
	}

	private TopLevelEntityListContext topLevelEntityList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TopLevelEntityListContext _localctx = new TopLevelEntityListContext(_ctx, _parentState);
		TopLevelEntityListContext _prevctx = _localctx;
		int _startState = 6;
		enterRecursionRule(_localctx, 6, RULE_topLevelEntityList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(864);
			topLevelEntity();
			}
			_ctx.stop = _input.LT(-1);
			setState(870);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TopLevelEntityListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_topLevelEntityList);
					setState(866);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(867);
					topLevelEntity();
					}
					} 
				}
				setState(872);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TopLevelEntityContext extends ParserRuleContext {
		public SourceFilenameContext sourceFilename() {
			return getRuleContext(SourceFilenameContext.class,0);
		}
		public TargetDefinitionContext targetDefinition() {
			return getRuleContext(TargetDefinitionContext.class,0);
		}
		public ModuleAsmContext moduleAsm() {
			return getRuleContext(ModuleAsmContext.class,0);
		}
		public TypeDefContext typeDef() {
			return getRuleContext(TypeDefContext.class,0);
		}
		public ComdatDefContext comdatDef() {
			return getRuleContext(ComdatDefContext.class,0);
		}
		public GlobalDeclContext globalDecl() {
			return getRuleContext(GlobalDeclContext.class,0);
		}
		public GlobalDefContext globalDef() {
			return getRuleContext(GlobalDefContext.class,0);
		}
		public IndirectSymbolDefContext indirectSymbolDef() {
			return getRuleContext(IndirectSymbolDefContext.class,0);
		}
		public FunctionDeclContext functionDecl() {
			return getRuleContext(FunctionDeclContext.class,0);
		}
		public FunctionDefContext functionDef() {
			return getRuleContext(FunctionDefContext.class,0);
		}
		public AttrGroupDefContext attrGroupDef() {
			return getRuleContext(AttrGroupDefContext.class,0);
		}
		public NamedMetadataDefContext namedMetadataDef() {
			return getRuleContext(NamedMetadataDefContext.class,0);
		}
		public MetadataDefContext metadataDef() {
			return getRuleContext(MetadataDefContext.class,0);
		}
		public UseListOrderContext useListOrder() {
			return getRuleContext(UseListOrderContext.class,0);
		}
		public UseListOrderBBContext useListOrderBB() {
			return getRuleContext(UseListOrderBBContext.class,0);
		}
		public TopLevelEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_topLevelEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTopLevelEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTopLevelEntity(this);
		}
	}

	public final TopLevelEntityContext topLevelEntity() throws RecognitionException {
		TopLevelEntityContext _localctx = new TopLevelEntityContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_topLevelEntity);
		try {
			setState(888);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(873);
				sourceFilename();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(874);
				targetDefinition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(875);
				moduleAsm();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(876);
				typeDef();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(877);
				comdatDef();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(878);
				globalDecl();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(879);
				globalDef();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(880);
				indirectSymbolDef();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(881);
				functionDecl();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(882);
				functionDef();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(883);
				attrGroupDef();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(884);
				namedMetadataDef();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(885);
				metadataDef();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(886);
				useListOrder();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(887);
				useListOrderBB();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SourceFilenameContext extends ParserRuleContext {
		public TerminalNode SOURCE_FILENAME() { return getToken(LLVMParser.SOURCE_FILENAME, 0); }
		public TerminalNode EQSIGN() { return getToken(LLVMParser.EQSIGN, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public SourceFilenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceFilename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSourceFilename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSourceFilename(this);
		}
	}

	public final SourceFilenameContext sourceFilename() throws RecognitionException {
		SourceFilenameContext _localctx = new SourceFilenameContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_sourceFilename);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(890);
			match(SOURCE_FILENAME);
			setState(891);
			match(EQSIGN);
			setState(892);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TargetDefinitionContext extends ParserRuleContext {
		public TerminalNode TARGET() { return getToken(LLVMParser.TARGET, 0); }
		public TerminalNode DATALAYOUT() { return getToken(LLVMParser.DATALAYOUT, 0); }
		public TerminalNode EQSIGN() { return getToken(LLVMParser.EQSIGN, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode TRIPLE() { return getToken(LLVMParser.TRIPLE, 0); }
		public TargetDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTargetDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTargetDefinition(this);
		}
	}

	public final TargetDefinitionContext targetDefinition() throws RecognitionException {
		TargetDefinitionContext _localctx = new TargetDefinitionContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_targetDefinition);
		try {
			setState(902);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(894);
				match(TARGET);
				setState(895);
				match(DATALAYOUT);
				setState(896);
				match(EQSIGN);
				setState(897);
				stringLit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(898);
				match(TARGET);
				setState(899);
				match(TRIPLE);
				setState(900);
				match(EQSIGN);
				setState(901);
				stringLit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModuleAsmContext extends ParserRuleContext {
		public TerminalNode MODULE() { return getToken(LLVMParser.MODULE, 0); }
		public TerminalNode ASM() { return getToken(LLVMParser.ASM, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public ModuleAsmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moduleAsm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterModuleAsm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitModuleAsm(this);
		}
	}

	public final ModuleAsmContext moduleAsm() throws RecognitionException {
		ModuleAsmContext _localctx = new ModuleAsmContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_moduleAsm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(904);
			match(MODULE);
			setState(905);
			match(ASM);
			setState(906);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeDefContext extends ParserRuleContext {
		public LocalIdentContext localIdent() {
			return getRuleContext(LocalIdentContext.class,0);
		}
		public TerminalNode EQSIGN() { return getToken(LLVMParser.EQSIGN, 0); }
		public TerminalNode TYPE() { return getToken(LLVMParser.TYPE, 0); }
		public OpaqueTypeContext opaqueType() {
			return getRuleContext(OpaqueTypeContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public TypeDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTypeDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTypeDef(this);
		}
	}

	public final TypeDefContext typeDef() throws RecognitionException {
		TypeDefContext _localctx = new TypeDefContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_typeDef);
		try {
			setState(918);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(908);
				localIdent();
				setState(909);
				match(EQSIGN);
				setState(910);
				match(TYPE);
				setState(911);
				opaqueType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(913);
				localIdent();
				setState(914);
				match(EQSIGN);
				setState(915);
				match(TYPE);
				setState(916);
				llvmType(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComdatDefContext extends ParserRuleContext {
		public ComdatNameContext comdatName() {
			return getRuleContext(ComdatNameContext.class,0);
		}
		public TerminalNode EQSIGN() { return getToken(LLVMParser.EQSIGN, 0); }
		public TerminalNode COMDAT() { return getToken(LLVMParser.COMDAT, 0); }
		public SelectionKindContext selectionKind() {
			return getRuleContext(SelectionKindContext.class,0);
		}
		public ComdatDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comdatDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterComdatDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitComdatDef(this);
		}
	}

	public final ComdatDefContext comdatDef() throws RecognitionException {
		ComdatDefContext _localctx = new ComdatDefContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_comdatDef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(920);
			comdatName();
			setState(921);
			match(EQSIGN);
			setState(922);
			match(COMDAT);
			setState(923);
			selectionKind();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectionKindContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(LLVMParser.ANY, 0); }
		public TerminalNode EXACTMATCH() { return getToken(LLVMParser.EXACTMATCH, 0); }
		public TerminalNode LARGEST() { return getToken(LLVMParser.LARGEST, 0); }
		public TerminalNode NODUPLICATES() { return getToken(LLVMParser.NODUPLICATES, 0); }
		public TerminalNode SAMESIZE() { return getToken(LLVMParser.SAMESIZE, 0); }
		public SelectionKindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectionKind; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSelectionKind(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSelectionKind(this);
		}
	}

	public final SelectionKindContext selectionKind() throws RecognitionException {
		SelectionKindContext _localctx = new SelectionKindContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_selectionKind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(925);
			_la = _input.LA(1);
			if ( !(_la==ANY || _la==EXACTMATCH || _la==LARGEST || _la==NODUPLICATES || _la==SAMESIZE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GlobalDeclContext extends ParserRuleContext {
		public GlobalIdentContext globalIdent() {
			return getRuleContext(GlobalIdentContext.class,0);
		}
		public TerminalNode EQSIGN() { return getToken(LLVMParser.EQSIGN, 0); }
		public ExternLinkageContext externLinkage() {
			return getRuleContext(ExternLinkageContext.class,0);
		}
		public OptPreemptionSpecifierContext optPreemptionSpecifier() {
			return getRuleContext(OptPreemptionSpecifierContext.class,0);
		}
		public OptDLLStorageClassContext optDLLStorageClass() {
			return getRuleContext(OptDLLStorageClassContext.class,0);
		}
		public OptAddrSpaceContext optAddrSpace() {
			return getRuleContext(OptAddrSpaceContext.class,0);
		}
		public OptExternallyInitializedContext optExternallyInitialized() {
			return getRuleContext(OptExternallyInitializedContext.class,0);
		}
		public ImmutableContext immutable() {
			return getRuleContext(ImmutableContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public GlobalAttrsContext globalAttrs() {
			return getRuleContext(GlobalAttrsContext.class,0);
		}
		public FuncAttrsContext funcAttrs() {
			return getRuleContext(FuncAttrsContext.class,0);
		}
		public VisibilityContext visibility() {
			return getRuleContext(VisibilityContext.class,0);
		}
		public ThreadLocalContext threadLocal() {
			return getRuleContext(ThreadLocalContext.class,0);
		}
		public UnnamedAddrContext unnamedAddr() {
			return getRuleContext(UnnamedAddrContext.class,0);
		}
		public GlobalDeclContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_globalDecl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterGlobalDecl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitGlobalDecl(this);
		}
	}

	public final GlobalDeclContext globalDecl() throws RecognitionException {
		GlobalDeclContext _localctx = new GlobalDeclContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_globalDecl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(927);
			globalIdent();
			setState(928);
			match(EQSIGN);
			setState(929);
			externLinkage();
			setState(930);
			optPreemptionSpecifier();
			setState(932);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==HIDDEN_VISIB || _la==PROTECTED) {
				{
				setState(931);
				visibility();
				}
			}

			setState(934);
			optDLLStorageClass();
			setState(936);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THREAD_LOCAL) {
				{
				setState(935);
				threadLocal();
				}
			}

			setState(939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_UNNAMED_ADDR || _la==UNNAMED_ADDR) {
				{
				setState(938);
				unnamedAddr();
				}
			}

			setState(941);
			optAddrSpace();
			setState(942);
			optExternallyInitialized();
			setState(943);
			immutable();
			setState(944);
			llvmType(0);
			setState(945);
			globalAttrs();
			setState(946);
			funcAttrs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GlobalDefContext extends ParserRuleContext {
		public GlobalIdentContext globalIdent() {
			return getRuleContext(GlobalIdentContext.class,0);
		}
		public TerminalNode EQSIGN() { return getToken(LLVMParser.EQSIGN, 0); }
		public OptLinkageContext optLinkage() {
			return getRuleContext(OptLinkageContext.class,0);
		}
		public OptPreemptionSpecifierContext optPreemptionSpecifier() {
			return getRuleContext(OptPreemptionSpecifierContext.class,0);
		}
		public OptDLLStorageClassContext optDLLStorageClass() {
			return getRuleContext(OptDLLStorageClassContext.class,0);
		}
		public OptAddrSpaceContext optAddrSpace() {
			return getRuleContext(OptAddrSpaceContext.class,0);
		}
		public OptExternallyInitializedContext optExternallyInitialized() {
			return getRuleContext(OptExternallyInitializedContext.class,0);
		}
		public ImmutableContext immutable() {
			return getRuleContext(ImmutableContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public GlobalAttrsContext globalAttrs() {
			return getRuleContext(GlobalAttrsContext.class,0);
		}
		public FuncAttrsContext funcAttrs() {
			return getRuleContext(FuncAttrsContext.class,0);
		}
		public VisibilityContext visibility() {
			return getRuleContext(VisibilityContext.class,0);
		}
		public ThreadLocalContext threadLocal() {
			return getRuleContext(ThreadLocalContext.class,0);
		}
		public UnnamedAddrContext unnamedAddr() {
			return getRuleContext(UnnamedAddrContext.class,0);
		}
		public GlobalDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_globalDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterGlobalDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitGlobalDef(this);
		}
	}

	public final GlobalDefContext globalDef() throws RecognitionException {
		GlobalDefContext _localctx = new GlobalDefContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_globalDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(948);
			globalIdent();
			setState(949);
			match(EQSIGN);
			setState(950);
			optLinkage();
			setState(951);
			optPreemptionSpecifier();
			setState(953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==HIDDEN_VISIB || _la==PROTECTED) {
				{
				setState(952);
				visibility();
				}
			}

			setState(955);
			optDLLStorageClass();
			setState(957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THREAD_LOCAL) {
				{
				setState(956);
				threadLocal();
				}
			}

			setState(960);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_UNNAMED_ADDR || _la==UNNAMED_ADDR) {
				{
				setState(959);
				unnamedAddr();
				}
			}

			setState(962);
			optAddrSpace();
			setState(963);
			optExternallyInitialized();
			setState(964);
			immutable();
			setState(965);
			llvmType(0);
			setState(966);
			constant();
			setState(967);
			globalAttrs();
			setState(968);
			funcAttrs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptExternallyInitializedContext extends ParserRuleContext {
		public TerminalNode EXTERNALLY_INITIALIZED() { return getToken(LLVMParser.EXTERNALLY_INITIALIZED, 0); }
		public OptExternallyInitializedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optExternallyInitialized; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptExternallyInitialized(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptExternallyInitialized(this);
		}
	}

	public final OptExternallyInitializedContext optExternallyInitialized() throws RecognitionException {
		OptExternallyInitializedContext _localctx = new OptExternallyInitializedContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_optExternallyInitialized);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNALLY_INITIALIZED) {
				{
				setState(970);
				match(EXTERNALLY_INITIALIZED);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImmutableContext extends ParserRuleContext {
		public TerminalNode CONSTANT() { return getToken(LLVMParser.CONSTANT, 0); }
		public TerminalNode GLOBAL() { return getToken(LLVMParser.GLOBAL, 0); }
		public ImmutableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_immutable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterImmutable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitImmutable(this);
		}
	}

	public final ImmutableContext immutable() throws RecognitionException {
		ImmutableContext _localctx = new ImmutableContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_immutable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(973);
			_la = _input.LA(1);
			if ( !(_la==CONSTANT || _la==GLOBAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GlobalAttrsContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public GlobalAttrListContext globalAttrList() {
			return getRuleContext(GlobalAttrListContext.class,0);
		}
		public GlobalAttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_globalAttrs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterGlobalAttrs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitGlobalAttrs(this);
		}
	}

	public final GlobalAttrsContext globalAttrs() throws RecognitionException {
		GlobalAttrsContext _localctx = new GlobalAttrsContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_globalAttrs);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(977);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				setState(975);
				match(COMMA);
				setState(976);
				globalAttrList(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GlobalAttrListContext extends ParserRuleContext {
		public GlobalAttrContext globalAttr() {
			return getRuleContext(GlobalAttrContext.class,0);
		}
		public GlobalAttrListContext globalAttrList() {
			return getRuleContext(GlobalAttrListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public GlobalAttrListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_globalAttrList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterGlobalAttrList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitGlobalAttrList(this);
		}
	}

	public final GlobalAttrListContext globalAttrList() throws RecognitionException {
		return globalAttrList(0);
	}

	private GlobalAttrListContext globalAttrList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		GlobalAttrListContext _localctx = new GlobalAttrListContext(_ctx, _parentState);
		GlobalAttrListContext _prevctx = _localctx;
		int _startState = 32;
		enterRecursionRule(_localctx, 32, RULE_globalAttrList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(980);
			globalAttr();
			}
			_ctx.stop = _input.LT(-1);
			setState(987);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,14,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new GlobalAttrListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_globalAttrList);
					setState(982);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(983);
					match(COMMA);
					setState(984);
					globalAttr();
					}
					} 
				}
				setState(989);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,14,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class GlobalAttrContext extends ParserRuleContext {
		public SectionContext section() {
			return getRuleContext(SectionContext.class,0);
		}
		public ComdatContext comdat() {
			return getRuleContext(ComdatContext.class,0);
		}
		public AlignmentContext alignment() {
			return getRuleContext(AlignmentContext.class,0);
		}
		public MetadataAttachmentContext metadataAttachment() {
			return getRuleContext(MetadataAttachmentContext.class,0);
		}
		public GlobalAttrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_globalAttr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterGlobalAttr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitGlobalAttr(this);
		}
	}

	public final GlobalAttrContext globalAttr() throws RecognitionException {
		GlobalAttrContext _localctx = new GlobalAttrContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_globalAttr);
		try {
			setState(994);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SECTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(990);
				section();
				}
				break;
			case COMDAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(991);
				comdat();
				}
				break;
			case ALIGN:
				enterOuterAlt(_localctx, 3);
				{
				setState(992);
				alignment();
				}
				break;
			case METADATA_NAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(993);
				metadataAttachment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectSymbolDefContext extends ParserRuleContext {
		public GlobalIdentContext globalIdent() {
			return getRuleContext(GlobalIdentContext.class,0);
		}
		public TerminalNode EQSIGN() { return getToken(LLVMParser.EQSIGN, 0); }
		public ExternLinkageContext externLinkage() {
			return getRuleContext(ExternLinkageContext.class,0);
		}
		public OptPreemptionSpecifierContext optPreemptionSpecifier() {
			return getRuleContext(OptPreemptionSpecifierContext.class,0);
		}
		public OptDLLStorageClassContext optDLLStorageClass() {
			return getRuleContext(OptDLLStorageClassContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public VisibilityContext visibility() {
			return getRuleContext(VisibilityContext.class,0);
		}
		public ThreadLocalContext threadLocal() {
			return getRuleContext(ThreadLocalContext.class,0);
		}
		public UnnamedAddrContext unnamedAddr() {
			return getRuleContext(UnnamedAddrContext.class,0);
		}
		public OptLinkageContext optLinkage() {
			return getRuleContext(OptLinkageContext.class,0);
		}
		public IndirectSymbolDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirectSymbolDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterIndirectSymbolDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitIndirectSymbolDef(this);
		}
	}

	public final IndirectSymbolDefContext indirectSymbolDef() throws RecognitionException {
		IndirectSymbolDefContext _localctx = new IndirectSymbolDefContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_indirectSymbolDef);
		int _la;
		try {
			setState(1036);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(996);
				globalIdent();
				setState(997);
				match(EQSIGN);
				setState(998);
				externLinkage();
				setState(999);
				optPreemptionSpecifier();
				setState(1001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==HIDDEN_VISIB || _la==PROTECTED) {
					{
					setState(1000);
					visibility();
					}
				}

				setState(1003);
				optDLLStorageClass();
				setState(1005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==THREAD_LOCAL) {
					{
					setState(1004);
					threadLocal();
					}
				}

				setState(1008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_UNNAMED_ADDR || _la==UNNAMED_ADDR) {
					{
					setState(1007);
					unnamedAddr();
					}
				}

				setState(1010);
				alias();
				setState(1011);
				llvmType(0);
				setState(1012);
				match(COMMA);
				setState(1013);
				llvmType(0);
				setState(1014);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1016);
				globalIdent();
				setState(1017);
				match(EQSIGN);
				setState(1018);
				optLinkage();
				setState(1019);
				optPreemptionSpecifier();
				setState(1021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==HIDDEN_VISIB || _la==PROTECTED) {
					{
					setState(1020);
					visibility();
					}
				}

				setState(1023);
				optDLLStorageClass();
				setState(1025);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==THREAD_LOCAL) {
					{
					setState(1024);
					threadLocal();
					}
				}

				setState(1028);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_UNNAMED_ADDR || _la==UNNAMED_ADDR) {
					{
					setState(1027);
					unnamedAddr();
					}
				}

				setState(1030);
				alias();
				setState(1031);
				llvmType(0);
				setState(1032);
				match(COMMA);
				setState(1033);
				llvmType(0);
				setState(1034);
				constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasContext extends ParserRuleContext {
		public TerminalNode ALIAS() { return getToken(LLVMParser.ALIAS, 0); }
		public TerminalNode IFUNC() { return getToken(LLVMParser.IFUNC, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAlias(this);
		}
	}

	public final AliasContext alias() throws RecognitionException {
		AliasContext _localctx = new AliasContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1038);
			_la = _input.LA(1);
			if ( !(_la==ALIAS || _la==IFUNC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionDeclContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(LLVMParser.DECLARE, 0); }
		public MetadataAttachmentsContext metadataAttachments() {
			return getRuleContext(MetadataAttachmentsContext.class,0);
		}
		public OptExternLinkageContext optExternLinkage() {
			return getRuleContext(OptExternLinkageContext.class,0);
		}
		public FunctionHeaderContext functionHeader() {
			return getRuleContext(FunctionHeaderContext.class,0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionDecl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFunctionDecl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFunctionDecl(this);
		}
	}

	public final FunctionDeclContext functionDecl() throws RecognitionException {
		FunctionDeclContext _localctx = new FunctionDeclContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_functionDecl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1040);
			match(DECLARE);
			setState(1041);
			metadataAttachments();
			setState(1042);
			optExternLinkage();
			setState(1043);
			functionHeader();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionDefContext extends ParserRuleContext {
		public TerminalNode DEFINE() { return getToken(LLVMParser.DEFINE, 0); }
		public OptLinkageContext optLinkage() {
			return getRuleContext(OptLinkageContext.class,0);
		}
		public FunctionHeaderContext functionHeader() {
			return getRuleContext(FunctionHeaderContext.class,0);
		}
		public MetadataAttachmentsContext metadataAttachments() {
			return getRuleContext(MetadataAttachmentsContext.class,0);
		}
		public FunctionBodyContext functionBody() {
			return getRuleContext(FunctionBodyContext.class,0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFunctionDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFunctionDef(this);
		}
	}

	public final FunctionDefContext functionDef() throws RecognitionException {
		FunctionDefContext _localctx = new FunctionDefContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_functionDef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1045);
			match(DEFINE);
			setState(1046);
			optLinkage();
			setState(1047);
			functionHeader();
			setState(1048);
			metadataAttachments();
			setState(1049);
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionHeaderContext extends ParserRuleContext {
		public OptPreemptionSpecifierContext optPreemptionSpecifier() {
			return getRuleContext(OptPreemptionSpecifierContext.class,0);
		}
		public OptDLLStorageClassContext optDLLStorageClass() {
			return getRuleContext(OptDLLStorageClassContext.class,0);
		}
		public OptCallingConvContext optCallingConv() {
			return getRuleContext(OptCallingConvContext.class,0);
		}
		public ReturnAttrsContext returnAttrs() {
			return getRuleContext(ReturnAttrsContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public GlobalIdentContext globalIdent() {
			return getRuleContext(GlobalIdentContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public FuncAttrsContext funcAttrs() {
			return getRuleContext(FuncAttrsContext.class,0);
		}
		public OptComdatContext optComdat() {
			return getRuleContext(OptComdatContext.class,0);
		}
		public OptGCContext optGC() {
			return getRuleContext(OptGCContext.class,0);
		}
		public OptPrefixContext optPrefix() {
			return getRuleContext(OptPrefixContext.class,0);
		}
		public OptPrologueContext optPrologue() {
			return getRuleContext(OptPrologueContext.class,0);
		}
		public OptPersonalityContext optPersonality() {
			return getRuleContext(OptPersonalityContext.class,0);
		}
		public VisibilityContext visibility() {
			return getRuleContext(VisibilityContext.class,0);
		}
		public UnnamedAddrContext unnamedAddr() {
			return getRuleContext(UnnamedAddrContext.class,0);
		}
		public SectionContext section() {
			return getRuleContext(SectionContext.class,0);
		}
		public FunctionHeaderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionHeader; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFunctionHeader(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFunctionHeader(this);
		}
	}

	public final FunctionHeaderContext functionHeader() throws RecognitionException {
		FunctionHeaderContext _localctx = new FunctionHeaderContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_functionHeader);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1051);
			optPreemptionSpecifier();
			setState(1053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==HIDDEN_VISIB || _la==PROTECTED) {
				{
				setState(1052);
				visibility();
				}
			}

			setState(1055);
			optDLLStorageClass();
			setState(1056);
			optCallingConv();
			setState(1057);
			returnAttrs();
			setState(1058);
			llvmType(0);
			setState(1059);
			globalIdent();
			setState(1060);
			match(LPAREN);
			setState(1061);
			params();
			setState(1062);
			match(RPAREN);
			setState(1064);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				setState(1063);
				unnamedAddr();
				}
				break;
			}
			setState(1066);
			funcAttrs();
			setState(1068);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				setState(1067);
				section();
				}
				break;
			}
			setState(1070);
			optComdat();
			setState(1071);
			optGC();
			setState(1072);
			optPrefix();
			setState(1073);
			optPrologue();
			setState(1074);
			optPersonality();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptGCContext extends ParserRuleContext {
		public TerminalNode GC() { return getToken(LLVMParser.GC, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public OptGCContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optGC; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptGC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptGC(this);
		}
	}

	public final OptGCContext optGC() throws RecognitionException {
		OptGCContext _localctx = new OptGCContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_optGC);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1078);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(1076);
				match(GC);
				setState(1077);
				stringLit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptPrefixContext extends ParserRuleContext {
		public TerminalNode PREFIX() { return getToken(LLVMParser.PREFIX, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public OptPrefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optPrefix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptPrefix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptPrefix(this);
		}
	}

	public final OptPrefixContext optPrefix() throws RecognitionException {
		OptPrefixContext _localctx = new OptPrefixContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_optPrefix);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				setState(1080);
				match(PREFIX);
				setState(1081);
				llvmType(0);
				setState(1082);
				constant();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptPrologueContext extends ParserRuleContext {
		public TerminalNode PROLOGUE() { return getToken(LLVMParser.PROLOGUE, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public OptPrologueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optPrologue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptPrologue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptPrologue(this);
		}
	}

	public final OptPrologueContext optPrologue() throws RecognitionException {
		OptPrologueContext _localctx = new OptPrologueContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_optPrologue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1090);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				setState(1086);
				match(PROLOGUE);
				setState(1087);
				llvmType(0);
				setState(1088);
				constant();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptPersonalityContext extends ParserRuleContext {
		public TerminalNode PERSONALITY() { return getToken(LLVMParser.PERSONALITY, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public OptPersonalityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optPersonality; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptPersonality(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptPersonality(this);
		}
	}

	public final OptPersonalityContext optPersonality() throws RecognitionException {
		OptPersonalityContext _localctx = new OptPersonalityContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_optPersonality);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				setState(1092);
				match(PERSONALITY);
				setState(1093);
				llvmType(0);
				setState(1094);
				constant();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionBodyContext extends ParserRuleContext {
		public TerminalNode LBRACE() { return getToken(LLVMParser.LBRACE, 0); }
		public BasicBlockListContext basicBlockList() {
			return getRuleContext(BasicBlockListContext.class,0);
		}
		public UseListOrdersContext useListOrders() {
			return getRuleContext(UseListOrdersContext.class,0);
		}
		public TerminalNode RBRACE() { return getToken(LLVMParser.RBRACE, 0); }
		public FunctionBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFunctionBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFunctionBody(this);
		}
	}

	public final FunctionBodyContext functionBody() throws RecognitionException {
		FunctionBodyContext _localctx = new FunctionBodyContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_functionBody);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1098);
			match(LBRACE);
			setState(1099);
			basicBlockList(0);
			setState(1100);
			useListOrders();
			setState(1101);
			match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttrGroupDefContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTES() { return getToken(LLVMParser.ATTRIBUTES, 0); }
		public AttrGroupIDContext attrGroupID() {
			return getRuleContext(AttrGroupIDContext.class,0);
		}
		public TerminalNode EQSIGN() { return getToken(LLVMParser.EQSIGN, 0); }
		public TerminalNode LBRACE() { return getToken(LLVMParser.LBRACE, 0); }
		public FuncAttrsContext funcAttrs() {
			return getRuleContext(FuncAttrsContext.class,0);
		}
		public TerminalNode RBRACE() { return getToken(LLVMParser.RBRACE, 0); }
		public AttrGroupDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrGroupDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAttrGroupDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAttrGroupDef(this);
		}
	}

	public final AttrGroupDefContext attrGroupDef() throws RecognitionException {
		AttrGroupDefContext _localctx = new AttrGroupDefContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_attrGroupDef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1103);
			match(ATTRIBUTES);
			setState(1104);
			attrGroupID();
			setState(1105);
			match(EQSIGN);
			setState(1106);
			match(LBRACE);
			setState(1107);
			funcAttrs();
			setState(1108);
			match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamedMetadataDefContext extends ParserRuleContext {
		public MetadataNameContext metadataName() {
			return getRuleContext(MetadataNameContext.class,0);
		}
		public TerminalNode EQSIGN() { return getToken(LLVMParser.EQSIGN, 0); }
		public TerminalNode BANG() { return getToken(LLVMParser.BANG, 0); }
		public TerminalNode LBRACE() { return getToken(LLVMParser.LBRACE, 0); }
		public MetadataNodesContext metadataNodes() {
			return getRuleContext(MetadataNodesContext.class,0);
		}
		public TerminalNode RBRACE() { return getToken(LLVMParser.RBRACE, 0); }
		public NamedMetadataDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedMetadataDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterNamedMetadataDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitNamedMetadataDef(this);
		}
	}

	public final NamedMetadataDefContext namedMetadataDef() throws RecognitionException {
		NamedMetadataDefContext _localctx = new NamedMetadataDefContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_namedMetadataDef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1110);
			metadataName();
			setState(1111);
			match(EQSIGN);
			setState(1112);
			match(BANG);
			setState(1113);
			match(LBRACE);
			setState(1114);
			metadataNodes();
			setState(1115);
			match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MetadataNodesContext extends ParserRuleContext {
		public MetadataNodeListContext metadataNodeList() {
			return getRuleContext(MetadataNodeListContext.class,0);
		}
		public MetadataNodesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_metadataNodes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMetadataNodes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMetadataNodes(this);
		}
	}

	public final MetadataNodesContext metadataNodes() throws RecognitionException {
		MetadataNodesContext _localctx = new MetadataNodesContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_metadataNodes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1118);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOTDIEXPRESSION || _la==METADATA_ID) {
				{
				setState(1117);
				metadataNodeList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MetadataNodeListContext extends ParserRuleContext {
		public MetadataNodeContext metadataNode() {
			return getRuleContext(MetadataNodeContext.class,0);
		}
		public MetadataNodeListContext metadataNodeList() {
			return getRuleContext(MetadataNodeListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public MetadataNodeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_metadataNodeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMetadataNodeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMetadataNodeList(this);
		}
	}

	public final MetadataNodeListContext metadataNodeList() throws RecognitionException {
		return metadataNodeList(0);
	}

	private MetadataNodeListContext metadataNodeList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		MetadataNodeListContext _localctx = new MetadataNodeListContext(_ctx, _parentState);
		MetadataNodeListContext _prevctx = _localctx;
		int _startState = 62;
		enterRecursionRule(_localctx, 62, RULE_metadataNodeList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1121);
			metadataNode();
			}
			_ctx.stop = _input.LT(-1);
			setState(1128);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MetadataNodeListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_metadataNodeList);
					setState(1123);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1124);
					match(COMMA);
					setState(1125);
					metadataNode();
					}
					} 
				}
				setState(1130);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class MetadataNodeContext extends ParserRuleContext {
		public MetadataIDContext metadataID() {
			return getRuleContext(MetadataIDContext.class,0);
		}
		public DiExpressionContext diExpression() {
			return getRuleContext(DiExpressionContext.class,0);
		}
		public MetadataNodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_metadataNode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMetadataNode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMetadataNode(this);
		}
	}

	public final MetadataNodeContext metadataNode() throws RecognitionException {
		MetadataNodeContext _localctx = new MetadataNodeContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_metadataNode);
		try {
			setState(1133);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case METADATA_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1131);
				metadataID();
				}
				break;
			case NOTDIEXPRESSION:
				enterOuterAlt(_localctx, 2);
				{
				setState(1132);
				diExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MetadataDefContext extends ParserRuleContext {
		public MetadataIDContext metadataID() {
			return getRuleContext(MetadataIDContext.class,0);
		}
		public TerminalNode EQSIGN() { return getToken(LLVMParser.EQSIGN, 0); }
		public OptDistinctContext optDistinct() {
			return getRuleContext(OptDistinctContext.class,0);
		}
		public MdTupleContext mdTuple() {
			return getRuleContext(MdTupleContext.class,0);
		}
		public SpecializedMDNodeContext specializedMDNode() {
			return getRuleContext(SpecializedMDNodeContext.class,0);
		}
		public MetadataDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_metadataDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMetadataDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMetadataDef(this);
		}
	}

	public final MetadataDefContext metadataDef() throws RecognitionException {
		MetadataDefContext _localctx = new MetadataDefContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_metadataDef);
		try {
			setState(1145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1135);
				metadataID();
				setState(1136);
				match(EQSIGN);
				setState(1137);
				optDistinct();
				setState(1138);
				mdTuple();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1140);
				metadataID();
				setState(1141);
				match(EQSIGN);
				setState(1142);
				optDistinct();
				setState(1143);
				specializedMDNode();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptDistinctContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(LLVMParser.DISTINCT, 0); }
		public OptDistinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optDistinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptDistinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptDistinct(this);
		}
	}

	public final OptDistinctContext optDistinct() throws RecognitionException {
		OptDistinctContext _localctx = new OptDistinctContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_optDistinct);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1148);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISTINCT) {
				{
				setState(1147);
				match(DISTINCT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseListOrdersContext extends ParserRuleContext {
		public UseListOrderListContext useListOrderList() {
			return getRuleContext(UseListOrderListContext.class,0);
		}
		public UseListOrdersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useListOrders; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterUseListOrders(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitUseListOrders(this);
		}
	}

	public final UseListOrdersContext useListOrders() throws RecognitionException {
		UseListOrdersContext _localctx = new UseListOrdersContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_useListOrders);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USELISTORDER) {
				{
				setState(1150);
				useListOrderList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseListOrderListContext extends ParserRuleContext {
		public UseListOrderContext useListOrder() {
			return getRuleContext(UseListOrderContext.class,0);
		}
		public UseListOrderListContext useListOrderList() {
			return getRuleContext(UseListOrderListContext.class,0);
		}
		public UseListOrderListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useListOrderList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterUseListOrderList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitUseListOrderList(this);
		}
	}

	public final UseListOrderListContext useListOrderList() throws RecognitionException {
		return useListOrderList(0);
	}

	private UseListOrderListContext useListOrderList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		UseListOrderListContext _localctx = new UseListOrderListContext(_ctx, _parentState);
		UseListOrderListContext _prevctx = _localctx;
		int _startState = 72;
		enterRecursionRule(_localctx, 72, RULE_useListOrderList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1154);
			useListOrder();
			}
			_ctx.stop = _input.LT(-1);
			setState(1160);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,36,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new UseListOrderListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_useListOrderList);
					setState(1156);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1157);
					useListOrder();
					}
					} 
				}
				setState(1162);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,36,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class UseListOrderContext extends ParserRuleContext {
		public TerminalNode USELISTORDER() { return getToken(LLVMParser.USELISTORDER, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode LBRACE() { return getToken(LLVMParser.LBRACE, 0); }
		public IndexListContext indexList() {
			return getRuleContext(IndexListContext.class,0);
		}
		public TerminalNode RBRACE() { return getToken(LLVMParser.RBRACE, 0); }
		public UseListOrderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useListOrder; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterUseListOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitUseListOrder(this);
		}
	}

	public final UseListOrderContext useListOrder() throws RecognitionException {
		UseListOrderContext _localctx = new UseListOrderContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_useListOrder);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1163);
			match(USELISTORDER);
			setState(1164);
			llvmType(0);
			setState(1165);
			value();
			setState(1166);
			match(COMMA);
			setState(1167);
			match(LBRACE);
			setState(1168);
			indexList(0);
			setState(1169);
			match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseListOrderBBContext extends ParserRuleContext {
		public TerminalNode USELISTORDER_BB() { return getToken(LLVMParser.USELISTORDER_BB, 0); }
		public GlobalIdentContext globalIdent() {
			return getRuleContext(GlobalIdentContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(LLVMParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(LLVMParser.COMMA, i);
		}
		public LocalIdentContext localIdent() {
			return getRuleContext(LocalIdentContext.class,0);
		}
		public TerminalNode LBRACE() { return getToken(LLVMParser.LBRACE, 0); }
		public IndexListContext indexList() {
			return getRuleContext(IndexListContext.class,0);
		}
		public TerminalNode RBRACE() { return getToken(LLVMParser.RBRACE, 0); }
		public UseListOrderBBContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useListOrderBB; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterUseListOrderBB(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitUseListOrderBB(this);
		}
	}

	public final UseListOrderBBContext useListOrderBB() throws RecognitionException {
		UseListOrderBBContext _localctx = new UseListOrderBBContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_useListOrderBB);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1171);
			match(USELISTORDER_BB);
			setState(1172);
			globalIdent();
			setState(1173);
			match(COMMA);
			setState(1174);
			localIdent();
			setState(1175);
			match(COMMA);
			setState(1176);
			match(LBRACE);
			setState(1177);
			indexList(0);
			setState(1178);
			match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GlobalIdentContext extends ParserRuleContext {
		public TerminalNode GLOBAL_IDENT() { return getToken(LLVMParser.GLOBAL_IDENT, 0); }
		public GlobalIdentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_globalIdent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterGlobalIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitGlobalIdent(this);
		}
	}

	public final GlobalIdentContext globalIdent() throws RecognitionException {
		GlobalIdentContext _localctx = new GlobalIdentContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_globalIdent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1180);
			match(GLOBAL_IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LocalIdentContext extends ParserRuleContext {
		public TerminalNode LOCAL_IDENT() { return getToken(LLVMParser.LOCAL_IDENT, 0); }
		public LocalIdentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_localIdent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterLocalIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitLocalIdent(this);
		}
	}

	public final LocalIdentContext localIdent() throws RecognitionException {
		LocalIdentContext _localctx = new LocalIdentContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_localIdent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1182);
			match(LOCAL_IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelIdentContext extends ParserRuleContext {
		public TerminalNode LABEL_IDENT() { return getToken(LLVMParser.LABEL_IDENT, 0); }
		public LabelIdentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelIdent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterLabelIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitLabelIdent(this);
		}
	}

	public final LabelIdentContext labelIdent() throws RecognitionException {
		LabelIdentContext _localctx = new LabelIdentContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_labelIdent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1184);
			match(LABEL_IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttrGroupIDContext extends ParserRuleContext {
		public TerminalNode ATTR_GROUP_ID() { return getToken(LLVMParser.ATTR_GROUP_ID, 0); }
		public AttrGroupIDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrGroupID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAttrGroupID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAttrGroupID(this);
		}
	}

	public final AttrGroupIDContext attrGroupID() throws RecognitionException {
		AttrGroupIDContext _localctx = new AttrGroupIDContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_attrGroupID);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1186);
			match(ATTR_GROUP_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComdatNameContext extends ParserRuleContext {
		public TerminalNode COMDAT_NAME() { return getToken(LLVMParser.COMDAT_NAME, 0); }
		public ComdatNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comdatName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterComdatName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitComdatName(this);
		}
	}

	public final ComdatNameContext comdatName() throws RecognitionException {
		ComdatNameContext _localctx = new ComdatNameContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_comdatName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1188);
			match(COMDAT_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MetadataNameContext extends ParserRuleContext {
		public TerminalNode METADATA_NAME() { return getToken(LLVMParser.METADATA_NAME, 0); }
		public MetadataNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_metadataName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMetadataName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMetadataName(this);
		}
	}

	public final MetadataNameContext metadataName() throws RecognitionException {
		MetadataNameContext _localctx = new MetadataNameContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_metadataName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1190);
			match(METADATA_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MetadataIDContext extends ParserRuleContext {
		public TerminalNode METADATA_ID() { return getToken(LLVMParser.METADATA_ID, 0); }
		public MetadataIDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_metadataID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMetadataID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMetadataID(this);
		}
	}

	public final MetadataIDContext metadataID() throws RecognitionException {
		MetadataIDContext _localctx = new MetadataIDContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_metadataID);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1192);
			match(METADATA_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LlvmTypeContext extends ParserRuleContext {
		public VoidTypeContext voidType() {
			return getRuleContext(VoidTypeContext.class,0);
		}
		public ConcreteNonRecTypeContext concreteNonRecType() {
			return getRuleContext(ConcreteNonRecTypeContext.class,0);
		}
		public MetadataTypeContext metadataType() {
			return getRuleContext(MetadataTypeContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public OptAddrSpaceContext optAddrSpace() {
			return getRuleContext(OptAddrSpaceContext.class,0);
		}
		public TerminalNode STAR() { return getToken(LLVMParser.STAR, 0); }
		public LlvmTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_llvmType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterLlvmType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitLlvmType(this);
		}
	}

	public final LlvmTypeContext llvmType() throws RecognitionException {
		return llvmType(0);
	}

	private LlvmTypeContext llvmType(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		LlvmTypeContext _localctx = new LlvmTypeContext(_ctx, _parentState);
		LlvmTypeContext _prevctx = _localctx;
		int _startState = 92;
		enterRecursionRule(_localctx, 92, RULE_llvmType, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1198);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VOID:
				{
				setState(1195);
				voidType();
				}
				break;
			case LT:
			case LBRACK:
			case LBRACE:
			case DOUBLE:
			case FLOAT:
			case FP128:
			case HALF:
			case LABEL:
			case PPC_FP128:
			case TOKEN:
			case X86_FP80:
			case X86_MMX:
			case INT_TYPE:
			case LOCAL_IDENT:
				{
				setState(1196);
				concreteNonRecType();
				}
				break;
			case METADATA:
				{
				setState(1197);
				metadataType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(1211);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,39,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1209);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
					case 1:
						{
						_localctx = new LlvmTypeContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_llvmType);
						setState(1200);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1201);
						match(LPAREN);
						setState(1202);
						params();
						setState(1203);
						match(RPAREN);
						}
						break;
					case 2:
						{
						_localctx = new LlvmTypeContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_llvmType);
						setState(1205);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(1206);
						optAddrSpace();
						setState(1207);
						match(STAR);
						}
						break;
					}
					} 
				}
				setState(1213);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,39,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ConcreteNonRecTypeContext extends ParserRuleContext {
		public IntTypeContext intType() {
			return getRuleContext(IntTypeContext.class,0);
		}
		public FloatTypeContext floatType() {
			return getRuleContext(FloatTypeContext.class,0);
		}
		public VectorTypeContext vectorType() {
			return getRuleContext(VectorTypeContext.class,0);
		}
		public LabelTypeContext labelType() {
			return getRuleContext(LabelTypeContext.class,0);
		}
		public ArrayTypeContext arrayType() {
			return getRuleContext(ArrayTypeContext.class,0);
		}
		public StructTypeContext structType() {
			return getRuleContext(StructTypeContext.class,0);
		}
		public NamedTypeContext namedType() {
			return getRuleContext(NamedTypeContext.class,0);
		}
		public MmxTypeContext mmxType() {
			return getRuleContext(MmxTypeContext.class,0);
		}
		public TokenTypeContext tokenType() {
			return getRuleContext(TokenTypeContext.class,0);
		}
		public ConcreteNonRecTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concreteNonRecType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterConcreteNonRecType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitConcreteNonRecType(this);
		}
	}

	public final ConcreteNonRecTypeContext concreteNonRecType() throws RecognitionException {
		ConcreteNonRecTypeContext _localctx = new ConcreteNonRecTypeContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_concreteNonRecType);
		try {
			setState(1223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1214);
				intType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1215);
				floatType();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1216);
				vectorType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1217);
				labelType();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1218);
				arrayType();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1219);
				structType();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1220);
				namedType();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1221);
				mmxType();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1222);
				tokenType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VoidTypeContext extends ParserRuleContext {
		public TerminalNode VOID() { return getToken(LLVMParser.VOID, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_voidType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterVoidType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitVoidType(this);
		}
	}

	public final VoidTypeContext voidType() throws RecognitionException {
		VoidTypeContext _localctx = new VoidTypeContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_voidType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1225);
			match(VOID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntTypeContext extends ParserRuleContext {
		public TerminalNode INT_TYPE() { return getToken(LLVMParser.INT_TYPE, 0); }
		public IntTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterIntType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitIntType(this);
		}
	}

	public final IntTypeContext intType() throws RecognitionException {
		IntTypeContext _localctx = new IntTypeContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_intType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1227);
			match(INT_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FloatTypeContext extends ParserRuleContext {
		public FloatKindContext floatKind() {
			return getRuleContext(FloatKindContext.class,0);
		}
		public FloatTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_floatType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFloatType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFloatType(this);
		}
	}

	public final FloatTypeContext floatType() throws RecognitionException {
		FloatTypeContext _localctx = new FloatTypeContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_floatType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1229);
			floatKind();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FloatKindContext extends ParserRuleContext {
		public TerminalNode HALF() { return getToken(LLVMParser.HALF, 0); }
		public TerminalNode FLOAT() { return getToken(LLVMParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(LLVMParser.DOUBLE, 0); }
		public TerminalNode X86_FP80() { return getToken(LLVMParser.X86_FP80, 0); }
		public TerminalNode FP128() { return getToken(LLVMParser.FP128, 0); }
		public TerminalNode PPC_FP128() { return getToken(LLVMParser.PPC_FP128, 0); }
		public FloatKindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_floatKind; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFloatKind(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFloatKind(this);
		}
	}

	public final FloatKindContext floatKind() throws RecognitionException {
		FloatKindContext _localctx = new FloatKindContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_floatKind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1231);
			_la = _input.LA(1);
			if ( !(((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (DOUBLE - 126)) | (1L << (FLOAT - 126)) | (1L << (FP128 - 126)) | (1L << (HALF - 126)))) != 0) || _la==PPC_FP128 || _la==X86_FP80) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MmxTypeContext extends ParserRuleContext {
		public TerminalNode X86_MMX() { return getToken(LLVMParser.X86_MMX, 0); }
		public MmxTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mmxType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMmxType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMmxType(this);
		}
	}

	public final MmxTypeContext mmxType() throws RecognitionException {
		MmxTypeContext _localctx = new MmxTypeContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_mmxType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1233);
			match(X86_MMX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptAddrSpaceContext extends ParserRuleContext {
		public AddrSpaceContext addrSpace() {
			return getRuleContext(AddrSpaceContext.class,0);
		}
		public OptAddrSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optAddrSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptAddrSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptAddrSpace(this);
		}
	}

	public final OptAddrSpaceContext optAddrSpace() throws RecognitionException {
		OptAddrSpaceContext _localctx = new OptAddrSpaceContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_optAddrSpace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADDRSPACE) {
				{
				setState(1235);
				addrSpace();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddrSpaceContext extends ParserRuleContext {
		public TerminalNode ADDRSPACE() { return getToken(LLVMParser.ADDRSPACE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public TerminalNode INT_LIT() { return getToken(LLVMParser.INT_LIT, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public AddrSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addrSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAddrSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAddrSpace(this);
		}
	}

	public final AddrSpaceContext addrSpace() throws RecognitionException {
		AddrSpaceContext _localctx = new AddrSpaceContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_addrSpace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1238);
			match(ADDRSPACE);
			setState(1239);
			match(LPAREN);
			setState(1240);
			match(INT_LIT);
			setState(1241);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VectorTypeContext extends ParserRuleContext {
		public TerminalNode LT() { return getToken(LLVMParser.LT, 0); }
		public TerminalNode INT_LIT() { return getToken(LLVMParser.INT_LIT, 0); }
		public TerminalNode X() { return getToken(LLVMParser.X, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public TerminalNode GT() { return getToken(LLVMParser.GT, 0); }
		public VectorTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vectorType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterVectorType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitVectorType(this);
		}
	}

	public final VectorTypeContext vectorType() throws RecognitionException {
		VectorTypeContext _localctx = new VectorTypeContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_vectorType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1243);
			match(LT);
			setState(1244);
			match(INT_LIT);
			setState(1245);
			match(X);
			setState(1246);
			llvmType(0);
			setState(1247);
			match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelTypeContext extends ParserRuleContext {
		public TerminalNode LABEL() { return getToken(LLVMParser.LABEL, 0); }
		public LabelTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterLabelType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitLabelType(this);
		}
	}

	public final LabelTypeContext labelType() throws RecognitionException {
		LabelTypeContext _localctx = new LabelTypeContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_labelType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1249);
			match(LABEL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TokenTypeContext extends ParserRuleContext {
		public TerminalNode TOKEN() { return getToken(LLVMParser.TOKEN, 0); }
		public TokenTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tokenType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTokenType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTokenType(this);
		}
	}

	public final TokenTypeContext tokenType() throws RecognitionException {
		TokenTypeContext _localctx = new TokenTypeContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_tokenType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1251);
			match(TOKEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MetadataTypeContext extends ParserRuleContext {
		public TerminalNode METADATA() { return getToken(LLVMParser.METADATA, 0); }
		public MetadataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_metadataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMetadataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMetadataType(this);
		}
	}

	public final MetadataTypeContext metadataType() throws RecognitionException {
		MetadataTypeContext _localctx = new MetadataTypeContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_metadataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1253);
			match(METADATA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayTypeContext extends ParserRuleContext {
		public TerminalNode LBRACK() { return getToken(LLVMParser.LBRACK, 0); }
		public TerminalNode INT_LIT() { return getToken(LLVMParser.INT_LIT, 0); }
		public TerminalNode X() { return getToken(LLVMParser.X, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public TerminalNode RBRACK() { return getToken(LLVMParser.RBRACK, 0); }
		public ArrayTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterArrayType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitArrayType(this);
		}
	}

	public final ArrayTypeContext arrayType() throws RecognitionException {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_arrayType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1255);
			match(LBRACK);
			setState(1256);
			match(INT_LIT);
			setState(1257);
			match(X);
			setState(1258);
			llvmType(0);
			setState(1259);
			match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StructTypeContext extends ParserRuleContext {
		public TerminalNode LBRACE() { return getToken(LLVMParser.LBRACE, 0); }
		public TerminalNode RBRACE() { return getToken(LLVMParser.RBRACE, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode LT() { return getToken(LLVMParser.LT, 0); }
		public TerminalNode GT() { return getToken(LLVMParser.GT, 0); }
		public StructTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_structType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterStructType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitStructType(this);
		}
	}

	public final StructTypeContext structType() throws RecognitionException {
		StructTypeContext _localctx = new StructTypeContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_structType);
		try {
			setState(1277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1261);
				match(LBRACE);
				setState(1262);
				match(RBRACE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1263);
				match(LBRACE);
				setState(1264);
				typeList(0);
				setState(1265);
				match(RBRACE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1267);
				match(LT);
				setState(1268);
				match(LBRACE);
				setState(1269);
				match(RBRACE);
				setState(1270);
				match(GT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1271);
				match(LT);
				setState(1272);
				match(LBRACE);
				setState(1273);
				typeList(0);
				setState(1274);
				match(RBRACE);
				setState(1275);
				match(GT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeListContext extends ParserRuleContext {
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTypeList(this);
		}
	}

	public final TypeListContext typeList() throws RecognitionException {
		return typeList(0);
	}

	private TypeListContext typeList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TypeListContext _localctx = new TypeListContext(_ctx, _parentState);
		TypeListContext _prevctx = _localctx;
		int _startState = 122;
		enterRecursionRule(_localctx, 122, RULE_typeList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1280);
			llvmType(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(1287);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,43,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_typeList);
					setState(1282);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1283);
					match(COMMA);
					setState(1284);
					llvmType(0);
					}
					} 
				}
				setState(1289);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,43,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class OpaqueTypeContext extends ParserRuleContext {
		public TerminalNode OPAQUE() { return getToken(LLVMParser.OPAQUE, 0); }
		public OpaqueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opaqueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOpaqueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOpaqueType(this);
		}
	}

	public final OpaqueTypeContext opaqueType() throws RecognitionException {
		OpaqueTypeContext _localctx = new OpaqueTypeContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_opaqueType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1290);
			match(OPAQUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamedTypeContext extends ParserRuleContext {
		public LocalIdentContext localIdent() {
			return getRuleContext(LocalIdentContext.class,0);
		}
		public NamedTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterNamedType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitNamedType(this);
		}
	}

	public final NamedTypeContext namedType() throws RecognitionException {
		NamedTypeContext _localctx = new NamedTypeContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_namedType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1292);
			localIdent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValueContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public LocalIdentContext localIdent() {
			return getRuleContext(LocalIdentContext.class,0);
		}
		public InlineAsmContext inlineAsm() {
			return getRuleContext(InlineAsmContext.class,0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitValue(this);
		}
	}

	public final ValueContext value() throws RecognitionException {
		ValueContext _localctx = new ValueContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_value);
		try {
			setState(1297);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LT:
			case LBRACK:
			case LBRACE:
			case ADD:
			case ADDRSPACECAST:
			case AND:
			case ASHR:
			case BITCAST:
			case BLOCKADDRESS:
			case C:
			case EXTRACTELEMENT:
			case EXTRACTVALUE:
			case FADD:
			case FALSE:
			case FCMP:
			case FDIV:
			case FMUL:
			case FPEXT:
			case FPTOSI:
			case FPTOUI:
			case FPTRUNC:
			case FREM:
			case FSUB:
			case GETELEMENTPTR:
			case ICMP:
			case INSERTELEMENT:
			case INSERTVALUE:
			case INTTOPTR:
			case LSHR:
			case MUL:
			case NONE:
			case NULL:
			case OR:
			case PTRTOINT:
			case SDIV:
			case SELECT:
			case SEXT:
			case SHL:
			case SHUFFLEVECTOR:
			case SITOFP:
			case SREM:
			case SUB:
			case TRUE:
			case TRUNC:
			case UDIV:
			case UITOFP:
			case UNDEF:
			case UREM:
			case XOR:
			case ZEROINITIALIZER:
			case ZEXT:
			case INT_LIT:
			case FLOAT_LIT:
			case GLOBAL_IDENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1294);
				constant();
				}
				break;
			case LOCAL_IDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1295);
				localIdent();
				}
				break;
			case ASM:
				enterOuterAlt(_localctx, 3);
				{
				setState(1296);
				inlineAsm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InlineAsmContext extends ParserRuleContext {
		public TerminalNode ASM() { return getToken(LLVMParser.ASM, 0); }
		public OptSideEffectContext optSideEffect() {
			return getRuleContext(OptSideEffectContext.class,0);
		}
		public OptAlignStackContext optAlignStack() {
			return getRuleContext(OptAlignStackContext.class,0);
		}
		public OptIntelDialectContext optIntelDialect() {
			return getRuleContext(OptIntelDialectContext.class,0);
		}
		public List<StringLitContext> stringLit() {
			return getRuleContexts(StringLitContext.class);
		}
		public StringLitContext stringLit(int i) {
			return getRuleContext(StringLitContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public InlineAsmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inlineAsm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterInlineAsm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitInlineAsm(this);
		}
	}

	public final InlineAsmContext inlineAsm() throws RecognitionException {
		InlineAsmContext _localctx = new InlineAsmContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_inlineAsm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1299);
			match(ASM);
			setState(1300);
			optSideEffect();
			setState(1301);
			optAlignStack();
			setState(1302);
			optIntelDialect();
			setState(1303);
			stringLit();
			setState(1304);
			match(COMMA);
			setState(1305);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptSideEffectContext extends ParserRuleContext {
		public TerminalNode SIDEEFFECT() { return getToken(LLVMParser.SIDEEFFECT, 0); }
		public OptSideEffectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optSideEffect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptSideEffect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptSideEffect(this);
		}
	}

	public final OptSideEffectContext optSideEffect() throws RecognitionException {
		OptSideEffectContext _localctx = new OptSideEffectContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_optSideEffect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1308);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIDEEFFECT) {
				{
				setState(1307);
				match(SIDEEFFECT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptAlignStackContext extends ParserRuleContext {
		public TerminalNode ALIGNSTACK() { return getToken(LLVMParser.ALIGNSTACK, 0); }
		public OptAlignStackContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optAlignStack; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptAlignStack(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptAlignStack(this);
		}
	}

	public final OptAlignStackContext optAlignStack() throws RecognitionException {
		OptAlignStackContext _localctx = new OptAlignStackContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_optAlignStack);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALIGNSTACK) {
				{
				setState(1310);
				match(ALIGNSTACK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptIntelDialectContext extends ParserRuleContext {
		public TerminalNode INTELDIALECT() { return getToken(LLVMParser.INTELDIALECT, 0); }
		public OptIntelDialectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optIntelDialect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptIntelDialect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptIntelDialect(this);
		}
	}

	public final OptIntelDialectContext optIntelDialect() throws RecognitionException {
		OptIntelDialectContext _localctx = new OptIntelDialectContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_optIntelDialect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTELDIALECT) {
				{
				setState(1313);
				match(INTELDIALECT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public BoolConstContext boolConst() {
			return getRuleContext(BoolConstContext.class,0);
		}
		public IntConstContext intConst() {
			return getRuleContext(IntConstContext.class,0);
		}
		public FloatConstContext floatConst() {
			return getRuleContext(FloatConstContext.class,0);
		}
		public NullConstContext nullConst() {
			return getRuleContext(NullConstContext.class,0);
		}
		public NoneConstContext noneConst() {
			return getRuleContext(NoneConstContext.class,0);
		}
		public StructConstContext structConst() {
			return getRuleContext(StructConstContext.class,0);
		}
		public ArrayConstContext arrayConst() {
			return getRuleContext(ArrayConstContext.class,0);
		}
		public CharArrayConstContext charArrayConst() {
			return getRuleContext(CharArrayConstContext.class,0);
		}
		public VectorConstContext vectorConst() {
			return getRuleContext(VectorConstContext.class,0);
		}
		public ZeroInitializerConstContext zeroInitializerConst() {
			return getRuleContext(ZeroInitializerConstContext.class,0);
		}
		public GlobalIdentContext globalIdent() {
			return getRuleContext(GlobalIdentContext.class,0);
		}
		public UndefConstContext undefConst() {
			return getRuleContext(UndefConstContext.class,0);
		}
		public BlockAddressConstContext blockAddressConst() {
			return getRuleContext(BlockAddressConstContext.class,0);
		}
		public ConstantExprContext constantExpr() {
			return getRuleContext(ConstantExprContext.class,0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitConstant(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_constant);
		try {
			setState(1330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1316);
				boolConst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1317);
				intConst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1318);
				floatConst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1319);
				nullConst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1320);
				noneConst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1321);
				structConst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1322);
				arrayConst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1323);
				charArrayConst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1324);
				vectorConst();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1325);
				zeroInitializerConst();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1326);
				globalIdent();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1327);
				undefConst();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1328);
				blockAddressConst();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1329);
				constantExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolConstContext extends ParserRuleContext {
		public BoolLitContext boolLit() {
			return getRuleContext(BoolLitContext.class,0);
		}
		public BoolConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterBoolConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitBoolConst(this);
		}
	}

	public final BoolConstContext boolConst() throws RecognitionException {
		BoolConstContext _localctx = new BoolConstContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_boolConst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1332);
			boolLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolLitContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(LLVMParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(LLVMParser.FALSE, 0); }
		public BoolLitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolLit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterBoolLit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitBoolLit(this);
		}
	}

	public final BoolLitContext boolLit() throws RecognitionException {
		BoolLitContext _localctx = new BoolLitContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_boolLit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1334);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntConstContext extends ParserRuleContext {
		public TerminalNode INT_LIT() { return getToken(LLVMParser.INT_LIT, 0); }
		public IntConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterIntConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitIntConst(this);
		}
	}

	public final IntConstContext intConst() throws RecognitionException {
		IntConstContext _localctx = new IntConstContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_intConst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1336);
			match(INT_LIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntLitContext extends ParserRuleContext {
		public TerminalNode INT_LIT() { return getToken(LLVMParser.INT_LIT, 0); }
		public IntLitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intLit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterIntLit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitIntLit(this);
		}
	}

	public final IntLitContext intLit() throws RecognitionException {
		IntLitContext _localctx = new IntLitContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_intLit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1338);
			match(INT_LIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FloatConstContext extends ParserRuleContext {
		public TerminalNode FLOAT_LIT() { return getToken(LLVMParser.FLOAT_LIT, 0); }
		public FloatConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_floatConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFloatConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFloatConst(this);
		}
	}

	public final FloatConstContext floatConst() throws RecognitionException {
		FloatConstContext _localctx = new FloatConstContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_floatConst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1340);
			match(FLOAT_LIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullConstContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(LLVMParser.NULL, 0); }
		public NullConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterNullConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitNullConst(this);
		}
	}

	public final NullConstContext nullConst() throws RecognitionException {
		NullConstContext _localctx = new NullConstContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_nullConst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1342);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NoneConstContext extends ParserRuleContext {
		public TerminalNode NONE() { return getToken(LLVMParser.NONE, 0); }
		public NoneConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_noneConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterNoneConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitNoneConst(this);
		}
	}

	public final NoneConstContext noneConst() throws RecognitionException {
		NoneConstContext _localctx = new NoneConstContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_noneConst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1344);
			match(NONE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StructConstContext extends ParserRuleContext {
		public TerminalNode LBRACE() { return getToken(LLVMParser.LBRACE, 0); }
		public TerminalNode RBRACE() { return getToken(LLVMParser.RBRACE, 0); }
		public TypeConstListContext typeConstList() {
			return getRuleContext(TypeConstListContext.class,0);
		}
		public TerminalNode LT() { return getToken(LLVMParser.LT, 0); }
		public TerminalNode GT() { return getToken(LLVMParser.GT, 0); }
		public StructConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_structConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterStructConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitStructConst(this);
		}
	}

	public final StructConstContext structConst() throws RecognitionException {
		StructConstContext _localctx = new StructConstContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_structConst);
		try {
			setState(1362);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1346);
				match(LBRACE);
				setState(1347);
				match(RBRACE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1348);
				match(LBRACE);
				setState(1349);
				typeConstList(0);
				setState(1350);
				match(RBRACE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1352);
				match(LT);
				setState(1353);
				match(LBRACE);
				setState(1354);
				match(RBRACE);
				setState(1355);
				match(GT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1356);
				match(LT);
				setState(1357);
				match(LBRACE);
				setState(1358);
				typeConstList(0);
				setState(1359);
				match(RBRACE);
				setState(1360);
				match(GT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayConstContext extends ParserRuleContext {
		public TerminalNode LBRACK() { return getToken(LLVMParser.LBRACK, 0); }
		public TypeConstsContext typeConsts() {
			return getRuleContext(TypeConstsContext.class,0);
		}
		public TerminalNode RBRACK() { return getToken(LLVMParser.RBRACK, 0); }
		public ArrayConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterArrayConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitArrayConst(this);
		}
	}

	public final ArrayConstContext arrayConst() throws RecognitionException {
		ArrayConstContext _localctx = new ArrayConstContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_arrayConst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1364);
			match(LBRACK);
			setState(1365);
			typeConsts();
			setState(1366);
			match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharArrayConstContext extends ParserRuleContext {
		public TerminalNode C() { return getToken(LLVMParser.C, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public CharArrayConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charArrayConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterCharArrayConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitCharArrayConst(this);
		}
	}

	public final CharArrayConstContext charArrayConst() throws RecognitionException {
		CharArrayConstContext _localctx = new CharArrayConstContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_charArrayConst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1368);
			match(C);
			setState(1369);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLitContext extends ParserRuleContext {
		public TerminalNode STRING_LIT() { return getToken(LLVMParser.STRING_LIT, 0); }
		public StringLitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterStringLit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitStringLit(this);
		}
	}

	public final StringLitContext stringLit() throws RecognitionException {
		StringLitContext _localctx = new StringLitContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_stringLit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1371);
			match(STRING_LIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VectorConstContext extends ParserRuleContext {
		public TerminalNode LT() { return getToken(LLVMParser.LT, 0); }
		public TypeConstsContext typeConsts() {
			return getRuleContext(TypeConstsContext.class,0);
		}
		public TerminalNode GT() { return getToken(LLVMParser.GT, 0); }
		public VectorConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vectorConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterVectorConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitVectorConst(this);
		}
	}

	public final VectorConstContext vectorConst() throws RecognitionException {
		VectorConstContext _localctx = new VectorConstContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_vectorConst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1373);
			match(LT);
			setState(1374);
			typeConsts();
			setState(1375);
			match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ZeroInitializerConstContext extends ParserRuleContext {
		public TerminalNode ZEROINITIALIZER() { return getToken(LLVMParser.ZEROINITIALIZER, 0); }
		public ZeroInitializerConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zeroInitializerConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterZeroInitializerConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitZeroInitializerConst(this);
		}
	}

	public final ZeroInitializerConstContext zeroInitializerConst() throws RecognitionException {
		ZeroInitializerConstContext _localctx = new ZeroInitializerConstContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_zeroInitializerConst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1377);
			match(ZEROINITIALIZER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UndefConstContext extends ParserRuleContext {
		public TerminalNode UNDEF() { return getToken(LLVMParser.UNDEF, 0); }
		public UndefConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_undefConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterUndefConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitUndefConst(this);
		}
	}

	public final UndefConstContext undefConst() throws RecognitionException {
		UndefConstContext _localctx = new UndefConstContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_undefConst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1379);
			match(UNDEF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockAddressConstContext extends ParserRuleContext {
		public TerminalNode BLOCKADDRESS() { return getToken(LLVMParser.BLOCKADDRESS, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public GlobalIdentContext globalIdent() {
			return getRuleContext(GlobalIdentContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public LocalIdentContext localIdent() {
			return getRuleContext(LocalIdentContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public BlockAddressConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blockAddressConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterBlockAddressConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitBlockAddressConst(this);
		}
	}

	public final BlockAddressConstContext blockAddressConst() throws RecognitionException {
		BlockAddressConstContext _localctx = new BlockAddressConstContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_blockAddressConst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1381);
			match(BLOCKADDRESS);
			setState(1382);
			match(LPAREN);
			setState(1383);
			globalIdent();
			setState(1384);
			match(COMMA);
			setState(1385);
			localIdent();
			setState(1386);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantExprContext extends ParserRuleContext {
		public AddExprContext addExpr() {
			return getRuleContext(AddExprContext.class,0);
		}
		public FAddExprContext fAddExpr() {
			return getRuleContext(FAddExprContext.class,0);
		}
		public SubExprContext subExpr() {
			return getRuleContext(SubExprContext.class,0);
		}
		public FSubExprContext fSubExpr() {
			return getRuleContext(FSubExprContext.class,0);
		}
		public MulExprContext mulExpr() {
			return getRuleContext(MulExprContext.class,0);
		}
		public FMulExprContext fMulExpr() {
			return getRuleContext(FMulExprContext.class,0);
		}
		public UDivExprContext uDivExpr() {
			return getRuleContext(UDivExprContext.class,0);
		}
		public SDivExprContext sDivExpr() {
			return getRuleContext(SDivExprContext.class,0);
		}
		public FDivExprContext fDivExpr() {
			return getRuleContext(FDivExprContext.class,0);
		}
		public URemExprContext uRemExpr() {
			return getRuleContext(URemExprContext.class,0);
		}
		public SRemExprContext sRemExpr() {
			return getRuleContext(SRemExprContext.class,0);
		}
		public FRemExprContext fRemExpr() {
			return getRuleContext(FRemExprContext.class,0);
		}
		public ShlExprContext shlExpr() {
			return getRuleContext(ShlExprContext.class,0);
		}
		public LShrExprContext lShrExpr() {
			return getRuleContext(LShrExprContext.class,0);
		}
		public AshrExprContext ashrExpr() {
			return getRuleContext(AshrExprContext.class,0);
		}
		public AndExprContext andExpr() {
			return getRuleContext(AndExprContext.class,0);
		}
		public OrExprContext orExpr() {
			return getRuleContext(OrExprContext.class,0);
		}
		public XorExprContext xorExpr() {
			return getRuleContext(XorExprContext.class,0);
		}
		public ExtractElementExprContext extractElementExpr() {
			return getRuleContext(ExtractElementExprContext.class,0);
		}
		public InsertElementExprContext insertElementExpr() {
			return getRuleContext(InsertElementExprContext.class,0);
		}
		public ShuffleVectorExprContext shuffleVectorExpr() {
			return getRuleContext(ShuffleVectorExprContext.class,0);
		}
		public ExtractValueExprContext extractValueExpr() {
			return getRuleContext(ExtractValueExprContext.class,0);
		}
		public InsertValueExprContext insertValueExpr() {
			return getRuleContext(InsertValueExprContext.class,0);
		}
		public GetElementPtrExprContext getElementPtrExpr() {
			return getRuleContext(GetElementPtrExprContext.class,0);
		}
		public TruncExprContext truncExpr() {
			return getRuleContext(TruncExprContext.class,0);
		}
		public ZExtExprContext zExtExpr() {
			return getRuleContext(ZExtExprContext.class,0);
		}
		public SExtExprContext sExtExpr() {
			return getRuleContext(SExtExprContext.class,0);
		}
		public FPTruncExprContext fPTruncExpr() {
			return getRuleContext(FPTruncExprContext.class,0);
		}
		public FpExtExprContext fpExtExpr() {
			return getRuleContext(FpExtExprContext.class,0);
		}
		public FpToUIExprContext fpToUIExpr() {
			return getRuleContext(FpToUIExprContext.class,0);
		}
		public FpToSIExprContext fpToSIExpr() {
			return getRuleContext(FpToSIExprContext.class,0);
		}
		public UiToFPExprContext uiToFPExpr() {
			return getRuleContext(UiToFPExprContext.class,0);
		}
		public SiToFPExprContext siToFPExpr() {
			return getRuleContext(SiToFPExprContext.class,0);
		}
		public PtrToIntExprContext ptrToIntExpr() {
			return getRuleContext(PtrToIntExprContext.class,0);
		}
		public IntToPtrExprContext intToPtrExpr() {
			return getRuleContext(IntToPtrExprContext.class,0);
		}
		public BitCastExprContext bitCastExpr() {
			return getRuleContext(BitCastExprContext.class,0);
		}
		public AddrSpaceCastExprContext addrSpaceCastExpr() {
			return getRuleContext(AddrSpaceCastExprContext.class,0);
		}
		public ICmpExprContext iCmpExpr() {
			return getRuleContext(ICmpExprContext.class,0);
		}
		public FCmpExprContext fCmpExpr() {
			return getRuleContext(FCmpExprContext.class,0);
		}
		public SelectExprContext selectExpr() {
			return getRuleContext(SelectExprContext.class,0);
		}
		public ConstantExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constantExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterConstantExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitConstantExpr(this);
		}
	}

	public final ConstantExprContext constantExpr() throws RecognitionException {
		ConstantExprContext _localctx = new ConstantExprContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_constantExpr);
		try {
			setState(1428);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1388);
				addExpr();
				}
				break;
			case FADD:
				enterOuterAlt(_localctx, 2);
				{
				setState(1389);
				fAddExpr();
				}
				break;
			case SUB:
				enterOuterAlt(_localctx, 3);
				{
				setState(1390);
				subExpr();
				}
				break;
			case FSUB:
				enterOuterAlt(_localctx, 4);
				{
				setState(1391);
				fSubExpr();
				}
				break;
			case MUL:
				enterOuterAlt(_localctx, 5);
				{
				setState(1392);
				mulExpr();
				}
				break;
			case FMUL:
				enterOuterAlt(_localctx, 6);
				{
				setState(1393);
				fMulExpr();
				}
				break;
			case UDIV:
				enterOuterAlt(_localctx, 7);
				{
				setState(1394);
				uDivExpr();
				}
				break;
			case SDIV:
				enterOuterAlt(_localctx, 8);
				{
				setState(1395);
				sDivExpr();
				}
				break;
			case FDIV:
				enterOuterAlt(_localctx, 9);
				{
				setState(1396);
				fDivExpr();
				}
				break;
			case UREM:
				enterOuterAlt(_localctx, 10);
				{
				setState(1397);
				uRemExpr();
				}
				break;
			case SREM:
				enterOuterAlt(_localctx, 11);
				{
				setState(1398);
				sRemExpr();
				}
				break;
			case FREM:
				enterOuterAlt(_localctx, 12);
				{
				setState(1399);
				fRemExpr();
				}
				break;
			case SHL:
				enterOuterAlt(_localctx, 13);
				{
				setState(1400);
				shlExpr();
				}
				break;
			case LSHR:
				enterOuterAlt(_localctx, 14);
				{
				setState(1401);
				lShrExpr();
				}
				break;
			case ASHR:
				enterOuterAlt(_localctx, 15);
				{
				setState(1402);
				ashrExpr();
				}
				break;
			case AND:
				enterOuterAlt(_localctx, 16);
				{
				setState(1403);
				andExpr();
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 17);
				{
				setState(1404);
				orExpr();
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 18);
				{
				setState(1405);
				xorExpr();
				}
				break;
			case EXTRACTELEMENT:
				enterOuterAlt(_localctx, 19);
				{
				setState(1406);
				extractElementExpr();
				}
				break;
			case INSERTELEMENT:
				enterOuterAlt(_localctx, 20);
				{
				setState(1407);
				insertElementExpr();
				}
				break;
			case SHUFFLEVECTOR:
				enterOuterAlt(_localctx, 21);
				{
				setState(1408);
				shuffleVectorExpr();
				}
				break;
			case EXTRACTVALUE:
				enterOuterAlt(_localctx, 22);
				{
				setState(1409);
				extractValueExpr();
				}
				break;
			case INSERTVALUE:
				enterOuterAlt(_localctx, 23);
				{
				setState(1410);
				insertValueExpr();
				}
				break;
			case GETELEMENTPTR:
				enterOuterAlt(_localctx, 24);
				{
				setState(1411);
				getElementPtrExpr();
				}
				break;
			case TRUNC:
				enterOuterAlt(_localctx, 25);
				{
				setState(1412);
				truncExpr();
				}
				break;
			case ZEXT:
				enterOuterAlt(_localctx, 26);
				{
				setState(1413);
				zExtExpr();
				}
				break;
			case SEXT:
				enterOuterAlt(_localctx, 27);
				{
				setState(1414);
				sExtExpr();
				}
				break;
			case FPTRUNC:
				enterOuterAlt(_localctx, 28);
				{
				setState(1415);
				fPTruncExpr();
				}
				break;
			case FPEXT:
				enterOuterAlt(_localctx, 29);
				{
				setState(1416);
				fpExtExpr();
				}
				break;
			case FPTOUI:
				enterOuterAlt(_localctx, 30);
				{
				setState(1417);
				fpToUIExpr();
				}
				break;
			case FPTOSI:
				enterOuterAlt(_localctx, 31);
				{
				setState(1418);
				fpToSIExpr();
				}
				break;
			case UITOFP:
				enterOuterAlt(_localctx, 32);
				{
				setState(1419);
				uiToFPExpr();
				}
				break;
			case SITOFP:
				enterOuterAlt(_localctx, 33);
				{
				setState(1420);
				siToFPExpr();
				}
				break;
			case PTRTOINT:
				enterOuterAlt(_localctx, 34);
				{
				setState(1421);
				ptrToIntExpr();
				}
				break;
			case INTTOPTR:
				enterOuterAlt(_localctx, 35);
				{
				setState(1422);
				intToPtrExpr();
				}
				break;
			case BITCAST:
				enterOuterAlt(_localctx, 36);
				{
				setState(1423);
				bitCastExpr();
				}
				break;
			case ADDRSPACECAST:
				enterOuterAlt(_localctx, 37);
				{
				setState(1424);
				addrSpaceCastExpr();
				}
				break;
			case ICMP:
				enterOuterAlt(_localctx, 38);
				{
				setState(1425);
				iCmpExpr();
				}
				break;
			case FCMP:
				enterOuterAlt(_localctx, 39);
				{
				setState(1426);
				fCmpExpr();
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 40);
				{
				setState(1427);
				selectExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddExprContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(LLVMParser.ADD, 0); }
		public OverflowFlagsContext overflowFlags() {
			return getRuleContext(OverflowFlagsContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public AddExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAddExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAddExpr(this);
		}
	}

	public final AddExprContext addExpr() throws RecognitionException {
		AddExprContext _localctx = new AddExprContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_addExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1430);
			match(ADD);
			setState(1431);
			overflowFlags();
			setState(1432);
			match(LPAREN);
			setState(1433);
			llvmType(0);
			setState(1434);
			constant();
			setState(1435);
			match(COMMA);
			setState(1436);
			llvmType(0);
			setState(1437);
			constant();
			setState(1438);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FAddExprContext extends ParserRuleContext {
		public TerminalNode FADD() { return getToken(LLVMParser.FADD, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public FAddExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fAddExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFAddExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFAddExpr(this);
		}
	}

	public final FAddExprContext fAddExpr() throws RecognitionException {
		FAddExprContext _localctx = new FAddExprContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_fAddExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1440);
			match(FADD);
			setState(1441);
			match(LPAREN);
			setState(1442);
			llvmType(0);
			setState(1443);
			constant();
			setState(1444);
			match(COMMA);
			setState(1445);
			llvmType(0);
			setState(1446);
			constant();
			setState(1447);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubExprContext extends ParserRuleContext {
		public TerminalNode SUB() { return getToken(LLVMParser.SUB, 0); }
		public OverflowFlagsContext overflowFlags() {
			return getRuleContext(OverflowFlagsContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public SubExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSubExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSubExpr(this);
		}
	}

	public final SubExprContext subExpr() throws RecognitionException {
		SubExprContext _localctx = new SubExprContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_subExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1449);
			match(SUB);
			setState(1450);
			overflowFlags();
			setState(1451);
			match(LPAREN);
			setState(1452);
			llvmType(0);
			setState(1453);
			constant();
			setState(1454);
			match(COMMA);
			setState(1455);
			llvmType(0);
			setState(1456);
			constant();
			setState(1457);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FSubExprContext extends ParserRuleContext {
		public TerminalNode FSUB() { return getToken(LLVMParser.FSUB, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public FSubExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fSubExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFSubExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFSubExpr(this);
		}
	}

	public final FSubExprContext fSubExpr() throws RecognitionException {
		FSubExprContext _localctx = new FSubExprContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_fSubExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1459);
			match(FSUB);
			setState(1460);
			match(LPAREN);
			setState(1461);
			llvmType(0);
			setState(1462);
			constant();
			setState(1463);
			match(COMMA);
			setState(1464);
			llvmType(0);
			setState(1465);
			constant();
			setState(1466);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MulExprContext extends ParserRuleContext {
		public TerminalNode MUL() { return getToken(LLVMParser.MUL, 0); }
		public OverflowFlagsContext overflowFlags() {
			return getRuleContext(OverflowFlagsContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public MulExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mulExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMulExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMulExpr(this);
		}
	}

	public final MulExprContext mulExpr() throws RecognitionException {
		MulExprContext _localctx = new MulExprContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_mulExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1468);
			match(MUL);
			setState(1469);
			overflowFlags();
			setState(1470);
			match(LPAREN);
			setState(1471);
			llvmType(0);
			setState(1472);
			constant();
			setState(1473);
			match(COMMA);
			setState(1474);
			llvmType(0);
			setState(1475);
			constant();
			setState(1476);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FMulExprContext extends ParserRuleContext {
		public TerminalNode FMUL() { return getToken(LLVMParser.FMUL, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public FMulExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fMulExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFMulExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFMulExpr(this);
		}
	}

	public final FMulExprContext fMulExpr() throws RecognitionException {
		FMulExprContext _localctx = new FMulExprContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_fMulExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1478);
			match(FMUL);
			setState(1479);
			match(LPAREN);
			setState(1480);
			llvmType(0);
			setState(1481);
			constant();
			setState(1482);
			match(COMMA);
			setState(1483);
			llvmType(0);
			setState(1484);
			constant();
			setState(1485);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UDivExprContext extends ParserRuleContext {
		public TerminalNode UDIV() { return getToken(LLVMParser.UDIV, 0); }
		public OptExactContext optExact() {
			return getRuleContext(OptExactContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public UDivExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uDivExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterUDivExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitUDivExpr(this);
		}
	}

	public final UDivExprContext uDivExpr() throws RecognitionException {
		UDivExprContext _localctx = new UDivExprContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_uDivExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1487);
			match(UDIV);
			setState(1488);
			optExact();
			setState(1489);
			match(LPAREN);
			setState(1490);
			llvmType(0);
			setState(1491);
			constant();
			setState(1492);
			match(COMMA);
			setState(1493);
			llvmType(0);
			setState(1494);
			constant();
			setState(1495);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SDivExprContext extends ParserRuleContext {
		public TerminalNode SDIV() { return getToken(LLVMParser.SDIV, 0); }
		public OptExactContext optExact() {
			return getRuleContext(OptExactContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public SDivExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sDivExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSDivExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSDivExpr(this);
		}
	}

	public final SDivExprContext sDivExpr() throws RecognitionException {
		SDivExprContext _localctx = new SDivExprContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_sDivExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1497);
			match(SDIV);
			setState(1498);
			optExact();
			setState(1499);
			match(LPAREN);
			setState(1500);
			llvmType(0);
			setState(1501);
			constant();
			setState(1502);
			match(COMMA);
			setState(1503);
			llvmType(0);
			setState(1504);
			constant();
			setState(1505);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FDivExprContext extends ParserRuleContext {
		public TerminalNode FDIV() { return getToken(LLVMParser.FDIV, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public FDivExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fDivExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFDivExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFDivExpr(this);
		}
	}

	public final FDivExprContext fDivExpr() throws RecognitionException {
		FDivExprContext _localctx = new FDivExprContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_fDivExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1507);
			match(FDIV);
			setState(1508);
			match(LPAREN);
			setState(1509);
			llvmType(0);
			setState(1510);
			constant();
			setState(1511);
			match(COMMA);
			setState(1512);
			llvmType(0);
			setState(1513);
			constant();
			setState(1514);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class URemExprContext extends ParserRuleContext {
		public TerminalNode UREM() { return getToken(LLVMParser.UREM, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public URemExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uRemExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterURemExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitURemExpr(this);
		}
	}

	public final URemExprContext uRemExpr() throws RecognitionException {
		URemExprContext _localctx = new URemExprContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_uRemExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1516);
			match(UREM);
			setState(1517);
			match(LPAREN);
			setState(1518);
			llvmType(0);
			setState(1519);
			constant();
			setState(1520);
			match(COMMA);
			setState(1521);
			llvmType(0);
			setState(1522);
			constant();
			setState(1523);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SRemExprContext extends ParserRuleContext {
		public TerminalNode SREM() { return getToken(LLVMParser.SREM, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public SRemExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sRemExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSRemExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSRemExpr(this);
		}
	}

	public final SRemExprContext sRemExpr() throws RecognitionException {
		SRemExprContext _localctx = new SRemExprContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_sRemExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1525);
			match(SREM);
			setState(1526);
			match(LPAREN);
			setState(1527);
			llvmType(0);
			setState(1528);
			constant();
			setState(1529);
			match(COMMA);
			setState(1530);
			llvmType(0);
			setState(1531);
			constant();
			setState(1532);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FRemExprContext extends ParserRuleContext {
		public TerminalNode FREM() { return getToken(LLVMParser.FREM, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public FRemExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fRemExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFRemExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFRemExpr(this);
		}
	}

	public final FRemExprContext fRemExpr() throws RecognitionException {
		FRemExprContext _localctx = new FRemExprContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_fRemExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1534);
			match(FREM);
			setState(1535);
			match(LPAREN);
			setState(1536);
			llvmType(0);
			setState(1537);
			constant();
			setState(1538);
			match(COMMA);
			setState(1539);
			llvmType(0);
			setState(1540);
			constant();
			setState(1541);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShlExprContext extends ParserRuleContext {
		public TerminalNode SHL() { return getToken(LLVMParser.SHL, 0); }
		public OverflowFlagsContext overflowFlags() {
			return getRuleContext(OverflowFlagsContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public ShlExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shlExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterShlExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitShlExpr(this);
		}
	}

	public final ShlExprContext shlExpr() throws RecognitionException {
		ShlExprContext _localctx = new ShlExprContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_shlExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1543);
			match(SHL);
			setState(1544);
			overflowFlags();
			setState(1545);
			match(LPAREN);
			setState(1546);
			llvmType(0);
			setState(1547);
			constant();
			setState(1548);
			match(COMMA);
			setState(1549);
			llvmType(0);
			setState(1550);
			constant();
			setState(1551);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LShrExprContext extends ParserRuleContext {
		public TerminalNode LSHR() { return getToken(LLVMParser.LSHR, 0); }
		public OptExactContext optExact() {
			return getRuleContext(OptExactContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public LShrExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lShrExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterLShrExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitLShrExpr(this);
		}
	}

	public final LShrExprContext lShrExpr() throws RecognitionException {
		LShrExprContext _localctx = new LShrExprContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_lShrExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1553);
			match(LSHR);
			setState(1554);
			optExact();
			setState(1555);
			match(LPAREN);
			setState(1556);
			llvmType(0);
			setState(1557);
			constant();
			setState(1558);
			match(COMMA);
			setState(1559);
			llvmType(0);
			setState(1560);
			constant();
			setState(1561);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AshrExprContext extends ParserRuleContext {
		public TerminalNode ASHR() { return getToken(LLVMParser.ASHR, 0); }
		public OptExactContext optExact() {
			return getRuleContext(OptExactContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public AshrExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ashrExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAshrExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAshrExpr(this);
		}
	}

	public final AshrExprContext ashrExpr() throws RecognitionException {
		AshrExprContext _localctx = new AshrExprContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_ashrExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1563);
			match(ASHR);
			setState(1564);
			optExact();
			setState(1565);
			match(LPAREN);
			setState(1566);
			llvmType(0);
			setState(1567);
			constant();
			setState(1568);
			match(COMMA);
			setState(1569);
			llvmType(0);
			setState(1570);
			constant();
			setState(1571);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AndExprContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(LLVMParser.AND, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public AndExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_andExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAndExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAndExpr(this);
		}
	}

	public final AndExprContext andExpr() throws RecognitionException {
		AndExprContext _localctx = new AndExprContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_andExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1573);
			match(AND);
			setState(1574);
			match(LPAREN);
			setState(1575);
			llvmType(0);
			setState(1576);
			constant();
			setState(1577);
			match(COMMA);
			setState(1578);
			llvmType(0);
			setState(1579);
			constant();
			setState(1580);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrExprContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(LLVMParser.OR, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public OrExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOrExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOrExpr(this);
		}
	}

	public final OrExprContext orExpr() throws RecognitionException {
		OrExprContext _localctx = new OrExprContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_orExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1582);
			match(OR);
			setState(1583);
			match(LPAREN);
			setState(1584);
			llvmType(0);
			setState(1585);
			constant();
			setState(1586);
			match(COMMA);
			setState(1587);
			llvmType(0);
			setState(1588);
			constant();
			setState(1589);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XorExprContext extends ParserRuleContext {
		public TerminalNode XOR() { return getToken(LLVMParser.XOR, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public XorExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xorExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterXorExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitXorExpr(this);
		}
	}

	public final XorExprContext xorExpr() throws RecognitionException {
		XorExprContext _localctx = new XorExprContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_xorExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1591);
			match(XOR);
			setState(1592);
			match(LPAREN);
			setState(1593);
			llvmType(0);
			setState(1594);
			constant();
			setState(1595);
			match(COMMA);
			setState(1596);
			llvmType(0);
			setState(1597);
			constant();
			setState(1598);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtractElementExprContext extends ParserRuleContext {
		public TerminalNode EXTRACTELEMENT() { return getToken(LLVMParser.EXTRACTELEMENT, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public ExtractElementExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractElementExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterExtractElementExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitExtractElementExpr(this);
		}
	}

	public final ExtractElementExprContext extractElementExpr() throws RecognitionException {
		ExtractElementExprContext _localctx = new ExtractElementExprContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_extractElementExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1600);
			match(EXTRACTELEMENT);
			setState(1601);
			match(LPAREN);
			setState(1602);
			llvmType(0);
			setState(1603);
			constant();
			setState(1604);
			match(COMMA);
			setState(1605);
			llvmType(0);
			setState(1606);
			constant();
			setState(1607);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertElementExprContext extends ParserRuleContext {
		public TerminalNode INSERTELEMENT() { return getToken(LLVMParser.INSERTELEMENT, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(LLVMParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(LLVMParser.COMMA, i);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public InsertElementExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertElementExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterInsertElementExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitInsertElementExpr(this);
		}
	}

	public final InsertElementExprContext insertElementExpr() throws RecognitionException {
		InsertElementExprContext _localctx = new InsertElementExprContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_insertElementExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1609);
			match(INSERTELEMENT);
			setState(1610);
			match(LPAREN);
			setState(1611);
			llvmType(0);
			setState(1612);
			constant();
			setState(1613);
			match(COMMA);
			setState(1614);
			llvmType(0);
			setState(1615);
			constant();
			setState(1616);
			match(COMMA);
			setState(1617);
			llvmType(0);
			setState(1618);
			constant();
			setState(1619);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShuffleVectorExprContext extends ParserRuleContext {
		public TerminalNode SHUFFLEVECTOR() { return getToken(LLVMParser.SHUFFLEVECTOR, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(LLVMParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(LLVMParser.COMMA, i);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public ShuffleVectorExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shuffleVectorExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterShuffleVectorExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitShuffleVectorExpr(this);
		}
	}

	public final ShuffleVectorExprContext shuffleVectorExpr() throws RecognitionException {
		ShuffleVectorExprContext _localctx = new ShuffleVectorExprContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_shuffleVectorExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1621);
			match(SHUFFLEVECTOR);
			setState(1622);
			match(LPAREN);
			setState(1623);
			llvmType(0);
			setState(1624);
			constant();
			setState(1625);
			match(COMMA);
			setState(1626);
			llvmType(0);
			setState(1627);
			constant();
			setState(1628);
			match(COMMA);
			setState(1629);
			llvmType(0);
			setState(1630);
			constant();
			setState(1631);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtractValueExprContext extends ParserRuleContext {
		public TerminalNode EXTRACTVALUE() { return getToken(LLVMParser.EXTRACTVALUE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public IndicesContext indices() {
			return getRuleContext(IndicesContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public ExtractValueExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractValueExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterExtractValueExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitExtractValueExpr(this);
		}
	}

	public final ExtractValueExprContext extractValueExpr() throws RecognitionException {
		ExtractValueExprContext _localctx = new ExtractValueExprContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_extractValueExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1633);
			match(EXTRACTVALUE);
			setState(1634);
			match(LPAREN);
			setState(1635);
			llvmType(0);
			setState(1636);
			constant();
			setState(1637);
			indices();
			setState(1638);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertValueExprContext extends ParserRuleContext {
		public TerminalNode INSERTVALUE() { return getToken(LLVMParser.INSERTVALUE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public IndicesContext indices() {
			return getRuleContext(IndicesContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public InsertValueExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertValueExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterInsertValueExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitInsertValueExpr(this);
		}
	}

	public final InsertValueExprContext insertValueExpr() throws RecognitionException {
		InsertValueExprContext _localctx = new InsertValueExprContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_insertValueExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1640);
			match(INSERTVALUE);
			setState(1641);
			match(LPAREN);
			setState(1642);
			llvmType(0);
			setState(1643);
			constant();
			setState(1644);
			match(COMMA);
			setState(1645);
			llvmType(0);
			setState(1646);
			constant();
			setState(1647);
			indices();
			setState(1648);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GetElementPtrExprContext extends ParserRuleContext {
		public TerminalNode GETELEMENTPTR() { return getToken(LLVMParser.GETELEMENTPTR, 0); }
		public OptInBoundsContext optInBounds() {
			return getRuleContext(OptInBoundsContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(LLVMParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(LLVMParser.COMMA, i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public GepConstIndicesContext gepConstIndices() {
			return getRuleContext(GepConstIndicesContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public GetElementPtrExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getElementPtrExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterGetElementPtrExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitGetElementPtrExpr(this);
		}
	}

	public final GetElementPtrExprContext getElementPtrExpr() throws RecognitionException {
		GetElementPtrExprContext _localctx = new GetElementPtrExprContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_getElementPtrExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1650);
			match(GETELEMENTPTR);
			setState(1651);
			optInBounds();
			setState(1652);
			match(LPAREN);
			setState(1653);
			llvmType(0);
			setState(1654);
			match(COMMA);
			setState(1655);
			llvmType(0);
			setState(1656);
			constant();
			setState(1657);
			match(COMMA);
			setState(1658);
			gepConstIndices();
			setState(1659);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GepConstIndicesContext extends ParserRuleContext {
		public GepConstIndexListContext gepConstIndexList() {
			return getRuleContext(GepConstIndexListContext.class,0);
		}
		public GepConstIndicesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gepConstIndices; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterGepConstIndices(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitGepConstIndices(this);
		}
	}

	public final GepConstIndicesContext gepConstIndices() throws RecognitionException {
		GepConstIndicesContext _localctx = new GepConstIndicesContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_gepConstIndices);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1662);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LBRACK) | (1L << LBRACE))) != 0) || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (DOUBLE - 126)) | (1L << (FLOAT - 126)) | (1L << (FP128 - 126)) | (1L << (HALF - 126)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (INRANGE - 195)) | (1L << (LABEL - 195)) | (1L << (METADATA - 195)))) != 0) || _la==PPC_FP128 || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (TOKEN - 351)) | (1L << (VOID - 351)) | (1L << (X86_FP80 - 351)) | (1L << (X86_MMX - 351)))) != 0) || _la==INT_TYPE || _la==LOCAL_IDENT) {
				{
				setState(1661);
				gepConstIndexList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GepConstIndexListContext extends ParserRuleContext {
		public GepConstIndexContext gepConstIndex() {
			return getRuleContext(GepConstIndexContext.class,0);
		}
		public GepConstIndexListContext gepConstIndexList() {
			return getRuleContext(GepConstIndexListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public GepConstIndexListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gepConstIndexList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterGepConstIndexList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitGepConstIndexList(this);
		}
	}

	public final GepConstIndexListContext gepConstIndexList() throws RecognitionException {
		return gepConstIndexList(0);
	}

	private GepConstIndexListContext gepConstIndexList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		GepConstIndexListContext _localctx = new GepConstIndexListContext(_ctx, _parentState);
		GepConstIndexListContext _prevctx = _localctx;
		int _startState = 222;
		enterRecursionRule(_localctx, 222, RULE_gepConstIndexList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1665);
			gepConstIndex();
			}
			_ctx.stop = _input.LT(-1);
			setState(1672);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new GepConstIndexListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_gepConstIndexList);
					setState(1667);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1668);
					match(COMMA);
					setState(1669);
					gepConstIndex();
					}
					} 
				}
				setState(1674);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class GepConstIndexContext extends ParserRuleContext {
		public OptInrangeContext optInrange() {
			return getRuleContext(OptInrangeContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public GepConstIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gepConstIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterGepConstIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitGepConstIndex(this);
		}
	}

	public final GepConstIndexContext gepConstIndex() throws RecognitionException {
		GepConstIndexContext _localctx = new GepConstIndexContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_gepConstIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1675);
			optInrange();
			setState(1676);
			llvmType(0);
			setState(1677);
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptInrangeContext extends ParserRuleContext {
		public TerminalNode INRANGE() { return getToken(LLVMParser.INRANGE, 0); }
		public OptInrangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optInrange; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptInrange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptInrange(this);
		}
	}

	public final OptInrangeContext optInrange() throws RecognitionException {
		OptInrangeContext _localctx = new OptInrangeContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_optInrange);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1680);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INRANGE) {
				{
				setState(1679);
				match(INRANGE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncExprContext extends ParserRuleContext {
		public TerminalNode TRUNC() { return getToken(LLVMParser.TRUNC, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public TruncExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTruncExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTruncExpr(this);
		}
	}

	public final TruncExprContext truncExpr() throws RecognitionException {
		TruncExprContext _localctx = new TruncExprContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_truncExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1682);
			match(TRUNC);
			setState(1683);
			match(LPAREN);
			setState(1684);
			llvmType(0);
			setState(1685);
			constant();
			setState(1686);
			match(TO);
			setState(1687);
			llvmType(0);
			setState(1688);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ZExtExprContext extends ParserRuleContext {
		public TerminalNode ZEXT() { return getToken(LLVMParser.ZEXT, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public ZExtExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zExtExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterZExtExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitZExtExpr(this);
		}
	}

	public final ZExtExprContext zExtExpr() throws RecognitionException {
		ZExtExprContext _localctx = new ZExtExprContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_zExtExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1690);
			match(ZEXT);
			setState(1691);
			match(LPAREN);
			setState(1692);
			llvmType(0);
			setState(1693);
			constant();
			setState(1694);
			match(TO);
			setState(1695);
			llvmType(0);
			setState(1696);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SExtExprContext extends ParserRuleContext {
		public TerminalNode SEXT() { return getToken(LLVMParser.SEXT, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public SExtExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sExtExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSExtExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSExtExpr(this);
		}
	}

	public final SExtExprContext sExtExpr() throws RecognitionException {
		SExtExprContext _localctx = new SExtExprContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_sExtExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1698);
			match(SEXT);
			setState(1699);
			match(LPAREN);
			setState(1700);
			llvmType(0);
			setState(1701);
			constant();
			setState(1702);
			match(TO);
			setState(1703);
			llvmType(0);
			setState(1704);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FPTruncExprContext extends ParserRuleContext {
		public TerminalNode FPTRUNC() { return getToken(LLVMParser.FPTRUNC, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public FPTruncExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fPTruncExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFPTruncExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFPTruncExpr(this);
		}
	}

	public final FPTruncExprContext fPTruncExpr() throws RecognitionException {
		FPTruncExprContext _localctx = new FPTruncExprContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_fPTruncExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1706);
			match(FPTRUNC);
			setState(1707);
			match(LPAREN);
			setState(1708);
			llvmType(0);
			setState(1709);
			constant();
			setState(1710);
			match(TO);
			setState(1711);
			llvmType(0);
			setState(1712);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FpExtExprContext extends ParserRuleContext {
		public TerminalNode FPEXT() { return getToken(LLVMParser.FPEXT, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public FpExtExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fpExtExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFpExtExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFpExtExpr(this);
		}
	}

	public final FpExtExprContext fpExtExpr() throws RecognitionException {
		FpExtExprContext _localctx = new FpExtExprContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_fpExtExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1714);
			match(FPEXT);
			setState(1715);
			match(LPAREN);
			setState(1716);
			llvmType(0);
			setState(1717);
			constant();
			setState(1718);
			match(TO);
			setState(1719);
			llvmType(0);
			setState(1720);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FpToUIExprContext extends ParserRuleContext {
		public TerminalNode FPTOUI() { return getToken(LLVMParser.FPTOUI, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public FpToUIExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fpToUIExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFpToUIExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFpToUIExpr(this);
		}
	}

	public final FpToUIExprContext fpToUIExpr() throws RecognitionException {
		FpToUIExprContext _localctx = new FpToUIExprContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_fpToUIExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1722);
			match(FPTOUI);
			setState(1723);
			match(LPAREN);
			setState(1724);
			llvmType(0);
			setState(1725);
			constant();
			setState(1726);
			match(TO);
			setState(1727);
			llvmType(0);
			setState(1728);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FpToSIExprContext extends ParserRuleContext {
		public TerminalNode FPTOSI() { return getToken(LLVMParser.FPTOSI, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public FpToSIExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fpToSIExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFpToSIExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFpToSIExpr(this);
		}
	}

	public final FpToSIExprContext fpToSIExpr() throws RecognitionException {
		FpToSIExprContext _localctx = new FpToSIExprContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_fpToSIExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1730);
			match(FPTOSI);
			setState(1731);
			match(LPAREN);
			setState(1732);
			llvmType(0);
			setState(1733);
			constant();
			setState(1734);
			match(TO);
			setState(1735);
			llvmType(0);
			setState(1736);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UiToFPExprContext extends ParserRuleContext {
		public TerminalNode UITOFP() { return getToken(LLVMParser.UITOFP, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public UiToFPExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uiToFPExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterUiToFPExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitUiToFPExpr(this);
		}
	}

	public final UiToFPExprContext uiToFPExpr() throws RecognitionException {
		UiToFPExprContext _localctx = new UiToFPExprContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_uiToFPExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1738);
			match(UITOFP);
			setState(1739);
			match(LPAREN);
			setState(1740);
			llvmType(0);
			setState(1741);
			constant();
			setState(1742);
			match(TO);
			setState(1743);
			llvmType(0);
			setState(1744);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SiToFPExprContext extends ParserRuleContext {
		public TerminalNode SITOFP() { return getToken(LLVMParser.SITOFP, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public SiToFPExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_siToFPExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSiToFPExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSiToFPExpr(this);
		}
	}

	public final SiToFPExprContext siToFPExpr() throws RecognitionException {
		SiToFPExprContext _localctx = new SiToFPExprContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_siToFPExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1746);
			match(SITOFP);
			setState(1747);
			match(LPAREN);
			setState(1748);
			llvmType(0);
			setState(1749);
			constant();
			setState(1750);
			match(TO);
			setState(1751);
			llvmType(0);
			setState(1752);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PtrToIntExprContext extends ParserRuleContext {
		public TerminalNode PTRTOINT() { return getToken(LLVMParser.PTRTOINT, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public PtrToIntExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ptrToIntExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterPtrToIntExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitPtrToIntExpr(this);
		}
	}

	public final PtrToIntExprContext ptrToIntExpr() throws RecognitionException {
		PtrToIntExprContext _localctx = new PtrToIntExprContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_ptrToIntExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1754);
			match(PTRTOINT);
			setState(1755);
			match(LPAREN);
			setState(1756);
			llvmType(0);
			setState(1757);
			constant();
			setState(1758);
			match(TO);
			setState(1759);
			llvmType(0);
			setState(1760);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntToPtrExprContext extends ParserRuleContext {
		public TerminalNode INTTOPTR() { return getToken(LLVMParser.INTTOPTR, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public IntToPtrExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intToPtrExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterIntToPtrExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitIntToPtrExpr(this);
		}
	}

	public final IntToPtrExprContext intToPtrExpr() throws RecognitionException {
		IntToPtrExprContext _localctx = new IntToPtrExprContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_intToPtrExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1762);
			match(INTTOPTR);
			setState(1763);
			match(LPAREN);
			setState(1764);
			llvmType(0);
			setState(1765);
			constant();
			setState(1766);
			match(TO);
			setState(1767);
			llvmType(0);
			setState(1768);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitCastExprContext extends ParserRuleContext {
		public TerminalNode BITCAST() { return getToken(LLVMParser.BITCAST, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public BitCastExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitCastExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterBitCastExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitBitCastExpr(this);
		}
	}

	public final BitCastExprContext bitCastExpr() throws RecognitionException {
		BitCastExprContext _localctx = new BitCastExprContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_bitCastExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1770);
			match(BITCAST);
			setState(1771);
			match(LPAREN);
			setState(1772);
			llvmType(0);
			setState(1773);
			constant();
			setState(1774);
			match(TO);
			setState(1775);
			llvmType(0);
			setState(1776);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddrSpaceCastExprContext extends ParserRuleContext {
		public TerminalNode ADDRSPACECAST() { return getToken(LLVMParser.ADDRSPACECAST, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public AddrSpaceCastExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addrSpaceCastExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAddrSpaceCastExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAddrSpaceCastExpr(this);
		}
	}

	public final AddrSpaceCastExprContext addrSpaceCastExpr() throws RecognitionException {
		AddrSpaceCastExprContext _localctx = new AddrSpaceCastExprContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_addrSpaceCastExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1778);
			match(ADDRSPACECAST);
			setState(1779);
			match(LPAREN);
			setState(1780);
			llvmType(0);
			setState(1781);
			constant();
			setState(1782);
			match(TO);
			setState(1783);
			llvmType(0);
			setState(1784);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ICmpExprContext extends ParserRuleContext {
		public TerminalNode ICMP() { return getToken(LLVMParser.ICMP, 0); }
		public IPredContext iPred() {
			return getRuleContext(IPredContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public ICmpExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iCmpExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterICmpExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitICmpExpr(this);
		}
	}

	public final ICmpExprContext iCmpExpr() throws RecognitionException {
		ICmpExprContext _localctx = new ICmpExprContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_iCmpExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1786);
			match(ICMP);
			setState(1787);
			iPred();
			setState(1788);
			match(LPAREN);
			setState(1789);
			llvmType(0);
			setState(1790);
			constant();
			setState(1791);
			match(COMMA);
			setState(1792);
			llvmType(0);
			setState(1793);
			constant();
			setState(1794);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FCmpExprContext extends ParserRuleContext {
		public TerminalNode FCMP() { return getToken(LLVMParser.FCMP, 0); }
		public FpredContext fpred() {
			return getRuleContext(FpredContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public FCmpExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fCmpExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFCmpExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFCmpExpr(this);
		}
	}

	public final FCmpExprContext fCmpExpr() throws RecognitionException {
		FCmpExprContext _localctx = new FCmpExprContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_fCmpExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1796);
			match(FCMP);
			setState(1797);
			fpred();
			setState(1798);
			match(LPAREN);
			setState(1799);
			llvmType(0);
			setState(1800);
			constant();
			setState(1801);
			match(COMMA);
			setState(1802);
			llvmType(0);
			setState(1803);
			constant();
			setState(1804);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectExprContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(LLVMParser.SELECT, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(LLVMParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(LLVMParser.COMMA, i);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public SelectExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSelectExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSelectExpr(this);
		}
	}

	public final SelectExprContext selectExpr() throws RecognitionException {
		SelectExprContext _localctx = new SelectExprContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_selectExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1806);
			match(SELECT);
			setState(1807);
			match(LPAREN);
			setState(1808);
			llvmType(0);
			setState(1809);
			constant();
			setState(1810);
			match(COMMA);
			setState(1811);
			llvmType(0);
			setState(1812);
			constant();
			setState(1813);
			match(COMMA);
			setState(1814);
			llvmType(0);
			setState(1815);
			constant();
			setState(1816);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BasicBlockListContext extends ParserRuleContext {
		public BasicBlockContext basicBlock() {
			return getRuleContext(BasicBlockContext.class,0);
		}
		public BasicBlockListContext basicBlockList() {
			return getRuleContext(BasicBlockListContext.class,0);
		}
		public BasicBlockListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_basicBlockList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterBasicBlockList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitBasicBlockList(this);
		}
	}

	public final BasicBlockListContext basicBlockList() throws RecognitionException {
		return basicBlockList(0);
	}

	private BasicBlockListContext basicBlockList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BasicBlockListContext _localctx = new BasicBlockListContext(_ctx, _parentState);
		BasicBlockListContext _prevctx = _localctx;
		int _startState = 260;
		enterRecursionRule(_localctx, 260, RULE_basicBlockList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1819);
			basicBlock();
			}
			_ctx.stop = _input.LT(-1);
			setState(1825);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,54,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BasicBlockListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_basicBlockList);
					setState(1821);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1822);
					basicBlock();
					}
					} 
				}
				setState(1827);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,54,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class BasicBlockContext extends ParserRuleContext {
		public OptLabelIdentContext optLabelIdent() {
			return getRuleContext(OptLabelIdentContext.class,0);
		}
		public InstructionsContext instructions() {
			return getRuleContext(InstructionsContext.class,0);
		}
		public TerminatorContext terminator() {
			return getRuleContext(TerminatorContext.class,0);
		}
		public BasicBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_basicBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterBasicBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitBasicBlock(this);
		}
	}

	public final BasicBlockContext basicBlock() throws RecognitionException {
		BasicBlockContext _localctx = new BasicBlockContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_basicBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1828);
			optLabelIdent();
			setState(1829);
			instructions();
			setState(1830);
			terminator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptLabelIdentContext extends ParserRuleContext {
		public LabelIdentContext labelIdent() {
			return getRuleContext(LabelIdentContext.class,0);
		}
		public OptLabelIdentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optLabelIdent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptLabelIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptLabelIdent(this);
		}
	}

	public final OptLabelIdentContext optLabelIdent() throws RecognitionException {
		OptLabelIdentContext _localctx = new OptLabelIdentContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_optLabelIdent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1833);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LABEL_IDENT) {
				{
				setState(1832);
				labelIdent();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstructionsContext extends ParserRuleContext {
		public InstructionListContext instructionList() {
			return getRuleContext(InstructionListContext.class,0);
		}
		public InstructionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_instructions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterInstructions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitInstructions(this);
		}
	}

	public final InstructionsContext instructions() throws RecognitionException {
		InstructionsContext _localctx = new InstructionsContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_instructions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1836);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (ADD - 17)) | (1L << (ADDRSPACECAST - 17)) | (1L << (ALLOCA - 17)) | (1L << (AND - 17)) | (1L << (ASHR - 17)) | (1L << (ATOMICRMW - 17)) | (1L << (BITCAST - 17)) | (1L << (CALL - 17)) | (1L << (CATCHPAD - 17)) | (1L << (CLEANUPPAD - 17)) | (1L << (CMPXCHG - 17)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (EXTRACTELEMENT - 144)) | (1L << (EXTRACTVALUE - 144)) | (1L << (FADD - 144)) | (1L << (FCMP - 144)) | (1L << (FDIV - 144)) | (1L << (FENCE - 144)) | (1L << (FMUL - 144)) | (1L << (FPEXT - 144)) | (1L << (FPTOSI - 144)) | (1L << (FPTOUI - 144)) | (1L << (FPTRUNC - 144)) | (1L << (FREM - 144)) | (1L << (FSUB - 144)) | (1L << (GETELEMENTPTR - 144)) | (1L << (ICMP - 144)) | (1L << (INSERTELEMENT - 144)) | (1L << (INSERTVALUE - 144)) | (1L << (INTTOPTR - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (LANDINGPAD - 211)) | (1L << (LOAD - 211)) | (1L << (LSHR - 211)) | (1L << (MUL - 211)) | (1L << (MUSTTAIL - 211)) | (1L << (NOTAIL - 211)) | (1L << (OR - 211)))) != 0) || ((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & ((1L << (PHI - 277)) | (1L << (PTRTOINT - 277)) | (1L << (SDIV - 277)) | (1L << (SELECT - 277)) | (1L << (SEXT - 277)) | (1L << (SHL - 277)) | (1L << (SHUFFLEVECTOR - 277)) | (1L << (SITOFP - 277)) | (1L << (SREM - 277)) | (1L << (STORE - 277)) | (1L << (SUB - 277)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (TAIL - 344)) | (1L << (TRUNC - 344)) | (1L << (UDIV - 344)) | (1L << (UITOFP - 344)) | (1L << (UREM - 344)) | (1L << (VA_ARG - 344)) | (1L << (XOR - 344)) | (1L << (ZEXT - 344)))) != 0) || _la==LOCAL_IDENT) {
				{
				setState(1835);
				instructionList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstructionListContext extends ParserRuleContext {
		public InstructionContext instruction() {
			return getRuleContext(InstructionContext.class,0);
		}
		public InstructionListContext instructionList() {
			return getRuleContext(InstructionListContext.class,0);
		}
		public InstructionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_instructionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterInstructionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitInstructionList(this);
		}
	}

	public final InstructionListContext instructionList() throws RecognitionException {
		return instructionList(0);
	}

	private InstructionListContext instructionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		InstructionListContext _localctx = new InstructionListContext(_ctx, _parentState);
		InstructionListContext _prevctx = _localctx;
		int _startState = 268;
		enterRecursionRule(_localctx, 268, RULE_instructionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1839);
			instruction();
			}
			_ctx.stop = _input.LT(-1);
			setState(1845);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,57,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InstructionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_instructionList);
					setState(1841);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1842);
					instruction();
					}
					} 
				}
				setState(1847);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,57,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class InstructionContext extends ParserRuleContext {
		public StoreInstContext storeInst() {
			return getRuleContext(StoreInstContext.class,0);
		}
		public FenceInstContext fenceInst() {
			return getRuleContext(FenceInstContext.class,0);
		}
		public CmpXchgInstContext cmpXchgInst() {
			return getRuleContext(CmpXchgInstContext.class,0);
		}
		public AtomicRMWInstContext atomicRMWInst() {
			return getRuleContext(AtomicRMWInstContext.class,0);
		}
		public LocalIdentContext localIdent() {
			return getRuleContext(LocalIdentContext.class,0);
		}
		public TerminalNode EQSIGN() { return getToken(LLVMParser.EQSIGN, 0); }
		public ValueInstructionContext valueInstruction() {
			return getRuleContext(ValueInstructionContext.class,0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_instruction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterInstruction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitInstruction(this);
		}
	}

	public final InstructionContext instruction() throws RecognitionException {
		InstructionContext _localctx = new InstructionContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_instruction);
		try {
			setState(1857);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1848);
				storeInst();
				}
				break;
			case FENCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1849);
				fenceInst();
				}
				break;
			case CMPXCHG:
				enterOuterAlt(_localctx, 3);
				{
				setState(1850);
				cmpXchgInst();
				}
				break;
			case ATOMICRMW:
				enterOuterAlt(_localctx, 4);
				{
				setState(1851);
				atomicRMWInst();
				}
				break;
			case LOCAL_IDENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1852);
				localIdent();
				setState(1853);
				match(EQSIGN);
				setState(1854);
				valueInstruction();
				}
				break;
			case ADD:
			case ADDRSPACECAST:
			case ALLOCA:
			case AND:
			case ASHR:
			case BITCAST:
			case CALL:
			case CATCHPAD:
			case CLEANUPPAD:
			case EXTRACTELEMENT:
			case EXTRACTVALUE:
			case FADD:
			case FCMP:
			case FDIV:
			case FMUL:
			case FPEXT:
			case FPTOSI:
			case FPTOUI:
			case FPTRUNC:
			case FREM:
			case FSUB:
			case GETELEMENTPTR:
			case ICMP:
			case INSERTELEMENT:
			case INSERTVALUE:
			case INTTOPTR:
			case LANDINGPAD:
			case LOAD:
			case LSHR:
			case MUL:
			case MUSTTAIL:
			case NOTAIL:
			case OR:
			case PHI:
			case PTRTOINT:
			case SDIV:
			case SELECT:
			case SEXT:
			case SHL:
			case SHUFFLEVECTOR:
			case SITOFP:
			case SREM:
			case SUB:
			case TAIL:
			case TRUNC:
			case UDIV:
			case UITOFP:
			case UREM:
			case VA_ARG:
			case XOR:
			case ZEXT:
				enterOuterAlt(_localctx, 6);
				{
				setState(1856);
				valueInstruction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValueInstructionContext extends ParserRuleContext {
		public AddInstContext addInst() {
			return getRuleContext(AddInstContext.class,0);
		}
		public FAddInstContext fAddInst() {
			return getRuleContext(FAddInstContext.class,0);
		}
		public SubInstContext subInst() {
			return getRuleContext(SubInstContext.class,0);
		}
		public FSubInstContext fSubInst() {
			return getRuleContext(FSubInstContext.class,0);
		}
		public MulInstContext mulInst() {
			return getRuleContext(MulInstContext.class,0);
		}
		public FMulInstContext fMulInst() {
			return getRuleContext(FMulInstContext.class,0);
		}
		public UDivInstContext uDivInst() {
			return getRuleContext(UDivInstContext.class,0);
		}
		public SDivInstContext sDivInst() {
			return getRuleContext(SDivInstContext.class,0);
		}
		public FDivInstContext fDivInst() {
			return getRuleContext(FDivInstContext.class,0);
		}
		public URemInstContext uRemInst() {
			return getRuleContext(URemInstContext.class,0);
		}
		public SRemInstContext sRemInst() {
			return getRuleContext(SRemInstContext.class,0);
		}
		public FRemInstContext fRemInst() {
			return getRuleContext(FRemInstContext.class,0);
		}
		public ShlInstContext shlInst() {
			return getRuleContext(ShlInstContext.class,0);
		}
		public LshrInstContext lshrInst() {
			return getRuleContext(LshrInstContext.class,0);
		}
		public AshrInstContext ashrInst() {
			return getRuleContext(AshrInstContext.class,0);
		}
		public AndInstContext andInst() {
			return getRuleContext(AndInstContext.class,0);
		}
		public OrInstContext orInst() {
			return getRuleContext(OrInstContext.class,0);
		}
		public XorInstContext xorInst() {
			return getRuleContext(XorInstContext.class,0);
		}
		public ExtractElementInstContext extractElementInst() {
			return getRuleContext(ExtractElementInstContext.class,0);
		}
		public InsertElementInstContext insertElementInst() {
			return getRuleContext(InsertElementInstContext.class,0);
		}
		public ShuffleVectorInstContext shuffleVectorInst() {
			return getRuleContext(ShuffleVectorInstContext.class,0);
		}
		public ExtractValueInstContext extractValueInst() {
			return getRuleContext(ExtractValueInstContext.class,0);
		}
		public InsertValueInstContext insertValueInst() {
			return getRuleContext(InsertValueInstContext.class,0);
		}
		public AllocaInstContext allocaInst() {
			return getRuleContext(AllocaInstContext.class,0);
		}
		public LoadInstContext loadInst() {
			return getRuleContext(LoadInstContext.class,0);
		}
		public GetElementPtrInstContext getElementPtrInst() {
			return getRuleContext(GetElementPtrInstContext.class,0);
		}
		public TruncInstContext truncInst() {
			return getRuleContext(TruncInstContext.class,0);
		}
		public ZExtInstContext zExtInst() {
			return getRuleContext(ZExtInstContext.class,0);
		}
		public SExtInstContext sExtInst() {
			return getRuleContext(SExtInstContext.class,0);
		}
		public FpTruncInstContext fpTruncInst() {
			return getRuleContext(FpTruncInstContext.class,0);
		}
		public FpExtInstContext fpExtInst() {
			return getRuleContext(FpExtInstContext.class,0);
		}
		public FpToUIInstContext fpToUIInst() {
			return getRuleContext(FpToUIInstContext.class,0);
		}
		public FpToSIInstContext fpToSIInst() {
			return getRuleContext(FpToSIInstContext.class,0);
		}
		public UiToFPInstContext uiToFPInst() {
			return getRuleContext(UiToFPInstContext.class,0);
		}
		public SiToFPInstContext siToFPInst() {
			return getRuleContext(SiToFPInstContext.class,0);
		}
		public PtrToIntInstContext ptrToIntInst() {
			return getRuleContext(PtrToIntInstContext.class,0);
		}
		public IntToPtrInstContext intToPtrInst() {
			return getRuleContext(IntToPtrInstContext.class,0);
		}
		public BitCastInstContext bitCastInst() {
			return getRuleContext(BitCastInstContext.class,0);
		}
		public AddrSpaceCastInstContext addrSpaceCastInst() {
			return getRuleContext(AddrSpaceCastInstContext.class,0);
		}
		public ICmpInstContext iCmpInst() {
			return getRuleContext(ICmpInstContext.class,0);
		}
		public FCmpInstContext fCmpInst() {
			return getRuleContext(FCmpInstContext.class,0);
		}
		public PhiInstContext phiInst() {
			return getRuleContext(PhiInstContext.class,0);
		}
		public SelectInstContext selectInst() {
			return getRuleContext(SelectInstContext.class,0);
		}
		public CallInstContext callInst() {
			return getRuleContext(CallInstContext.class,0);
		}
		public VaArgInstContext vaArgInst() {
			return getRuleContext(VaArgInstContext.class,0);
		}
		public LandingPadInstContext landingPadInst() {
			return getRuleContext(LandingPadInstContext.class,0);
		}
		public CatchPadInstContext catchPadInst() {
			return getRuleContext(CatchPadInstContext.class,0);
		}
		public CleanupPadInstContext cleanupPadInst() {
			return getRuleContext(CleanupPadInstContext.class,0);
		}
		public ValueInstructionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueInstruction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterValueInstruction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitValueInstruction(this);
		}
	}

	public final ValueInstructionContext valueInstruction() throws RecognitionException {
		ValueInstructionContext _localctx = new ValueInstructionContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_valueInstruction);
		try {
			setState(1907);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1859);
				addInst();
				}
				break;
			case FADD:
				enterOuterAlt(_localctx, 2);
				{
				setState(1860);
				fAddInst();
				}
				break;
			case SUB:
				enterOuterAlt(_localctx, 3);
				{
				setState(1861);
				subInst();
				}
				break;
			case FSUB:
				enterOuterAlt(_localctx, 4);
				{
				setState(1862);
				fSubInst();
				}
				break;
			case MUL:
				enterOuterAlt(_localctx, 5);
				{
				setState(1863);
				mulInst();
				}
				break;
			case FMUL:
				enterOuterAlt(_localctx, 6);
				{
				setState(1864);
				fMulInst();
				}
				break;
			case UDIV:
				enterOuterAlt(_localctx, 7);
				{
				setState(1865);
				uDivInst();
				}
				break;
			case SDIV:
				enterOuterAlt(_localctx, 8);
				{
				setState(1866);
				sDivInst();
				}
				break;
			case FDIV:
				enterOuterAlt(_localctx, 9);
				{
				setState(1867);
				fDivInst();
				}
				break;
			case UREM:
				enterOuterAlt(_localctx, 10);
				{
				setState(1868);
				uRemInst();
				}
				break;
			case SREM:
				enterOuterAlt(_localctx, 11);
				{
				setState(1869);
				sRemInst();
				}
				break;
			case FREM:
				enterOuterAlt(_localctx, 12);
				{
				setState(1870);
				fRemInst();
				}
				break;
			case SHL:
				enterOuterAlt(_localctx, 13);
				{
				setState(1871);
				shlInst();
				}
				break;
			case LSHR:
				enterOuterAlt(_localctx, 14);
				{
				setState(1872);
				lshrInst();
				}
				break;
			case ASHR:
				enterOuterAlt(_localctx, 15);
				{
				setState(1873);
				ashrInst();
				}
				break;
			case AND:
				enterOuterAlt(_localctx, 16);
				{
				setState(1874);
				andInst();
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 17);
				{
				setState(1875);
				orInst();
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 18);
				{
				setState(1876);
				xorInst();
				}
				break;
			case EXTRACTELEMENT:
				enterOuterAlt(_localctx, 19);
				{
				setState(1877);
				extractElementInst();
				}
				break;
			case INSERTELEMENT:
				enterOuterAlt(_localctx, 20);
				{
				setState(1878);
				insertElementInst();
				}
				break;
			case SHUFFLEVECTOR:
				enterOuterAlt(_localctx, 21);
				{
				setState(1879);
				shuffleVectorInst();
				}
				break;
			case EXTRACTVALUE:
				enterOuterAlt(_localctx, 22);
				{
				setState(1880);
				extractValueInst();
				}
				break;
			case INSERTVALUE:
				enterOuterAlt(_localctx, 23);
				{
				setState(1881);
				insertValueInst();
				}
				break;
			case ALLOCA:
				enterOuterAlt(_localctx, 24);
				{
				setState(1882);
				allocaInst();
				}
				break;
			case LOAD:
				enterOuterAlt(_localctx, 25);
				{
				setState(1883);
				loadInst();
				}
				break;
			case GETELEMENTPTR:
				enterOuterAlt(_localctx, 26);
				{
				setState(1884);
				getElementPtrInst();
				}
				break;
			case TRUNC:
				enterOuterAlt(_localctx, 27);
				{
				setState(1885);
				truncInst();
				}
				break;
			case ZEXT:
				enterOuterAlt(_localctx, 28);
				{
				setState(1886);
				zExtInst();
				}
				break;
			case SEXT:
				enterOuterAlt(_localctx, 29);
				{
				setState(1887);
				sExtInst();
				}
				break;
			case FPTRUNC:
				enterOuterAlt(_localctx, 30);
				{
				setState(1888);
				fpTruncInst();
				}
				break;
			case FPEXT:
				enterOuterAlt(_localctx, 31);
				{
				setState(1889);
				fpExtInst();
				}
				break;
			case FPTOUI:
				enterOuterAlt(_localctx, 32);
				{
				setState(1890);
				fpToUIInst();
				}
				break;
			case FPTOSI:
				enterOuterAlt(_localctx, 33);
				{
				setState(1891);
				fpToSIInst();
				}
				break;
			case UITOFP:
				enterOuterAlt(_localctx, 34);
				{
				setState(1892);
				uiToFPInst();
				}
				break;
			case SITOFP:
				enterOuterAlt(_localctx, 35);
				{
				setState(1893);
				siToFPInst();
				}
				break;
			case PTRTOINT:
				enterOuterAlt(_localctx, 36);
				{
				setState(1894);
				ptrToIntInst();
				}
				break;
			case INTTOPTR:
				enterOuterAlt(_localctx, 37);
				{
				setState(1895);
				intToPtrInst();
				}
				break;
			case BITCAST:
				enterOuterAlt(_localctx, 38);
				{
				setState(1896);
				bitCastInst();
				}
				break;
			case ADDRSPACECAST:
				enterOuterAlt(_localctx, 39);
				{
				setState(1897);
				addrSpaceCastInst();
				}
				break;
			case ICMP:
				enterOuterAlt(_localctx, 40);
				{
				setState(1898);
				iCmpInst();
				}
				break;
			case FCMP:
				enterOuterAlt(_localctx, 41);
				{
				setState(1899);
				fCmpInst();
				}
				break;
			case PHI:
				enterOuterAlt(_localctx, 42);
				{
				setState(1900);
				phiInst();
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 43);
				{
				setState(1901);
				selectInst();
				}
				break;
			case CALL:
			case MUSTTAIL:
			case NOTAIL:
			case TAIL:
				enterOuterAlt(_localctx, 44);
				{
				setState(1902);
				callInst();
				}
				break;
			case VA_ARG:
				enterOuterAlt(_localctx, 45);
				{
				setState(1903);
				vaArgInst();
				}
				break;
			case LANDINGPAD:
				enterOuterAlt(_localctx, 46);
				{
				setState(1904);
				landingPadInst();
				}
				break;
			case CATCHPAD:
				enterOuterAlt(_localctx, 47);
				{
				setState(1905);
				catchPadInst();
				}
				break;
			case CLEANUPPAD:
				enterOuterAlt(_localctx, 48);
				{
				setState(1906);
				cleanupPadInst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddInstContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(LLVMParser.ADD, 0); }
		public OverflowFlagsContext overflowFlags() {
			return getRuleContext(OverflowFlagsContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public AddInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAddInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAddInst(this);
		}
	}

	public final AddInstContext addInst() throws RecognitionException {
		AddInstContext _localctx = new AddInstContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_addInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1909);
			match(ADD);
			setState(1910);
			overflowFlags();
			setState(1911);
			llvmType(0);
			setState(1912);
			value();
			setState(1913);
			match(COMMA);
			setState(1914);
			value();
			setState(1915);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FAddInstContext extends ParserRuleContext {
		public TerminalNode FADD() { return getToken(LLVMParser.FADD, 0); }
		public FastMathFlagsContext fastMathFlags() {
			return getRuleContext(FastMathFlagsContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public FAddInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fAddInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFAddInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFAddInst(this);
		}
	}

	public final FAddInstContext fAddInst() throws RecognitionException {
		FAddInstContext _localctx = new FAddInstContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_fAddInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1917);
			match(FADD);
			setState(1918);
			fastMathFlags();
			setState(1919);
			llvmType(0);
			setState(1920);
			value();
			setState(1921);
			match(COMMA);
			setState(1922);
			value();
			setState(1923);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubInstContext extends ParserRuleContext {
		public TerminalNode SUB() { return getToken(LLVMParser.SUB, 0); }
		public OverflowFlagsContext overflowFlags() {
			return getRuleContext(OverflowFlagsContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public SubInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSubInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSubInst(this);
		}
	}

	public final SubInstContext subInst() throws RecognitionException {
		SubInstContext _localctx = new SubInstContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_subInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1925);
			match(SUB);
			setState(1926);
			overflowFlags();
			setState(1927);
			llvmType(0);
			setState(1928);
			value();
			setState(1929);
			match(COMMA);
			setState(1930);
			value();
			setState(1931);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FSubInstContext extends ParserRuleContext {
		public TerminalNode FSUB() { return getToken(LLVMParser.FSUB, 0); }
		public FastMathFlagsContext fastMathFlags() {
			return getRuleContext(FastMathFlagsContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public FSubInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fSubInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFSubInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFSubInst(this);
		}
	}

	public final FSubInstContext fSubInst() throws RecognitionException {
		FSubInstContext _localctx = new FSubInstContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_fSubInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1933);
			match(FSUB);
			setState(1934);
			fastMathFlags();
			setState(1935);
			llvmType(0);
			setState(1936);
			value();
			setState(1937);
			match(COMMA);
			setState(1938);
			value();
			setState(1939);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MulInstContext extends ParserRuleContext {
		public TerminalNode MUL() { return getToken(LLVMParser.MUL, 0); }
		public OverflowFlagsContext overflowFlags() {
			return getRuleContext(OverflowFlagsContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public MulInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mulInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMulInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMulInst(this);
		}
	}

	public final MulInstContext mulInst() throws RecognitionException {
		MulInstContext _localctx = new MulInstContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_mulInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1941);
			match(MUL);
			setState(1942);
			overflowFlags();
			setState(1943);
			llvmType(0);
			setState(1944);
			value();
			setState(1945);
			match(COMMA);
			setState(1946);
			value();
			setState(1947);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FMulInstContext extends ParserRuleContext {
		public TerminalNode FMUL() { return getToken(LLVMParser.FMUL, 0); }
		public FastMathFlagsContext fastMathFlags() {
			return getRuleContext(FastMathFlagsContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public FMulInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fMulInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFMulInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFMulInst(this);
		}
	}

	public final FMulInstContext fMulInst() throws RecognitionException {
		FMulInstContext _localctx = new FMulInstContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_fMulInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1949);
			match(FMUL);
			setState(1950);
			fastMathFlags();
			setState(1951);
			llvmType(0);
			setState(1952);
			value();
			setState(1953);
			match(COMMA);
			setState(1954);
			value();
			setState(1955);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UDivInstContext extends ParserRuleContext {
		public TerminalNode UDIV() { return getToken(LLVMParser.UDIV, 0); }
		public OptExactContext optExact() {
			return getRuleContext(OptExactContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public UDivInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uDivInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterUDivInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitUDivInst(this);
		}
	}

	public final UDivInstContext uDivInst() throws RecognitionException {
		UDivInstContext _localctx = new UDivInstContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_uDivInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1957);
			match(UDIV);
			setState(1958);
			optExact();
			setState(1959);
			llvmType(0);
			setState(1960);
			value();
			setState(1961);
			match(COMMA);
			setState(1962);
			value();
			setState(1963);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SDivInstContext extends ParserRuleContext {
		public TerminalNode SDIV() { return getToken(LLVMParser.SDIV, 0); }
		public OptExactContext optExact() {
			return getRuleContext(OptExactContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public SDivInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sDivInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSDivInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSDivInst(this);
		}
	}

	public final SDivInstContext sDivInst() throws RecognitionException {
		SDivInstContext _localctx = new SDivInstContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_sDivInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1965);
			match(SDIV);
			setState(1966);
			optExact();
			setState(1967);
			llvmType(0);
			setState(1968);
			value();
			setState(1969);
			match(COMMA);
			setState(1970);
			value();
			setState(1971);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FDivInstContext extends ParserRuleContext {
		public TerminalNode FDIV() { return getToken(LLVMParser.FDIV, 0); }
		public FastMathFlagsContext fastMathFlags() {
			return getRuleContext(FastMathFlagsContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public FDivInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fDivInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFDivInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFDivInst(this);
		}
	}

	public final FDivInstContext fDivInst() throws RecognitionException {
		FDivInstContext _localctx = new FDivInstContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_fDivInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1973);
			match(FDIV);
			setState(1974);
			fastMathFlags();
			setState(1975);
			llvmType(0);
			setState(1976);
			value();
			setState(1977);
			match(COMMA);
			setState(1978);
			value();
			setState(1979);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class URemInstContext extends ParserRuleContext {
		public TerminalNode UREM() { return getToken(LLVMParser.UREM, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public URemInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uRemInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterURemInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitURemInst(this);
		}
	}

	public final URemInstContext uRemInst() throws RecognitionException {
		URemInstContext _localctx = new URemInstContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_uRemInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1981);
			match(UREM);
			setState(1982);
			llvmType(0);
			setState(1983);
			value();
			setState(1984);
			match(COMMA);
			setState(1985);
			value();
			setState(1986);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SRemInstContext extends ParserRuleContext {
		public TerminalNode SREM() { return getToken(LLVMParser.SREM, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public SRemInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sRemInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSRemInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSRemInst(this);
		}
	}

	public final SRemInstContext sRemInst() throws RecognitionException {
		SRemInstContext _localctx = new SRemInstContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_sRemInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1988);
			match(SREM);
			setState(1989);
			llvmType(0);
			setState(1990);
			value();
			setState(1991);
			match(COMMA);
			setState(1992);
			value();
			setState(1993);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FRemInstContext extends ParserRuleContext {
		public TerminalNode FREM() { return getToken(LLVMParser.FREM, 0); }
		public FastMathFlagsContext fastMathFlags() {
			return getRuleContext(FastMathFlagsContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public FRemInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fRemInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFRemInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFRemInst(this);
		}
	}

	public final FRemInstContext fRemInst() throws RecognitionException {
		FRemInstContext _localctx = new FRemInstContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_fRemInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1995);
			match(FREM);
			setState(1996);
			fastMathFlags();
			setState(1997);
			llvmType(0);
			setState(1998);
			value();
			setState(1999);
			match(COMMA);
			setState(2000);
			value();
			setState(2001);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShlInstContext extends ParserRuleContext {
		public TerminalNode SHL() { return getToken(LLVMParser.SHL, 0); }
		public OverflowFlagsContext overflowFlags() {
			return getRuleContext(OverflowFlagsContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public ShlInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shlInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterShlInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitShlInst(this);
		}
	}

	public final ShlInstContext shlInst() throws RecognitionException {
		ShlInstContext _localctx = new ShlInstContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_shlInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2003);
			match(SHL);
			setState(2004);
			overflowFlags();
			setState(2005);
			llvmType(0);
			setState(2006);
			value();
			setState(2007);
			match(COMMA);
			setState(2008);
			value();
			setState(2009);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LshrInstContext extends ParserRuleContext {
		public TerminalNode LSHR() { return getToken(LLVMParser.LSHR, 0); }
		public OptExactContext optExact() {
			return getRuleContext(OptExactContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public LshrInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lshrInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterLshrInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitLshrInst(this);
		}
	}

	public final LshrInstContext lshrInst() throws RecognitionException {
		LshrInstContext _localctx = new LshrInstContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_lshrInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2011);
			match(LSHR);
			setState(2012);
			optExact();
			setState(2013);
			llvmType(0);
			setState(2014);
			value();
			setState(2015);
			match(COMMA);
			setState(2016);
			value();
			setState(2017);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AshrInstContext extends ParserRuleContext {
		public TerminalNode ASHR() { return getToken(LLVMParser.ASHR, 0); }
		public OptExactContext optExact() {
			return getRuleContext(OptExactContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public AshrInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ashrInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAshrInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAshrInst(this);
		}
	}

	public final AshrInstContext ashrInst() throws RecognitionException {
		AshrInstContext _localctx = new AshrInstContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_ashrInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2019);
			match(ASHR);
			setState(2020);
			optExact();
			setState(2021);
			llvmType(0);
			setState(2022);
			value();
			setState(2023);
			match(COMMA);
			setState(2024);
			value();
			setState(2025);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AndInstContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(LLVMParser.AND, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public AndInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_andInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAndInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAndInst(this);
		}
	}

	public final AndInstContext andInst() throws RecognitionException {
		AndInstContext _localctx = new AndInstContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_andInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2027);
			match(AND);
			setState(2028);
			llvmType(0);
			setState(2029);
			value();
			setState(2030);
			match(COMMA);
			setState(2031);
			value();
			setState(2032);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrInstContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(LLVMParser.OR, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public OrInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOrInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOrInst(this);
		}
	}

	public final OrInstContext orInst() throws RecognitionException {
		OrInstContext _localctx = new OrInstContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_orInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2034);
			match(OR);
			setState(2035);
			llvmType(0);
			setState(2036);
			value();
			setState(2037);
			match(COMMA);
			setState(2038);
			value();
			setState(2039);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XorInstContext extends ParserRuleContext {
		public TerminalNode XOR() { return getToken(LLVMParser.XOR, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public XorInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xorInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterXorInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitXorInst(this);
		}
	}

	public final XorInstContext xorInst() throws RecognitionException {
		XorInstContext _localctx = new XorInstContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_xorInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2041);
			match(XOR);
			setState(2042);
			llvmType(0);
			setState(2043);
			value();
			setState(2044);
			match(COMMA);
			setState(2045);
			value();
			setState(2046);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtractElementInstContext extends ParserRuleContext {
		public TerminalNode EXTRACTELEMENT() { return getToken(LLVMParser.EXTRACTELEMENT, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public ExtractElementInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractElementInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterExtractElementInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitExtractElementInst(this);
		}
	}

	public final ExtractElementInstContext extractElementInst() throws RecognitionException {
		ExtractElementInstContext _localctx = new ExtractElementInstContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_extractElementInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2048);
			match(EXTRACTELEMENT);
			setState(2049);
			llvmType(0);
			setState(2050);
			value();
			setState(2051);
			match(COMMA);
			setState(2052);
			llvmType(0);
			setState(2053);
			value();
			setState(2054);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertElementInstContext extends ParserRuleContext {
		public TerminalNode INSERTELEMENT() { return getToken(LLVMParser.INSERTELEMENT, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(LLVMParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(LLVMParser.COMMA, i);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public InsertElementInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertElementInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterInsertElementInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitInsertElementInst(this);
		}
	}

	public final InsertElementInstContext insertElementInst() throws RecognitionException {
		InsertElementInstContext _localctx = new InsertElementInstContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_insertElementInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2056);
			match(INSERTELEMENT);
			setState(2057);
			llvmType(0);
			setState(2058);
			value();
			setState(2059);
			match(COMMA);
			setState(2060);
			llvmType(0);
			setState(2061);
			value();
			setState(2062);
			match(COMMA);
			setState(2063);
			llvmType(0);
			setState(2064);
			value();
			setState(2065);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShuffleVectorInstContext extends ParserRuleContext {
		public TerminalNode SHUFFLEVECTOR() { return getToken(LLVMParser.SHUFFLEVECTOR, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(LLVMParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(LLVMParser.COMMA, i);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public ShuffleVectorInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shuffleVectorInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterShuffleVectorInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitShuffleVectorInst(this);
		}
	}

	public final ShuffleVectorInstContext shuffleVectorInst() throws RecognitionException {
		ShuffleVectorInstContext _localctx = new ShuffleVectorInstContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_shuffleVectorInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2067);
			match(SHUFFLEVECTOR);
			setState(2068);
			llvmType(0);
			setState(2069);
			value();
			setState(2070);
			match(COMMA);
			setState(2071);
			llvmType(0);
			setState(2072);
			value();
			setState(2073);
			match(COMMA);
			setState(2074);
			llvmType(0);
			setState(2075);
			value();
			setState(2076);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtractValueInstContext extends ParserRuleContext {
		public TerminalNode EXTRACTVALUE() { return getToken(LLVMParser.EXTRACTVALUE, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public IndexListContext indexList() {
			return getRuleContext(IndexListContext.class,0);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public ExtractValueInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractValueInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterExtractValueInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitExtractValueInst(this);
		}
	}

	public final ExtractValueInstContext extractValueInst() throws RecognitionException {
		ExtractValueInstContext _localctx = new ExtractValueInstContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_extractValueInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2078);
			match(EXTRACTVALUE);
			setState(2079);
			llvmType(0);
			setState(2080);
			value();
			setState(2081);
			match(COMMA);
			setState(2082);
			indexList(0);
			setState(2083);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertValueInstContext extends ParserRuleContext {
		public TerminalNode INSERTVALUE() { return getToken(LLVMParser.INSERTVALUE, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(LLVMParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(LLVMParser.COMMA, i);
		}
		public IndexListContext indexList() {
			return getRuleContext(IndexListContext.class,0);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public InsertValueInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertValueInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterInsertValueInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitInsertValueInst(this);
		}
	}

	public final InsertValueInstContext insertValueInst() throws RecognitionException {
		InsertValueInstContext _localctx = new InsertValueInstContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_insertValueInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2085);
			match(INSERTVALUE);
			setState(2086);
			llvmType(0);
			setState(2087);
			value();
			setState(2088);
			match(COMMA);
			setState(2089);
			llvmType(0);
			setState(2090);
			value();
			setState(2091);
			match(COMMA);
			setState(2092);
			indexList(0);
			setState(2093);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllocaInstContext extends ParserRuleContext {
		public TerminalNode ALLOCA() { return getToken(LLVMParser.ALLOCA, 0); }
		public OptInAllocaContext optInAlloca() {
			return getRuleContext(OptInAllocaContext.class,0);
		}
		public OptSwiftErrorContext optSwiftError() {
			return getRuleContext(OptSwiftErrorContext.class,0);
		}
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(LLVMParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(LLVMParser.COMMA, i);
		}
		public AlignmentContext alignment() {
			return getRuleContext(AlignmentContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public AddrSpaceContext addrSpace() {
			return getRuleContext(AddrSpaceContext.class,0);
		}
		public AllocaInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allocaInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAllocaInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAllocaInst(this);
		}
	}

	public final AllocaInstContext allocaInst() throws RecognitionException {
		AllocaInstContext _localctx = new AllocaInstContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_allocaInst);
		try {
			setState(2171);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2095);
				match(ALLOCA);
				setState(2096);
				optInAlloca();
				setState(2097);
				optSwiftError();
				setState(2098);
				llvmType(0);
				setState(2099);
				optCommaSepMetadataAttachmentList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2101);
				match(ALLOCA);
				setState(2102);
				optInAlloca();
				setState(2103);
				optSwiftError();
				setState(2104);
				llvmType(0);
				setState(2105);
				match(COMMA);
				setState(2106);
				alignment();
				setState(2107);
				optCommaSepMetadataAttachmentList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2109);
				match(ALLOCA);
				setState(2110);
				optInAlloca();
				setState(2111);
				optSwiftError();
				setState(2112);
				llvmType(0);
				setState(2113);
				match(COMMA);
				setState(2114);
				llvmType(0);
				setState(2115);
				value();
				setState(2116);
				optCommaSepMetadataAttachmentList();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2118);
				match(ALLOCA);
				setState(2119);
				optInAlloca();
				setState(2120);
				optSwiftError();
				setState(2121);
				llvmType(0);
				setState(2122);
				match(COMMA);
				setState(2123);
				llvmType(0);
				setState(2124);
				value();
				setState(2125);
				match(COMMA);
				setState(2126);
				alignment();
				setState(2127);
				optCommaSepMetadataAttachmentList();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2129);
				match(ALLOCA);
				setState(2130);
				optInAlloca();
				setState(2131);
				optSwiftError();
				setState(2132);
				llvmType(0);
				setState(2133);
				match(COMMA);
				setState(2134);
				addrSpace();
				setState(2135);
				optCommaSepMetadataAttachmentList();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2137);
				match(ALLOCA);
				setState(2138);
				optInAlloca();
				setState(2139);
				optSwiftError();
				setState(2140);
				llvmType(0);
				setState(2141);
				match(COMMA);
				setState(2142);
				alignment();
				setState(2143);
				match(COMMA);
				setState(2144);
				addrSpace();
				setState(2145);
				optCommaSepMetadataAttachmentList();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2147);
				match(ALLOCA);
				setState(2148);
				optInAlloca();
				setState(2149);
				optSwiftError();
				setState(2150);
				llvmType(0);
				setState(2151);
				match(COMMA);
				setState(2152);
				llvmType(0);
				setState(2153);
				value();
				setState(2154);
				match(COMMA);
				setState(2155);
				addrSpace();
				setState(2156);
				optCommaSepMetadataAttachmentList();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2158);
				match(ALLOCA);
				setState(2159);
				optInAlloca();
				setState(2160);
				optSwiftError();
				setState(2161);
				llvmType(0);
				setState(2162);
				match(COMMA);
				setState(2163);
				llvmType(0);
				setState(2164);
				value();
				setState(2165);
				match(COMMA);
				setState(2166);
				alignment();
				setState(2167);
				match(COMMA);
				setState(2168);
				addrSpace();
				setState(2169);
				optCommaSepMetadataAttachmentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptInAllocaContext extends ParserRuleContext {
		public TerminalNode INALLOCA() { return getToken(LLVMParser.INALLOCA, 0); }
		public OptInAllocaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optInAlloca; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptInAlloca(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptInAlloca(this);
		}
	}

	public final OptInAllocaContext optInAlloca() throws RecognitionException {
		OptInAllocaContext _localctx = new OptInAllocaContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_optInAlloca);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INALLOCA) {
				{
				setState(2173);
				match(INALLOCA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptSwiftErrorContext extends ParserRuleContext {
		public TerminalNode SWIFTERROR() { return getToken(LLVMParser.SWIFTERROR, 0); }
		public OptSwiftErrorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optSwiftError; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptSwiftError(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptSwiftError(this);
		}
	}

	public final OptSwiftErrorContext optSwiftError() throws RecognitionException {
		OptSwiftErrorContext _localctx = new OptSwiftErrorContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_optSwiftError);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SWIFTERROR) {
				{
				setState(2176);
				match(SWIFTERROR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadInstContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(LLVMParser.LOAD, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(LLVMParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(LLVMParser.COMMA, i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public TerminalNode VOLATILE() { return getToken(LLVMParser.VOLATILE, 0); }
		public AlignmentContext alignment() {
			return getRuleContext(AlignmentContext.class,0);
		}
		public TerminalNode ATOMIC() { return getToken(LLVMParser.ATOMIC, 0); }
		public OptSyncScopeContext optSyncScope() {
			return getRuleContext(OptSyncScopeContext.class,0);
		}
		public AtomicOrderingContext atomicOrdering() {
			return getRuleContext(AtomicOrderingContext.class,0);
		}
		public LoadInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterLoadInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitLoadInst(this);
		}
	}

	public final LoadInstContext loadInst() throws RecognitionException {
		LoadInstContext _localctx = new LoadInstContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_loadInst);
		int _la;
		try {
			setState(2229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2179);
				match(LOAD);
				setState(2181);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VOLATILE) {
					{
					setState(2180);
					match(VOLATILE);
					}
				}

				setState(2183);
				llvmType(0);
				setState(2184);
				match(COMMA);
				setState(2185);
				llvmType(0);
				setState(2186);
				value();
				setState(2187);
				optCommaSepMetadataAttachmentList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2189);
				match(LOAD);
				setState(2191);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VOLATILE) {
					{
					setState(2190);
					match(VOLATILE);
					}
				}

				setState(2193);
				llvmType(0);
				setState(2194);
				match(COMMA);
				setState(2195);
				llvmType(0);
				setState(2196);
				value();
				setState(2197);
				match(COMMA);
				setState(2198);
				alignment();
				setState(2199);
				optCommaSepMetadataAttachmentList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2201);
				match(LOAD);
				setState(2202);
				match(ATOMIC);
				setState(2204);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VOLATILE) {
					{
					setState(2203);
					match(VOLATILE);
					}
				}

				setState(2206);
				llvmType(0);
				setState(2207);
				match(COMMA);
				setState(2208);
				llvmType(0);
				setState(2209);
				value();
				setState(2210);
				optSyncScope();
				setState(2211);
				atomicOrdering();
				setState(2212);
				optCommaSepMetadataAttachmentList();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2214);
				match(LOAD);
				setState(2215);
				match(ATOMIC);
				setState(2217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VOLATILE) {
					{
					setState(2216);
					match(VOLATILE);
					}
				}

				setState(2219);
				llvmType(0);
				setState(2220);
				match(COMMA);
				setState(2221);
				llvmType(0);
				setState(2222);
				value();
				setState(2223);
				optSyncScope();
				setState(2224);
				atomicOrdering();
				setState(2225);
				match(COMMA);
				setState(2226);
				alignment();
				setState(2227);
				optCommaSepMetadataAttachmentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StoreInstContext extends ParserRuleContext {
		public TerminalNode STORE() { return getToken(LLVMParser.STORE, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(LLVMParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(LLVMParser.COMMA, i);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public TerminalNode VOLATILE() { return getToken(LLVMParser.VOLATILE, 0); }
		public AlignmentContext alignment() {
			return getRuleContext(AlignmentContext.class,0);
		}
		public TerminalNode ATOMIC() { return getToken(LLVMParser.ATOMIC, 0); }
		public OptSyncScopeContext optSyncScope() {
			return getRuleContext(OptSyncScopeContext.class,0);
		}
		public AtomicOrderingContext atomicOrdering() {
			return getRuleContext(AtomicOrderingContext.class,0);
		}
		public StoreInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storeInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterStoreInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitStoreInst(this);
		}
	}

	public final StoreInstContext storeInst() throws RecognitionException {
		StoreInstContext _localctx = new StoreInstContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_storeInst);
		int _la;
		try {
			setState(2285);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2231);
				match(STORE);
				setState(2233);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VOLATILE) {
					{
					setState(2232);
					match(VOLATILE);
					}
				}

				setState(2235);
				llvmType(0);
				setState(2236);
				value();
				setState(2237);
				match(COMMA);
				setState(2238);
				llvmType(0);
				setState(2239);
				value();
				setState(2240);
				optCommaSepMetadataAttachmentList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2242);
				match(STORE);
				setState(2244);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VOLATILE) {
					{
					setState(2243);
					match(VOLATILE);
					}
				}

				setState(2246);
				llvmType(0);
				setState(2247);
				value();
				setState(2248);
				match(COMMA);
				setState(2249);
				llvmType(0);
				setState(2250);
				value();
				setState(2251);
				match(COMMA);
				setState(2252);
				alignment();
				setState(2253);
				optCommaSepMetadataAttachmentList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2255);
				match(STORE);
				setState(2256);
				match(ATOMIC);
				setState(2258);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VOLATILE) {
					{
					setState(2257);
					match(VOLATILE);
					}
				}

				setState(2260);
				llvmType(0);
				setState(2261);
				value();
				setState(2262);
				match(COMMA);
				setState(2263);
				llvmType(0);
				setState(2264);
				value();
				setState(2265);
				optSyncScope();
				setState(2266);
				atomicOrdering();
				setState(2267);
				optCommaSepMetadataAttachmentList();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2269);
				match(STORE);
				setState(2270);
				match(ATOMIC);
				setState(2272);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VOLATILE) {
					{
					setState(2271);
					match(VOLATILE);
					}
				}

				setState(2274);
				llvmType(0);
				setState(2275);
				value();
				setState(2276);
				match(COMMA);
				setState(2277);
				llvmType(0);
				setState(2278);
				value();
				setState(2279);
				optSyncScope();
				setState(2280);
				atomicOrdering();
				setState(2281);
				match(COMMA);
				setState(2282);
				alignment();
				setState(2283);
				optCommaSepMetadataAttachmentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FenceInstContext extends ParserRuleContext {
		public TerminalNode FENCE() { return getToken(LLVMParser.FENCE, 0); }
		public OptSyncScopeContext optSyncScope() {
			return getRuleContext(OptSyncScopeContext.class,0);
		}
		public AtomicOrderingContext atomicOrdering() {
			return getRuleContext(AtomicOrderingContext.class,0);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public FenceInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fenceInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFenceInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFenceInst(this);
		}
	}

	public final FenceInstContext fenceInst() throws RecognitionException {
		FenceInstContext _localctx = new FenceInstContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_fenceInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2287);
			match(FENCE);
			setState(2288);
			optSyncScope();
			setState(2289);
			atomicOrdering();
			setState(2290);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CmpXchgInstContext extends ParserRuleContext {
		public TerminalNode CMPXCHG() { return getToken(LLVMParser.CMPXCHG, 0); }
		public OptWeakContext optWeak() {
			return getRuleContext(OptWeakContext.class,0);
		}
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(LLVMParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(LLVMParser.COMMA, i);
		}
		public OptSyncScopeContext optSyncScope() {
			return getRuleContext(OptSyncScopeContext.class,0);
		}
		public List<AtomicOrderingContext> atomicOrdering() {
			return getRuleContexts(AtomicOrderingContext.class);
		}
		public AtomicOrderingContext atomicOrdering(int i) {
			return getRuleContext(AtomicOrderingContext.class,i);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public TerminalNode VOLATILE() { return getToken(LLVMParser.VOLATILE, 0); }
		public CmpXchgInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cmpXchgInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterCmpXchgInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitCmpXchgInst(this);
		}
	}

	public final CmpXchgInstContext cmpXchgInst() throws RecognitionException {
		CmpXchgInstContext _localctx = new CmpXchgInstContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_cmpXchgInst);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2292);
			match(CMPXCHG);
			setState(2293);
			optWeak();
			setState(2295);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VOLATILE) {
				{
				setState(2294);
				match(VOLATILE);
				}
			}

			setState(2297);
			llvmType(0);
			setState(2298);
			value();
			setState(2299);
			match(COMMA);
			setState(2300);
			llvmType(0);
			setState(2301);
			value();
			setState(2302);
			match(COMMA);
			setState(2303);
			llvmType(0);
			setState(2304);
			value();
			setState(2305);
			optSyncScope();
			setState(2306);
			atomicOrdering();
			setState(2307);
			atomicOrdering();
			setState(2308);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptWeakContext extends ParserRuleContext {
		public TerminalNode WEAK() { return getToken(LLVMParser.WEAK, 0); }
		public OptWeakContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optWeak; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptWeak(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptWeak(this);
		}
	}

	public final OptWeakContext optWeak() throws RecognitionException {
		OptWeakContext _localctx = new OptWeakContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_optWeak);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WEAK) {
				{
				setState(2310);
				match(WEAK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AtomicRMWInstContext extends ParserRuleContext {
		public TerminalNode ATOMICRMW() { return getToken(LLVMParser.ATOMICRMW, 0); }
		public BinOpContext binOp() {
			return getRuleContext(BinOpContext.class,0);
		}
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptSyncScopeContext optSyncScope() {
			return getRuleContext(OptSyncScopeContext.class,0);
		}
		public AtomicOrderingContext atomicOrdering() {
			return getRuleContext(AtomicOrderingContext.class,0);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public TerminalNode VOLATILE() { return getToken(LLVMParser.VOLATILE, 0); }
		public AtomicRMWInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atomicRMWInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAtomicRMWInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAtomicRMWInst(this);
		}
	}

	public final AtomicRMWInstContext atomicRMWInst() throws RecognitionException {
		AtomicRMWInstContext _localctx = new AtomicRMWInstContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_atomicRMWInst);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2313);
			match(ATOMICRMW);
			setState(2315);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VOLATILE) {
				{
				setState(2314);
				match(VOLATILE);
				}
			}

			setState(2317);
			binOp();
			setState(2318);
			llvmType(0);
			setState(2319);
			value();
			setState(2320);
			match(COMMA);
			setState(2321);
			llvmType(0);
			setState(2322);
			value();
			setState(2323);
			optSyncScope();
			setState(2324);
			atomicOrdering();
			setState(2325);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinOpContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(LLVMParser.ADD, 0); }
		public TerminalNode AND() { return getToken(LLVMParser.AND, 0); }
		public TerminalNode MAX() { return getToken(LLVMParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(LLVMParser.MIN, 0); }
		public TerminalNode NAND() { return getToken(LLVMParser.NAND, 0); }
		public TerminalNode OR() { return getToken(LLVMParser.OR, 0); }
		public TerminalNode SUB() { return getToken(LLVMParser.SUB, 0); }
		public TerminalNode UMAX() { return getToken(LLVMParser.UMAX, 0); }
		public TerminalNode UMIN() { return getToken(LLVMParser.UMIN, 0); }
		public TerminalNode XCHG() { return getToken(LLVMParser.XCHG, 0); }
		public TerminalNode XOR() { return getToken(LLVMParser.XOR, 0); }
		public BinOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterBinOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitBinOp(this);
		}
	}

	public final BinOpContext binOp() throws RecognitionException {
		BinOpContext _localctx = new BinOpContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_binOp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2327);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==AND || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (MAX - 226)) | (1L << (MIN - 226)) | (1L << (NAND - 226)) | (1L << (OR - 226)))) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & ((1L << (SUB - 337)) | (1L << (UMAX - 337)) | (1L << (UMIN - 337)))) != 0) || _la==XCHG || _la==XOR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GetElementPtrInstContext extends ParserRuleContext {
		public TerminalNode GETELEMENTPTR() { return getToken(LLVMParser.GETELEMENTPTR, 0); }
		public OptInBoundsContext optInBounds() {
			return getRuleContext(OptInBoundsContext.class,0);
		}
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(LLVMParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(LLVMParser.COMMA, i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public CommaSepTypeValueListContext commaSepTypeValueList() {
			return getRuleContext(CommaSepTypeValueListContext.class,0);
		}
		public GetElementPtrInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getElementPtrInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterGetElementPtrInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitGetElementPtrInst(this);
		}
	}

	public final GetElementPtrInstContext getElementPtrInst() throws RecognitionException {
		GetElementPtrInstContext _localctx = new GetElementPtrInstContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_getElementPtrInst);
		try {
			setState(2347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2329);
				match(GETELEMENTPTR);
				setState(2330);
				optInBounds();
				setState(2331);
				llvmType(0);
				setState(2332);
				match(COMMA);
				setState(2333);
				llvmType(0);
				setState(2334);
				value();
				setState(2335);
				optCommaSepMetadataAttachmentList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2337);
				match(GETELEMENTPTR);
				setState(2338);
				optInBounds();
				setState(2339);
				llvmType(0);
				setState(2340);
				match(COMMA);
				setState(2341);
				llvmType(0);
				setState(2342);
				value();
				setState(2343);
				match(COMMA);
				setState(2344);
				commaSepTypeValueList(0);
				setState(2345);
				optCommaSepMetadataAttachmentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncInstContext extends ParserRuleContext {
		public TerminalNode TRUNC() { return getToken(LLVMParser.TRUNC, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public TruncInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTruncInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTruncInst(this);
		}
	}

	public final TruncInstContext truncInst() throws RecognitionException {
		TruncInstContext _localctx = new TruncInstContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_truncInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2349);
			match(TRUNC);
			setState(2350);
			llvmType(0);
			setState(2351);
			value();
			setState(2352);
			match(TO);
			setState(2353);
			llvmType(0);
			setState(2354);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ZExtInstContext extends ParserRuleContext {
		public TerminalNode ZEXT() { return getToken(LLVMParser.ZEXT, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public ZExtInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zExtInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterZExtInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitZExtInst(this);
		}
	}

	public final ZExtInstContext zExtInst() throws RecognitionException {
		ZExtInstContext _localctx = new ZExtInstContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_zExtInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2356);
			match(ZEXT);
			setState(2357);
			llvmType(0);
			setState(2358);
			value();
			setState(2359);
			match(TO);
			setState(2360);
			llvmType(0);
			setState(2361);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SExtInstContext extends ParserRuleContext {
		public TerminalNode SEXT() { return getToken(LLVMParser.SEXT, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public SExtInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sExtInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSExtInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSExtInst(this);
		}
	}

	public final SExtInstContext sExtInst() throws RecognitionException {
		SExtInstContext _localctx = new SExtInstContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_sExtInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2363);
			match(SEXT);
			setState(2364);
			llvmType(0);
			setState(2365);
			value();
			setState(2366);
			match(TO);
			setState(2367);
			llvmType(0);
			setState(2368);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FpTruncInstContext extends ParserRuleContext {
		public TerminalNode FPTRUNC() { return getToken(LLVMParser.FPTRUNC, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public FpTruncInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fpTruncInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFpTruncInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFpTruncInst(this);
		}
	}

	public final FpTruncInstContext fpTruncInst() throws RecognitionException {
		FpTruncInstContext _localctx = new FpTruncInstContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_fpTruncInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2370);
			match(FPTRUNC);
			setState(2371);
			llvmType(0);
			setState(2372);
			value();
			setState(2373);
			match(TO);
			setState(2374);
			llvmType(0);
			setState(2375);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FpExtInstContext extends ParserRuleContext {
		public TerminalNode FPEXT() { return getToken(LLVMParser.FPEXT, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public FpExtInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fpExtInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFpExtInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFpExtInst(this);
		}
	}

	public final FpExtInstContext fpExtInst() throws RecognitionException {
		FpExtInstContext _localctx = new FpExtInstContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_fpExtInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2377);
			match(FPEXT);
			setState(2378);
			llvmType(0);
			setState(2379);
			value();
			setState(2380);
			match(TO);
			setState(2381);
			llvmType(0);
			setState(2382);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FpToUIInstContext extends ParserRuleContext {
		public TerminalNode FPTOUI() { return getToken(LLVMParser.FPTOUI, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public FpToUIInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fpToUIInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFpToUIInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFpToUIInst(this);
		}
	}

	public final FpToUIInstContext fpToUIInst() throws RecognitionException {
		FpToUIInstContext _localctx = new FpToUIInstContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_fpToUIInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2384);
			match(FPTOUI);
			setState(2385);
			llvmType(0);
			setState(2386);
			value();
			setState(2387);
			match(TO);
			setState(2388);
			llvmType(0);
			setState(2389);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FpToSIInstContext extends ParserRuleContext {
		public TerminalNode FPTOSI() { return getToken(LLVMParser.FPTOSI, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public FpToSIInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fpToSIInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFpToSIInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFpToSIInst(this);
		}
	}

	public final FpToSIInstContext fpToSIInst() throws RecognitionException {
		FpToSIInstContext _localctx = new FpToSIInstContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_fpToSIInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2391);
			match(FPTOSI);
			setState(2392);
			llvmType(0);
			setState(2393);
			value();
			setState(2394);
			match(TO);
			setState(2395);
			llvmType(0);
			setState(2396);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UiToFPInstContext extends ParserRuleContext {
		public TerminalNode UITOFP() { return getToken(LLVMParser.UITOFP, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public UiToFPInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uiToFPInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterUiToFPInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitUiToFPInst(this);
		}
	}

	public final UiToFPInstContext uiToFPInst() throws RecognitionException {
		UiToFPInstContext _localctx = new UiToFPInstContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_uiToFPInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2398);
			match(UITOFP);
			setState(2399);
			llvmType(0);
			setState(2400);
			value();
			setState(2401);
			match(TO);
			setState(2402);
			llvmType(0);
			setState(2403);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SiToFPInstContext extends ParserRuleContext {
		public TerminalNode SITOFP() { return getToken(LLVMParser.SITOFP, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public SiToFPInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_siToFPInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSiToFPInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSiToFPInst(this);
		}
	}

	public final SiToFPInstContext siToFPInst() throws RecognitionException {
		SiToFPInstContext _localctx = new SiToFPInstContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_siToFPInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2405);
			match(SITOFP);
			setState(2406);
			llvmType(0);
			setState(2407);
			value();
			setState(2408);
			match(TO);
			setState(2409);
			llvmType(0);
			setState(2410);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PtrToIntInstContext extends ParserRuleContext {
		public TerminalNode PTRTOINT() { return getToken(LLVMParser.PTRTOINT, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public PtrToIntInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ptrToIntInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterPtrToIntInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitPtrToIntInst(this);
		}
	}

	public final PtrToIntInstContext ptrToIntInst() throws RecognitionException {
		PtrToIntInstContext _localctx = new PtrToIntInstContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_ptrToIntInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2412);
			match(PTRTOINT);
			setState(2413);
			llvmType(0);
			setState(2414);
			value();
			setState(2415);
			match(TO);
			setState(2416);
			llvmType(0);
			setState(2417);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntToPtrInstContext extends ParserRuleContext {
		public TerminalNode INTTOPTR() { return getToken(LLVMParser.INTTOPTR, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public IntToPtrInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intToPtrInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterIntToPtrInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitIntToPtrInst(this);
		}
	}

	public final IntToPtrInstContext intToPtrInst() throws RecognitionException {
		IntToPtrInstContext _localctx = new IntToPtrInstContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_intToPtrInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2419);
			match(INTTOPTR);
			setState(2420);
			llvmType(0);
			setState(2421);
			value();
			setState(2422);
			match(TO);
			setState(2423);
			llvmType(0);
			setState(2424);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitCastInstContext extends ParserRuleContext {
		public TerminalNode BITCAST() { return getToken(LLVMParser.BITCAST, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public BitCastInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitCastInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterBitCastInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitBitCastInst(this);
		}
	}

	public final BitCastInstContext bitCastInst() throws RecognitionException {
		BitCastInstContext _localctx = new BitCastInstContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_bitCastInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2426);
			match(BITCAST);
			setState(2427);
			llvmType(0);
			setState(2428);
			value();
			setState(2429);
			match(TO);
			setState(2430);
			llvmType(0);
			setState(2431);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddrSpaceCastInstContext extends ParserRuleContext {
		public TerminalNode ADDRSPACECAST() { return getToken(LLVMParser.ADDRSPACECAST, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public AddrSpaceCastInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addrSpaceCastInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAddrSpaceCastInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAddrSpaceCastInst(this);
		}
	}

	public final AddrSpaceCastInstContext addrSpaceCastInst() throws RecognitionException {
		AddrSpaceCastInstContext _localctx = new AddrSpaceCastInstContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_addrSpaceCastInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2433);
			match(ADDRSPACECAST);
			setState(2434);
			llvmType(0);
			setState(2435);
			value();
			setState(2436);
			match(TO);
			setState(2437);
			llvmType(0);
			setState(2438);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ICmpInstContext extends ParserRuleContext {
		public TerminalNode ICMP() { return getToken(LLVMParser.ICMP, 0); }
		public IPredContext iPred() {
			return getRuleContext(IPredContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public ICmpInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iCmpInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterICmpInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitICmpInst(this);
		}
	}

	public final ICmpInstContext iCmpInst() throws RecognitionException {
		ICmpInstContext _localctx = new ICmpInstContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_iCmpInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2440);
			match(ICMP);
			setState(2441);
			iPred();
			setState(2442);
			llvmType(0);
			setState(2443);
			value();
			setState(2444);
			match(COMMA);
			setState(2445);
			value();
			setState(2446);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FCmpInstContext extends ParserRuleContext {
		public TerminalNode FCMP() { return getToken(LLVMParser.FCMP, 0); }
		public FastMathFlagsContext fastMathFlags() {
			return getRuleContext(FastMathFlagsContext.class,0);
		}
		public FpredContext fpred() {
			return getRuleContext(FpredContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public FCmpInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fCmpInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFCmpInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFCmpInst(this);
		}
	}

	public final FCmpInstContext fCmpInst() throws RecognitionException {
		FCmpInstContext _localctx = new FCmpInstContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_fCmpInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2448);
			match(FCMP);
			setState(2449);
			fastMathFlags();
			setState(2450);
			fpred();
			setState(2451);
			llvmType(0);
			setState(2452);
			value();
			setState(2453);
			match(COMMA);
			setState(2454);
			value();
			setState(2455);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PhiInstContext extends ParserRuleContext {
		public TerminalNode PHI() { return getToken(LLVMParser.PHI, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public IncListContext incList() {
			return getRuleContext(IncListContext.class,0);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public PhiInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_phiInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterPhiInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitPhiInst(this);
		}
	}

	public final PhiInstContext phiInst() throws RecognitionException {
		PhiInstContext _localctx = new PhiInstContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_phiInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2457);
			match(PHI);
			setState(2458);
			llvmType(0);
			setState(2459);
			incList(0);
			setState(2460);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncListContext extends ParserRuleContext {
		public IncContext inc() {
			return getRuleContext(IncContext.class,0);
		}
		public IncListContext incList() {
			return getRuleContext(IncListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public IncListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_incList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterIncList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitIncList(this);
		}
	}

	public final IncListContext incList() throws RecognitionException {
		return incList(0);
	}

	private IncListContext incList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		IncListContext _localctx = new IncListContext(_ctx, _parentState);
		IncListContext _prevctx = _localctx;
		int _startState = 374;
		enterRecursionRule(_localctx, 374, RULE_incList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2463);
			inc();
			}
			_ctx.stop = _input.LT(-1);
			setState(2470);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IncListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_incList);
					setState(2465);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2466);
					match(COMMA);
					setState(2467);
					inc();
					}
					} 
				}
				setState(2472);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class IncContext extends ParserRuleContext {
		public TerminalNode LBRACK() { return getToken(LLVMParser.LBRACK, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public LocalIdentContext localIdent() {
			return getRuleContext(LocalIdentContext.class,0);
		}
		public TerminalNode RBRACK() { return getToken(LLVMParser.RBRACK, 0); }
		public IncContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterInc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitInc(this);
		}
	}

	public final IncContext inc() throws RecognitionException {
		IncContext _localctx = new IncContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_inc);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2473);
			match(LBRACK);
			setState(2474);
			value();
			setState(2475);
			match(COMMA);
			setState(2476);
			localIdent();
			setState(2477);
			match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectInstContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(LLVMParser.SELECT, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(LLVMParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(LLVMParser.COMMA, i);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public SelectInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSelectInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSelectInst(this);
		}
	}

	public final SelectInstContext selectInst() throws RecognitionException {
		SelectInstContext _localctx = new SelectInstContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_selectInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2479);
			match(SELECT);
			setState(2480);
			llvmType(0);
			setState(2481);
			value();
			setState(2482);
			match(COMMA);
			setState(2483);
			llvmType(0);
			setState(2484);
			value();
			setState(2485);
			match(COMMA);
			setState(2486);
			llvmType(0);
			setState(2487);
			value();
			setState(2488);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallInstContext extends ParserRuleContext {
		public OptTailContext optTail() {
			return getRuleContext(OptTailContext.class,0);
		}
		public TerminalNode CALL() { return getToken(LLVMParser.CALL, 0); }
		public FastMathFlagsContext fastMathFlags() {
			return getRuleContext(FastMathFlagsContext.class,0);
		}
		public OptCallingConvContext optCallingConv() {
			return getRuleContext(OptCallingConvContext.class,0);
		}
		public ReturnAttrsContext returnAttrs() {
			return getRuleContext(ReturnAttrsContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public ArgsContext args() {
			return getRuleContext(ArgsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public FuncAttrsContext funcAttrs() {
			return getRuleContext(FuncAttrsContext.class,0);
		}
		public OperandBundlesContext operandBundles() {
			return getRuleContext(OperandBundlesContext.class,0);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public CallInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterCallInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitCallInst(this);
		}
	}

	public final CallInstContext callInst() throws RecognitionException {
		CallInstContext _localctx = new CallInstContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_callInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2490);
			optTail();
			setState(2491);
			match(CALL);
			setState(2492);
			fastMathFlags();
			setState(2493);
			optCallingConv();
			setState(2494);
			returnAttrs();
			setState(2495);
			llvmType(0);
			setState(2496);
			value();
			setState(2497);
			match(LPAREN);
			setState(2498);
			args();
			setState(2499);
			match(RPAREN);
			setState(2500);
			funcAttrs();
			setState(2501);
			operandBundles();
			setState(2502);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTailContext extends ParserRuleContext {
		public TerminalNode MUSTTAIL() { return getToken(LLVMParser.MUSTTAIL, 0); }
		public TerminalNode NOTAIL() { return getToken(LLVMParser.NOTAIL, 0); }
		public TerminalNode TAIL() { return getToken(LLVMParser.TAIL, 0); }
		public OptTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptTail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptTail(this);
		}
	}

	public final OptTailContext optTail() throws RecognitionException {
		OptTailContext _localctx = new OptTailContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_optTail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2505);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MUSTTAIL || _la==NOTAIL || _la==TAIL) {
				{
				setState(2504);
				_la = _input.LA(1);
				if ( !(_la==MUSTTAIL || _la==NOTAIL || _la==TAIL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VaArgInstContext extends ParserRuleContext {
		public TerminalNode VA_ARG() { return getToken(LLVMParser.VA_ARG, 0); }
		public List<LlvmTypeContext> llvmType() {
			return getRuleContexts(LlvmTypeContext.class);
		}
		public LlvmTypeContext llvmType(int i) {
			return getRuleContext(LlvmTypeContext.class,i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public VaArgInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vaArgInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterVaArgInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitVaArgInst(this);
		}
	}

	public final VaArgInstContext vaArgInst() throws RecognitionException {
		VaArgInstContext _localctx = new VaArgInstContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_vaArgInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2507);
			match(VA_ARG);
			setState(2508);
			llvmType(0);
			setState(2509);
			value();
			setState(2510);
			match(COMMA);
			setState(2511);
			llvmType(0);
			setState(2512);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LandingPadInstContext extends ParserRuleContext {
		public TerminalNode LANDINGPAD() { return getToken(LLVMParser.LANDINGPAD, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public OptCleanupContext optCleanup() {
			return getRuleContext(OptCleanupContext.class,0);
		}
		public ClausesContext clauses() {
			return getRuleContext(ClausesContext.class,0);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public LandingPadInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_landingPadInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterLandingPadInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitLandingPadInst(this);
		}
	}

	public final LandingPadInstContext landingPadInst() throws RecognitionException {
		LandingPadInstContext _localctx = new LandingPadInstContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_landingPadInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2514);
			match(LANDINGPAD);
			setState(2515);
			llvmType(0);
			setState(2516);
			optCleanup();
			setState(2517);
			clauses();
			setState(2518);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptCleanupContext extends ParserRuleContext {
		public TerminalNode CLEANUP() { return getToken(LLVMParser.CLEANUP, 0); }
		public OptCleanupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optCleanup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptCleanup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptCleanup(this);
		}
	}

	public final OptCleanupContext optCleanup() throws RecognitionException {
		OptCleanupContext _localctx = new OptCleanupContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_optCleanup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2521);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				setState(2520);
				match(CLEANUP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClausesContext extends ParserRuleContext {
		public ClauseListContext clauseList() {
			return getRuleContext(ClauseListContext.class,0);
		}
		public ClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitClauses(this);
		}
	}

	public final ClausesContext clauses() throws RecognitionException {
		ClausesContext _localctx = new ClausesContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				setState(2523);
				clauseList(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClauseListContext extends ParserRuleContext {
		public ClauseContext clause() {
			return getRuleContext(ClauseContext.class,0);
		}
		public ClauseListContext clauseList() {
			return getRuleContext(ClauseListContext.class,0);
		}
		public ClauseListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clauseList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterClauseList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitClauseList(this);
		}
	}

	public final ClauseListContext clauseList() throws RecognitionException {
		return clauseList(0);
	}

	private ClauseListContext clauseList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ClauseListContext _localctx = new ClauseListContext(_ctx, _parentState);
		ClauseListContext _prevctx = _localctx;
		int _startState = 392;
		enterRecursionRule(_localctx, 392, RULE_clauseList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2527);
			clause();
			}
			_ctx.stop = _input.LT(-1);
			setState(2533);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,81,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ClauseListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_clauseList);
					setState(2529);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2530);
					clause();
					}
					} 
				}
				setState(2535);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,81,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ClauseContext extends ParserRuleContext {
		public TerminalNode CATCH() { return getToken(LLVMParser.CATCH, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode FILTER() { return getToken(LLVMParser.FILTER, 0); }
		public ArrayConstContext arrayConst() {
			return getRuleContext(ArrayConstContext.class,0);
		}
		public ClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitClause(this);
		}
	}

	public final ClauseContext clause() throws RecognitionException {
		ClauseContext _localctx = new ClauseContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_clause);
		try {
			setState(2544);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CATCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(2536);
				match(CATCH);
				setState(2537);
				llvmType(0);
				setState(2538);
				value();
				}
				break;
			case FILTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2540);
				match(FILTER);
				setState(2541);
				llvmType(0);
				setState(2542);
				arrayConst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CatchPadInstContext extends ParserRuleContext {
		public TerminalNode CATCHPAD() { return getToken(LLVMParser.CATCHPAD, 0); }
		public TerminalNode WITHIN() { return getToken(LLVMParser.WITHIN, 0); }
		public LocalIdentContext localIdent() {
			return getRuleContext(LocalIdentContext.class,0);
		}
		public TerminalNode LBRACK() { return getToken(LLVMParser.LBRACK, 0); }
		public ExceptionArgsContext exceptionArgs() {
			return getRuleContext(ExceptionArgsContext.class,0);
		}
		public TerminalNode RBRACK() { return getToken(LLVMParser.RBRACK, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public CatchPadInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catchPadInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterCatchPadInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitCatchPadInst(this);
		}
	}

	public final CatchPadInstContext catchPadInst() throws RecognitionException {
		CatchPadInstContext _localctx = new CatchPadInstContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_catchPadInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2546);
			match(CATCHPAD);
			setState(2547);
			match(WITHIN);
			setState(2548);
			localIdent();
			setState(2549);
			match(LBRACK);
			setState(2550);
			exceptionArgs();
			setState(2551);
			match(RBRACK);
			setState(2552);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CleanupPadInstContext extends ParserRuleContext {
		public TerminalNode CLEANUPPAD() { return getToken(LLVMParser.CLEANUPPAD, 0); }
		public TerminalNode WITHIN() { return getToken(LLVMParser.WITHIN, 0); }
		public ExceptionScopeContext exceptionScope() {
			return getRuleContext(ExceptionScopeContext.class,0);
		}
		public TerminalNode LBRACK() { return getToken(LLVMParser.LBRACK, 0); }
		public ExceptionArgsContext exceptionArgs() {
			return getRuleContext(ExceptionArgsContext.class,0);
		}
		public TerminalNode RBRACK() { return getToken(LLVMParser.RBRACK, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public CleanupPadInstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cleanupPadInst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterCleanupPadInst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitCleanupPadInst(this);
		}
	}

	public final CleanupPadInstContext cleanupPadInst() throws RecognitionException {
		CleanupPadInstContext _localctx = new CleanupPadInstContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_cleanupPadInst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2554);
			match(CLEANUPPAD);
			setState(2555);
			match(WITHIN);
			setState(2556);
			exceptionScope();
			setState(2557);
			match(LBRACK);
			setState(2558);
			exceptionArgs();
			setState(2559);
			match(RBRACK);
			setState(2560);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TerminatorContext extends ParserRuleContext {
		public RetTermContext retTerm() {
			return getRuleContext(RetTermContext.class,0);
		}
		public BrTermContext brTerm() {
			return getRuleContext(BrTermContext.class,0);
		}
		public CondBrTermContext condBrTerm() {
			return getRuleContext(CondBrTermContext.class,0);
		}
		public SwitchTermContext switchTerm() {
			return getRuleContext(SwitchTermContext.class,0);
		}
		public IndirectBrTermContext indirectBrTerm() {
			return getRuleContext(IndirectBrTermContext.class,0);
		}
		public InvokeTermContext invokeTerm() {
			return getRuleContext(InvokeTermContext.class,0);
		}
		public ResumeTermContext resumeTerm() {
			return getRuleContext(ResumeTermContext.class,0);
		}
		public CatchSwitchTermContext catchSwitchTerm() {
			return getRuleContext(CatchSwitchTermContext.class,0);
		}
		public CatchRetTermContext catchRetTerm() {
			return getRuleContext(CatchRetTermContext.class,0);
		}
		public CleanupRetTermContext cleanupRetTerm() {
			return getRuleContext(CleanupRetTermContext.class,0);
		}
		public UnreachableTermContext unreachableTerm() {
			return getRuleContext(UnreachableTermContext.class,0);
		}
		public TerminatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_terminator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTerminator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTerminator(this);
		}
	}

	public final TerminatorContext terminator() throws RecognitionException {
		TerminatorContext _localctx = new TerminatorContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_terminator);
		try {
			setState(2573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2562);
				retTerm();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2563);
				brTerm();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2564);
				condBrTerm();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2565);
				switchTerm();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2566);
				indirectBrTerm();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2567);
				invokeTerm();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2568);
				resumeTerm();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2569);
				catchSwitchTerm();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2570);
				catchRetTerm();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2571);
				cleanupRetTerm();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2572);
				unreachableTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RetTermContext extends ParserRuleContext {
		public TerminalNode RET() { return getToken(LLVMParser.RET, 0); }
		public VoidTypeContext voidType() {
			return getRuleContext(VoidTypeContext.class,0);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public OptAddrSpaceContext optAddrSpace() {
			return getRuleContext(OptAddrSpaceContext.class,0);
		}
		public TerminalNode STAR() { return getToken(LLVMParser.STAR, 0); }
		public ConcreteNonRecTypeContext concreteNonRecType() {
			return getRuleContext(ConcreteNonRecTypeContext.class,0);
		}
		public RetTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_retTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterRetTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitRetTerm(this);
		}
	}

	public final RetTermContext retTerm() throws RecognitionException {
		RetTermContext _localctx = new RetTermContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_retTerm);
		try {
			setState(2590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2575);
				match(RET);
				setState(2576);
				voidType();
				setState(2577);
				optCommaSepMetadataAttachmentList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2579);
				match(RET);
				setState(2585);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
				case 1:
					{
					setState(2580);
					llvmType(0);
					setState(2581);
					optAddrSpace();
					setState(2582);
					match(STAR);
					}
					break;
				case 2:
					{
					setState(2584);
					concreteNonRecType();
					}
					break;
				}
				setState(2587);
				value();
				setState(2588);
				optCommaSepMetadataAttachmentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BrTermContext extends ParserRuleContext {
		public TerminalNode BR() { return getToken(LLVMParser.BR, 0); }
		public LabelTypeContext labelType() {
			return getRuleContext(LabelTypeContext.class,0);
		}
		public LocalIdentContext localIdent() {
			return getRuleContext(LocalIdentContext.class,0);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public BrTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_brTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterBrTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitBrTerm(this);
		}
	}

	public final BrTermContext brTerm() throws RecognitionException {
		BrTermContext _localctx = new BrTermContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_brTerm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2592);
			match(BR);
			setState(2593);
			labelType();
			setState(2594);
			localIdent();
			setState(2595);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CondBrTermContext extends ParserRuleContext {
		public TerminalNode BR() { return getToken(LLVMParser.BR, 0); }
		public IntTypeContext intType() {
			return getRuleContext(IntTypeContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(LLVMParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(LLVMParser.COMMA, i);
		}
		public List<LabelTypeContext> labelType() {
			return getRuleContexts(LabelTypeContext.class);
		}
		public LabelTypeContext labelType(int i) {
			return getRuleContext(LabelTypeContext.class,i);
		}
		public List<LocalIdentContext> localIdent() {
			return getRuleContexts(LocalIdentContext.class);
		}
		public LocalIdentContext localIdent(int i) {
			return getRuleContext(LocalIdentContext.class,i);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public CondBrTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condBrTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterCondBrTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitCondBrTerm(this);
		}
	}

	public final CondBrTermContext condBrTerm() throws RecognitionException {
		CondBrTermContext _localctx = new CondBrTermContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_condBrTerm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2597);
			match(BR);
			setState(2598);
			intType();
			setState(2599);
			value();
			setState(2600);
			match(COMMA);
			setState(2601);
			labelType();
			setState(2602);
			localIdent();
			setState(2603);
			match(COMMA);
			setState(2604);
			labelType();
			setState(2605);
			localIdent();
			setState(2606);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SwitchTermContext extends ParserRuleContext {
		public TerminalNode SWITCH() { return getToken(LLVMParser.SWITCH, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public LabelTypeContext labelType() {
			return getRuleContext(LabelTypeContext.class,0);
		}
		public LocalIdentContext localIdent() {
			return getRuleContext(LocalIdentContext.class,0);
		}
		public TerminalNode LBRACK() { return getToken(LLVMParser.LBRACK, 0); }
		public CasesContext cases() {
			return getRuleContext(CasesContext.class,0);
		}
		public TerminalNode RBRACK() { return getToken(LLVMParser.RBRACK, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public SwitchTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switchTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSwitchTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSwitchTerm(this);
		}
	}

	public final SwitchTermContext switchTerm() throws RecognitionException {
		SwitchTermContext _localctx = new SwitchTermContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_switchTerm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2608);
			match(SWITCH);
			setState(2609);
			llvmType(0);
			setState(2610);
			value();
			setState(2611);
			match(COMMA);
			setState(2612);
			labelType();
			setState(2613);
			localIdent();
			setState(2614);
			match(LBRACK);
			setState(2615);
			cases();
			setState(2616);
			match(RBRACK);
			setState(2617);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CasesContext extends ParserRuleContext {
		public CaseListContext caseList() {
			return getRuleContext(CaseListContext.class,0);
		}
		public CasesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cases; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterCases(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitCases(this);
		}
	}

	public final CasesContext cases() throws RecognitionException {
		CasesContext _localctx = new CasesContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_cases);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2620);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LBRACK) | (1L << LBRACE))) != 0) || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (DOUBLE - 126)) | (1L << (FLOAT - 126)) | (1L << (FP128 - 126)) | (1L << (HALF - 126)))) != 0) || _la==LABEL || _la==METADATA || _la==PPC_FP128 || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (TOKEN - 351)) | (1L << (VOID - 351)) | (1L << (X86_FP80 - 351)) | (1L << (X86_MMX - 351)))) != 0) || _la==INT_TYPE || _la==LOCAL_IDENT) {
				{
				setState(2619);
				caseList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseListContext extends ParserRuleContext {
		public LlvmCaseContext llvmCase() {
			return getRuleContext(LlvmCaseContext.class,0);
		}
		public CaseListContext caseList() {
			return getRuleContext(CaseListContext.class,0);
		}
		public CaseListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterCaseList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitCaseList(this);
		}
	}

	public final CaseListContext caseList() throws RecognitionException {
		return caseList(0);
	}

	private CaseListContext caseList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		CaseListContext _localctx = new CaseListContext(_ctx, _parentState);
		CaseListContext _prevctx = _localctx;
		int _startState = 412;
		enterRecursionRule(_localctx, 412, RULE_caseList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2623);
			llvmCase();
			}
			_ctx.stop = _input.LT(-1);
			setState(2629);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,87,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CaseListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_caseList);
					setState(2625);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2626);
					llvmCase();
					}
					} 
				}
				setState(2631);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,87,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class LlvmCaseContext extends ParserRuleContext {
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public IntConstContext intConst() {
			return getRuleContext(IntConstContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public LabelTypeContext labelType() {
			return getRuleContext(LabelTypeContext.class,0);
		}
		public LocalIdentContext localIdent() {
			return getRuleContext(LocalIdentContext.class,0);
		}
		public LlvmCaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_llvmCase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterLlvmCase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitLlvmCase(this);
		}
	}

	public final LlvmCaseContext llvmCase() throws RecognitionException {
		LlvmCaseContext _localctx = new LlvmCaseContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_llvmCase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2632);
			llvmType(0);
			setState(2633);
			intConst();
			setState(2634);
			match(COMMA);
			setState(2635);
			labelType();
			setState(2636);
			localIdent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectBrTermContext extends ParserRuleContext {
		public TerminalNode INDIRECTBR() { return getToken(LLVMParser.INDIRECTBR, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TerminalNode LBRACK() { return getToken(LLVMParser.LBRACK, 0); }
		public LabelListContext labelList() {
			return getRuleContext(LabelListContext.class,0);
		}
		public TerminalNode RBRACK() { return getToken(LLVMParser.RBRACK, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public IndirectBrTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirectBrTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterIndirectBrTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitIndirectBrTerm(this);
		}
	}

	public final IndirectBrTermContext indirectBrTerm() throws RecognitionException {
		IndirectBrTermContext _localctx = new IndirectBrTermContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_indirectBrTerm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2638);
			match(INDIRECTBR);
			setState(2639);
			llvmType(0);
			setState(2640);
			value();
			setState(2641);
			match(COMMA);
			setState(2642);
			match(LBRACK);
			setState(2643);
			labelList(0);
			setState(2644);
			match(RBRACK);
			setState(2645);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelListContext extends ParserRuleContext {
		public LabelContext label() {
			return getRuleContext(LabelContext.class,0);
		}
		public LabelListContext labelList() {
			return getRuleContext(LabelListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public LabelListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterLabelList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitLabelList(this);
		}
	}

	public final LabelListContext labelList() throws RecognitionException {
		return labelList(0);
	}

	private LabelListContext labelList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		LabelListContext _localctx = new LabelListContext(_ctx, _parentState);
		LabelListContext _prevctx = _localctx;
		int _startState = 418;
		enterRecursionRule(_localctx, 418, RULE_labelList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2648);
			label();
			}
			_ctx.stop = _input.LT(-1);
			setState(2655);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,88,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LabelListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_labelList);
					setState(2650);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2651);
					match(COMMA);
					setState(2652);
					label();
					}
					} 
				}
				setState(2657);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,88,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class LabelContext extends ParserRuleContext {
		public LabelTypeContext labelType() {
			return getRuleContext(LabelTypeContext.class,0);
		}
		public LocalIdentContext localIdent() {
			return getRuleContext(LocalIdentContext.class,0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitLabel(this);
		}
	}

	public final LabelContext label() throws RecognitionException {
		LabelContext _localctx = new LabelContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_label);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2658);
			labelType();
			setState(2659);
			localIdent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InvokeTermContext extends ParserRuleContext {
		public TerminalNode INVOKE() { return getToken(LLVMParser.INVOKE, 0); }
		public OptCallingConvContext optCallingConv() {
			return getRuleContext(OptCallingConvContext.class,0);
		}
		public ReturnAttrsContext returnAttrs() {
			return getRuleContext(ReturnAttrsContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public ArgsContext args() {
			return getRuleContext(ArgsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public FuncAttrsContext funcAttrs() {
			return getRuleContext(FuncAttrsContext.class,0);
		}
		public OperandBundlesContext operandBundles() {
			return getRuleContext(OperandBundlesContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public List<LabelTypeContext> labelType() {
			return getRuleContexts(LabelTypeContext.class);
		}
		public LabelTypeContext labelType(int i) {
			return getRuleContext(LabelTypeContext.class,i);
		}
		public List<LocalIdentContext> localIdent() {
			return getRuleContexts(LocalIdentContext.class);
		}
		public LocalIdentContext localIdent(int i) {
			return getRuleContext(LocalIdentContext.class,i);
		}
		public TerminalNode UNWIND() { return getToken(LLVMParser.UNWIND, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public InvokeTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invokeTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterInvokeTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitInvokeTerm(this);
		}
	}

	public final InvokeTermContext invokeTerm() throws RecognitionException {
		InvokeTermContext _localctx = new InvokeTermContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_invokeTerm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2661);
			match(INVOKE);
			setState(2662);
			optCallingConv();
			setState(2663);
			returnAttrs();
			setState(2664);
			llvmType(0);
			setState(2665);
			value();
			setState(2666);
			match(LPAREN);
			setState(2667);
			args();
			setState(2668);
			match(RPAREN);
			setState(2669);
			funcAttrs();
			setState(2670);
			operandBundles();
			setState(2671);
			match(TO);
			setState(2672);
			labelType();
			setState(2673);
			localIdent();
			setState(2674);
			match(UNWIND);
			setState(2675);
			labelType();
			setState(2676);
			localIdent();
			setState(2677);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResumeTermContext extends ParserRuleContext {
		public TerminalNode RESUME() { return getToken(LLVMParser.RESUME, 0); }
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public ResumeTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resumeTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterResumeTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitResumeTerm(this);
		}
	}

	public final ResumeTermContext resumeTerm() throws RecognitionException {
		ResumeTermContext _localctx = new ResumeTermContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_resumeTerm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2679);
			match(RESUME);
			setState(2680);
			llvmType(0);
			setState(2681);
			value();
			setState(2682);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CatchSwitchTermContext extends ParserRuleContext {
		public TerminalNode CATCHSWITCH() { return getToken(LLVMParser.CATCHSWITCH, 0); }
		public TerminalNode WITHIN() { return getToken(LLVMParser.WITHIN, 0); }
		public ExceptionScopeContext exceptionScope() {
			return getRuleContext(ExceptionScopeContext.class,0);
		}
		public TerminalNode LBRACK() { return getToken(LLVMParser.LBRACK, 0); }
		public LabelListContext labelList() {
			return getRuleContext(LabelListContext.class,0);
		}
		public TerminalNode RBRACK() { return getToken(LLVMParser.RBRACK, 0); }
		public TerminalNode UNWIND() { return getToken(LLVMParser.UNWIND, 0); }
		public UnwindTargetContext unwindTarget() {
			return getRuleContext(UnwindTargetContext.class,0);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public CatchSwitchTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catchSwitchTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterCatchSwitchTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitCatchSwitchTerm(this);
		}
	}

	public final CatchSwitchTermContext catchSwitchTerm() throws RecognitionException {
		CatchSwitchTermContext _localctx = new CatchSwitchTermContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_catchSwitchTerm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2684);
			match(CATCHSWITCH);
			setState(2685);
			match(WITHIN);
			setState(2686);
			exceptionScope();
			setState(2687);
			match(LBRACK);
			setState(2688);
			labelList(0);
			setState(2689);
			match(RBRACK);
			setState(2690);
			match(UNWIND);
			setState(2691);
			unwindTarget();
			setState(2692);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CatchRetTermContext extends ParserRuleContext {
		public TerminalNode CATCHRET() { return getToken(LLVMParser.CATCHRET, 0); }
		public TerminalNode FROM() { return getToken(LLVMParser.FROM, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public LabelTypeContext labelType() {
			return getRuleContext(LabelTypeContext.class,0);
		}
		public LocalIdentContext localIdent() {
			return getRuleContext(LocalIdentContext.class,0);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public CatchRetTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catchRetTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterCatchRetTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitCatchRetTerm(this);
		}
	}

	public final CatchRetTermContext catchRetTerm() throws RecognitionException {
		CatchRetTermContext _localctx = new CatchRetTermContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_catchRetTerm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2694);
			match(CATCHRET);
			setState(2695);
			match(FROM);
			setState(2696);
			value();
			setState(2697);
			match(TO);
			setState(2698);
			labelType();
			setState(2699);
			localIdent();
			setState(2700);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CleanupRetTermContext extends ParserRuleContext {
		public TerminalNode CLEANUPRET() { return getToken(LLVMParser.CLEANUPRET, 0); }
		public TerminalNode FROM() { return getToken(LLVMParser.FROM, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode UNWIND() { return getToken(LLVMParser.UNWIND, 0); }
		public UnwindTargetContext unwindTarget() {
			return getRuleContext(UnwindTargetContext.class,0);
		}
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public CleanupRetTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cleanupRetTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterCleanupRetTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitCleanupRetTerm(this);
		}
	}

	public final CleanupRetTermContext cleanupRetTerm() throws RecognitionException {
		CleanupRetTermContext _localctx = new CleanupRetTermContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_cleanupRetTerm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2702);
			match(CLEANUPRET);
			setState(2703);
			match(FROM);
			setState(2704);
			value();
			setState(2705);
			match(UNWIND);
			setState(2706);
			unwindTarget();
			setState(2707);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnreachableTermContext extends ParserRuleContext {
		public TerminalNode UNREACHABLE() { return getToken(LLVMParser.UNREACHABLE, 0); }
		public OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() {
			return getRuleContext(OptCommaSepMetadataAttachmentListContext.class,0);
		}
		public UnreachableTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreachableTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterUnreachableTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitUnreachableTerm(this);
		}
	}

	public final UnreachableTermContext unreachableTerm() throws RecognitionException {
		UnreachableTermContext _localctx = new UnreachableTermContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_unreachableTerm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2709);
			match(UNREACHABLE);
			setState(2710);
			optCommaSepMetadataAttachmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnwindTargetContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(LLVMParser.TO, 0); }
		public TerminalNode CALLER() { return getToken(LLVMParser.CALLER, 0); }
		public LabelTypeContext labelType() {
			return getRuleContext(LabelTypeContext.class,0);
		}
		public LocalIdentContext localIdent() {
			return getRuleContext(LocalIdentContext.class,0);
		}
		public UnwindTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unwindTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterUnwindTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitUnwindTarget(this);
		}
	}

	public final UnwindTargetContext unwindTarget() throws RecognitionException {
		UnwindTargetContext _localctx = new UnwindTargetContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_unwindTarget);
		try {
			setState(2717);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				enterOuterAlt(_localctx, 1);
				{
				setState(2712);
				match(TO);
				setState(2713);
				match(CALLER);
				}
				break;
			case LABEL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2714);
				labelType();
				setState(2715);
				localIdent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MdTupleContext extends ParserRuleContext {
		public TerminalNode BANG() { return getToken(LLVMParser.BANG, 0); }
		public MdFieldsContext mdFields() {
			return getRuleContext(MdFieldsContext.class,0);
		}
		public MdTupleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mdTuple; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMdTuple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMdTuple(this);
		}
	}

	public final MdTupleContext mdTuple() throws RecognitionException {
		MdTupleContext _localctx = new MdTupleContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_mdTuple);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2719);
			match(BANG);
			setState(2720);
			mdFields();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MdFieldsContext extends ParserRuleContext {
		public TerminalNode LBRACE() { return getToken(LLVMParser.LBRACE, 0); }
		public TerminalNode RBRACE() { return getToken(LLVMParser.RBRACE, 0); }
		public MdFieldListContext mdFieldList() {
			return getRuleContext(MdFieldListContext.class,0);
		}
		public MdFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mdFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMdFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMdFields(this);
		}
	}

	public final MdFieldsContext mdFields() throws RecognitionException {
		MdFieldsContext _localctx = new MdFieldsContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_mdFields);
		try {
			setState(2728);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2722);
				match(LBRACE);
				setState(2723);
				match(RBRACE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2724);
				match(LBRACE);
				setState(2725);
				mdFieldList(0);
				setState(2726);
				match(RBRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MdFieldListContext extends ParserRuleContext {
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public MdFieldListContext mdFieldList() {
			return getRuleContext(MdFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public MdFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mdFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMdFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMdFieldList(this);
		}
	}

	public final MdFieldListContext mdFieldList() throws RecognitionException {
		return mdFieldList(0);
	}

	private MdFieldListContext mdFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		MdFieldListContext _localctx = new MdFieldListContext(_ctx, _parentState);
		MdFieldListContext _prevctx = _localctx;
		int _startState = 440;
		enterRecursionRule(_localctx, 440, RULE_mdFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2731);
			mdField();
			}
			_ctx.stop = _input.LT(-1);
			setState(2738);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,91,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MdFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_mdFieldList);
					setState(2733);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2734);
					match(COMMA);
					setState(2735);
					mdField();
					}
					} 
				}
				setState(2740);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,91,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class MdFieldContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(LLVMParser.NULL, 0); }
		public MetadataContext metadata() {
			return getRuleContext(MetadataContext.class,0);
		}
		public MdFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mdField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMdField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMdField(this);
		}
	}

	public final MdFieldContext mdField() throws RecognitionException {
		MdFieldContext _localctx = new MdFieldContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_mdField);
		try {
			setState(2743);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2741);
				match(NULL);
				}
				break;
			case LT:
			case BANG:
			case LBRACK:
			case LBRACE:
			case NOTDIBASICTYPE:
			case NOTDICOMPILEUNIT:
			case NOTDICOMPOSITETYPE:
			case NOTDIDERIVEDTYPE:
			case NOTDIENUMERATOR:
			case NOTDIEXPRESSION:
			case NOTDIFILE:
			case NOTDIGLOBALVARIABLE:
			case NOTDIGLOBALVARIABLEEXPRESSION:
			case NOTDIIMPORTEDENTITY:
			case NOTDILEXICALBLOCK:
			case NOTDILEXICALBLOCKFILE:
			case NOTDILOCALVARIABLE:
			case NOTDILOCATION:
			case NOTDIMACRO:
			case NOTDIMACROFILE:
			case NOTDIMODULE:
			case NOTDINAMESPACE:
			case NOTDIOBJCPROPERTY:
			case NOTDISUBPROGRAM:
			case NOTDISUBRANGE:
			case NOTDISUBROUTINETYPE:
			case NOTDITEMPLATETYPEPARAMETER:
			case NOTDITEMPLATEVALUEPARAMETER:
			case DOUBLE:
			case FLOAT:
			case FP128:
			case NOTGENERICDINODE:
			case HALF:
			case LABEL:
			case METADATA:
			case PPC_FP128:
			case TOKEN:
			case VOID:
			case X86_FP80:
			case X86_MMX:
			case METADATA_ID:
			case INT_TYPE:
			case LOCAL_IDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2742);
				metadata();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MetadataContext extends ParserRuleContext {
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public MdStringContext mdString() {
			return getRuleContext(MdStringContext.class,0);
		}
		public MdTupleContext mdTuple() {
			return getRuleContext(MdTupleContext.class,0);
		}
		public MetadataIDContext metadataID() {
			return getRuleContext(MetadataIDContext.class,0);
		}
		public SpecializedMDNodeContext specializedMDNode() {
			return getRuleContext(SpecializedMDNodeContext.class,0);
		}
		public MetadataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_metadata; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMetadata(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMetadata(this);
		}
	}

	public final MetadataContext metadata() throws RecognitionException {
		MetadataContext _localctx = new MetadataContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_metadata);
		try {
			setState(2752);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2745);
				llvmType(0);
				setState(2746);
				value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2748);
				mdString();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2749);
				mdTuple();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2750);
				metadataID();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2751);
				specializedMDNode();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MdStringContext extends ParserRuleContext {
		public TerminalNode BANG() { return getToken(LLVMParser.BANG, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public MdStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mdString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMdString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMdString(this);
		}
	}

	public final MdStringContext mdString() throws RecognitionException {
		MdStringContext _localctx = new MdStringContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_mdString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2754);
			match(BANG);
			setState(2755);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MetadataAttachmentContext extends ParserRuleContext {
		public MetadataNameContext metadataName() {
			return getRuleContext(MetadataNameContext.class,0);
		}
		public MdNodeContext mdNode() {
			return getRuleContext(MdNodeContext.class,0);
		}
		public MetadataAttachmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_metadataAttachment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMetadataAttachment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMetadataAttachment(this);
		}
	}

	public final MetadataAttachmentContext metadataAttachment() throws RecognitionException {
		MetadataAttachmentContext _localctx = new MetadataAttachmentContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_metadataAttachment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2757);
			metadataName();
			setState(2758);
			mdNode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MdNodeContext extends ParserRuleContext {
		public MdTupleContext mdTuple() {
			return getRuleContext(MdTupleContext.class,0);
		}
		public MetadataIDContext metadataID() {
			return getRuleContext(MetadataIDContext.class,0);
		}
		public SpecializedMDNodeContext specializedMDNode() {
			return getRuleContext(SpecializedMDNodeContext.class,0);
		}
		public MdNodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mdNode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMdNode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMdNode(this);
		}
	}

	public final MdNodeContext mdNode() throws RecognitionException {
		MdNodeContext _localctx = new MdNodeContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_mdNode);
		try {
			setState(2763);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BANG:
				enterOuterAlt(_localctx, 1);
				{
				setState(2760);
				mdTuple();
				}
				break;
			case METADATA_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(2761);
				metadataID();
				}
				break;
			case NOTDIBASICTYPE:
			case NOTDICOMPILEUNIT:
			case NOTDICOMPOSITETYPE:
			case NOTDIDERIVEDTYPE:
			case NOTDIENUMERATOR:
			case NOTDIEXPRESSION:
			case NOTDIFILE:
			case NOTDIGLOBALVARIABLE:
			case NOTDIGLOBALVARIABLEEXPRESSION:
			case NOTDIIMPORTEDENTITY:
			case NOTDILEXICALBLOCK:
			case NOTDILEXICALBLOCKFILE:
			case NOTDILOCALVARIABLE:
			case NOTDILOCATION:
			case NOTDIMACRO:
			case NOTDIMACROFILE:
			case NOTDIMODULE:
			case NOTDINAMESPACE:
			case NOTDIOBJCPROPERTY:
			case NOTDISUBPROGRAM:
			case NOTDISUBRANGE:
			case NOTDISUBROUTINETYPE:
			case NOTDITEMPLATETYPEPARAMETER:
			case NOTDITEMPLATEVALUEPARAMETER:
			case NOTGENERICDINODE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2762);
				specializedMDNode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MetadataAttachmentsContext extends ParserRuleContext {
		public MetadataAttachmentListContext metadataAttachmentList() {
			return getRuleContext(MetadataAttachmentListContext.class,0);
		}
		public MetadataAttachmentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_metadataAttachments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMetadataAttachments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMetadataAttachments(this);
		}
	}

	public final MetadataAttachmentsContext metadataAttachments() throws RecognitionException {
		MetadataAttachmentsContext _localctx = new MetadataAttachmentsContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_metadataAttachments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2766);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==METADATA_NAME) {
				{
				setState(2765);
				metadataAttachmentList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MetadataAttachmentListContext extends ParserRuleContext {
		public MetadataAttachmentContext metadataAttachment() {
			return getRuleContext(MetadataAttachmentContext.class,0);
		}
		public MetadataAttachmentListContext metadataAttachmentList() {
			return getRuleContext(MetadataAttachmentListContext.class,0);
		}
		public MetadataAttachmentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_metadataAttachmentList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterMetadataAttachmentList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitMetadataAttachmentList(this);
		}
	}

	public final MetadataAttachmentListContext metadataAttachmentList() throws RecognitionException {
		return metadataAttachmentList(0);
	}

	private MetadataAttachmentListContext metadataAttachmentList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		MetadataAttachmentListContext _localctx = new MetadataAttachmentListContext(_ctx, _parentState);
		MetadataAttachmentListContext _prevctx = _localctx;
		int _startState = 454;
		enterRecursionRule(_localctx, 454, RULE_metadataAttachmentList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2769);
			metadataAttachment();
			}
			_ctx.stop = _input.LT(-1);
			setState(2775);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,96,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MetadataAttachmentListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_metadataAttachmentList);
					setState(2771);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2772);
					metadataAttachment();
					}
					} 
				}
				setState(2777);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,96,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class OptCommaSepMetadataAttachmentListContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public CommaSepMetadataAttachmentListContext commaSepMetadataAttachmentList() {
			return getRuleContext(CommaSepMetadataAttachmentListContext.class,0);
		}
		public OptCommaSepMetadataAttachmentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optCommaSepMetadataAttachmentList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptCommaSepMetadataAttachmentList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptCommaSepMetadataAttachmentList(this);
		}
	}

	public final OptCommaSepMetadataAttachmentListContext optCommaSepMetadataAttachmentList() throws RecognitionException {
		OptCommaSepMetadataAttachmentListContext _localctx = new OptCommaSepMetadataAttachmentListContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_optCommaSepMetadataAttachmentList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2780);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				setState(2778);
				match(COMMA);
				setState(2779);
				commaSepMetadataAttachmentList(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommaSepMetadataAttachmentListContext extends ParserRuleContext {
		public MetadataAttachmentContext metadataAttachment() {
			return getRuleContext(MetadataAttachmentContext.class,0);
		}
		public CommaSepMetadataAttachmentListContext commaSepMetadataAttachmentList() {
			return getRuleContext(CommaSepMetadataAttachmentListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public CommaSepMetadataAttachmentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commaSepMetadataAttachmentList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterCommaSepMetadataAttachmentList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitCommaSepMetadataAttachmentList(this);
		}
	}

	public final CommaSepMetadataAttachmentListContext commaSepMetadataAttachmentList() throws RecognitionException {
		return commaSepMetadataAttachmentList(0);
	}

	private CommaSepMetadataAttachmentListContext commaSepMetadataAttachmentList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		CommaSepMetadataAttachmentListContext _localctx = new CommaSepMetadataAttachmentListContext(_ctx, _parentState);
		CommaSepMetadataAttachmentListContext _prevctx = _localctx;
		int _startState = 458;
		enterRecursionRule(_localctx, 458, RULE_commaSepMetadataAttachmentList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2783);
			metadataAttachment();
			}
			_ctx.stop = _input.LT(-1);
			setState(2790);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,98,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CommaSepMetadataAttachmentListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_commaSepMetadataAttachmentList);
					setState(2785);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2786);
					match(COMMA);
					setState(2787);
					metadataAttachment();
					}
					} 
				}
				setState(2792);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,98,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SpecializedMDNodeContext extends ParserRuleContext {
		public DiCompileUnitContext diCompileUnit() {
			return getRuleContext(DiCompileUnitContext.class,0);
		}
		public DiFileContext diFile() {
			return getRuleContext(DiFileContext.class,0);
		}
		public DiBasicTypeContext diBasicType() {
			return getRuleContext(DiBasicTypeContext.class,0);
		}
		public DiSubroutineTypeContext diSubroutineType() {
			return getRuleContext(DiSubroutineTypeContext.class,0);
		}
		public DiDerivedTypeContext diDerivedType() {
			return getRuleContext(DiDerivedTypeContext.class,0);
		}
		public DiCompositeTypeContext diCompositeType() {
			return getRuleContext(DiCompositeTypeContext.class,0);
		}
		public DiSubrangeContext diSubrange() {
			return getRuleContext(DiSubrangeContext.class,0);
		}
		public DiEnumeratorContext diEnumerator() {
			return getRuleContext(DiEnumeratorContext.class,0);
		}
		public DiTemplateTypeParameterContext diTemplateTypeParameter() {
			return getRuleContext(DiTemplateTypeParameterContext.class,0);
		}
		public DiTemplateValueParameterContext diTemplateValueParameter() {
			return getRuleContext(DiTemplateValueParameterContext.class,0);
		}
		public DiModuleContext diModule() {
			return getRuleContext(DiModuleContext.class,0);
		}
		public DiNamespaceContext diNamespace() {
			return getRuleContext(DiNamespaceContext.class,0);
		}
		public DiGlobalVariableContext diGlobalVariable() {
			return getRuleContext(DiGlobalVariableContext.class,0);
		}
		public DiSubprogramContext diSubprogram() {
			return getRuleContext(DiSubprogramContext.class,0);
		}
		public DiLexicalBlockContext diLexicalBlock() {
			return getRuleContext(DiLexicalBlockContext.class,0);
		}
		public DiLexicalBlockFileContext diLexicalBlockFile() {
			return getRuleContext(DiLexicalBlockFileContext.class,0);
		}
		public DiLocationContext diLocation() {
			return getRuleContext(DiLocationContext.class,0);
		}
		public DiLocalVariableContext diLocalVariable() {
			return getRuleContext(DiLocalVariableContext.class,0);
		}
		public DiExpressionContext diExpression() {
			return getRuleContext(DiExpressionContext.class,0);
		}
		public DiGlobalVariableExpressionContext diGlobalVariableExpression() {
			return getRuleContext(DiGlobalVariableExpressionContext.class,0);
		}
		public DiObjCPropertyContext diObjCProperty() {
			return getRuleContext(DiObjCPropertyContext.class,0);
		}
		public DiImportedEntityContext diImportedEntity() {
			return getRuleContext(DiImportedEntityContext.class,0);
		}
		public DiMacroContext diMacro() {
			return getRuleContext(DiMacroContext.class,0);
		}
		public DiMacroFileContext diMacroFile() {
			return getRuleContext(DiMacroFileContext.class,0);
		}
		public GenericDINodeContext genericDINode() {
			return getRuleContext(GenericDINodeContext.class,0);
		}
		public SpecializedMDNodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specializedMDNode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSpecializedMDNode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSpecializedMDNode(this);
		}
	}

	public final SpecializedMDNodeContext specializedMDNode() throws RecognitionException {
		SpecializedMDNodeContext _localctx = new SpecializedMDNodeContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_specializedMDNode);
		try {
			setState(2818);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOTDICOMPILEUNIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2793);
				diCompileUnit();
				}
				break;
			case NOTDIFILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2794);
				diFile();
				}
				break;
			case NOTDIBASICTYPE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2795);
				diBasicType();
				}
				break;
			case NOTDISUBROUTINETYPE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2796);
				diSubroutineType();
				}
				break;
			case NOTDIDERIVEDTYPE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2797);
				diDerivedType();
				}
				break;
			case NOTDICOMPOSITETYPE:
				enterOuterAlt(_localctx, 6);
				{
				setState(2798);
				diCompositeType();
				}
				break;
			case NOTDISUBRANGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2799);
				diSubrange();
				}
				break;
			case NOTDIENUMERATOR:
				enterOuterAlt(_localctx, 8);
				{
				setState(2800);
				diEnumerator();
				}
				break;
			case NOTDITEMPLATETYPEPARAMETER:
				enterOuterAlt(_localctx, 9);
				{
				setState(2801);
				diTemplateTypeParameter();
				}
				break;
			case NOTDITEMPLATEVALUEPARAMETER:
				enterOuterAlt(_localctx, 10);
				{
				setState(2802);
				diTemplateValueParameter();
				}
				break;
			case NOTDIMODULE:
				enterOuterAlt(_localctx, 11);
				{
				setState(2803);
				diModule();
				}
				break;
			case NOTDINAMESPACE:
				enterOuterAlt(_localctx, 12);
				{
				setState(2804);
				diNamespace();
				}
				break;
			case NOTDIGLOBALVARIABLE:
				enterOuterAlt(_localctx, 13);
				{
				setState(2805);
				diGlobalVariable();
				}
				break;
			case NOTDISUBPROGRAM:
				enterOuterAlt(_localctx, 14);
				{
				setState(2806);
				diSubprogram();
				}
				break;
			case NOTDILEXICALBLOCK:
				enterOuterAlt(_localctx, 15);
				{
				setState(2807);
				diLexicalBlock();
				}
				break;
			case NOTDILEXICALBLOCKFILE:
				enterOuterAlt(_localctx, 16);
				{
				setState(2808);
				diLexicalBlockFile();
				}
				break;
			case NOTDILOCATION:
				enterOuterAlt(_localctx, 17);
				{
				setState(2809);
				diLocation();
				}
				break;
			case NOTDILOCALVARIABLE:
				enterOuterAlt(_localctx, 18);
				{
				setState(2810);
				diLocalVariable();
				}
				break;
			case NOTDIEXPRESSION:
				enterOuterAlt(_localctx, 19);
				{
				setState(2811);
				diExpression();
				}
				break;
			case NOTDIGLOBALVARIABLEEXPRESSION:
				enterOuterAlt(_localctx, 20);
				{
				setState(2812);
				diGlobalVariableExpression();
				}
				break;
			case NOTDIOBJCPROPERTY:
				enterOuterAlt(_localctx, 21);
				{
				setState(2813);
				diObjCProperty();
				}
				break;
			case NOTDIIMPORTEDENTITY:
				enterOuterAlt(_localctx, 22);
				{
				setState(2814);
				diImportedEntity();
				}
				break;
			case NOTDIMACRO:
				enterOuterAlt(_localctx, 23);
				{
				setState(2815);
				diMacro();
				}
				break;
			case NOTDIMACROFILE:
				enterOuterAlt(_localctx, 24);
				{
				setState(2816);
				diMacroFile();
				}
				break;
			case NOTGENERICDINODE:
				enterOuterAlt(_localctx, 25);
				{
				setState(2817);
				genericDINode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiCompileUnitContext extends ParserRuleContext {
		public TerminalNode NOTDICOMPILEUNIT() { return getToken(LLVMParser.NOTDICOMPILEUNIT, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiCompileUnitFieldsContext diCompileUnitFields() {
			return getRuleContext(DiCompileUnitFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiCompileUnitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diCompileUnit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiCompileUnit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiCompileUnit(this);
		}
	}

	public final DiCompileUnitContext diCompileUnit() throws RecognitionException {
		DiCompileUnitContext _localctx = new DiCompileUnitContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_diCompileUnit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2820);
			match(NOTDICOMPILEUNIT);
			setState(2821);
			match(LPAREN);
			setState(2822);
			diCompileUnitFields();
			setState(2823);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiCompileUnitFieldsContext extends ParserRuleContext {
		public DiCompileUnitFieldListContext diCompileUnitFieldList() {
			return getRuleContext(DiCompileUnitFieldListContext.class,0);
		}
		public DiCompileUnitFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diCompileUnitFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiCompileUnitFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiCompileUnitFields(this);
		}
	}

	public final DiCompileUnitFieldsContext diCompileUnitFields() throws RecognitionException {
		DiCompileUnitFieldsContext _localctx = new DiCompileUnitFieldsContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_diCompileUnitFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (DEBUGINFOFORPROFILINGCOLON - 90)) | (1L << (DWOIDCOLON - 90)) | (1L << (EMISSIONKINDCOLON - 90)) | (1L << (ENUMSCOLON - 90)))) != 0) || ((((_la - 154)) & ~0x3f) == 0 && ((1L << (_la - 154)) & ((1L << (FILECOLON - 154)) | (1L << (FLAGSCOLON - 154)) | (1L << (GLOBALSCOLON - 154)) | (1L << (GNUPUBNAMESCOLON - 154)) | (1L << (IMPORTSCOLON - 154)) | (1L << (ISOPTIMIZEDCOLON - 154)) | (1L << (LANGUAGECOLON - 154)))) != 0) || _la==MACROSCOLON || _la==PRODUCERCOLON || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (RETAINEDTYPESCOLON - 295)) | (1L << (RUNTIMEVERSIONCOLON - 295)) | (1L << (SPLITDEBUGFILENAMECOLON - 295)) | (1L << (SPLITDEBUGINLININGCOLON - 295)))) != 0)) {
				{
				setState(2825);
				diCompileUnitFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiCompileUnitFieldListContext extends ParserRuleContext {
		public DiCompileUnitFieldContext diCompileUnitField() {
			return getRuleContext(DiCompileUnitFieldContext.class,0);
		}
		public DiCompileUnitFieldListContext diCompileUnitFieldList() {
			return getRuleContext(DiCompileUnitFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiCompileUnitFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diCompileUnitFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiCompileUnitFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiCompileUnitFieldList(this);
		}
	}

	public final DiCompileUnitFieldListContext diCompileUnitFieldList() throws RecognitionException {
		return diCompileUnitFieldList(0);
	}

	private DiCompileUnitFieldListContext diCompileUnitFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiCompileUnitFieldListContext _localctx = new DiCompileUnitFieldListContext(_ctx, _parentState);
		DiCompileUnitFieldListContext _prevctx = _localctx;
		int _startState = 466;
		enterRecursionRule(_localctx, 466, RULE_diCompileUnitFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2829);
			diCompileUnitField();
			}
			_ctx.stop = _input.LT(-1);
			setState(2836);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,101,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiCompileUnitFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diCompileUnitFieldList);
					setState(2831);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2832);
					match(COMMA);
					setState(2833);
					diCompileUnitField();
					}
					} 
				}
				setState(2838);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,101,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiCompileUnitFieldContext extends ParserRuleContext {
		public TerminalNode LANGUAGECOLON() { return getToken(LLVMParser.LANGUAGECOLON, 0); }
		public DwarfLangContext dwarfLang() {
			return getRuleContext(DwarfLangContext.class,0);
		}
		public FileFieldContext fileField() {
			return getRuleContext(FileFieldContext.class,0);
		}
		public TerminalNode PRODUCERCOLON() { return getToken(LLVMParser.PRODUCERCOLON, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public IsOptimizedFieldContext isOptimizedField() {
			return getRuleContext(IsOptimizedFieldContext.class,0);
		}
		public TerminalNode FLAGSCOLON() { return getToken(LLVMParser.FLAGSCOLON, 0); }
		public TerminalNode RUNTIMEVERSIONCOLON() { return getToken(LLVMParser.RUNTIMEVERSIONCOLON, 0); }
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public TerminalNode SPLITDEBUGFILENAMECOLON() { return getToken(LLVMParser.SPLITDEBUGFILENAMECOLON, 0); }
		public TerminalNode EMISSIONKINDCOLON() { return getToken(LLVMParser.EMISSIONKINDCOLON, 0); }
		public EmissionKindContext emissionKind() {
			return getRuleContext(EmissionKindContext.class,0);
		}
		public TerminalNode ENUMSCOLON() { return getToken(LLVMParser.ENUMSCOLON, 0); }
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public TerminalNode RETAINEDTYPESCOLON() { return getToken(LLVMParser.RETAINEDTYPESCOLON, 0); }
		public TerminalNode GLOBALSCOLON() { return getToken(LLVMParser.GLOBALSCOLON, 0); }
		public TerminalNode IMPORTSCOLON() { return getToken(LLVMParser.IMPORTSCOLON, 0); }
		public TerminalNode MACROSCOLON() { return getToken(LLVMParser.MACROSCOLON, 0); }
		public TerminalNode DWOIDCOLON() { return getToken(LLVMParser.DWOIDCOLON, 0); }
		public TerminalNode SPLITDEBUGINLININGCOLON() { return getToken(LLVMParser.SPLITDEBUGINLININGCOLON, 0); }
		public BoolLitContext boolLit() {
			return getRuleContext(BoolLitContext.class,0);
		}
		public TerminalNode DEBUGINFOFORPROFILINGCOLON() { return getToken(LLVMParser.DEBUGINFOFORPROFILINGCOLON, 0); }
		public TerminalNode GNUPUBNAMESCOLON() { return getToken(LLVMParser.GNUPUBNAMESCOLON, 0); }
		public DiCompileUnitFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diCompileUnitField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiCompileUnitField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiCompileUnitField(this);
		}
	}

	public final DiCompileUnitFieldContext diCompileUnitField() throws RecognitionException {
		DiCompileUnitFieldContext _localctx = new DiCompileUnitFieldContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_diCompileUnitField);
		try {
			setState(2871);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LANGUAGECOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(2839);
				match(LANGUAGECOLON);
				setState(2840);
				dwarfLang();
				}
				break;
			case FILECOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(2841);
				fileField();
				}
				break;
			case PRODUCERCOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(2842);
				match(PRODUCERCOLON);
				setState(2843);
				stringLit();
				}
				break;
			case ISOPTIMIZEDCOLON:
				enterOuterAlt(_localctx, 4);
				{
				setState(2844);
				isOptimizedField();
				}
				break;
			case FLAGSCOLON:
				enterOuterAlt(_localctx, 5);
				{
				setState(2845);
				match(FLAGSCOLON);
				setState(2846);
				stringLit();
				}
				break;
			case RUNTIMEVERSIONCOLON:
				enterOuterAlt(_localctx, 6);
				{
				setState(2847);
				match(RUNTIMEVERSIONCOLON);
				setState(2848);
				intLit();
				}
				break;
			case SPLITDEBUGFILENAMECOLON:
				enterOuterAlt(_localctx, 7);
				{
				setState(2849);
				match(SPLITDEBUGFILENAMECOLON);
				setState(2850);
				stringLit();
				}
				break;
			case EMISSIONKINDCOLON:
				enterOuterAlt(_localctx, 8);
				{
				setState(2851);
				match(EMISSIONKINDCOLON);
				setState(2852);
				emissionKind();
				}
				break;
			case ENUMSCOLON:
				enterOuterAlt(_localctx, 9);
				{
				setState(2853);
				match(ENUMSCOLON);
				setState(2854);
				mdField();
				}
				break;
			case RETAINEDTYPESCOLON:
				enterOuterAlt(_localctx, 10);
				{
				setState(2855);
				match(RETAINEDTYPESCOLON);
				setState(2856);
				mdField();
				}
				break;
			case GLOBALSCOLON:
				enterOuterAlt(_localctx, 11);
				{
				setState(2857);
				match(GLOBALSCOLON);
				setState(2858);
				mdField();
				}
				break;
			case IMPORTSCOLON:
				enterOuterAlt(_localctx, 12);
				{
				setState(2859);
				match(IMPORTSCOLON);
				setState(2860);
				mdField();
				}
				break;
			case MACROSCOLON:
				enterOuterAlt(_localctx, 13);
				{
				setState(2861);
				match(MACROSCOLON);
				setState(2862);
				mdField();
				}
				break;
			case DWOIDCOLON:
				enterOuterAlt(_localctx, 14);
				{
				setState(2863);
				match(DWOIDCOLON);
				setState(2864);
				intLit();
				}
				break;
			case SPLITDEBUGINLININGCOLON:
				enterOuterAlt(_localctx, 15);
				{
				setState(2865);
				match(SPLITDEBUGINLININGCOLON);
				setState(2866);
				boolLit();
				}
				break;
			case DEBUGINFOFORPROFILINGCOLON:
				enterOuterAlt(_localctx, 16);
				{
				setState(2867);
				match(DEBUGINFOFORPROFILINGCOLON);
				setState(2868);
				boolLit();
				}
				break;
			case GNUPUBNAMESCOLON:
				enterOuterAlt(_localctx, 17);
				{
				setState(2869);
				match(GNUPUBNAMESCOLON);
				setState(2870);
				boolLit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiFileContext extends ParserRuleContext {
		public TerminalNode NOTDIFILE() { return getToken(LLVMParser.NOTDIFILE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiFileFieldsContext diFileFields() {
			return getRuleContext(DiFileFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiFileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diFile; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiFile(this);
		}
	}

	public final DiFileContext diFile() throws RecognitionException {
		DiFileContext _localctx = new DiFileContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_diFile);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2873);
			match(NOTDIFILE);
			setState(2874);
			match(LPAREN);
			setState(2875);
			diFileFields();
			setState(2876);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiFileFieldsContext extends ParserRuleContext {
		public DiFileFieldListContext diFileFieldList() {
			return getRuleContext(DiFileFieldListContext.class,0);
		}
		public DiFileFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diFileFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiFileFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiFileFields(this);
		}
	}

	public final DiFileFieldsContext diFileFields() throws RecognitionException {
		DiFileFieldsContext _localctx = new DiFileFieldsContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_diFileFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (CHECKSUMCOLON - 71)) | (1L << (CHECKSUMKINDCOLON - 71)) | (1L << (DIRECTORYCOLON - 71)))) != 0) || _la==FILENAMECOLON) {
				{
				setState(2878);
				diFileFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiFileFieldListContext extends ParserRuleContext {
		public DiFileFieldContext diFileField() {
			return getRuleContext(DiFileFieldContext.class,0);
		}
		public DiFileFieldListContext diFileFieldList() {
			return getRuleContext(DiFileFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiFileFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diFileFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiFileFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiFileFieldList(this);
		}
	}

	public final DiFileFieldListContext diFileFieldList() throws RecognitionException {
		return diFileFieldList(0);
	}

	private DiFileFieldListContext diFileFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiFileFieldListContext _localctx = new DiFileFieldListContext(_ctx, _parentState);
		DiFileFieldListContext _prevctx = _localctx;
		int _startState = 474;
		enterRecursionRule(_localctx, 474, RULE_diFileFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2882);
			diFileField();
			}
			_ctx.stop = _input.LT(-1);
			setState(2889);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,104,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiFileFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diFileFieldList);
					setState(2884);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2885);
					match(COMMA);
					setState(2886);
					diFileField();
					}
					} 
				}
				setState(2891);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,104,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiFileFieldContext extends ParserRuleContext {
		public TerminalNode FILENAMECOLON() { return getToken(LLVMParser.FILENAMECOLON, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode DIRECTORYCOLON() { return getToken(LLVMParser.DIRECTORYCOLON, 0); }
		public TerminalNode CHECKSUMKINDCOLON() { return getToken(LLVMParser.CHECKSUMKINDCOLON, 0); }
		public ChecksumkindContext checksumkind() {
			return getRuleContext(ChecksumkindContext.class,0);
		}
		public TerminalNode CHECKSUMCOLON() { return getToken(LLVMParser.CHECKSUMCOLON, 0); }
		public DiFileFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diFileField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiFileField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiFileField(this);
		}
	}

	public final DiFileFieldContext diFileField() throws RecognitionException {
		DiFileFieldContext _localctx = new DiFileFieldContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_diFileField);
		try {
			setState(2900);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILENAMECOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(2892);
				match(FILENAMECOLON);
				setState(2893);
				stringLit();
				}
				break;
			case DIRECTORYCOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(2894);
				match(DIRECTORYCOLON);
				setState(2895);
				stringLit();
				}
				break;
			case CHECKSUMKINDCOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(2896);
				match(CHECKSUMKINDCOLON);
				setState(2897);
				checksumkind();
				}
				break;
			case CHECKSUMCOLON:
				enterOuterAlt(_localctx, 4);
				{
				setState(2898);
				match(CHECKSUMCOLON);
				setState(2899);
				stringLit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiBasicTypeContext extends ParserRuleContext {
		public TerminalNode NOTDIBASICTYPE() { return getToken(LLVMParser.NOTDIBASICTYPE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiBasicTypeFieldsContext diBasicTypeFields() {
			return getRuleContext(DiBasicTypeFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiBasicTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diBasicType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiBasicType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiBasicType(this);
		}
	}

	public final DiBasicTypeContext diBasicType() throws RecognitionException {
		DiBasicTypeContext _localctx = new DiBasicTypeContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_diBasicType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2902);
			match(NOTDIBASICTYPE);
			setState(2903);
			match(LPAREN);
			setState(2904);
			diBasicTypeFields();
			setState(2905);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiBasicTypeFieldsContext extends ParserRuleContext {
		public DiBasicTypeFieldListContext diBasicTypeFieldList() {
			return getRuleContext(DiBasicTypeFieldListContext.class,0);
		}
		public DiBasicTypeFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diBasicTypeFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiBasicTypeFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiBasicTypeFields(this);
		}
	}

	public final DiBasicTypeFieldsContext diBasicTypeFields() throws RecognitionException {
		DiBasicTypeFieldsContext _localctx = new DiBasicTypeFieldsContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_diBasicTypeFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALIGNCOLON || _la==ENCODINGCOLON || _la==NAMECOLON || _la==SIZECOLON || _la==TAGCOLON) {
				{
				setState(2907);
				diBasicTypeFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiBasicTypeFieldListContext extends ParserRuleContext {
		public DiBasicTypeFieldContext diBasicTypeField() {
			return getRuleContext(DiBasicTypeFieldContext.class,0);
		}
		public DiBasicTypeFieldListContext diBasicTypeFieldList() {
			return getRuleContext(DiBasicTypeFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiBasicTypeFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diBasicTypeFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiBasicTypeFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiBasicTypeFieldList(this);
		}
	}

	public final DiBasicTypeFieldListContext diBasicTypeFieldList() throws RecognitionException {
		return diBasicTypeFieldList(0);
	}

	private DiBasicTypeFieldListContext diBasicTypeFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiBasicTypeFieldListContext _localctx = new DiBasicTypeFieldListContext(_ctx, _parentState);
		DiBasicTypeFieldListContext _prevctx = _localctx;
		int _startState = 482;
		enterRecursionRule(_localctx, 482, RULE_diBasicTypeFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2911);
			diBasicTypeField();
			}
			_ctx.stop = _input.LT(-1);
			setState(2918);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,107,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiBasicTypeFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diBasicTypeFieldList);
					setState(2913);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2914);
					match(COMMA);
					setState(2915);
					diBasicTypeField();
					}
					} 
				}
				setState(2920);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,107,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiBasicTypeFieldContext extends ParserRuleContext {
		public TagFieldContext tagField() {
			return getRuleContext(TagFieldContext.class,0);
		}
		public NameFieldContext nameField() {
			return getRuleContext(NameFieldContext.class,0);
		}
		public SizeFieldContext sizeField() {
			return getRuleContext(SizeFieldContext.class,0);
		}
		public AlignFieldContext alignField() {
			return getRuleContext(AlignFieldContext.class,0);
		}
		public TerminalNode ENCODINGCOLON() { return getToken(LLVMParser.ENCODINGCOLON, 0); }
		public DwarfAttEncodingContext dwarfAttEncoding() {
			return getRuleContext(DwarfAttEncodingContext.class,0);
		}
		public DiBasicTypeFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diBasicTypeField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiBasicTypeField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiBasicTypeField(this);
		}
	}

	public final DiBasicTypeFieldContext diBasicTypeField() throws RecognitionException {
		DiBasicTypeFieldContext _localctx = new DiBasicTypeFieldContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_diBasicTypeField);
		try {
			setState(2927);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TAGCOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(2921);
				tagField();
				}
				break;
			case NAMECOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(2922);
				nameField();
				}
				break;
			case SIZECOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(2923);
				sizeField();
				}
				break;
			case ALIGNCOLON:
				enterOuterAlt(_localctx, 4);
				{
				setState(2924);
				alignField();
				}
				break;
			case ENCODINGCOLON:
				enterOuterAlt(_localctx, 5);
				{
				setState(2925);
				match(ENCODINGCOLON);
				setState(2926);
				dwarfAttEncoding();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiSubroutineTypeContext extends ParserRuleContext {
		public TerminalNode NOTDISUBROUTINETYPE() { return getToken(LLVMParser.NOTDISUBROUTINETYPE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiSubroutineTypeFieldsContext diSubroutineTypeFields() {
			return getRuleContext(DiSubroutineTypeFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiSubroutineTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diSubroutineType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiSubroutineType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiSubroutineType(this);
		}
	}

	public final DiSubroutineTypeContext diSubroutineType() throws RecognitionException {
		DiSubroutineTypeContext _localctx = new DiSubroutineTypeContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_diSubroutineType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2929);
			match(NOTDISUBROUTINETYPE);
			setState(2930);
			match(LPAREN);
			setState(2931);
			diSubroutineTypeFields();
			setState(2932);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiSubroutineTypeFieldsContext extends ParserRuleContext {
		public DiSubroutineTypeFieldListContext diSubroutineTypeFieldList() {
			return getRuleContext(DiSubroutineTypeFieldListContext.class,0);
		}
		public DiSubroutineTypeFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diSubroutineTypeFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiSubroutineTypeFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiSubroutineTypeFields(this);
		}
	}

	public final DiSubroutineTypeFieldsContext diSubroutineTypeFields() throws RecognitionException {
		DiSubroutineTypeFieldsContext _localctx = new DiSubroutineTypeFieldsContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_diSubroutineTypeFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2935);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CCCOLON || _la==FLAGSCOLON || _la==TYPESCOLON) {
				{
				setState(2934);
				diSubroutineTypeFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiSubroutineTypeFieldListContext extends ParserRuleContext {
		public DiSubroutineTypeFieldContext diSubroutineTypeField() {
			return getRuleContext(DiSubroutineTypeFieldContext.class,0);
		}
		public DiSubroutineTypeFieldListContext diSubroutineTypeFieldList() {
			return getRuleContext(DiSubroutineTypeFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiSubroutineTypeFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diSubroutineTypeFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiSubroutineTypeFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiSubroutineTypeFieldList(this);
		}
	}

	public final DiSubroutineTypeFieldListContext diSubroutineTypeFieldList() throws RecognitionException {
		return diSubroutineTypeFieldList(0);
	}

	private DiSubroutineTypeFieldListContext diSubroutineTypeFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiSubroutineTypeFieldListContext _localctx = new DiSubroutineTypeFieldListContext(_ctx, _parentState);
		DiSubroutineTypeFieldListContext _prevctx = _localctx;
		int _startState = 490;
		enterRecursionRule(_localctx, 490, RULE_diSubroutineTypeFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2938);
			diSubroutineTypeField();
			}
			_ctx.stop = _input.LT(-1);
			setState(2945);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,110,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiSubroutineTypeFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diSubroutineTypeFieldList);
					setState(2940);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2941);
					match(COMMA);
					setState(2942);
					diSubroutineTypeField();
					}
					} 
				}
				setState(2947);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,110,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiSubroutineTypeFieldContext extends ParserRuleContext {
		public FlagsFieldContext flagsField() {
			return getRuleContext(FlagsFieldContext.class,0);
		}
		public TerminalNode CCCOLON() { return getToken(LLVMParser.CCCOLON, 0); }
		public DwarfCCContext dwarfCC() {
			return getRuleContext(DwarfCCContext.class,0);
		}
		public TerminalNode TYPESCOLON() { return getToken(LLVMParser.TYPESCOLON, 0); }
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public DiSubroutineTypeFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diSubroutineTypeField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiSubroutineTypeField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiSubroutineTypeField(this);
		}
	}

	public final DiSubroutineTypeFieldContext diSubroutineTypeField() throws RecognitionException {
		DiSubroutineTypeFieldContext _localctx = new DiSubroutineTypeFieldContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_diSubroutineTypeField);
		try {
			setState(2953);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FLAGSCOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(2948);
				flagsField();
				}
				break;
			case CCCOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(2949);
				match(CCCOLON);
				setState(2950);
				dwarfCC();
				}
				break;
			case TYPESCOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(2951);
				match(TYPESCOLON);
				setState(2952);
				mdField();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiDerivedTypeContext extends ParserRuleContext {
		public TerminalNode NOTDIDERIVEDTYPE() { return getToken(LLVMParser.NOTDIDERIVEDTYPE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiDerivedTypeFieldsContext diDerivedTypeFields() {
			return getRuleContext(DiDerivedTypeFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiDerivedTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diDerivedType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiDerivedType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiDerivedType(this);
		}
	}

	public final DiDerivedTypeContext diDerivedType() throws RecognitionException {
		DiDerivedTypeContext _localctx = new DiDerivedTypeContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_diDerivedType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2955);
			match(NOTDIDERIVEDTYPE);
			setState(2956);
			match(LPAREN);
			setState(2957);
			diDerivedTypeFields();
			setState(2958);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiDerivedTypeFieldsContext extends ParserRuleContext {
		public DiDerivedTypeFieldListContext diDerivedTypeFieldList() {
			return getRuleContext(DiDerivedTypeFieldListContext.class,0);
		}
		public DiDerivedTypeFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diDerivedTypeFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiDerivedTypeFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiDerivedTypeFields(this);
		}
	}

	public final DiDerivedTypeFieldsContext diDerivedTypeFields() throws RecognitionException {
		DiDerivedTypeFieldsContext _localctx = new DiDerivedTypeFieldsContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_diDerivedTypeFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALIGNCOLON || _la==BASETYPECOLON || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DWARFADDRESSSPACECOLON - 129)) | (1L << (EXTRADATACOLON - 129)) | (1L << (FILECOLON - 129)) | (1L << (FLAGSCOLON - 129)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (LINECOLON - 214)) | (1L << (NAMECOLON - 214)) | (1L << (OFFSETCOLON - 214)))) != 0) || ((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (SCOPECOLON - 306)) | (1L << (SIZECOLON - 306)) | (1L << (TAGCOLON - 306)))) != 0)) {
				{
				setState(2960);
				diDerivedTypeFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiDerivedTypeFieldListContext extends ParserRuleContext {
		public DiDerivedTypeFieldContext diDerivedTypeField() {
			return getRuleContext(DiDerivedTypeFieldContext.class,0);
		}
		public DiDerivedTypeFieldListContext diDerivedTypeFieldList() {
			return getRuleContext(DiDerivedTypeFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiDerivedTypeFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diDerivedTypeFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiDerivedTypeFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiDerivedTypeFieldList(this);
		}
	}

	public final DiDerivedTypeFieldListContext diDerivedTypeFieldList() throws RecognitionException {
		return diDerivedTypeFieldList(0);
	}

	private DiDerivedTypeFieldListContext diDerivedTypeFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiDerivedTypeFieldListContext _localctx = new DiDerivedTypeFieldListContext(_ctx, _parentState);
		DiDerivedTypeFieldListContext _prevctx = _localctx;
		int _startState = 498;
		enterRecursionRule(_localctx, 498, RULE_diDerivedTypeFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2964);
			diDerivedTypeField();
			}
			_ctx.stop = _input.LT(-1);
			setState(2971);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,113,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiDerivedTypeFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diDerivedTypeFieldList);
					setState(2966);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2967);
					match(COMMA);
					setState(2968);
					diDerivedTypeField();
					}
					} 
				}
				setState(2973);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,113,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiDerivedTypeFieldContext extends ParserRuleContext {
		public TagFieldContext tagField() {
			return getRuleContext(TagFieldContext.class,0);
		}
		public NameFieldContext nameField() {
			return getRuleContext(NameFieldContext.class,0);
		}
		public ScopeFieldContext scopeField() {
			return getRuleContext(ScopeFieldContext.class,0);
		}
		public FileFieldContext fileField() {
			return getRuleContext(FileFieldContext.class,0);
		}
		public LineFieldContext lineField() {
			return getRuleContext(LineFieldContext.class,0);
		}
		public BaseTypeFieldContext baseTypeField() {
			return getRuleContext(BaseTypeFieldContext.class,0);
		}
		public SizeFieldContext sizeField() {
			return getRuleContext(SizeFieldContext.class,0);
		}
		public AlignFieldContext alignField() {
			return getRuleContext(AlignFieldContext.class,0);
		}
		public OffsetFieldContext offsetField() {
			return getRuleContext(OffsetFieldContext.class,0);
		}
		public FlagsFieldContext flagsField() {
			return getRuleContext(FlagsFieldContext.class,0);
		}
		public TerminalNode EXTRADATACOLON() { return getToken(LLVMParser.EXTRADATACOLON, 0); }
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public TerminalNode DWARFADDRESSSPACECOLON() { return getToken(LLVMParser.DWARFADDRESSSPACECOLON, 0); }
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public DiDerivedTypeFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diDerivedTypeField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiDerivedTypeField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiDerivedTypeField(this);
		}
	}

	public final DiDerivedTypeFieldContext diDerivedTypeField() throws RecognitionException {
		DiDerivedTypeFieldContext _localctx = new DiDerivedTypeFieldContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_diDerivedTypeField);
		try {
			setState(2988);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TAGCOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(2974);
				tagField();
				}
				break;
			case NAMECOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(2975);
				nameField();
				}
				break;
			case SCOPECOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(2976);
				scopeField();
				}
				break;
			case FILECOLON:
				enterOuterAlt(_localctx, 4);
				{
				setState(2977);
				fileField();
				}
				break;
			case LINECOLON:
				enterOuterAlt(_localctx, 5);
				{
				setState(2978);
				lineField();
				}
				break;
			case BASETYPECOLON:
				enterOuterAlt(_localctx, 6);
				{
				setState(2979);
				baseTypeField();
				}
				break;
			case SIZECOLON:
				enterOuterAlt(_localctx, 7);
				{
				setState(2980);
				sizeField();
				}
				break;
			case ALIGNCOLON:
				enterOuterAlt(_localctx, 8);
				{
				setState(2981);
				alignField();
				}
				break;
			case OFFSETCOLON:
				enterOuterAlt(_localctx, 9);
				{
				setState(2982);
				offsetField();
				}
				break;
			case FLAGSCOLON:
				enterOuterAlt(_localctx, 10);
				{
				setState(2983);
				flagsField();
				}
				break;
			case EXTRADATACOLON:
				enterOuterAlt(_localctx, 11);
				{
				setState(2984);
				match(EXTRADATACOLON);
				setState(2985);
				mdField();
				}
				break;
			case DWARFADDRESSSPACECOLON:
				enterOuterAlt(_localctx, 12);
				{
				setState(2986);
				match(DWARFADDRESSSPACECOLON);
				setState(2987);
				intLit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiCompositeTypeContext extends ParserRuleContext {
		public TerminalNode NOTDICOMPOSITETYPE() { return getToken(LLVMParser.NOTDICOMPOSITETYPE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiCompositeTypeFieldsContext diCompositeTypeFields() {
			return getRuleContext(DiCompositeTypeFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiCompositeTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diCompositeType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiCompositeType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiCompositeType(this);
		}
	}

	public final DiCompositeTypeContext diCompositeType() throws RecognitionException {
		DiCompositeTypeContext _localctx = new DiCompositeTypeContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_diCompositeType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2990);
			match(NOTDICOMPOSITETYPE);
			setState(2991);
			match(LPAREN);
			setState(2992);
			diCompositeTypeFields();
			setState(2993);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiCompositeTypeFieldsContext extends ParserRuleContext {
		public DiCompositeTypeFieldListContext diCompositeTypeFieldList() {
			return getRuleContext(DiCompositeTypeFieldListContext.class,0);
		}
		public DiCompositeTypeFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diCompositeTypeFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiCompositeTypeFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiCompositeTypeFields(this);
		}
	}

	public final DiCompositeTypeFieldsContext diCompositeTypeFields() throws RecognitionException {
		DiCompositeTypeFieldsContext _localctx = new DiCompositeTypeFieldsContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_diCompositeTypeFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2996);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALIGNCOLON || _la==BASETYPECOLON || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (DISCRIMINATORCOLON - 117)) | (1L << (ELEMENTSCOLON - 117)) | (1L << (FILECOLON - 117)) | (1L << (FLAGSCOLON - 117)))) != 0) || ((((_la - 183)) & ~0x3f) == 0 && ((1L << (_la - 183)) & ((1L << (IDENTIFIERCOLON - 183)) | (1L << (LINECOLON - 183)) | (1L << (NAMECOLON - 183)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (OFFSETCOLON - 264)) | (1L << (RUNTIMELANGCOLON - 264)) | (1L << (SCOPECOLON - 264)) | (1L << (SIZECOLON - 264)))) != 0) || ((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & ((1L << (TAGCOLON - 343)) | (1L << (TEMPLATEPARAMSCOLON - 343)) | (1L << (VTABLEHOLDERCOLON - 343)))) != 0)) {
				{
				setState(2995);
				diCompositeTypeFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiCompositeTypeFieldListContext extends ParserRuleContext {
		public DiCompositeTypeFieldContext diCompositeTypeField() {
			return getRuleContext(DiCompositeTypeFieldContext.class,0);
		}
		public DiCompositeTypeFieldListContext diCompositeTypeFieldList() {
			return getRuleContext(DiCompositeTypeFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiCompositeTypeFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diCompositeTypeFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiCompositeTypeFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiCompositeTypeFieldList(this);
		}
	}

	public final DiCompositeTypeFieldListContext diCompositeTypeFieldList() throws RecognitionException {
		return diCompositeTypeFieldList(0);
	}

	private DiCompositeTypeFieldListContext diCompositeTypeFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiCompositeTypeFieldListContext _localctx = new DiCompositeTypeFieldListContext(_ctx, _parentState);
		DiCompositeTypeFieldListContext _prevctx = _localctx;
		int _startState = 506;
		enterRecursionRule(_localctx, 506, RULE_diCompositeTypeFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2999);
			diCompositeTypeField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3006);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,116,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiCompositeTypeFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diCompositeTypeFieldList);
					setState(3001);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3002);
					match(COMMA);
					setState(3003);
					diCompositeTypeField();
					}
					} 
				}
				setState(3008);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,116,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiCompositeTypeFieldContext extends ParserRuleContext {
		public TagFieldContext tagField() {
			return getRuleContext(TagFieldContext.class,0);
		}
		public NameFieldContext nameField() {
			return getRuleContext(NameFieldContext.class,0);
		}
		public ScopeFieldContext scopeField() {
			return getRuleContext(ScopeFieldContext.class,0);
		}
		public FileFieldContext fileField() {
			return getRuleContext(FileFieldContext.class,0);
		}
		public LineFieldContext lineField() {
			return getRuleContext(LineFieldContext.class,0);
		}
		public BaseTypeFieldContext baseTypeField() {
			return getRuleContext(BaseTypeFieldContext.class,0);
		}
		public SizeFieldContext sizeField() {
			return getRuleContext(SizeFieldContext.class,0);
		}
		public AlignFieldContext alignField() {
			return getRuleContext(AlignFieldContext.class,0);
		}
		public OffsetFieldContext offsetField() {
			return getRuleContext(OffsetFieldContext.class,0);
		}
		public FlagsFieldContext flagsField() {
			return getRuleContext(FlagsFieldContext.class,0);
		}
		public TerminalNode ELEMENTSCOLON() { return getToken(LLVMParser.ELEMENTSCOLON, 0); }
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public TerminalNode RUNTIMELANGCOLON() { return getToken(LLVMParser.RUNTIMELANGCOLON, 0); }
		public DwarfLangContext dwarfLang() {
			return getRuleContext(DwarfLangContext.class,0);
		}
		public TerminalNode VTABLEHOLDERCOLON() { return getToken(LLVMParser.VTABLEHOLDERCOLON, 0); }
		public TemplateParamsFieldContext templateParamsField() {
			return getRuleContext(TemplateParamsFieldContext.class,0);
		}
		public TerminalNode IDENTIFIERCOLON() { return getToken(LLVMParser.IDENTIFIERCOLON, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode DISCRIMINATORCOLON() { return getToken(LLVMParser.DISCRIMINATORCOLON, 0); }
		public DiCompositeTypeFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diCompositeTypeField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiCompositeTypeField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiCompositeTypeField(this);
		}
	}

	public final DiCompositeTypeFieldContext diCompositeTypeField() throws RecognitionException {
		DiCompositeTypeFieldContext _localctx = new DiCompositeTypeFieldContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_diCompositeTypeField);
		try {
			setState(3030);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TAGCOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3009);
				tagField();
				}
				break;
			case NAMECOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3010);
				nameField();
				}
				break;
			case SCOPECOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3011);
				scopeField();
				}
				break;
			case FILECOLON:
				enterOuterAlt(_localctx, 4);
				{
				setState(3012);
				fileField();
				}
				break;
			case LINECOLON:
				enterOuterAlt(_localctx, 5);
				{
				setState(3013);
				lineField();
				}
				break;
			case BASETYPECOLON:
				enterOuterAlt(_localctx, 6);
				{
				setState(3014);
				baseTypeField();
				}
				break;
			case SIZECOLON:
				enterOuterAlt(_localctx, 7);
				{
				setState(3015);
				sizeField();
				}
				break;
			case ALIGNCOLON:
				enterOuterAlt(_localctx, 8);
				{
				setState(3016);
				alignField();
				}
				break;
			case OFFSETCOLON:
				enterOuterAlt(_localctx, 9);
				{
				setState(3017);
				offsetField();
				}
				break;
			case FLAGSCOLON:
				enterOuterAlt(_localctx, 10);
				{
				setState(3018);
				flagsField();
				}
				break;
			case ELEMENTSCOLON:
				enterOuterAlt(_localctx, 11);
				{
				setState(3019);
				match(ELEMENTSCOLON);
				setState(3020);
				mdField();
				}
				break;
			case RUNTIMELANGCOLON:
				enterOuterAlt(_localctx, 12);
				{
				setState(3021);
				match(RUNTIMELANGCOLON);
				setState(3022);
				dwarfLang();
				}
				break;
			case VTABLEHOLDERCOLON:
				enterOuterAlt(_localctx, 13);
				{
				setState(3023);
				match(VTABLEHOLDERCOLON);
				setState(3024);
				mdField();
				}
				break;
			case TEMPLATEPARAMSCOLON:
				enterOuterAlt(_localctx, 14);
				{
				setState(3025);
				templateParamsField();
				}
				break;
			case IDENTIFIERCOLON:
				enterOuterAlt(_localctx, 15);
				{
				setState(3026);
				match(IDENTIFIERCOLON);
				setState(3027);
				stringLit();
				}
				break;
			case DISCRIMINATORCOLON:
				enterOuterAlt(_localctx, 16);
				{
				setState(3028);
				match(DISCRIMINATORCOLON);
				setState(3029);
				mdField();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiSubrangeContext extends ParserRuleContext {
		public TerminalNode NOTDISUBRANGE() { return getToken(LLVMParser.NOTDISUBRANGE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiSubrangeFieldsContext diSubrangeFields() {
			return getRuleContext(DiSubrangeFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiSubrangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diSubrange; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiSubrange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiSubrange(this);
		}
	}

	public final DiSubrangeContext diSubrange() throws RecognitionException {
		DiSubrangeContext _localctx = new DiSubrangeContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_diSubrange);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3032);
			match(NOTDISUBRANGE);
			setState(3033);
			match(LPAREN);
			setState(3034);
			diSubrangeFields();
			setState(3035);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiSubrangeFieldsContext extends ParserRuleContext {
		public DiSubrangeFieldListContext diSubrangeFieldList() {
			return getRuleContext(DiSubrangeFieldListContext.class,0);
		}
		public DiSubrangeFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diSubrangeFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiSubrangeFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiSubrangeFields(this);
		}
	}

	public final DiSubrangeFieldsContext diSubrangeFields() throws RecognitionException {
		DiSubrangeFieldsContext _localctx = new DiSubrangeFieldsContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_diSubrangeFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COUNTCOLON || _la==LOWERBOUNDCOLON) {
				{
				setState(3037);
				diSubrangeFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiSubrangeFieldListContext extends ParserRuleContext {
		public DiSubrangeFieldContext diSubrangeField() {
			return getRuleContext(DiSubrangeFieldContext.class,0);
		}
		public DiSubrangeFieldListContext diSubrangeFieldList() {
			return getRuleContext(DiSubrangeFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiSubrangeFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diSubrangeFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiSubrangeFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiSubrangeFieldList(this);
		}
	}

	public final DiSubrangeFieldListContext diSubrangeFieldList() throws RecognitionException {
		return diSubrangeFieldList(0);
	}

	private DiSubrangeFieldListContext diSubrangeFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiSubrangeFieldListContext _localctx = new DiSubrangeFieldListContext(_ctx, _parentState);
		DiSubrangeFieldListContext _prevctx = _localctx;
		int _startState = 514;
		enterRecursionRule(_localctx, 514, RULE_diSubrangeFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3041);
			diSubrangeField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3048);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,119,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiSubrangeFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diSubrangeFieldList);
					setState(3043);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3044);
					match(COMMA);
					setState(3045);
					diSubrangeField();
					}
					} 
				}
				setState(3050);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,119,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiSubrangeFieldContext extends ParserRuleContext {
		public TerminalNode COUNTCOLON() { return getToken(LLVMParser.COUNTCOLON, 0); }
		public IntOrMDFieldContext intOrMDField() {
			return getRuleContext(IntOrMDFieldContext.class,0);
		}
		public TerminalNode LOWERBOUNDCOLON() { return getToken(LLVMParser.LOWERBOUNDCOLON, 0); }
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public DiSubrangeFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diSubrangeField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiSubrangeField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiSubrangeField(this);
		}
	}

	public final DiSubrangeFieldContext diSubrangeField() throws RecognitionException {
		DiSubrangeFieldContext _localctx = new DiSubrangeFieldContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_diSubrangeField);
		try {
			setState(3055);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COUNTCOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3051);
				match(COUNTCOLON);
				setState(3052);
				intOrMDField();
				}
				break;
			case LOWERBOUNDCOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3053);
				match(LOWERBOUNDCOLON);
				setState(3054);
				intLit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiEnumeratorContext extends ParserRuleContext {
		public TerminalNode NOTDIENUMERATOR() { return getToken(LLVMParser.NOTDIENUMERATOR, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiEnumeratorFieldsContext diEnumeratorFields() {
			return getRuleContext(DiEnumeratorFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiEnumeratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diEnumerator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiEnumerator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiEnumerator(this);
		}
	}

	public final DiEnumeratorContext diEnumerator() throws RecognitionException {
		DiEnumeratorContext _localctx = new DiEnumeratorContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_diEnumerator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3057);
			match(NOTDIENUMERATOR);
			setState(3058);
			match(LPAREN);
			setState(3059);
			diEnumeratorFields();
			setState(3060);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiEnumeratorFieldsContext extends ParserRuleContext {
		public DiEnumeratorFieldListContext diEnumeratorFieldList() {
			return getRuleContext(DiEnumeratorFieldListContext.class,0);
		}
		public DiEnumeratorFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diEnumeratorFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiEnumeratorFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiEnumeratorFields(this);
		}
	}

	public final DiEnumeratorFieldsContext diEnumeratorFields() throws RecognitionException {
		DiEnumeratorFieldsContext _localctx = new DiEnumeratorFieldsContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_diEnumeratorFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3063);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ISUNSIGNEDCOLON || _la==NAMECOLON || _la==VALUECOLON) {
				{
				setState(3062);
				diEnumeratorFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiEnumeratorFieldListContext extends ParserRuleContext {
		public DiEnumeratorFieldContext diEnumeratorField() {
			return getRuleContext(DiEnumeratorFieldContext.class,0);
		}
		public DiEnumeratorFieldListContext diEnumeratorFieldList() {
			return getRuleContext(DiEnumeratorFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiEnumeratorFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diEnumeratorFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiEnumeratorFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiEnumeratorFieldList(this);
		}
	}

	public final DiEnumeratorFieldListContext diEnumeratorFieldList() throws RecognitionException {
		return diEnumeratorFieldList(0);
	}

	private DiEnumeratorFieldListContext diEnumeratorFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiEnumeratorFieldListContext _localctx = new DiEnumeratorFieldListContext(_ctx, _parentState);
		DiEnumeratorFieldListContext _prevctx = _localctx;
		int _startState = 522;
		enterRecursionRule(_localctx, 522, RULE_diEnumeratorFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3066);
			diEnumeratorField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3073);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,122,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiEnumeratorFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diEnumeratorFieldList);
					setState(3068);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3069);
					match(COMMA);
					setState(3070);
					diEnumeratorField();
					}
					} 
				}
				setState(3075);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,122,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiEnumeratorFieldContext extends ParserRuleContext {
		public NameFieldContext nameField() {
			return getRuleContext(NameFieldContext.class,0);
		}
		public TerminalNode VALUECOLON() { return getToken(LLVMParser.VALUECOLON, 0); }
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public TerminalNode ISUNSIGNEDCOLON() { return getToken(LLVMParser.ISUNSIGNEDCOLON, 0); }
		public BoolLitContext boolLit() {
			return getRuleContext(BoolLitContext.class,0);
		}
		public DiEnumeratorFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diEnumeratorField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiEnumeratorField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiEnumeratorField(this);
		}
	}

	public final DiEnumeratorFieldContext diEnumeratorField() throws RecognitionException {
		DiEnumeratorFieldContext _localctx = new DiEnumeratorFieldContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_diEnumeratorField);
		try {
			setState(3081);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAMECOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3076);
				nameField();
				}
				break;
			case VALUECOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3077);
				match(VALUECOLON);
				setState(3078);
				intLit();
				}
				break;
			case ISUNSIGNEDCOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3079);
				match(ISUNSIGNEDCOLON);
				setState(3080);
				boolLit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiTemplateTypeParameterContext extends ParserRuleContext {
		public TerminalNode NOTDITEMPLATETYPEPARAMETER() { return getToken(LLVMParser.NOTDITEMPLATETYPEPARAMETER, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiTemplateTypeParameterFieldsContext diTemplateTypeParameterFields() {
			return getRuleContext(DiTemplateTypeParameterFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiTemplateTypeParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diTemplateTypeParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiTemplateTypeParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiTemplateTypeParameter(this);
		}
	}

	public final DiTemplateTypeParameterContext diTemplateTypeParameter() throws RecognitionException {
		DiTemplateTypeParameterContext _localctx = new DiTemplateTypeParameterContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_diTemplateTypeParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3083);
			match(NOTDITEMPLATETYPEPARAMETER);
			setState(3084);
			match(LPAREN);
			setState(3085);
			diTemplateTypeParameterFields();
			setState(3086);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiTemplateTypeParameterFieldsContext extends ParserRuleContext {
		public DiTemplateTypeParameterFieldListContext diTemplateTypeParameterFieldList() {
			return getRuleContext(DiTemplateTypeParameterFieldListContext.class,0);
		}
		public DiTemplateTypeParameterFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diTemplateTypeParameterFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiTemplateTypeParameterFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiTemplateTypeParameterFields(this);
		}
	}

	public final DiTemplateTypeParameterFieldsContext diTemplateTypeParameterFields() throws RecognitionException {
		DiTemplateTypeParameterFieldsContext _localctx = new DiTemplateTypeParameterFieldsContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_diTemplateTypeParameterFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3089);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAMECOLON || _la==TYPECOLON) {
				{
				setState(3088);
				diTemplateTypeParameterFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiTemplateTypeParameterFieldListContext extends ParserRuleContext {
		public DiTemplateTypeParameterFieldContext diTemplateTypeParameterField() {
			return getRuleContext(DiTemplateTypeParameterFieldContext.class,0);
		}
		public DiTemplateTypeParameterFieldListContext diTemplateTypeParameterFieldList() {
			return getRuleContext(DiTemplateTypeParameterFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiTemplateTypeParameterFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diTemplateTypeParameterFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiTemplateTypeParameterFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiTemplateTypeParameterFieldList(this);
		}
	}

	public final DiTemplateTypeParameterFieldListContext diTemplateTypeParameterFieldList() throws RecognitionException {
		return diTemplateTypeParameterFieldList(0);
	}

	private DiTemplateTypeParameterFieldListContext diTemplateTypeParameterFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiTemplateTypeParameterFieldListContext _localctx = new DiTemplateTypeParameterFieldListContext(_ctx, _parentState);
		DiTemplateTypeParameterFieldListContext _prevctx = _localctx;
		int _startState = 530;
		enterRecursionRule(_localctx, 530, RULE_diTemplateTypeParameterFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3092);
			diTemplateTypeParameterField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3099);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,125,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiTemplateTypeParameterFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diTemplateTypeParameterFieldList);
					setState(3094);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3095);
					match(COMMA);
					setState(3096);
					diTemplateTypeParameterField();
					}
					} 
				}
				setState(3101);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,125,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiTemplateTypeParameterFieldContext extends ParserRuleContext {
		public NameFieldContext nameField() {
			return getRuleContext(NameFieldContext.class,0);
		}
		public TypeFieldContext typeField() {
			return getRuleContext(TypeFieldContext.class,0);
		}
		public DiTemplateTypeParameterFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diTemplateTypeParameterField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiTemplateTypeParameterField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiTemplateTypeParameterField(this);
		}
	}

	public final DiTemplateTypeParameterFieldContext diTemplateTypeParameterField() throws RecognitionException {
		DiTemplateTypeParameterFieldContext _localctx = new DiTemplateTypeParameterFieldContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_diTemplateTypeParameterField);
		try {
			setState(3104);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAMECOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3102);
				nameField();
				}
				break;
			case TYPECOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3103);
				typeField();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiTemplateValueParameterContext extends ParserRuleContext {
		public TerminalNode NOTDITEMPLATEVALUEPARAMETER() { return getToken(LLVMParser.NOTDITEMPLATEVALUEPARAMETER, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiTemplateValueParameterFieldsContext diTemplateValueParameterFields() {
			return getRuleContext(DiTemplateValueParameterFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiTemplateValueParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diTemplateValueParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiTemplateValueParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiTemplateValueParameter(this);
		}
	}

	public final DiTemplateValueParameterContext diTemplateValueParameter() throws RecognitionException {
		DiTemplateValueParameterContext _localctx = new DiTemplateValueParameterContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_diTemplateValueParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3106);
			match(NOTDITEMPLATEVALUEPARAMETER);
			setState(3107);
			match(LPAREN);
			setState(3108);
			diTemplateValueParameterFields();
			setState(3109);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiTemplateValueParameterFieldsContext extends ParserRuleContext {
		public DiTemplateValueParameterFieldListContext diTemplateValueParameterFieldList() {
			return getRuleContext(DiTemplateValueParameterFieldListContext.class,0);
		}
		public DiTemplateValueParameterFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diTemplateValueParameterFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiTemplateValueParameterFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiTemplateValueParameterFields(this);
		}
	}

	public final DiTemplateValueParameterFieldsContext diTemplateValueParameterFields() throws RecognitionException {
		DiTemplateValueParameterFieldsContext _localctx = new DiTemplateValueParameterFieldsContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_diTemplateValueParameterFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAMECOLON || ((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & ((1L << (TAGCOLON - 343)) | (1L << (TYPECOLON - 343)) | (1L << (VALUECOLON - 343)))) != 0)) {
				{
				setState(3111);
				diTemplateValueParameterFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiTemplateValueParameterFieldListContext extends ParserRuleContext {
		public DiTemplateValueParameterFieldContext diTemplateValueParameterField() {
			return getRuleContext(DiTemplateValueParameterFieldContext.class,0);
		}
		public DiTemplateValueParameterFieldListContext diTemplateValueParameterFieldList() {
			return getRuleContext(DiTemplateValueParameterFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiTemplateValueParameterFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diTemplateValueParameterFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiTemplateValueParameterFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiTemplateValueParameterFieldList(this);
		}
	}

	public final DiTemplateValueParameterFieldListContext diTemplateValueParameterFieldList() throws RecognitionException {
		return diTemplateValueParameterFieldList(0);
	}

	private DiTemplateValueParameterFieldListContext diTemplateValueParameterFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiTemplateValueParameterFieldListContext _localctx = new DiTemplateValueParameterFieldListContext(_ctx, _parentState);
		DiTemplateValueParameterFieldListContext _prevctx = _localctx;
		int _startState = 538;
		enterRecursionRule(_localctx, 538, RULE_diTemplateValueParameterFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3115);
			diTemplateValueParameterField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3122);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,128,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiTemplateValueParameterFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diTemplateValueParameterFieldList);
					setState(3117);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3118);
					match(COMMA);
					setState(3119);
					diTemplateValueParameterField();
					}
					} 
				}
				setState(3124);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,128,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiTemplateValueParameterFieldContext extends ParserRuleContext {
		public TagFieldContext tagField() {
			return getRuleContext(TagFieldContext.class,0);
		}
		public NameFieldContext nameField() {
			return getRuleContext(NameFieldContext.class,0);
		}
		public TypeFieldContext typeField() {
			return getRuleContext(TypeFieldContext.class,0);
		}
		public TerminalNode VALUECOLON() { return getToken(LLVMParser.VALUECOLON, 0); }
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public DiTemplateValueParameterFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diTemplateValueParameterField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiTemplateValueParameterField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiTemplateValueParameterField(this);
		}
	}

	public final DiTemplateValueParameterFieldContext diTemplateValueParameterField() throws RecognitionException {
		DiTemplateValueParameterFieldContext _localctx = new DiTemplateValueParameterFieldContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_diTemplateValueParameterField);
		try {
			setState(3130);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TAGCOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3125);
				tagField();
				}
				break;
			case NAMECOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3126);
				nameField();
				}
				break;
			case TYPECOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3127);
				typeField();
				}
				break;
			case VALUECOLON:
				enterOuterAlt(_localctx, 4);
				{
				setState(3128);
				match(VALUECOLON);
				setState(3129);
				mdField();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiModuleContext extends ParserRuleContext {
		public TerminalNode NOTDIMODULE() { return getToken(LLVMParser.NOTDIMODULE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiModuleFieldsContext diModuleFields() {
			return getRuleContext(DiModuleFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiModuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diModule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiModule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiModule(this);
		}
	}

	public final DiModuleContext diModule() throws RecognitionException {
		DiModuleContext _localctx = new DiModuleContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_diModule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3132);
			match(NOTDIMODULE);
			setState(3133);
			match(LPAREN);
			setState(3134);
			diModuleFields();
			setState(3135);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiModuleFieldsContext extends ParserRuleContext {
		public DiModuleFieldListContext diModuleFieldList() {
			return getRuleContext(DiModuleFieldListContext.class,0);
		}
		public DiModuleFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diModuleFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiModuleFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiModuleFields(this);
		}
	}

	public final DiModuleFieldsContext diModuleFields() throws RecognitionException {
		DiModuleFieldsContext _localctx = new DiModuleFieldsContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_diModuleFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONFIGMACROSCOLON || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (INCLUDEPATHCOLON - 190)) | (1L << (ISYSROOTCOLON - 190)) | (1L << (NAMECOLON - 190)))) != 0) || _la==SCOPECOLON) {
				{
				setState(3137);
				diModuleFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiModuleFieldListContext extends ParserRuleContext {
		public DiModuleFieldContext diModuleField() {
			return getRuleContext(DiModuleFieldContext.class,0);
		}
		public DiModuleFieldListContext diModuleFieldList() {
			return getRuleContext(DiModuleFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiModuleFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diModuleFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiModuleFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiModuleFieldList(this);
		}
	}

	public final DiModuleFieldListContext diModuleFieldList() throws RecognitionException {
		return diModuleFieldList(0);
	}

	private DiModuleFieldListContext diModuleFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiModuleFieldListContext _localctx = new DiModuleFieldListContext(_ctx, _parentState);
		DiModuleFieldListContext _prevctx = _localctx;
		int _startState = 546;
		enterRecursionRule(_localctx, 546, RULE_diModuleFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3141);
			diModuleField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3148);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,131,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiModuleFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diModuleFieldList);
					setState(3143);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3144);
					match(COMMA);
					setState(3145);
					diModuleField();
					}
					} 
				}
				setState(3150);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,131,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiModuleFieldContext extends ParserRuleContext {
		public ScopeFieldContext scopeField() {
			return getRuleContext(ScopeFieldContext.class,0);
		}
		public NameFieldContext nameField() {
			return getRuleContext(NameFieldContext.class,0);
		}
		public TerminalNode CONFIGMACROSCOLON() { return getToken(LLVMParser.CONFIGMACROSCOLON, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode INCLUDEPATHCOLON() { return getToken(LLVMParser.INCLUDEPATHCOLON, 0); }
		public TerminalNode ISYSROOTCOLON() { return getToken(LLVMParser.ISYSROOTCOLON, 0); }
		public DiModuleFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diModuleField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiModuleField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiModuleField(this);
		}
	}

	public final DiModuleFieldContext diModuleField() throws RecognitionException {
		DiModuleFieldContext _localctx = new DiModuleFieldContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_diModuleField);
		try {
			setState(3159);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCOPECOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3151);
				scopeField();
				}
				break;
			case NAMECOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3152);
				nameField();
				}
				break;
			case CONFIGMACROSCOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3153);
				match(CONFIGMACROSCOLON);
				setState(3154);
				stringLit();
				}
				break;
			case INCLUDEPATHCOLON:
				enterOuterAlt(_localctx, 4);
				{
				setState(3155);
				match(INCLUDEPATHCOLON);
				setState(3156);
				stringLit();
				}
				break;
			case ISYSROOTCOLON:
				enterOuterAlt(_localctx, 5);
				{
				setState(3157);
				match(ISYSROOTCOLON);
				setState(3158);
				stringLit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiNamespaceContext extends ParserRuleContext {
		public TerminalNode NOTDINAMESPACE() { return getToken(LLVMParser.NOTDINAMESPACE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiNamespaceFieldsContext diNamespaceFields() {
			return getRuleContext(DiNamespaceFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiNamespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diNamespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiNamespace(this);
		}
	}

	public final DiNamespaceContext diNamespace() throws RecognitionException {
		DiNamespaceContext _localctx = new DiNamespaceContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_diNamespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3161);
			match(NOTDINAMESPACE);
			setState(3162);
			match(LPAREN);
			setState(3163);
			diNamespaceFields();
			setState(3164);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiNamespaceFieldsContext extends ParserRuleContext {
		public DiNamespaceFieldListContext diNamespaceFieldList() {
			return getRuleContext(DiNamespaceFieldListContext.class,0);
		}
		public DiNamespaceFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diNamespaceFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiNamespaceFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiNamespaceFields(this);
		}
	}

	public final DiNamespaceFieldsContext diNamespaceFields() throws RecognitionException {
		DiNamespaceFieldsContext _localctx = new DiNamespaceFieldsContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_diNamespaceFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3167);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXPORTSYMBOLSCOLON || _la==NAMECOLON || _la==SCOPECOLON) {
				{
				setState(3166);
				diNamespaceFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiNamespaceFieldListContext extends ParserRuleContext {
		public DiNamespaceFieldContext diNamespaceField() {
			return getRuleContext(DiNamespaceFieldContext.class,0);
		}
		public DiNamespaceFieldListContext diNamespaceFieldList() {
			return getRuleContext(DiNamespaceFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiNamespaceFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diNamespaceFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiNamespaceFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiNamespaceFieldList(this);
		}
	}

	public final DiNamespaceFieldListContext diNamespaceFieldList() throws RecognitionException {
		return diNamespaceFieldList(0);
	}

	private DiNamespaceFieldListContext diNamespaceFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiNamespaceFieldListContext _localctx = new DiNamespaceFieldListContext(_ctx, _parentState);
		DiNamespaceFieldListContext _prevctx = _localctx;
		int _startState = 554;
		enterRecursionRule(_localctx, 554, RULE_diNamespaceFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3170);
			diNamespaceField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3177);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,134,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiNamespaceFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diNamespaceFieldList);
					setState(3172);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3173);
					match(COMMA);
					setState(3174);
					diNamespaceField();
					}
					} 
				}
				setState(3179);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,134,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiNamespaceFieldContext extends ParserRuleContext {
		public ScopeFieldContext scopeField() {
			return getRuleContext(ScopeFieldContext.class,0);
		}
		public NameFieldContext nameField() {
			return getRuleContext(NameFieldContext.class,0);
		}
		public TerminalNode EXPORTSYMBOLSCOLON() { return getToken(LLVMParser.EXPORTSYMBOLSCOLON, 0); }
		public BoolLitContext boolLit() {
			return getRuleContext(BoolLitContext.class,0);
		}
		public DiNamespaceFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diNamespaceField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiNamespaceField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiNamespaceField(this);
		}
	}

	public final DiNamespaceFieldContext diNamespaceField() throws RecognitionException {
		DiNamespaceFieldContext _localctx = new DiNamespaceFieldContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_diNamespaceField);
		try {
			setState(3184);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCOPECOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3180);
				scopeField();
				}
				break;
			case NAMECOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3181);
				nameField();
				}
				break;
			case EXPORTSYMBOLSCOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3182);
				match(EXPORTSYMBOLSCOLON);
				setState(3183);
				boolLit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiGlobalVariableContext extends ParserRuleContext {
		public TerminalNode NOTDIGLOBALVARIABLE() { return getToken(LLVMParser.NOTDIGLOBALVARIABLE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiGlobalVariableFieldsContext diGlobalVariableFields() {
			return getRuleContext(DiGlobalVariableFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiGlobalVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diGlobalVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiGlobalVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiGlobalVariable(this);
		}
	}

	public final DiGlobalVariableContext diGlobalVariable() throws RecognitionException {
		DiGlobalVariableContext _localctx = new DiGlobalVariableContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_diGlobalVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3186);
			match(NOTDIGLOBALVARIABLE);
			setState(3187);
			match(LPAREN);
			setState(3188);
			diGlobalVariableFields();
			setState(3189);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiGlobalVariableFieldsContext extends ParserRuleContext {
		public DiGlobalVariableFieldListContext diGlobalVariableFieldList() {
			return getRuleContext(DiGlobalVariableFieldListContext.class,0);
		}
		public DiGlobalVariableFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diGlobalVariableFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiGlobalVariableFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiGlobalVariableFields(this);
		}
	}

	public final DiGlobalVariableFieldsContext diGlobalVariableFields() throws RecognitionException {
		DiGlobalVariableFieldsContext _localctx = new DiGlobalVariableFieldsContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_diGlobalVariableFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3192);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALIGNCOLON || _la==DECLARATIONCOLON || _la==FILECOLON || ((((_la - 204)) & ~0x3f) == 0 && ((1L << (_la - 204)) & ((1L << (ISDEFINITIONCOLON - 204)) | (1L << (ISLOCALCOLON - 204)) | (1L << (LINECOLON - 204)) | (1L << (LINKAGENAMECOLON - 204)) | (1L << (NAMECOLON - 204)))) != 0) || _la==SCOPECOLON || _la==TYPECOLON) {
				{
				setState(3191);
				diGlobalVariableFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiGlobalVariableFieldListContext extends ParserRuleContext {
		public DiGlobalVariableFieldContext diGlobalVariableField() {
			return getRuleContext(DiGlobalVariableFieldContext.class,0);
		}
		public DiGlobalVariableFieldListContext diGlobalVariableFieldList() {
			return getRuleContext(DiGlobalVariableFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiGlobalVariableFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diGlobalVariableFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiGlobalVariableFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiGlobalVariableFieldList(this);
		}
	}

	public final DiGlobalVariableFieldListContext diGlobalVariableFieldList() throws RecognitionException {
		return diGlobalVariableFieldList(0);
	}

	private DiGlobalVariableFieldListContext diGlobalVariableFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiGlobalVariableFieldListContext _localctx = new DiGlobalVariableFieldListContext(_ctx, _parentState);
		DiGlobalVariableFieldListContext _prevctx = _localctx;
		int _startState = 562;
		enterRecursionRule(_localctx, 562, RULE_diGlobalVariableFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3195);
			diGlobalVariableField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3202);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,137,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiGlobalVariableFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diGlobalVariableFieldList);
					setState(3197);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3198);
					match(COMMA);
					setState(3199);
					diGlobalVariableField();
					}
					} 
				}
				setState(3204);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,137,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiGlobalVariableFieldContext extends ParserRuleContext {
		public NameFieldContext nameField() {
			return getRuleContext(NameFieldContext.class,0);
		}
		public ScopeFieldContext scopeField() {
			return getRuleContext(ScopeFieldContext.class,0);
		}
		public LinkageNameFieldContext linkageNameField() {
			return getRuleContext(LinkageNameFieldContext.class,0);
		}
		public FileFieldContext fileField() {
			return getRuleContext(FileFieldContext.class,0);
		}
		public LineFieldContext lineField() {
			return getRuleContext(LineFieldContext.class,0);
		}
		public TypeFieldContext typeField() {
			return getRuleContext(TypeFieldContext.class,0);
		}
		public IsLocalFieldContext isLocalField() {
			return getRuleContext(IsLocalFieldContext.class,0);
		}
		public IsDefinitionFieldContext isDefinitionField() {
			return getRuleContext(IsDefinitionFieldContext.class,0);
		}
		public DeclarationFieldContext declarationField() {
			return getRuleContext(DeclarationFieldContext.class,0);
		}
		public AlignFieldContext alignField() {
			return getRuleContext(AlignFieldContext.class,0);
		}
		public DiGlobalVariableFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diGlobalVariableField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiGlobalVariableField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiGlobalVariableField(this);
		}
	}

	public final DiGlobalVariableFieldContext diGlobalVariableField() throws RecognitionException {
		DiGlobalVariableFieldContext _localctx = new DiGlobalVariableFieldContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_diGlobalVariableField);
		try {
			setState(3215);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAMECOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3205);
				nameField();
				}
				break;
			case SCOPECOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3206);
				scopeField();
				}
				break;
			case LINKAGENAMECOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3207);
				linkageNameField();
				}
				break;
			case FILECOLON:
				enterOuterAlt(_localctx, 4);
				{
				setState(3208);
				fileField();
				}
				break;
			case LINECOLON:
				enterOuterAlt(_localctx, 5);
				{
				setState(3209);
				lineField();
				}
				break;
			case TYPECOLON:
				enterOuterAlt(_localctx, 6);
				{
				setState(3210);
				typeField();
				}
				break;
			case ISLOCALCOLON:
				enterOuterAlt(_localctx, 7);
				{
				setState(3211);
				isLocalField();
				}
				break;
			case ISDEFINITIONCOLON:
				enterOuterAlt(_localctx, 8);
				{
				setState(3212);
				isDefinitionField();
				}
				break;
			case DECLARATIONCOLON:
				enterOuterAlt(_localctx, 9);
				{
				setState(3213);
				declarationField();
				}
				break;
			case ALIGNCOLON:
				enterOuterAlt(_localctx, 10);
				{
				setState(3214);
				alignField();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiSubprogramContext extends ParserRuleContext {
		public TerminalNode NOTDISUBPROGRAM() { return getToken(LLVMParser.NOTDISUBPROGRAM, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiSubprogramFieldsContext diSubprogramFields() {
			return getRuleContext(DiSubprogramFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiSubprogramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diSubprogram; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiSubprogram(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiSubprogram(this);
		}
	}

	public final DiSubprogramContext diSubprogram() throws RecognitionException {
		DiSubprogramContext _localctx = new DiSubprogramContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_diSubprogram);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3217);
			match(NOTDISUBPROGRAM);
			setState(3218);
			match(LPAREN);
			setState(3219);
			diSubprogramFields();
			setState(3220);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiSubprogramFieldsContext extends ParserRuleContext {
		public DiSubprogramFieldListContext diSubprogramFieldList() {
			return getRuleContext(DiSubprogramFieldListContext.class,0);
		}
		public DiSubprogramFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diSubprogramFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiSubprogramFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiSubprogramFields(this);
		}
	}

	public final DiSubprogramFieldsContext diSubprogramFields() throws RecognitionException {
		DiSubprogramFieldsContext _localctx = new DiSubprogramFieldsContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_diSubprogramFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAININGTYPECOLON || _la==DECLARATIONCOLON || ((((_la - 154)) & ~0x3f) == 0 && ((1L << (_la - 154)) & ((1L << (FILECOLON - 154)) | (1L << (FLAGSCOLON - 154)) | (1L << (ISDEFINITIONCOLON - 154)) | (1L << (ISLOCALCOLON - 154)) | (1L << (ISOPTIMIZEDCOLON - 154)) | (1L << (LINECOLON - 154)) | (1L << (LINKAGENAMECOLON - 154)))) != 0) || _la==NAMECOLON || ((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (SCOPECOLON - 306)) | (1L << (SCOPELINECOLON - 306)) | (1L << (TEMPLATEPARAMSCOLON - 306)) | (1L << (THISADJUSTMENTCOLON - 306)) | (1L << (THROWNTYPESCOLON - 306)) | (1L << (TYPECOLON - 306)) | (1L << (UNITCOLON - 306)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (VARIABLESCOLON - 382)) | (1L << (VIRTUALINDEXCOLON - 382)) | (1L << (VIRTUALITYCOLON - 382)))) != 0)) {
				{
				setState(3222);
				diSubprogramFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiSubprogramFieldListContext extends ParserRuleContext {
		public DiSubprogramFieldContext diSubprogramField() {
			return getRuleContext(DiSubprogramFieldContext.class,0);
		}
		public DiSubprogramFieldListContext diSubprogramFieldList() {
			return getRuleContext(DiSubprogramFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiSubprogramFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diSubprogramFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiSubprogramFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiSubprogramFieldList(this);
		}
	}

	public final DiSubprogramFieldListContext diSubprogramFieldList() throws RecognitionException {
		return diSubprogramFieldList(0);
	}

	private DiSubprogramFieldListContext diSubprogramFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiSubprogramFieldListContext _localctx = new DiSubprogramFieldListContext(_ctx, _parentState);
		DiSubprogramFieldListContext _prevctx = _localctx;
		int _startState = 570;
		enterRecursionRule(_localctx, 570, RULE_diSubprogramFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3226);
			diSubprogramField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3233);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,140,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiSubprogramFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diSubprogramFieldList);
					setState(3228);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3229);
					match(COMMA);
					setState(3230);
					diSubprogramField();
					}
					} 
				}
				setState(3235);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,140,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiSubprogramFieldContext extends ParserRuleContext {
		public NameFieldContext nameField() {
			return getRuleContext(NameFieldContext.class,0);
		}
		public ScopeFieldContext scopeField() {
			return getRuleContext(ScopeFieldContext.class,0);
		}
		public LinkageNameFieldContext linkageNameField() {
			return getRuleContext(LinkageNameFieldContext.class,0);
		}
		public FileFieldContext fileField() {
			return getRuleContext(FileFieldContext.class,0);
		}
		public LineFieldContext lineField() {
			return getRuleContext(LineFieldContext.class,0);
		}
		public TypeFieldContext typeField() {
			return getRuleContext(TypeFieldContext.class,0);
		}
		public IsLocalFieldContext isLocalField() {
			return getRuleContext(IsLocalFieldContext.class,0);
		}
		public IsDefinitionFieldContext isDefinitionField() {
			return getRuleContext(IsDefinitionFieldContext.class,0);
		}
		public TerminalNode SCOPELINECOLON() { return getToken(LLVMParser.SCOPELINECOLON, 0); }
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public TerminalNode CONTAININGTYPECOLON() { return getToken(LLVMParser.CONTAININGTYPECOLON, 0); }
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public TerminalNode VIRTUALITYCOLON() { return getToken(LLVMParser.VIRTUALITYCOLON, 0); }
		public DwarfVirtualityContext dwarfVirtuality() {
			return getRuleContext(DwarfVirtualityContext.class,0);
		}
		public TerminalNode VIRTUALINDEXCOLON() { return getToken(LLVMParser.VIRTUALINDEXCOLON, 0); }
		public TerminalNode THISADJUSTMENTCOLON() { return getToken(LLVMParser.THISADJUSTMENTCOLON, 0); }
		public FlagsFieldContext flagsField() {
			return getRuleContext(FlagsFieldContext.class,0);
		}
		public IsOptimizedFieldContext isOptimizedField() {
			return getRuleContext(IsOptimizedFieldContext.class,0);
		}
		public TerminalNode UNITCOLON() { return getToken(LLVMParser.UNITCOLON, 0); }
		public TemplateParamsFieldContext templateParamsField() {
			return getRuleContext(TemplateParamsFieldContext.class,0);
		}
		public DeclarationFieldContext declarationField() {
			return getRuleContext(DeclarationFieldContext.class,0);
		}
		public TerminalNode VARIABLESCOLON() { return getToken(LLVMParser.VARIABLESCOLON, 0); }
		public TerminalNode THROWNTYPESCOLON() { return getToken(LLVMParser.THROWNTYPESCOLON, 0); }
		public DiSubprogramFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diSubprogramField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiSubprogramField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiSubprogramField(this);
		}
	}

	public final DiSubprogramFieldContext diSubprogramField() throws RecognitionException {
		DiSubprogramFieldContext _localctx = new DiSubprogramFieldContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_diSubprogramField);
		try {
			setState(3264);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAMECOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3236);
				nameField();
				}
				break;
			case SCOPECOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3237);
				scopeField();
				}
				break;
			case LINKAGENAMECOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3238);
				linkageNameField();
				}
				break;
			case FILECOLON:
				enterOuterAlt(_localctx, 4);
				{
				setState(3239);
				fileField();
				}
				break;
			case LINECOLON:
				enterOuterAlt(_localctx, 5);
				{
				setState(3240);
				lineField();
				}
				break;
			case TYPECOLON:
				enterOuterAlt(_localctx, 6);
				{
				setState(3241);
				typeField();
				}
				break;
			case ISLOCALCOLON:
				enterOuterAlt(_localctx, 7);
				{
				setState(3242);
				isLocalField();
				}
				break;
			case ISDEFINITIONCOLON:
				enterOuterAlt(_localctx, 8);
				{
				setState(3243);
				isDefinitionField();
				}
				break;
			case SCOPELINECOLON:
				enterOuterAlt(_localctx, 9);
				{
				setState(3244);
				match(SCOPELINECOLON);
				setState(3245);
				intLit();
				}
				break;
			case CONTAININGTYPECOLON:
				enterOuterAlt(_localctx, 10);
				{
				setState(3246);
				match(CONTAININGTYPECOLON);
				setState(3247);
				mdField();
				}
				break;
			case VIRTUALITYCOLON:
				enterOuterAlt(_localctx, 11);
				{
				setState(3248);
				match(VIRTUALITYCOLON);
				setState(3249);
				dwarfVirtuality();
				}
				break;
			case VIRTUALINDEXCOLON:
				enterOuterAlt(_localctx, 12);
				{
				setState(3250);
				match(VIRTUALINDEXCOLON);
				setState(3251);
				intLit();
				}
				break;
			case THISADJUSTMENTCOLON:
				enterOuterAlt(_localctx, 13);
				{
				setState(3252);
				match(THISADJUSTMENTCOLON);
				setState(3253);
				intLit();
				}
				break;
			case FLAGSCOLON:
				enterOuterAlt(_localctx, 14);
				{
				setState(3254);
				flagsField();
				}
				break;
			case ISOPTIMIZEDCOLON:
				enterOuterAlt(_localctx, 15);
				{
				setState(3255);
				isOptimizedField();
				}
				break;
			case UNITCOLON:
				enterOuterAlt(_localctx, 16);
				{
				setState(3256);
				match(UNITCOLON);
				setState(3257);
				mdField();
				}
				break;
			case TEMPLATEPARAMSCOLON:
				enterOuterAlt(_localctx, 17);
				{
				setState(3258);
				templateParamsField();
				}
				break;
			case DECLARATIONCOLON:
				enterOuterAlt(_localctx, 18);
				{
				setState(3259);
				declarationField();
				}
				break;
			case VARIABLESCOLON:
				enterOuterAlt(_localctx, 19);
				{
				setState(3260);
				match(VARIABLESCOLON);
				setState(3261);
				mdField();
				}
				break;
			case THROWNTYPESCOLON:
				enterOuterAlt(_localctx, 20);
				{
				setState(3262);
				match(THROWNTYPESCOLON);
				setState(3263);
				mdField();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiLexicalBlockContext extends ParserRuleContext {
		public TerminalNode NOTDILEXICALBLOCK() { return getToken(LLVMParser.NOTDILEXICALBLOCK, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiLexicalBlockFieldsContext diLexicalBlockFields() {
			return getRuleContext(DiLexicalBlockFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiLexicalBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diLexicalBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiLexicalBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiLexicalBlock(this);
		}
	}

	public final DiLexicalBlockContext diLexicalBlock() throws RecognitionException {
		DiLexicalBlockContext _localctx = new DiLexicalBlockContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_diLexicalBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3266);
			match(NOTDILEXICALBLOCK);
			setState(3267);
			match(LPAREN);
			setState(3268);
			diLexicalBlockFields();
			setState(3269);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiLexicalBlockFieldsContext extends ParserRuleContext {
		public DiLexicalBlockFieldListContext diLexicalBlockFieldList() {
			return getRuleContext(DiLexicalBlockFieldListContext.class,0);
		}
		public DiLexicalBlockFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diLexicalBlockFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiLexicalBlockFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiLexicalBlockFields(this);
		}
	}

	public final DiLexicalBlockFieldsContext diLexicalBlockFields() throws RecognitionException {
		DiLexicalBlockFieldsContext _localctx = new DiLexicalBlockFieldsContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_diLexicalBlockFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNCOLON || _la==FILECOLON || _la==LINECOLON || _la==SCOPECOLON) {
				{
				setState(3271);
				diLexicalBlockFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiLexicalBlockFieldListContext extends ParserRuleContext {
		public DiLexicalBlockFieldContext diLexicalBlockField() {
			return getRuleContext(DiLexicalBlockFieldContext.class,0);
		}
		public DiLexicalBlockFieldListContext diLexicalBlockFieldList() {
			return getRuleContext(DiLexicalBlockFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiLexicalBlockFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diLexicalBlockFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiLexicalBlockFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiLexicalBlockFieldList(this);
		}
	}

	public final DiLexicalBlockFieldListContext diLexicalBlockFieldList() throws RecognitionException {
		return diLexicalBlockFieldList(0);
	}

	private DiLexicalBlockFieldListContext diLexicalBlockFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiLexicalBlockFieldListContext _localctx = new DiLexicalBlockFieldListContext(_ctx, _parentState);
		DiLexicalBlockFieldListContext _prevctx = _localctx;
		int _startState = 578;
		enterRecursionRule(_localctx, 578, RULE_diLexicalBlockFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3275);
			diLexicalBlockField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3282);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,143,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiLexicalBlockFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diLexicalBlockFieldList);
					setState(3277);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3278);
					match(COMMA);
					setState(3279);
					diLexicalBlockField();
					}
					} 
				}
				setState(3284);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,143,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiLexicalBlockFieldContext extends ParserRuleContext {
		public ScopeFieldContext scopeField() {
			return getRuleContext(ScopeFieldContext.class,0);
		}
		public FileFieldContext fileField() {
			return getRuleContext(FileFieldContext.class,0);
		}
		public LineFieldContext lineField() {
			return getRuleContext(LineFieldContext.class,0);
		}
		public ColumnFieldContext columnField() {
			return getRuleContext(ColumnFieldContext.class,0);
		}
		public DiLexicalBlockFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diLexicalBlockField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiLexicalBlockField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiLexicalBlockField(this);
		}
	}

	public final DiLexicalBlockFieldContext diLexicalBlockField() throws RecognitionException {
		DiLexicalBlockFieldContext _localctx = new DiLexicalBlockFieldContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_diLexicalBlockField);
		try {
			setState(3289);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCOPECOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3285);
				scopeField();
				}
				break;
			case FILECOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3286);
				fileField();
				}
				break;
			case LINECOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3287);
				lineField();
				}
				break;
			case COLUMNCOLON:
				enterOuterAlt(_localctx, 4);
				{
				setState(3288);
				columnField();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiLexicalBlockFileContext extends ParserRuleContext {
		public TerminalNode NOTDILEXICALBLOCKFILE() { return getToken(LLVMParser.NOTDILEXICALBLOCKFILE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiLexicalBlockFileFieldsContext diLexicalBlockFileFields() {
			return getRuleContext(DiLexicalBlockFileFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiLexicalBlockFileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diLexicalBlockFile; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiLexicalBlockFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiLexicalBlockFile(this);
		}
	}

	public final DiLexicalBlockFileContext diLexicalBlockFile() throws RecognitionException {
		DiLexicalBlockFileContext _localctx = new DiLexicalBlockFileContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_diLexicalBlockFile);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3291);
			match(NOTDILEXICALBLOCKFILE);
			setState(3292);
			match(LPAREN);
			setState(3293);
			diLexicalBlockFileFields();
			setState(3294);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiLexicalBlockFileFieldsContext extends ParserRuleContext {
		public DiLexicalBlockFileFieldListContext diLexicalBlockFileFieldList() {
			return getRuleContext(DiLexicalBlockFileFieldListContext.class,0);
		}
		public DiLexicalBlockFileFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diLexicalBlockFileFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiLexicalBlockFileFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiLexicalBlockFileFields(this);
		}
	}

	public final DiLexicalBlockFileFieldsContext diLexicalBlockFileFields() throws RecognitionException {
		DiLexicalBlockFileFieldsContext _localctx = new DiLexicalBlockFileFieldsContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_diLexicalBlockFileFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3297);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISCRIMINATORCOLON || _la==FILECOLON || _la==SCOPECOLON) {
				{
				setState(3296);
				diLexicalBlockFileFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiLexicalBlockFileFieldListContext extends ParserRuleContext {
		public DiLexicalBlockFileFieldContext diLexicalBlockFileField() {
			return getRuleContext(DiLexicalBlockFileFieldContext.class,0);
		}
		public DiLexicalBlockFileFieldListContext diLexicalBlockFileFieldList() {
			return getRuleContext(DiLexicalBlockFileFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiLexicalBlockFileFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diLexicalBlockFileFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiLexicalBlockFileFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiLexicalBlockFileFieldList(this);
		}
	}

	public final DiLexicalBlockFileFieldListContext diLexicalBlockFileFieldList() throws RecognitionException {
		return diLexicalBlockFileFieldList(0);
	}

	private DiLexicalBlockFileFieldListContext diLexicalBlockFileFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiLexicalBlockFileFieldListContext _localctx = new DiLexicalBlockFileFieldListContext(_ctx, _parentState);
		DiLexicalBlockFileFieldListContext _prevctx = _localctx;
		int _startState = 586;
		enterRecursionRule(_localctx, 586, RULE_diLexicalBlockFileFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3300);
			diLexicalBlockFileField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3307);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,146,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiLexicalBlockFileFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diLexicalBlockFileFieldList);
					setState(3302);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3303);
					match(COMMA);
					setState(3304);
					diLexicalBlockFileField();
					}
					} 
				}
				setState(3309);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,146,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiLexicalBlockFileFieldContext extends ParserRuleContext {
		public ScopeFieldContext scopeField() {
			return getRuleContext(ScopeFieldContext.class,0);
		}
		public FileFieldContext fileField() {
			return getRuleContext(FileFieldContext.class,0);
		}
		public TerminalNode DISCRIMINATORCOLON() { return getToken(LLVMParser.DISCRIMINATORCOLON, 0); }
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public DiLexicalBlockFileFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diLexicalBlockFileField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiLexicalBlockFileField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiLexicalBlockFileField(this);
		}
	}

	public final DiLexicalBlockFileFieldContext diLexicalBlockFileField() throws RecognitionException {
		DiLexicalBlockFileFieldContext _localctx = new DiLexicalBlockFileFieldContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_diLexicalBlockFileField);
		try {
			setState(3314);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCOPECOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3310);
				scopeField();
				}
				break;
			case FILECOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3311);
				fileField();
				}
				break;
			case DISCRIMINATORCOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3312);
				match(DISCRIMINATORCOLON);
				setState(3313);
				intLit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiLocationContext extends ParserRuleContext {
		public TerminalNode NOTDILOCATION() { return getToken(LLVMParser.NOTDILOCATION, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiLocationFieldsContext diLocationFields() {
			return getRuleContext(DiLocationFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiLocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diLocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiLocation(this);
		}
	}

	public final DiLocationContext diLocation() throws RecognitionException {
		DiLocationContext _localctx = new DiLocationContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_diLocation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3316);
			match(NOTDILOCATION);
			setState(3317);
			match(LPAREN);
			setState(3318);
			diLocationFields();
			setState(3319);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiLocationFieldsContext extends ParserRuleContext {
		public DiLocationFieldListContext diLocationFieldList() {
			return getRuleContext(DiLocationFieldListContext.class,0);
		}
		public DiLocationFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diLocationFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiLocationFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiLocationFields(this);
		}
	}

	public final DiLocationFieldsContext diLocationFields() throws RecognitionException {
		DiLocationFieldsContext _localctx = new DiLocationFieldsContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_diLocationFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNCOLON || _la==INLINEDATCOLON || _la==LINECOLON || _la==SCOPECOLON) {
				{
				setState(3321);
				diLocationFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiLocationFieldListContext extends ParserRuleContext {
		public DiLocationFieldContext diLocationField() {
			return getRuleContext(DiLocationFieldContext.class,0);
		}
		public DiLocationFieldListContext diLocationFieldList() {
			return getRuleContext(DiLocationFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiLocationFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diLocationFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiLocationFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiLocationFieldList(this);
		}
	}

	public final DiLocationFieldListContext diLocationFieldList() throws RecognitionException {
		return diLocationFieldList(0);
	}

	private DiLocationFieldListContext diLocationFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiLocationFieldListContext _localctx = new DiLocationFieldListContext(_ctx, _parentState);
		DiLocationFieldListContext _prevctx = _localctx;
		int _startState = 594;
		enterRecursionRule(_localctx, 594, RULE_diLocationFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3325);
			diLocationField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3332);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,149,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiLocationFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diLocationFieldList);
					setState(3327);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3328);
					match(COMMA);
					setState(3329);
					diLocationField();
					}
					} 
				}
				setState(3334);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,149,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiLocationFieldContext extends ParserRuleContext {
		public LineFieldContext lineField() {
			return getRuleContext(LineFieldContext.class,0);
		}
		public ColumnFieldContext columnField() {
			return getRuleContext(ColumnFieldContext.class,0);
		}
		public ScopeFieldContext scopeField() {
			return getRuleContext(ScopeFieldContext.class,0);
		}
		public TerminalNode INLINEDATCOLON() { return getToken(LLVMParser.INLINEDATCOLON, 0); }
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public DiLocationFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diLocationField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiLocationField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiLocationField(this);
		}
	}

	public final DiLocationFieldContext diLocationField() throws RecognitionException {
		DiLocationFieldContext _localctx = new DiLocationFieldContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_diLocationField);
		try {
			setState(3340);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LINECOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3335);
				lineField();
				}
				break;
			case COLUMNCOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3336);
				columnField();
				}
				break;
			case SCOPECOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3337);
				scopeField();
				}
				break;
			case INLINEDATCOLON:
				enterOuterAlt(_localctx, 4);
				{
				setState(3338);
				match(INLINEDATCOLON);
				setState(3339);
				mdField();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiLocalVariableContext extends ParserRuleContext {
		public TerminalNode NOTDILOCALVARIABLE() { return getToken(LLVMParser.NOTDILOCALVARIABLE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiLocalVariableFieldsContext diLocalVariableFields() {
			return getRuleContext(DiLocalVariableFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiLocalVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diLocalVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiLocalVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiLocalVariable(this);
		}
	}

	public final DiLocalVariableContext diLocalVariable() throws RecognitionException {
		DiLocalVariableContext _localctx = new DiLocalVariableContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_diLocalVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3342);
			match(NOTDILOCALVARIABLE);
			setState(3343);
			match(LPAREN);
			setState(3344);
			diLocalVariableFields();
			setState(3345);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiLocalVariableFieldsContext extends ParserRuleContext {
		public DiLocalVariableFieldListContext diLocalVariableFieldList() {
			return getRuleContext(DiLocalVariableFieldListContext.class,0);
		}
		public DiLocalVariableFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diLocalVariableFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiLocalVariableFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiLocalVariableFields(this);
		}
	}

	public final DiLocalVariableFieldsContext diLocalVariableFields() throws RecognitionException {
		DiLocalVariableFieldsContext _localctx = new DiLocalVariableFieldsContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_diLocalVariableFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALIGNCOLON || _la==ARGCOLON || ((((_la - 154)) & ~0x3f) == 0 && ((1L << (_la - 154)) & ((1L << (FILECOLON - 154)) | (1L << (FLAGSCOLON - 154)) | (1L << (LINECOLON - 154)))) != 0) || _la==NAMECOLON || _la==SCOPECOLON || _la==TYPECOLON) {
				{
				setState(3347);
				diLocalVariableFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiLocalVariableFieldListContext extends ParserRuleContext {
		public DiLocalVariableFieldContext diLocalVariableField() {
			return getRuleContext(DiLocalVariableFieldContext.class,0);
		}
		public DiLocalVariableFieldListContext diLocalVariableFieldList() {
			return getRuleContext(DiLocalVariableFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiLocalVariableFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diLocalVariableFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiLocalVariableFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiLocalVariableFieldList(this);
		}
	}

	public final DiLocalVariableFieldListContext diLocalVariableFieldList() throws RecognitionException {
		return diLocalVariableFieldList(0);
	}

	private DiLocalVariableFieldListContext diLocalVariableFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiLocalVariableFieldListContext _localctx = new DiLocalVariableFieldListContext(_ctx, _parentState);
		DiLocalVariableFieldListContext _prevctx = _localctx;
		int _startState = 602;
		enterRecursionRule(_localctx, 602, RULE_diLocalVariableFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3351);
			diLocalVariableField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3358);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,152,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiLocalVariableFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diLocalVariableFieldList);
					setState(3353);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3354);
					match(COMMA);
					setState(3355);
					diLocalVariableField();
					}
					} 
				}
				setState(3360);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,152,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiLocalVariableFieldContext extends ParserRuleContext {
		public NameFieldContext nameField() {
			return getRuleContext(NameFieldContext.class,0);
		}
		public TerminalNode ARGCOLON() { return getToken(LLVMParser.ARGCOLON, 0); }
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public ScopeFieldContext scopeField() {
			return getRuleContext(ScopeFieldContext.class,0);
		}
		public FileFieldContext fileField() {
			return getRuleContext(FileFieldContext.class,0);
		}
		public LineFieldContext lineField() {
			return getRuleContext(LineFieldContext.class,0);
		}
		public TypeFieldContext typeField() {
			return getRuleContext(TypeFieldContext.class,0);
		}
		public FlagsFieldContext flagsField() {
			return getRuleContext(FlagsFieldContext.class,0);
		}
		public AlignFieldContext alignField() {
			return getRuleContext(AlignFieldContext.class,0);
		}
		public DiLocalVariableFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diLocalVariableField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiLocalVariableField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiLocalVariableField(this);
		}
	}

	public final DiLocalVariableFieldContext diLocalVariableField() throws RecognitionException {
		DiLocalVariableFieldContext _localctx = new DiLocalVariableFieldContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_diLocalVariableField);
		try {
			setState(3370);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAMECOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3361);
				nameField();
				}
				break;
			case ARGCOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3362);
				match(ARGCOLON);
				setState(3363);
				intLit();
				}
				break;
			case SCOPECOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3364);
				scopeField();
				}
				break;
			case FILECOLON:
				enterOuterAlt(_localctx, 4);
				{
				setState(3365);
				fileField();
				}
				break;
			case LINECOLON:
				enterOuterAlt(_localctx, 5);
				{
				setState(3366);
				lineField();
				}
				break;
			case TYPECOLON:
				enterOuterAlt(_localctx, 6);
				{
				setState(3367);
				typeField();
				}
				break;
			case FLAGSCOLON:
				enterOuterAlt(_localctx, 7);
				{
				setState(3368);
				flagsField();
				}
				break;
			case ALIGNCOLON:
				enterOuterAlt(_localctx, 8);
				{
				setState(3369);
				alignField();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiExpressionContext extends ParserRuleContext {
		public TerminalNode NOTDIEXPRESSION() { return getToken(LLVMParser.NOTDIEXPRESSION, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiExpressionFieldsContext diExpressionFields() {
			return getRuleContext(DiExpressionFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiExpression(this);
		}
	}

	public final DiExpressionContext diExpression() throws RecognitionException {
		DiExpressionContext _localctx = new DiExpressionContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_diExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3372);
			match(NOTDIEXPRESSION);
			setState(3373);
			match(LPAREN);
			setState(3374);
			diExpressionFields();
			setState(3375);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiExpressionFieldsContext extends ParserRuleContext {
		public DiExpressionFieldListContext diExpressionFieldList() {
			return getRuleContext(DiExpressionFieldListContext.class,0);
		}
		public DiExpressionFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diExpressionFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiExpressionFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiExpressionFields(this);
		}
	}

	public final DiExpressionFieldsContext diExpressionFields() throws RecognitionException {
		DiExpressionFieldsContext _localctx = new DiExpressionFieldsContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_diExpressionFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DWARF_OP || _la==INT_LIT) {
				{
				setState(3377);
				diExpressionFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiExpressionFieldListContext extends ParserRuleContext {
		public DiExpressionFieldContext diExpressionField() {
			return getRuleContext(DiExpressionFieldContext.class,0);
		}
		public DiExpressionFieldListContext diExpressionFieldList() {
			return getRuleContext(DiExpressionFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiExpressionFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diExpressionFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiExpressionFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiExpressionFieldList(this);
		}
	}

	public final DiExpressionFieldListContext diExpressionFieldList() throws RecognitionException {
		return diExpressionFieldList(0);
	}

	private DiExpressionFieldListContext diExpressionFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiExpressionFieldListContext _localctx = new DiExpressionFieldListContext(_ctx, _parentState);
		DiExpressionFieldListContext _prevctx = _localctx;
		int _startState = 610;
		enterRecursionRule(_localctx, 610, RULE_diExpressionFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3381);
			diExpressionField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3388);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,155,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiExpressionFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diExpressionFieldList);
					setState(3383);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3384);
					match(COMMA);
					setState(3385);
					diExpressionField();
					}
					} 
				}
				setState(3390);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,155,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiExpressionFieldContext extends ParserRuleContext {
		public TerminalNode INT_LIT() { return getToken(LLVMParser.INT_LIT, 0); }
		public DwarfOpContext dwarfOp() {
			return getRuleContext(DwarfOpContext.class,0);
		}
		public DiExpressionFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diExpressionField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiExpressionField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiExpressionField(this);
		}
	}

	public final DiExpressionFieldContext diExpressionField() throws RecognitionException {
		DiExpressionFieldContext _localctx = new DiExpressionFieldContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_diExpressionField);
		try {
			setState(3393);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_LIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3391);
				match(INT_LIT);
				}
				break;
			case DWARF_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3392);
				dwarfOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiGlobalVariableExpressionContext extends ParserRuleContext {
		public TerminalNode NOTDIGLOBALVARIABLEEXPRESSION() { return getToken(LLVMParser.NOTDIGLOBALVARIABLEEXPRESSION, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiGlobalVariableExpressionFieldsContext diGlobalVariableExpressionFields() {
			return getRuleContext(DiGlobalVariableExpressionFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiGlobalVariableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diGlobalVariableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiGlobalVariableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiGlobalVariableExpression(this);
		}
	}

	public final DiGlobalVariableExpressionContext diGlobalVariableExpression() throws RecognitionException {
		DiGlobalVariableExpressionContext _localctx = new DiGlobalVariableExpressionContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_diGlobalVariableExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3395);
			match(NOTDIGLOBALVARIABLEEXPRESSION);
			setState(3396);
			match(LPAREN);
			setState(3397);
			diGlobalVariableExpressionFields();
			setState(3398);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiGlobalVariableExpressionFieldsContext extends ParserRuleContext {
		public DiGlobalVariableExpressionFieldListContext diGlobalVariableExpressionFieldList() {
			return getRuleContext(DiGlobalVariableExpressionFieldListContext.class,0);
		}
		public DiGlobalVariableExpressionFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diGlobalVariableExpressionFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiGlobalVariableExpressionFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiGlobalVariableExpressionFields(this);
		}
	}

	public final DiGlobalVariableExpressionFieldsContext diGlobalVariableExpressionFields() throws RecognitionException {
		DiGlobalVariableExpressionFieldsContext _localctx = new DiGlobalVariableExpressionFieldsContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_diGlobalVariableExpressionFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXPRCOLON || _la==VARCOLON) {
				{
				setState(3400);
				diGlobalVariableExpressionFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiGlobalVariableExpressionFieldListContext extends ParserRuleContext {
		public DiGlobalVariableExpressionFieldContext diGlobalVariableExpressionField() {
			return getRuleContext(DiGlobalVariableExpressionFieldContext.class,0);
		}
		public DiGlobalVariableExpressionFieldListContext diGlobalVariableExpressionFieldList() {
			return getRuleContext(DiGlobalVariableExpressionFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiGlobalVariableExpressionFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diGlobalVariableExpressionFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiGlobalVariableExpressionFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiGlobalVariableExpressionFieldList(this);
		}
	}

	public final DiGlobalVariableExpressionFieldListContext diGlobalVariableExpressionFieldList() throws RecognitionException {
		return diGlobalVariableExpressionFieldList(0);
	}

	private DiGlobalVariableExpressionFieldListContext diGlobalVariableExpressionFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiGlobalVariableExpressionFieldListContext _localctx = new DiGlobalVariableExpressionFieldListContext(_ctx, _parentState);
		DiGlobalVariableExpressionFieldListContext _prevctx = _localctx;
		int _startState = 618;
		enterRecursionRule(_localctx, 618, RULE_diGlobalVariableExpressionFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3404);
			diGlobalVariableExpressionField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3411);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,158,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiGlobalVariableExpressionFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diGlobalVariableExpressionFieldList);
					setState(3406);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3407);
					match(COMMA);
					setState(3408);
					diGlobalVariableExpressionField();
					}
					} 
				}
				setState(3413);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,158,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiGlobalVariableExpressionFieldContext extends ParserRuleContext {
		public TerminalNode VARCOLON() { return getToken(LLVMParser.VARCOLON, 0); }
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public TerminalNode EXPRCOLON() { return getToken(LLVMParser.EXPRCOLON, 0); }
		public DiGlobalVariableExpressionFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diGlobalVariableExpressionField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiGlobalVariableExpressionField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiGlobalVariableExpressionField(this);
		}
	}

	public final DiGlobalVariableExpressionFieldContext diGlobalVariableExpressionField() throws RecognitionException {
		DiGlobalVariableExpressionFieldContext _localctx = new DiGlobalVariableExpressionFieldContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_diGlobalVariableExpressionField);
		try {
			setState(3418);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VARCOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3414);
				match(VARCOLON);
				setState(3415);
				mdField();
				}
				break;
			case EXPRCOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3416);
				match(EXPRCOLON);
				setState(3417);
				mdField();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiObjCPropertyContext extends ParserRuleContext {
		public TerminalNode NOTDIOBJCPROPERTY() { return getToken(LLVMParser.NOTDIOBJCPROPERTY, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiObjCPropertyFieldsContext diObjCPropertyFields() {
			return getRuleContext(DiObjCPropertyFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiObjCPropertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diObjCProperty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiObjCProperty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiObjCProperty(this);
		}
	}

	public final DiObjCPropertyContext diObjCProperty() throws RecognitionException {
		DiObjCPropertyContext _localctx = new DiObjCPropertyContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_diObjCProperty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3420);
			match(NOTDIOBJCPROPERTY);
			setState(3421);
			match(LPAREN);
			setState(3422);
			diObjCPropertyFields();
			setState(3423);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiObjCPropertyFieldsContext extends ParserRuleContext {
		public DiObjCPropertyFieldListContext diObjCPropertyFieldList() {
			return getRuleContext(DiObjCPropertyFieldListContext.class,0);
		}
		public DiObjCPropertyFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diObjCPropertyFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiObjCPropertyFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiObjCPropertyFields(this);
		}
	}

	public final DiObjCPropertyFieldsContext diObjCPropertyFields() throws RecognitionException {
		DiObjCPropertyFieldsContext _localctx = new DiObjCPropertyFieldsContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_diObjCPropertyFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3426);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ATTRIBUTESCOLON || ((((_la - 154)) & ~0x3f) == 0 && ((1L << (_la - 154)) & ((1L << (FILECOLON - 154)) | (1L << (GETTERCOLON - 154)) | (1L << (LINECOLON - 154)))) != 0) || _la==NAMECOLON || _la==SETTERCOLON || _la==TYPECOLON) {
				{
				setState(3425);
				diObjCPropertyFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiObjCPropertyFieldListContext extends ParserRuleContext {
		public DiObjCPropertyFieldContext diObjCPropertyField() {
			return getRuleContext(DiObjCPropertyFieldContext.class,0);
		}
		public DiObjCPropertyFieldListContext diObjCPropertyFieldList() {
			return getRuleContext(DiObjCPropertyFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiObjCPropertyFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diObjCPropertyFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiObjCPropertyFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiObjCPropertyFieldList(this);
		}
	}

	public final DiObjCPropertyFieldListContext diObjCPropertyFieldList() throws RecognitionException {
		return diObjCPropertyFieldList(0);
	}

	private DiObjCPropertyFieldListContext diObjCPropertyFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiObjCPropertyFieldListContext _localctx = new DiObjCPropertyFieldListContext(_ctx, _parentState);
		DiObjCPropertyFieldListContext _prevctx = _localctx;
		int _startState = 626;
		enterRecursionRule(_localctx, 626, RULE_diObjCPropertyFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3429);
			diObjCPropertyField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3436);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,161,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiObjCPropertyFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diObjCPropertyFieldList);
					setState(3431);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3432);
					match(COMMA);
					setState(3433);
					diObjCPropertyField();
					}
					} 
				}
				setState(3438);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,161,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiObjCPropertyFieldContext extends ParserRuleContext {
		public NameFieldContext nameField() {
			return getRuleContext(NameFieldContext.class,0);
		}
		public FileFieldContext fileField() {
			return getRuleContext(FileFieldContext.class,0);
		}
		public LineFieldContext lineField() {
			return getRuleContext(LineFieldContext.class,0);
		}
		public TerminalNode SETTERCOLON() { return getToken(LLVMParser.SETTERCOLON, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode GETTERCOLON() { return getToken(LLVMParser.GETTERCOLON, 0); }
		public TerminalNode ATTRIBUTESCOLON() { return getToken(LLVMParser.ATTRIBUTESCOLON, 0); }
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public TypeFieldContext typeField() {
			return getRuleContext(TypeFieldContext.class,0);
		}
		public DiObjCPropertyFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diObjCPropertyField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiObjCPropertyField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiObjCPropertyField(this);
		}
	}

	public final DiObjCPropertyFieldContext diObjCPropertyField() throws RecognitionException {
		DiObjCPropertyFieldContext _localctx = new DiObjCPropertyFieldContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_diObjCPropertyField);
		try {
			setState(3449);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAMECOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3439);
				nameField();
				}
				break;
			case FILECOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3440);
				fileField();
				}
				break;
			case LINECOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3441);
				lineField();
				}
				break;
			case SETTERCOLON:
				enterOuterAlt(_localctx, 4);
				{
				setState(3442);
				match(SETTERCOLON);
				setState(3443);
				stringLit();
				}
				break;
			case GETTERCOLON:
				enterOuterAlt(_localctx, 5);
				{
				setState(3444);
				match(GETTERCOLON);
				setState(3445);
				stringLit();
				}
				break;
			case ATTRIBUTESCOLON:
				enterOuterAlt(_localctx, 6);
				{
				setState(3446);
				match(ATTRIBUTESCOLON);
				setState(3447);
				intLit();
				}
				break;
			case TYPECOLON:
				enterOuterAlt(_localctx, 7);
				{
				setState(3448);
				typeField();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiImportedEntityContext extends ParserRuleContext {
		public TerminalNode NOTDIIMPORTEDENTITY() { return getToken(LLVMParser.NOTDIIMPORTEDENTITY, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiImportedEntityFieldsContext diImportedEntityFields() {
			return getRuleContext(DiImportedEntityFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiImportedEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diImportedEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiImportedEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiImportedEntity(this);
		}
	}

	public final DiImportedEntityContext diImportedEntity() throws RecognitionException {
		DiImportedEntityContext _localctx = new DiImportedEntityContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_diImportedEntity);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3451);
			match(NOTDIIMPORTEDENTITY);
			setState(3452);
			match(LPAREN);
			setState(3453);
			diImportedEntityFields();
			setState(3454);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiImportedEntityFieldsContext extends ParserRuleContext {
		public DiImportedEntityFieldListContext diImportedEntityFieldList() {
			return getRuleContext(DiImportedEntityFieldListContext.class,0);
		}
		public DiImportedEntityFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diImportedEntityFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiImportedEntityFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiImportedEntityFields(this);
		}
	}

	public final DiImportedEntityFieldsContext diImportedEntityFields() throws RecognitionException {
		DiImportedEntityFieldsContext _localctx = new DiImportedEntityFieldsContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_diImportedEntityFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3457);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENTITYCOLON || _la==FILECOLON || _la==LINECOLON || _la==NAMECOLON || _la==SCOPECOLON || _la==TAGCOLON) {
				{
				setState(3456);
				diImportedEntityFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiImportedEntityFieldListContext extends ParserRuleContext {
		public DiImportedEntityFieldContext diImportedEntityField() {
			return getRuleContext(DiImportedEntityFieldContext.class,0);
		}
		public DiImportedEntityFieldListContext diImportedEntityFieldList() {
			return getRuleContext(DiImportedEntityFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiImportedEntityFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diImportedEntityFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiImportedEntityFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiImportedEntityFieldList(this);
		}
	}

	public final DiImportedEntityFieldListContext diImportedEntityFieldList() throws RecognitionException {
		return diImportedEntityFieldList(0);
	}

	private DiImportedEntityFieldListContext diImportedEntityFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiImportedEntityFieldListContext _localctx = new DiImportedEntityFieldListContext(_ctx, _parentState);
		DiImportedEntityFieldListContext _prevctx = _localctx;
		int _startState = 634;
		enterRecursionRule(_localctx, 634, RULE_diImportedEntityFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3460);
			diImportedEntityField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3467);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,164,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiImportedEntityFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diImportedEntityFieldList);
					setState(3462);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3463);
					match(COMMA);
					setState(3464);
					diImportedEntityField();
					}
					} 
				}
				setState(3469);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,164,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiImportedEntityFieldContext extends ParserRuleContext {
		public TagFieldContext tagField() {
			return getRuleContext(TagFieldContext.class,0);
		}
		public ScopeFieldContext scopeField() {
			return getRuleContext(ScopeFieldContext.class,0);
		}
		public TerminalNode ENTITYCOLON() { return getToken(LLVMParser.ENTITYCOLON, 0); }
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public FileFieldContext fileField() {
			return getRuleContext(FileFieldContext.class,0);
		}
		public LineFieldContext lineField() {
			return getRuleContext(LineFieldContext.class,0);
		}
		public NameFieldContext nameField() {
			return getRuleContext(NameFieldContext.class,0);
		}
		public DiImportedEntityFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diImportedEntityField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiImportedEntityField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiImportedEntityField(this);
		}
	}

	public final DiImportedEntityFieldContext diImportedEntityField() throws RecognitionException {
		DiImportedEntityFieldContext _localctx = new DiImportedEntityFieldContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_diImportedEntityField);
		try {
			setState(3477);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TAGCOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3470);
				tagField();
				}
				break;
			case SCOPECOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3471);
				scopeField();
				}
				break;
			case ENTITYCOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3472);
				match(ENTITYCOLON);
				setState(3473);
				mdField();
				}
				break;
			case FILECOLON:
				enterOuterAlt(_localctx, 4);
				{
				setState(3474);
				fileField();
				}
				break;
			case LINECOLON:
				enterOuterAlt(_localctx, 5);
				{
				setState(3475);
				lineField();
				}
				break;
			case NAMECOLON:
				enterOuterAlt(_localctx, 6);
				{
				setState(3476);
				nameField();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiMacroContext extends ParserRuleContext {
		public TerminalNode NOTDIMACRO() { return getToken(LLVMParser.NOTDIMACRO, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiMacroFieldsContext diMacroFields() {
			return getRuleContext(DiMacroFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiMacroContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diMacro; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiMacro(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiMacro(this);
		}
	}

	public final DiMacroContext diMacro() throws RecognitionException {
		DiMacroContext _localctx = new DiMacroContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_diMacro);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3479);
			match(NOTDIMACRO);
			setState(3480);
			match(LPAREN);
			setState(3481);
			diMacroFields();
			setState(3482);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiMacroFieldsContext extends ParserRuleContext {
		public DiMacroFieldListContext diMacroFieldList() {
			return getRuleContext(DiMacroFieldListContext.class,0);
		}
		public DiMacroFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diMacroFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiMacroFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiMacroFields(this);
		}
	}

	public final DiMacroFieldsContext diMacroFields() throws RecognitionException {
		DiMacroFieldsContext _localctx = new DiMacroFieldsContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_diMacroFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3485);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINECOLON || _la==NAMECOLON || _la==TYPECOLON || _la==VALUECOLON) {
				{
				setState(3484);
				diMacroFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiMacroFieldListContext extends ParserRuleContext {
		public DiMacroFieldContext diMacroField() {
			return getRuleContext(DiMacroFieldContext.class,0);
		}
		public DiMacroFieldListContext diMacroFieldList() {
			return getRuleContext(DiMacroFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiMacroFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diMacroFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiMacroFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiMacroFieldList(this);
		}
	}

	public final DiMacroFieldListContext diMacroFieldList() throws RecognitionException {
		return diMacroFieldList(0);
	}

	private DiMacroFieldListContext diMacroFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiMacroFieldListContext _localctx = new DiMacroFieldListContext(_ctx, _parentState);
		DiMacroFieldListContext _prevctx = _localctx;
		int _startState = 642;
		enterRecursionRule(_localctx, 642, RULE_diMacroFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3488);
			diMacroField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3495);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,167,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiMacroFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diMacroFieldList);
					setState(3490);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3491);
					match(COMMA);
					setState(3492);
					diMacroField();
					}
					} 
				}
				setState(3497);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,167,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiMacroFieldContext extends ParserRuleContext {
		public TypeMacinfoFieldContext typeMacinfoField() {
			return getRuleContext(TypeMacinfoFieldContext.class,0);
		}
		public LineFieldContext lineField() {
			return getRuleContext(LineFieldContext.class,0);
		}
		public NameFieldContext nameField() {
			return getRuleContext(NameFieldContext.class,0);
		}
		public TerminalNode VALUECOLON() { return getToken(LLVMParser.VALUECOLON, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public DiMacroFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diMacroField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiMacroField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiMacroField(this);
		}
	}

	public final DiMacroFieldContext diMacroField() throws RecognitionException {
		DiMacroFieldContext _localctx = new DiMacroFieldContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_diMacroField);
		try {
			setState(3503);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TYPECOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3498);
				typeMacinfoField();
				}
				break;
			case LINECOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3499);
				lineField();
				}
				break;
			case NAMECOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3500);
				nameField();
				}
				break;
			case VALUECOLON:
				enterOuterAlt(_localctx, 4);
				{
				setState(3501);
				match(VALUECOLON);
				setState(3502);
				stringLit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiMacroFileContext extends ParserRuleContext {
		public TerminalNode NOTDIMACROFILE() { return getToken(LLVMParser.NOTDIMACROFILE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public DiMacroFileFieldsContext diMacroFileFields() {
			return getRuleContext(DiMacroFileFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public DiMacroFileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diMacroFile; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiMacroFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiMacroFile(this);
		}
	}

	public final DiMacroFileContext diMacroFile() throws RecognitionException {
		DiMacroFileContext _localctx = new DiMacroFileContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_diMacroFile);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3505);
			match(NOTDIMACROFILE);
			setState(3506);
			match(LPAREN);
			setState(3507);
			diMacroFileFields();
			setState(3508);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiMacroFileFieldsContext extends ParserRuleContext {
		public DiMacroFileFieldListContext diMacroFileFieldList() {
			return getRuleContext(DiMacroFileFieldListContext.class,0);
		}
		public DiMacroFileFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diMacroFileFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiMacroFileFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiMacroFileFields(this);
		}
	}

	public final DiMacroFileFieldsContext diMacroFileFields() throws RecognitionException {
		DiMacroFileFieldsContext _localctx = new DiMacroFileFieldsContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_diMacroFileFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3511);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILECOLON || _la==LINECOLON || _la==NODESCOLON || _la==TYPECOLON) {
				{
				setState(3510);
				diMacroFileFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiMacroFileFieldListContext extends ParserRuleContext {
		public DiMacroFileFieldContext diMacroFileField() {
			return getRuleContext(DiMacroFileFieldContext.class,0);
		}
		public DiMacroFileFieldListContext diMacroFileFieldList() {
			return getRuleContext(DiMacroFileFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public DiMacroFileFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diMacroFileFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiMacroFileFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiMacroFileFieldList(this);
		}
	}

	public final DiMacroFileFieldListContext diMacroFileFieldList() throws RecognitionException {
		return diMacroFileFieldList(0);
	}

	private DiMacroFileFieldListContext diMacroFileFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiMacroFileFieldListContext _localctx = new DiMacroFileFieldListContext(_ctx, _parentState);
		DiMacroFileFieldListContext _prevctx = _localctx;
		int _startState = 650;
		enterRecursionRule(_localctx, 650, RULE_diMacroFileFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3514);
			diMacroFileField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3521);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,170,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiMacroFileFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diMacroFileFieldList);
					setState(3516);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3517);
					match(COMMA);
					setState(3518);
					diMacroFileField();
					}
					} 
				}
				setState(3523);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,170,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiMacroFileFieldContext extends ParserRuleContext {
		public TypeMacinfoFieldContext typeMacinfoField() {
			return getRuleContext(TypeMacinfoFieldContext.class,0);
		}
		public LineFieldContext lineField() {
			return getRuleContext(LineFieldContext.class,0);
		}
		public FileFieldContext fileField() {
			return getRuleContext(FileFieldContext.class,0);
		}
		public TerminalNode NODESCOLON() { return getToken(LLVMParser.NODESCOLON, 0); }
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public DiMacroFileFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diMacroFileField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiMacroFileField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiMacroFileField(this);
		}
	}

	public final DiMacroFileFieldContext diMacroFileField() throws RecognitionException {
		DiMacroFileFieldContext _localctx = new DiMacroFileFieldContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_diMacroFileField);
		try {
			setState(3529);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TYPECOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3524);
				typeMacinfoField();
				}
				break;
			case LINECOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3525);
				lineField();
				}
				break;
			case FILECOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3526);
				fileField();
				}
				break;
			case NODESCOLON:
				enterOuterAlt(_localctx, 4);
				{
				setState(3527);
				match(NODESCOLON);
				setState(3528);
				mdField();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericDINodeContext extends ParserRuleContext {
		public TerminalNode NOTGENERICDINODE() { return getToken(LLVMParser.NOTGENERICDINODE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public GenericDINodeFieldsContext genericDINodeFields() {
			return getRuleContext(GenericDINodeFieldsContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public GenericDINodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericDINode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterGenericDINode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitGenericDINode(this);
		}
	}

	public final GenericDINodeContext genericDINode() throws RecognitionException {
		GenericDINodeContext _localctx = new GenericDINodeContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_genericDINode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3531);
			match(NOTGENERICDINODE);
			setState(3532);
			match(LPAREN);
			setState(3533);
			genericDINodeFields();
			setState(3534);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericDINodeFieldsContext extends ParserRuleContext {
		public GenericDINodeFieldListContext genericDINodeFieldList() {
			return getRuleContext(GenericDINodeFieldListContext.class,0);
		}
		public GenericDINodeFieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericDINodeFields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterGenericDINodeFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitGenericDINodeFields(this);
		}
	}

	public final GenericDINodeFieldsContext genericDINodeFields() throws RecognitionException {
		GenericDINodeFieldsContext _localctx = new GenericDINodeFieldsContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_genericDINodeFields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3537);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HEADERCOLON || _la==OPERANDSCOLON || _la==TAGCOLON) {
				{
				setState(3536);
				genericDINodeFieldList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericDINodeFieldListContext extends ParserRuleContext {
		public GenericDINodeFieldContext genericDINodeField() {
			return getRuleContext(GenericDINodeFieldContext.class,0);
		}
		public GenericDINodeFieldListContext genericDINodeFieldList() {
			return getRuleContext(GenericDINodeFieldListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public GenericDINodeFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericDINodeFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterGenericDINodeFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitGenericDINodeFieldList(this);
		}
	}

	public final GenericDINodeFieldListContext genericDINodeFieldList() throws RecognitionException {
		return genericDINodeFieldList(0);
	}

	private GenericDINodeFieldListContext genericDINodeFieldList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		GenericDINodeFieldListContext _localctx = new GenericDINodeFieldListContext(_ctx, _parentState);
		GenericDINodeFieldListContext _prevctx = _localctx;
		int _startState = 658;
		enterRecursionRule(_localctx, 658, RULE_genericDINodeFieldList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3540);
			genericDINodeField();
			}
			_ctx.stop = _input.LT(-1);
			setState(3547);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,173,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new GenericDINodeFieldListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_genericDINodeFieldList);
					setState(3542);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3543);
					match(COMMA);
					setState(3544);
					genericDINodeField();
					}
					} 
				}
				setState(3549);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,173,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class GenericDINodeFieldContext extends ParserRuleContext {
		public TagFieldContext tagField() {
			return getRuleContext(TagFieldContext.class,0);
		}
		public TerminalNode HEADERCOLON() { return getToken(LLVMParser.HEADERCOLON, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode OPERANDSCOLON() { return getToken(LLVMParser.OPERANDSCOLON, 0); }
		public MdFieldsContext mdFields() {
			return getRuleContext(MdFieldsContext.class,0);
		}
		public GenericDINodeFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericDINodeField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterGenericDINodeField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitGenericDINodeField(this);
		}
	}

	public final GenericDINodeFieldContext genericDINodeField() throws RecognitionException {
		GenericDINodeFieldContext _localctx = new GenericDINodeFieldContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_genericDINodeField);
		try {
			setState(3555);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TAGCOLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3550);
				tagField();
				}
				break;
			case HEADERCOLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3551);
				match(HEADERCOLON);
				setState(3552);
				stringLit();
				}
				break;
			case OPERANDSCOLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3553);
				match(OPERANDSCOLON);
				setState(3554);
				mdFields();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileFieldContext extends ParserRuleContext {
		public TerminalNode FILECOLON() { return getToken(LLVMParser.FILECOLON, 0); }
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public FileFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFileField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFileField(this);
		}
	}

	public final FileFieldContext fileField() throws RecognitionException {
		FileFieldContext _localctx = new FileFieldContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_fileField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3557);
			match(FILECOLON);
			setState(3558);
			mdField();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsOptimizedFieldContext extends ParserRuleContext {
		public TerminalNode ISOPTIMIZEDCOLON() { return getToken(LLVMParser.ISOPTIMIZEDCOLON, 0); }
		public BoolLitContext boolLit() {
			return getRuleContext(BoolLitContext.class,0);
		}
		public IsOptimizedFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isOptimizedField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterIsOptimizedField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitIsOptimizedField(this);
		}
	}

	public final IsOptimizedFieldContext isOptimizedField() throws RecognitionException {
		IsOptimizedFieldContext _localctx = new IsOptimizedFieldContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_isOptimizedField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3560);
			match(ISOPTIMIZEDCOLON);
			setState(3561);
			boolLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TagFieldContext extends ParserRuleContext {
		public TerminalNode TAGCOLON() { return getToken(LLVMParser.TAGCOLON, 0); }
		public DwarfTagContext dwarfTag() {
			return getRuleContext(DwarfTagContext.class,0);
		}
		public TagFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tagField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTagField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTagField(this);
		}
	}

	public final TagFieldContext tagField() throws RecognitionException {
		TagFieldContext _localctx = new TagFieldContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_tagField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3563);
			match(TAGCOLON);
			setState(3564);
			dwarfTag();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NameFieldContext extends ParserRuleContext {
		public TerminalNode NAMECOLON() { return getToken(LLVMParser.NAMECOLON, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public NameFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nameField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterNameField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitNameField(this);
		}
	}

	public final NameFieldContext nameField() throws RecognitionException {
		NameFieldContext _localctx = new NameFieldContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_nameField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3566);
			match(NAMECOLON);
			setState(3567);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SizeFieldContext extends ParserRuleContext {
		public TerminalNode SIZECOLON() { return getToken(LLVMParser.SIZECOLON, 0); }
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public SizeFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sizeField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSizeField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSizeField(this);
		}
	}

	public final SizeFieldContext sizeField() throws RecognitionException {
		SizeFieldContext _localctx = new SizeFieldContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_sizeField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3569);
			match(SIZECOLON);
			setState(3570);
			intLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlignFieldContext extends ParserRuleContext {
		public TerminalNode ALIGNCOLON() { return getToken(LLVMParser.ALIGNCOLON, 0); }
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public AlignFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alignField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAlignField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAlignField(this);
		}
	}

	public final AlignFieldContext alignField() throws RecognitionException {
		AlignFieldContext _localctx = new AlignFieldContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_alignField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3572);
			match(ALIGNCOLON);
			setState(3573);
			intLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlagsFieldContext extends ParserRuleContext {
		public TerminalNode FLAGSCOLON() { return getToken(LLVMParser.FLAGSCOLON, 0); }
		public DiFlagListContext diFlagList() {
			return getRuleContext(DiFlagListContext.class,0);
		}
		public FlagsFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flagsField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFlagsField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFlagsField(this);
		}
	}

	public final FlagsFieldContext flagsField() throws RecognitionException {
		FlagsFieldContext _localctx = new FlagsFieldContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_flagsField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3575);
			match(FLAGSCOLON);
			setState(3576);
			diFlagList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LineFieldContext extends ParserRuleContext {
		public TerminalNode LINECOLON() { return getToken(LLVMParser.LINECOLON, 0); }
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public LineFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lineField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterLineField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitLineField(this);
		}
	}

	public final LineFieldContext lineField() throws RecognitionException {
		LineFieldContext _localctx = new LineFieldContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_lineField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3578);
			match(LINECOLON);
			setState(3579);
			intLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScopeFieldContext extends ParserRuleContext {
		public TerminalNode SCOPECOLON() { return getToken(LLVMParser.SCOPECOLON, 0); }
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public ScopeFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scopeField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterScopeField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitScopeField(this);
		}
	}

	public final ScopeFieldContext scopeField() throws RecognitionException {
		ScopeFieldContext _localctx = new ScopeFieldContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_scopeField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3581);
			match(SCOPECOLON);
			setState(3582);
			mdField();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BaseTypeFieldContext extends ParserRuleContext {
		public TerminalNode BASETYPECOLON() { return getToken(LLVMParser.BASETYPECOLON, 0); }
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public BaseTypeFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_baseTypeField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterBaseTypeField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitBaseTypeField(this);
		}
	}

	public final BaseTypeFieldContext baseTypeField() throws RecognitionException {
		BaseTypeFieldContext _localctx = new BaseTypeFieldContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_baseTypeField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3584);
			match(BASETYPECOLON);
			setState(3585);
			mdField();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OffsetFieldContext extends ParserRuleContext {
		public TerminalNode OFFSETCOLON() { return getToken(LLVMParser.OFFSETCOLON, 0); }
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public OffsetFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offsetField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOffsetField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOffsetField(this);
		}
	}

	public final OffsetFieldContext offsetField() throws RecognitionException {
		OffsetFieldContext _localctx = new OffsetFieldContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_offsetField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3587);
			match(OFFSETCOLON);
			setState(3588);
			intLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TemplateParamsFieldContext extends ParserRuleContext {
		public TerminalNode TEMPLATEPARAMSCOLON() { return getToken(LLVMParser.TEMPLATEPARAMSCOLON, 0); }
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public TemplateParamsFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_templateParamsField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTemplateParamsField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTemplateParamsField(this);
		}
	}

	public final TemplateParamsFieldContext templateParamsField() throws RecognitionException {
		TemplateParamsFieldContext _localctx = new TemplateParamsFieldContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_templateParamsField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3590);
			match(TEMPLATEPARAMSCOLON);
			setState(3591);
			mdField();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntOrMDFieldContext extends ParserRuleContext {
		public TerminalNode INT_LIT() { return getToken(LLVMParser.INT_LIT, 0); }
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public IntOrMDFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intOrMDField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterIntOrMDField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitIntOrMDField(this);
		}
	}

	public final IntOrMDFieldContext intOrMDField() throws RecognitionException {
		IntOrMDFieldContext _localctx = new IntOrMDFieldContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_intOrMDField);
		try {
			setState(3595);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_LIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3593);
				match(INT_LIT);
				}
				break;
			case LT:
			case BANG:
			case LBRACK:
			case LBRACE:
			case NOTDIBASICTYPE:
			case NOTDICOMPILEUNIT:
			case NOTDICOMPOSITETYPE:
			case NOTDIDERIVEDTYPE:
			case NOTDIENUMERATOR:
			case NOTDIEXPRESSION:
			case NOTDIFILE:
			case NOTDIGLOBALVARIABLE:
			case NOTDIGLOBALVARIABLEEXPRESSION:
			case NOTDIIMPORTEDENTITY:
			case NOTDILEXICALBLOCK:
			case NOTDILEXICALBLOCKFILE:
			case NOTDILOCALVARIABLE:
			case NOTDILOCATION:
			case NOTDIMACRO:
			case NOTDIMACROFILE:
			case NOTDIMODULE:
			case NOTDINAMESPACE:
			case NOTDIOBJCPROPERTY:
			case NOTDISUBPROGRAM:
			case NOTDISUBRANGE:
			case NOTDISUBROUTINETYPE:
			case NOTDITEMPLATETYPEPARAMETER:
			case NOTDITEMPLATEVALUEPARAMETER:
			case DOUBLE:
			case FLOAT:
			case FP128:
			case NOTGENERICDINODE:
			case HALF:
			case LABEL:
			case METADATA:
			case NULL:
			case PPC_FP128:
			case TOKEN:
			case VOID:
			case X86_FP80:
			case X86_MMX:
			case METADATA_ID:
			case INT_TYPE:
			case LOCAL_IDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3594);
				mdField();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeFieldContext extends ParserRuleContext {
		public TerminalNode TYPECOLON() { return getToken(LLVMParser.TYPECOLON, 0); }
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public TypeFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTypeField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTypeField(this);
		}
	}

	public final TypeFieldContext typeField() throws RecognitionException {
		TypeFieldContext _localctx = new TypeFieldContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_typeField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3597);
			match(TYPECOLON);
			setState(3598);
			mdField();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LinkageNameFieldContext extends ParserRuleContext {
		public TerminalNode LINKAGENAMECOLON() { return getToken(LLVMParser.LINKAGENAMECOLON, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public LinkageNameFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linkageNameField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterLinkageNameField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitLinkageNameField(this);
		}
	}

	public final LinkageNameFieldContext linkageNameField() throws RecognitionException {
		LinkageNameFieldContext _localctx = new LinkageNameFieldContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_linkageNameField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3600);
			match(LINKAGENAMECOLON);
			setState(3601);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsLocalFieldContext extends ParserRuleContext {
		public TerminalNode ISLOCALCOLON() { return getToken(LLVMParser.ISLOCALCOLON, 0); }
		public BoolLitContext boolLit() {
			return getRuleContext(BoolLitContext.class,0);
		}
		public IsLocalFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isLocalField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterIsLocalField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitIsLocalField(this);
		}
	}

	public final IsLocalFieldContext isLocalField() throws RecognitionException {
		IsLocalFieldContext _localctx = new IsLocalFieldContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_isLocalField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3603);
			match(ISLOCALCOLON);
			setState(3604);
			boolLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsDefinitionFieldContext extends ParserRuleContext {
		public TerminalNode ISDEFINITIONCOLON() { return getToken(LLVMParser.ISDEFINITIONCOLON, 0); }
		public BoolLitContext boolLit() {
			return getRuleContext(BoolLitContext.class,0);
		}
		public IsDefinitionFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isDefinitionField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterIsDefinitionField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitIsDefinitionField(this);
		}
	}

	public final IsDefinitionFieldContext isDefinitionField() throws RecognitionException {
		IsDefinitionFieldContext _localctx = new IsDefinitionFieldContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_isDefinitionField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3606);
			match(ISDEFINITIONCOLON);
			setState(3607);
			boolLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclarationFieldContext extends ParserRuleContext {
		public TerminalNode DECLARATIONCOLON() { return getToken(LLVMParser.DECLARATIONCOLON, 0); }
		public MdFieldContext mdField() {
			return getRuleContext(MdFieldContext.class,0);
		}
		public DeclarationFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declarationField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDeclarationField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDeclarationField(this);
		}
	}

	public final DeclarationFieldContext declarationField() throws RecognitionException {
		DeclarationFieldContext _localctx = new DeclarationFieldContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_declarationField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3609);
			match(DECLARATIONCOLON);
			setState(3610);
			mdField();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnFieldContext extends ParserRuleContext {
		public TerminalNode COLUMNCOLON() { return getToken(LLVMParser.COLUMNCOLON, 0); }
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public ColumnFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterColumnField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitColumnField(this);
		}
	}

	public final ColumnFieldContext columnField() throws RecognitionException {
		ColumnFieldContext _localctx = new ColumnFieldContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_columnField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3612);
			match(COLUMNCOLON);
			setState(3613);
			intLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeMacinfoFieldContext extends ParserRuleContext {
		public TerminalNode TYPECOLON() { return getToken(LLVMParser.TYPECOLON, 0); }
		public DwarfMacinfoContext dwarfMacinfo() {
			return getRuleContext(DwarfMacinfoContext.class,0);
		}
		public TypeMacinfoFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeMacinfoField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTypeMacinfoField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTypeMacinfoField(this);
		}
	}

	public final TypeMacinfoFieldContext typeMacinfoField() throws RecognitionException {
		TypeMacinfoFieldContext _localctx = new TypeMacinfoFieldContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_typeMacinfoField);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3615);
			match(TYPECOLON);
			setState(3616);
			dwarfMacinfo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChecksumkindContext extends ParserRuleContext {
		public TerminalNode CHECKSUM_KIND() { return getToken(LLVMParser.CHECKSUM_KIND, 0); }
		public ChecksumkindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumkind; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterChecksumkind(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitChecksumkind(this);
		}
	}

	public final ChecksumkindContext checksumkind() throws RecognitionException {
		ChecksumkindContext _localctx = new ChecksumkindContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_checksumkind);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3618);
			match(CHECKSUM_KIND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiFlagListContext extends ParserRuleContext {
		public DiFlagContext diFlag() {
			return getRuleContext(DiFlagContext.class,0);
		}
		public DiFlagListContext diFlagList() {
			return getRuleContext(DiFlagListContext.class,0);
		}
		public TerminalNode VDASH() { return getToken(LLVMParser.VDASH, 0); }
		public DiFlagListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diFlagList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiFlagList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiFlagList(this);
		}
	}

	public final DiFlagListContext diFlagList() throws RecognitionException {
		return diFlagList(0);
	}

	private DiFlagListContext diFlagList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		DiFlagListContext _localctx = new DiFlagListContext(_ctx, _parentState);
		DiFlagListContext _prevctx = _localctx;
		int _startState = 704;
		enterRecursionRule(_localctx, 704, RULE_diFlagList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3621);
			diFlag();
			}
			_ctx.stop = _input.LT(-1);
			setState(3628);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,176,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DiFlagListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_diFlagList);
					setState(3623);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3624);
					match(VDASH);
					setState(3625);
					diFlag();
					}
					} 
				}
				setState(3630);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,176,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DiFlagContext extends ParserRuleContext {
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public TerminalNode DI_FLAG() { return getToken(LLVMParser.DI_FLAG, 0); }
		public DiFlagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diFlag; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDiFlag(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDiFlag(this);
		}
	}

	public final DiFlagContext diFlag() throws RecognitionException {
		DiFlagContext _localctx = new DiFlagContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_diFlag);
		try {
			setState(3633);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_LIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3631);
				intLit();
				}
				break;
			case DI_FLAG:
				enterOuterAlt(_localctx, 2);
				{
				setState(3632);
				match(DI_FLAG);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DwarfAttEncodingContext extends ParserRuleContext {
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public TerminalNode DWARF_ATT_ENCODING() { return getToken(LLVMParser.DWARF_ATT_ENCODING, 0); }
		public DwarfAttEncodingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dwarfAttEncoding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDwarfAttEncoding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDwarfAttEncoding(this);
		}
	}

	public final DwarfAttEncodingContext dwarfAttEncoding() throws RecognitionException {
		DwarfAttEncodingContext _localctx = new DwarfAttEncodingContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_dwarfAttEncoding);
		try {
			setState(3637);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_LIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3635);
				intLit();
				}
				break;
			case DWARF_ATT_ENCODING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3636);
				match(DWARF_ATT_ENCODING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DwarfCCContext extends ParserRuleContext {
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public TerminalNode DWARF_CC() { return getToken(LLVMParser.DWARF_CC, 0); }
		public DwarfCCContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dwarfCC; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDwarfCC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDwarfCC(this);
		}
	}

	public final DwarfCCContext dwarfCC() throws RecognitionException {
		DwarfCCContext _localctx = new DwarfCCContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_dwarfCC);
		try {
			setState(3641);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_LIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3639);
				intLit();
				}
				break;
			case DWARF_CC:
				enterOuterAlt(_localctx, 2);
				{
				setState(3640);
				match(DWARF_CC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DwarfLangContext extends ParserRuleContext {
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public TerminalNode DWARF_LANG() { return getToken(LLVMParser.DWARF_LANG, 0); }
		public DwarfLangContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dwarfLang; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDwarfLang(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDwarfLang(this);
		}
	}

	public final DwarfLangContext dwarfLang() throws RecognitionException {
		DwarfLangContext _localctx = new DwarfLangContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_dwarfLang);
		try {
			setState(3645);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_LIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3643);
				intLit();
				}
				break;
			case DWARF_LANG:
				enterOuterAlt(_localctx, 2);
				{
				setState(3644);
				match(DWARF_LANG);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DwarfMacinfoContext extends ParserRuleContext {
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public TerminalNode DWARF_MACINFO() { return getToken(LLVMParser.DWARF_MACINFO, 0); }
		public DwarfMacinfoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dwarfMacinfo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDwarfMacinfo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDwarfMacinfo(this);
		}
	}

	public final DwarfMacinfoContext dwarfMacinfo() throws RecognitionException {
		DwarfMacinfoContext _localctx = new DwarfMacinfoContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_dwarfMacinfo);
		try {
			setState(3649);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_LIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3647);
				intLit();
				}
				break;
			case DWARF_MACINFO:
				enterOuterAlt(_localctx, 2);
				{
				setState(3648);
				match(DWARF_MACINFO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DwarfOpContext extends ParserRuleContext {
		public TerminalNode DWARF_OP() { return getToken(LLVMParser.DWARF_OP, 0); }
		public DwarfOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dwarfOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDwarfOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDwarfOp(this);
		}
	}

	public final DwarfOpContext dwarfOp() throws RecognitionException {
		DwarfOpContext _localctx = new DwarfOpContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_dwarfOp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3651);
			match(DWARF_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DwarfTagContext extends ParserRuleContext {
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public TerminalNode DWARF_TAG() { return getToken(LLVMParser.DWARF_TAG, 0); }
		public DwarfTagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dwarfTag; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDwarfTag(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDwarfTag(this);
		}
	}

	public final DwarfTagContext dwarfTag() throws RecognitionException {
		DwarfTagContext _localctx = new DwarfTagContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_dwarfTag);
		try {
			setState(3655);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_LIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3653);
				intLit();
				}
				break;
			case DWARF_TAG:
				enterOuterAlt(_localctx, 2);
				{
				setState(3654);
				match(DWARF_TAG);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DwarfVirtualityContext extends ParserRuleContext {
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public TerminalNode DWARF_VIRTUALITY() { return getToken(LLVMParser.DWARF_VIRTUALITY, 0); }
		public DwarfVirtualityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dwarfVirtuality; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDwarfVirtuality(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDwarfVirtuality(this);
		}
	}

	public final DwarfVirtualityContext dwarfVirtuality() throws RecognitionException {
		DwarfVirtualityContext _localctx = new DwarfVirtualityContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_dwarfVirtuality);
		try {
			setState(3659);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_LIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3657);
				intLit();
				}
				break;
			case DWARF_VIRTUALITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3658);
				match(DWARF_VIRTUALITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmissionKindContext extends ParserRuleContext {
		public IntLitContext intLit() {
			return getRuleContext(IntLitContext.class,0);
		}
		public TerminalNode FULLDEBUG() { return getToken(LLVMParser.FULLDEBUG, 0); }
		public TerminalNode LINETABLESONLY() { return getToken(LLVMParser.LINETABLESONLY, 0); }
		public TerminalNode NODEBUG() { return getToken(LLVMParser.NODEBUG, 0); }
		public EmissionKindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emissionKind; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterEmissionKind(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitEmissionKind(this);
		}
	}

	public final EmissionKindContext emissionKind() throws RecognitionException {
		EmissionKindContext _localctx = new EmissionKindContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_emissionKind);
		try {
			setState(3665);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_LIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3661);
				intLit();
				}
				break;
			case FULLDEBUG:
				enterOuterAlt(_localctx, 2);
				{
				setState(3662);
				match(FULLDEBUG);
				}
				break;
			case LINETABLESONLY:
				enterOuterAlt(_localctx, 3);
				{
				setState(3663);
				match(LINETABLESONLY);
				}
				break;
			case NODEBUG:
				enterOuterAlt(_localctx, 4);
				{
				setState(3664);
				match(NODEBUG);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeValuesContext extends ParserRuleContext {
		public TypeValueListContext typeValueList() {
			return getRuleContext(TypeValueListContext.class,0);
		}
		public TypeValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeValues; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTypeValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTypeValues(this);
		}
	}

	public final TypeValuesContext typeValues() throws RecognitionException {
		TypeValuesContext _localctx = new TypeValuesContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_typeValues);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3668);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LBRACK) | (1L << LBRACE))) != 0) || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (DOUBLE - 126)) | (1L << (FLOAT - 126)) | (1L << (FP128 - 126)) | (1L << (HALF - 126)))) != 0) || _la==LABEL || _la==METADATA || _la==PPC_FP128 || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (TOKEN - 351)) | (1L << (VOID - 351)) | (1L << (X86_FP80 - 351)) | (1L << (X86_MMX - 351)))) != 0) || _la==INT_TYPE || _la==LOCAL_IDENT) {
				{
				setState(3667);
				typeValueList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeValueListContext extends ParserRuleContext {
		public TypeValueContext typeValue() {
			return getRuleContext(TypeValueContext.class,0);
		}
		public TypeValueListContext typeValueList() {
			return getRuleContext(TypeValueListContext.class,0);
		}
		public TypeValueListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeValueList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTypeValueList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTypeValueList(this);
		}
	}

	public final TypeValueListContext typeValueList() throws RecognitionException {
		return typeValueList(0);
	}

	private TypeValueListContext typeValueList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TypeValueListContext _localctx = new TypeValueListContext(_ctx, _parentState);
		TypeValueListContext _prevctx = _localctx;
		int _startState = 726;
		enterRecursionRule(_localctx, 726, RULE_typeValueList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3671);
			typeValue();
			}
			_ctx.stop = _input.LT(-1);
			setState(3677);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,186,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeValueListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_typeValueList);
					setState(3673);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3674);
					typeValue();
					}
					} 
				}
				setState(3679);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,186,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CommaSepTypeValueListContext extends ParserRuleContext {
		public TypeValueContext typeValue() {
			return getRuleContext(TypeValueContext.class,0);
		}
		public CommaSepTypeValueListContext commaSepTypeValueList() {
			return getRuleContext(CommaSepTypeValueListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public CommaSepTypeValueListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commaSepTypeValueList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterCommaSepTypeValueList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitCommaSepTypeValueList(this);
		}
	}

	public final CommaSepTypeValueListContext commaSepTypeValueList() throws RecognitionException {
		return commaSepTypeValueList(0);
	}

	private CommaSepTypeValueListContext commaSepTypeValueList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		CommaSepTypeValueListContext _localctx = new CommaSepTypeValueListContext(_ctx, _parentState);
		CommaSepTypeValueListContext _prevctx = _localctx;
		int _startState = 728;
		enterRecursionRule(_localctx, 728, RULE_commaSepTypeValueList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3681);
			typeValue();
			}
			_ctx.stop = _input.LT(-1);
			setState(3688);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,187,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CommaSepTypeValueListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_commaSepTypeValueList);
					setState(3683);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3684);
					match(COMMA);
					setState(3685);
					typeValue();
					}
					} 
				}
				setState(3690);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,187,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TypeValueContext extends ParserRuleContext {
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TypeValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTypeValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTypeValue(this);
		}
	}

	public final TypeValueContext typeValue() throws RecognitionException {
		TypeValueContext _localctx = new TypeValueContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_typeValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3691);
			llvmType(0);
			setState(3692);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeConstsContext extends ParserRuleContext {
		public TypeConstListContext typeConstList() {
			return getRuleContext(TypeConstListContext.class,0);
		}
		public TypeConstsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeConsts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTypeConsts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTypeConsts(this);
		}
	}

	public final TypeConstsContext typeConsts() throws RecognitionException {
		TypeConstsContext _localctx = new TypeConstsContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_typeConsts);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LBRACK) | (1L << LBRACE))) != 0) || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (DOUBLE - 126)) | (1L << (FLOAT - 126)) | (1L << (FP128 - 126)) | (1L << (HALF - 126)))) != 0) || _la==LABEL || _la==METADATA || _la==PPC_FP128 || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (TOKEN - 351)) | (1L << (VOID - 351)) | (1L << (X86_FP80 - 351)) | (1L << (X86_MMX - 351)))) != 0) || _la==INT_TYPE || _la==LOCAL_IDENT) {
				{
				setState(3694);
				typeConstList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeConstListContext extends ParserRuleContext {
		public TypeConstContext typeConst() {
			return getRuleContext(TypeConstContext.class,0);
		}
		public TypeConstListContext typeConstList() {
			return getRuleContext(TypeConstListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public TypeConstListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeConstList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTypeConstList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTypeConstList(this);
		}
	}

	public final TypeConstListContext typeConstList() throws RecognitionException {
		return typeConstList(0);
	}

	private TypeConstListContext typeConstList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TypeConstListContext _localctx = new TypeConstListContext(_ctx, _parentState);
		TypeConstListContext _prevctx = _localctx;
		int _startState = 734;
		enterRecursionRule(_localctx, 734, RULE_typeConstList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3698);
			typeConst();
			}
			_ctx.stop = _input.LT(-1);
			setState(3705);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,189,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeConstListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_typeConstList);
					setState(3700);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3701);
					match(COMMA);
					setState(3702);
					typeConst();
					}
					} 
				}
				setState(3707);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,189,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TypeConstContext extends ParserRuleContext {
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TypeConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTypeConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTypeConst(this);
		}
	}

	public final TypeConstContext typeConst() throws RecognitionException {
		TypeConstContext _localctx = new TypeConstContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_typeConst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3708);
			llvmType(0);
			setState(3709);
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlignmentContext extends ParserRuleContext {
		public TerminalNode ALIGN() { return getToken(LLVMParser.ALIGN, 0); }
		public TerminalNode INT_LIT() { return getToken(LLVMParser.INT_LIT, 0); }
		public AlignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAlignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAlignment(this);
		}
	}

	public final AlignmentContext alignment() throws RecognitionException {
		AlignmentContext _localctx = new AlignmentContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_alignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3711);
			match(ALIGN);
			setState(3712);
			match(INT_LIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllocSizeContext extends ParserRuleContext {
		public TerminalNode ALLOCSIZE() { return getToken(LLVMParser.ALLOCSIZE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public List<TerminalNode> INT_LIT() { return getTokens(LLVMParser.INT_LIT); }
		public TerminalNode INT_LIT(int i) {
			return getToken(LLVMParser.INT_LIT, i);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public AllocSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allocSize; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAllocSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAllocSize(this);
		}
	}

	public final AllocSizeContext allocSize() throws RecognitionException {
		AllocSizeContext _localctx = new AllocSizeContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_allocSize);
		try {
			setState(3724);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3714);
				match(ALLOCSIZE);
				setState(3715);
				match(LPAREN);
				setState(3716);
				match(INT_LIT);
				setState(3717);
				match(RPAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3718);
				match(ALLOCSIZE);
				setState(3719);
				match(LPAREN);
				setState(3720);
				match(INT_LIT);
				setState(3721);
				match(COMMA);
				setState(3722);
				match(INT_LIT);
				setState(3723);
				match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgsContext extends ParserRuleContext {
		public TerminalNode DOTS() { return getToken(LLVMParser.DOTS, 0); }
		public ArgListContext argList() {
			return getRuleContext(ArgListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public ArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitArgs(this);
		}
	}

	public final ArgsContext args() throws RecognitionException {
		ArgsContext _localctx = new ArgsContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_args);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3732);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				setState(3726);
				match(DOTS);
				}
				break;
			case 2:
				{
				setState(3727);
				argList(0);
				}
				break;
			case 3:
				{
				setState(3728);
				argList(0);
				setState(3729);
				match(COMMA);
				setState(3730);
				match(DOTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgListContext extends ParserRuleContext {
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ArgListContext argList() {
			return getRuleContext(ArgListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public ArgListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterArgList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitArgList(this);
		}
	}

	public final ArgListContext argList() throws RecognitionException {
		return argList(0);
	}

	private ArgListContext argList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ArgListContext _localctx = new ArgListContext(_ctx, _parentState);
		ArgListContext _prevctx = _localctx;
		int _startState = 744;
		enterRecursionRule(_localctx, 744, RULE_argList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3735);
			arg();
			}
			_ctx.stop = _input.LT(-1);
			setState(3742);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,192,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_argList);
					setState(3737);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3738);
					match(COMMA);
					setState(3739);
					arg();
					}
					} 
				}
				setState(3744);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,192,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ArgContext extends ParserRuleContext {
		public ParamAttrsContext paramAttrs() {
			return getRuleContext(ParamAttrsContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public OptAddrSpaceContext optAddrSpace() {
			return getRuleContext(OptAddrSpaceContext.class,0);
		}
		public TerminalNode STAR() { return getToken(LLVMParser.STAR, 0); }
		public ConcreteNonRecTypeContext concreteNonRecType() {
			return getRuleContext(ConcreteNonRecTypeContext.class,0);
		}
		public MetadataTypeContext metadataType() {
			return getRuleContext(MetadataTypeContext.class,0);
		}
		public MetadataContext metadata() {
			return getRuleContext(MetadataContext.class,0);
		}
		public ArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitArg(this);
		}
	}

	public final ArgContext arg() throws RecognitionException {
		ArgContext _localctx = new ArgContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_arg);
		try {
			setState(3758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3750);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
				case 1:
					{
					setState(3745);
					llvmType(0);
					setState(3746);
					optAddrSpace();
					setState(3747);
					match(STAR);
					}
					break;
				case 2:
					{
					setState(3749);
					concreteNonRecType();
					}
					break;
				}
				setState(3752);
				paramAttrs();
				setState(3753);
				value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3755);
				metadataType();
				setState(3756);
				metadata();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AtomicOrderingContext extends ParserRuleContext {
		public TerminalNode ACQ_REL() { return getToken(LLVMParser.ACQ_REL, 0); }
		public TerminalNode ACQUIRE() { return getToken(LLVMParser.ACQUIRE, 0); }
		public TerminalNode MONOTONIC() { return getToken(LLVMParser.MONOTONIC, 0); }
		public TerminalNode RELEASE() { return getToken(LLVMParser.RELEASE, 0); }
		public TerminalNode SEQ_CST() { return getToken(LLVMParser.SEQ_CST, 0); }
		public TerminalNode UNORDERED() { return getToken(LLVMParser.UNORDERED, 0); }
		public AtomicOrderingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atomicOrdering; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterAtomicOrdering(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitAtomicOrdering(this);
		}
	}

	public final AtomicOrderingContext atomicOrdering() throws RecognitionException {
		AtomicOrderingContext _localctx = new AtomicOrderingContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_atomicOrdering);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3760);
			_la = _input.LA(1);
			if ( !(_la==ACQ_REL || _la==ACQUIRE || _la==MONOTONIC || _la==RELEASE || _la==SEQ_CST || _la==UNORDERED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptCallingConvContext extends ParserRuleContext {
		public CallingConvContext callingConv() {
			return getRuleContext(CallingConvContext.class,0);
		}
		public OptCallingConvContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optCallingConv; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptCallingConv(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptCallingConv(this);
		}
	}

	public final OptCallingConvContext optCallingConv() throws RecognitionException {
		OptCallingConvContext _localctx = new OptCallingConvContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_optCallingConv);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (AMDGPU_CS - 28)) | (1L << (AMDGPU_ES - 28)) | (1L << (AMDGPU_GS - 28)) | (1L << (AMDGPU_HS - 28)) | (1L << (AMDGPU_KERNEL - 28)) | (1L << (AMDGPU_LS - 28)) | (1L << (AMDGPU_PS - 28)) | (1L << (AMDGPU_VS - 28)) | (1L << (ANYREGCC - 28)) | (1L << (ARM_AAPCSCC - 28)) | (1L << (ARM_AAPCS_VFPCC - 28)) | (1L << (ARM_APCSCC - 28)) | (1L << (AVR_INTRCC - 28)) | (1L << (AVR_SIGNALCC - 28)) | (1L << (CC - 28)) | (1L << (CCC - 28)) | (1L << (COLDCC - 28)) | (1L << (CXX_FAST_TLSCC - 28)))) != 0) || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (FASTCC - 150)) | (1L << (GHCCC - 150)) | (1L << (HHVMCC - 150)) | (1L << (HHVM_CCC - 150)) | (1L << (INTEL_OCL_BICC - 150)))) != 0) || ((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (MSP430_INTRCC - 232)) | (1L << (PRESERVE_ALLCC - 232)) | (1L << (PRESERVE_MOSTCC - 232)) | (1L << (PTX_DEVICE - 232)) | (1L << (PTX_KERNEL - 232)))) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & ((1L << (SPIR_FUNC - 326)) | (1L << (SPIR_KERNEL - 326)) | (1L << (SWIFTCC - 326)) | (1L << (WEBKIT_JSCC - 326)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (WIN64CC - 390)) | (1L << (X86_64_SYSVCC - 390)) | (1L << (X86_FASTCALLCC - 390)) | (1L << (X86_INTRCC - 390)) | (1L << (X86_REGCALLCC - 390)) | (1L << (X86_STDCALLCC - 390)) | (1L << (X86_THISCALLCC - 390)) | (1L << (X86_VECTORCALLCC - 390)))) != 0)) {
				{
				setState(3762);
				callingConv();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallingConvContext extends ParserRuleContext {
		public TerminalNode AMDGPU_CS() { return getToken(LLVMParser.AMDGPU_CS, 0); }
		public TerminalNode AMDGPU_ES() { return getToken(LLVMParser.AMDGPU_ES, 0); }
		public TerminalNode AMDGPU_GS() { return getToken(LLVMParser.AMDGPU_GS, 0); }
		public TerminalNode AMDGPU_HS() { return getToken(LLVMParser.AMDGPU_HS, 0); }
		public TerminalNode AMDGPU_KERNEL() { return getToken(LLVMParser.AMDGPU_KERNEL, 0); }
		public TerminalNode AMDGPU_LS() { return getToken(LLVMParser.AMDGPU_LS, 0); }
		public TerminalNode AMDGPU_PS() { return getToken(LLVMParser.AMDGPU_PS, 0); }
		public TerminalNode AMDGPU_VS() { return getToken(LLVMParser.AMDGPU_VS, 0); }
		public TerminalNode ANYREGCC() { return getToken(LLVMParser.ANYREGCC, 0); }
		public TerminalNode ARM_AAPCS_VFPCC() { return getToken(LLVMParser.ARM_AAPCS_VFPCC, 0); }
		public TerminalNode ARM_AAPCSCC() { return getToken(LLVMParser.ARM_AAPCSCC, 0); }
		public TerminalNode ARM_APCSCC() { return getToken(LLVMParser.ARM_APCSCC, 0); }
		public TerminalNode AVR_INTRCC() { return getToken(LLVMParser.AVR_INTRCC, 0); }
		public TerminalNode AVR_SIGNALCC() { return getToken(LLVMParser.AVR_SIGNALCC, 0); }
		public TerminalNode CCC() { return getToken(LLVMParser.CCC, 0); }
		public TerminalNode COLDCC() { return getToken(LLVMParser.COLDCC, 0); }
		public TerminalNode CXX_FAST_TLSCC() { return getToken(LLVMParser.CXX_FAST_TLSCC, 0); }
		public TerminalNode FASTCC() { return getToken(LLVMParser.FASTCC, 0); }
		public TerminalNode GHCCC() { return getToken(LLVMParser.GHCCC, 0); }
		public TerminalNode HHVM_CCC() { return getToken(LLVMParser.HHVM_CCC, 0); }
		public TerminalNode HHVMCC() { return getToken(LLVMParser.HHVMCC, 0); }
		public TerminalNode INTEL_OCL_BICC() { return getToken(LLVMParser.INTEL_OCL_BICC, 0); }
		public TerminalNode MSP430_INTRCC() { return getToken(LLVMParser.MSP430_INTRCC, 0); }
		public TerminalNode PRESERVE_ALLCC() { return getToken(LLVMParser.PRESERVE_ALLCC, 0); }
		public TerminalNode PRESERVE_MOSTCC() { return getToken(LLVMParser.PRESERVE_MOSTCC, 0); }
		public TerminalNode PTX_DEVICE() { return getToken(LLVMParser.PTX_DEVICE, 0); }
		public TerminalNode PTX_KERNEL() { return getToken(LLVMParser.PTX_KERNEL, 0); }
		public TerminalNode SPIR_FUNC() { return getToken(LLVMParser.SPIR_FUNC, 0); }
		public TerminalNode SPIR_KERNEL() { return getToken(LLVMParser.SPIR_KERNEL, 0); }
		public TerminalNode SWIFTCC() { return getToken(LLVMParser.SWIFTCC, 0); }
		public TerminalNode WEBKIT_JSCC() { return getToken(LLVMParser.WEBKIT_JSCC, 0); }
		public TerminalNode WIN64CC() { return getToken(LLVMParser.WIN64CC, 0); }
		public TerminalNode X86_64_SYSVCC() { return getToken(LLVMParser.X86_64_SYSVCC, 0); }
		public TerminalNode X86_FASTCALLCC() { return getToken(LLVMParser.X86_FASTCALLCC, 0); }
		public TerminalNode X86_INTRCC() { return getToken(LLVMParser.X86_INTRCC, 0); }
		public TerminalNode X86_REGCALLCC() { return getToken(LLVMParser.X86_REGCALLCC, 0); }
		public TerminalNode X86_STDCALLCC() { return getToken(LLVMParser.X86_STDCALLCC, 0); }
		public TerminalNode X86_THISCALLCC() { return getToken(LLVMParser.X86_THISCALLCC, 0); }
		public TerminalNode X86_VECTORCALLCC() { return getToken(LLVMParser.X86_VECTORCALLCC, 0); }
		public TerminalNode CC() { return getToken(LLVMParser.CC, 0); }
		public TerminalNode INT_LIT() { return getToken(LLVMParser.INT_LIT, 0); }
		public CallingConvContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callingConv; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterCallingConv(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitCallingConv(this);
		}
	}

	public final CallingConvContext callingConv() throws RecognitionException {
		CallingConvContext _localctx = new CallingConvContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_callingConv);
		try {
			setState(3806);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AMDGPU_CS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3765);
				match(AMDGPU_CS);
				}
				break;
			case AMDGPU_ES:
				enterOuterAlt(_localctx, 2);
				{
				setState(3766);
				match(AMDGPU_ES);
				}
				break;
			case AMDGPU_GS:
				enterOuterAlt(_localctx, 3);
				{
				setState(3767);
				match(AMDGPU_GS);
				}
				break;
			case AMDGPU_HS:
				enterOuterAlt(_localctx, 4);
				{
				setState(3768);
				match(AMDGPU_HS);
				}
				break;
			case AMDGPU_KERNEL:
				enterOuterAlt(_localctx, 5);
				{
				setState(3769);
				match(AMDGPU_KERNEL);
				}
				break;
			case AMDGPU_LS:
				enterOuterAlt(_localctx, 6);
				{
				setState(3770);
				match(AMDGPU_LS);
				}
				break;
			case AMDGPU_PS:
				enterOuterAlt(_localctx, 7);
				{
				setState(3771);
				match(AMDGPU_PS);
				}
				break;
			case AMDGPU_VS:
				enterOuterAlt(_localctx, 8);
				{
				setState(3772);
				match(AMDGPU_VS);
				}
				break;
			case ANYREGCC:
				enterOuterAlt(_localctx, 9);
				{
				setState(3773);
				match(ANYREGCC);
				}
				break;
			case ARM_AAPCS_VFPCC:
				enterOuterAlt(_localctx, 10);
				{
				setState(3774);
				match(ARM_AAPCS_VFPCC);
				}
				break;
			case ARM_AAPCSCC:
				enterOuterAlt(_localctx, 11);
				{
				setState(3775);
				match(ARM_AAPCSCC);
				}
				break;
			case ARM_APCSCC:
				enterOuterAlt(_localctx, 12);
				{
				setState(3776);
				match(ARM_APCSCC);
				}
				break;
			case AVR_INTRCC:
				enterOuterAlt(_localctx, 13);
				{
				setState(3777);
				match(AVR_INTRCC);
				}
				break;
			case AVR_SIGNALCC:
				enterOuterAlt(_localctx, 14);
				{
				setState(3778);
				match(AVR_SIGNALCC);
				}
				break;
			case CCC:
				enterOuterAlt(_localctx, 15);
				{
				setState(3779);
				match(CCC);
				}
				break;
			case COLDCC:
				enterOuterAlt(_localctx, 16);
				{
				setState(3780);
				match(COLDCC);
				}
				break;
			case CXX_FAST_TLSCC:
				enterOuterAlt(_localctx, 17);
				{
				setState(3781);
				match(CXX_FAST_TLSCC);
				}
				break;
			case FASTCC:
				enterOuterAlt(_localctx, 18);
				{
				setState(3782);
				match(FASTCC);
				}
				break;
			case GHCCC:
				enterOuterAlt(_localctx, 19);
				{
				setState(3783);
				match(GHCCC);
				}
				break;
			case HHVM_CCC:
				enterOuterAlt(_localctx, 20);
				{
				setState(3784);
				match(HHVM_CCC);
				}
				break;
			case HHVMCC:
				enterOuterAlt(_localctx, 21);
				{
				setState(3785);
				match(HHVMCC);
				}
				break;
			case INTEL_OCL_BICC:
				enterOuterAlt(_localctx, 22);
				{
				setState(3786);
				match(INTEL_OCL_BICC);
				}
				break;
			case MSP430_INTRCC:
				enterOuterAlt(_localctx, 23);
				{
				setState(3787);
				match(MSP430_INTRCC);
				}
				break;
			case PRESERVE_ALLCC:
				enterOuterAlt(_localctx, 24);
				{
				setState(3788);
				match(PRESERVE_ALLCC);
				}
				break;
			case PRESERVE_MOSTCC:
				enterOuterAlt(_localctx, 25);
				{
				setState(3789);
				match(PRESERVE_MOSTCC);
				}
				break;
			case PTX_DEVICE:
				enterOuterAlt(_localctx, 26);
				{
				setState(3790);
				match(PTX_DEVICE);
				}
				break;
			case PTX_KERNEL:
				enterOuterAlt(_localctx, 27);
				{
				setState(3791);
				match(PTX_KERNEL);
				}
				break;
			case SPIR_FUNC:
				enterOuterAlt(_localctx, 28);
				{
				setState(3792);
				match(SPIR_FUNC);
				}
				break;
			case SPIR_KERNEL:
				enterOuterAlt(_localctx, 29);
				{
				setState(3793);
				match(SPIR_KERNEL);
				}
				break;
			case SWIFTCC:
				enterOuterAlt(_localctx, 30);
				{
				setState(3794);
				match(SWIFTCC);
				}
				break;
			case WEBKIT_JSCC:
				enterOuterAlt(_localctx, 31);
				{
				setState(3795);
				match(WEBKIT_JSCC);
				}
				break;
			case WIN64CC:
				enterOuterAlt(_localctx, 32);
				{
				setState(3796);
				match(WIN64CC);
				}
				break;
			case X86_64_SYSVCC:
				enterOuterAlt(_localctx, 33);
				{
				setState(3797);
				match(X86_64_SYSVCC);
				}
				break;
			case X86_FASTCALLCC:
				enterOuterAlt(_localctx, 34);
				{
				setState(3798);
				match(X86_FASTCALLCC);
				}
				break;
			case X86_INTRCC:
				enterOuterAlt(_localctx, 35);
				{
				setState(3799);
				match(X86_INTRCC);
				}
				break;
			case X86_REGCALLCC:
				enterOuterAlt(_localctx, 36);
				{
				setState(3800);
				match(X86_REGCALLCC);
				}
				break;
			case X86_STDCALLCC:
				enterOuterAlt(_localctx, 37);
				{
				setState(3801);
				match(X86_STDCALLCC);
				}
				break;
			case X86_THISCALLCC:
				enterOuterAlt(_localctx, 38);
				{
				setState(3802);
				match(X86_THISCALLCC);
				}
				break;
			case X86_VECTORCALLCC:
				enterOuterAlt(_localctx, 39);
				{
				setState(3803);
				match(X86_VECTORCALLCC);
				}
				break;
			case CC:
				enterOuterAlt(_localctx, 40);
				{
				setState(3804);
				match(CC);
				setState(3805);
				match(INT_LIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptComdatContext extends ParserRuleContext {
		public ComdatContext comdat() {
			return getRuleContext(ComdatContext.class,0);
		}
		public OptComdatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optComdat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptComdat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptComdat(this);
		}
	}

	public final OptComdatContext optComdat() throws RecognitionException {
		OptComdatContext _localctx = new OptComdatContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_optComdat);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3809);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				setState(3808);
				comdat();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComdatContext extends ParserRuleContext {
		public TerminalNode COMDAT() { return getToken(LLVMParser.COMDAT, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public ComdatNameContext comdatName() {
			return getRuleContext(ComdatNameContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public ComdatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comdat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterComdat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitComdat(this);
		}
	}

	public final ComdatContext comdat() throws RecognitionException {
		ComdatContext _localctx = new ComdatContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_comdat);
		try {
			setState(3817);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3811);
				match(COMDAT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3812);
				match(COMDAT);
				setState(3813);
				match(LPAREN);
				setState(3814);
				comdatName();
				setState(3815);
				match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DereferenceableContext extends ParserRuleContext {
		public TerminalNode DEREFERENCEABLE() { return getToken(LLVMParser.DEREFERENCEABLE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public TerminalNode INT_LIT() { return getToken(LLVMParser.INT_LIT, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public TerminalNode DEREFERENCEABLE_OR_NULL() { return getToken(LLVMParser.DEREFERENCEABLE_OR_NULL, 0); }
		public DereferenceableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dereferenceable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDereferenceable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDereferenceable(this);
		}
	}

	public final DereferenceableContext dereferenceable() throws RecognitionException {
		DereferenceableContext _localctx = new DereferenceableContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_dereferenceable);
		try {
			setState(3827);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEREFERENCEABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3819);
				match(DEREFERENCEABLE);
				setState(3820);
				match(LPAREN);
				setState(3821);
				match(INT_LIT);
				setState(3822);
				match(RPAREN);
				}
				break;
			case DEREFERENCEABLE_OR_NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3823);
				match(DEREFERENCEABLE_OR_NULL);
				setState(3824);
				match(LPAREN);
				setState(3825);
				match(INT_LIT);
				setState(3826);
				match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptDLLStorageClassContext extends ParserRuleContext {
		public DllStorageClassContext dllStorageClass() {
			return getRuleContext(DllStorageClassContext.class,0);
		}
		public OptDLLStorageClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optDLLStorageClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptDLLStorageClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptDLLStorageClass(this);
		}
	}

	public final OptDLLStorageClassContext optDLLStorageClass() throws RecognitionException {
		OptDLLStorageClassContext _localctx = new OptDLLStorageClassContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_optDLLStorageClass);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3830);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DLLEXPORT || _la==DLLIMPORT) {
				{
				setState(3829);
				dllStorageClass();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DllStorageClassContext extends ParserRuleContext {
		public TerminalNode DLLEXPORT() { return getToken(LLVMParser.DLLEXPORT, 0); }
		public TerminalNode DLLIMPORT() { return getToken(LLVMParser.DLLIMPORT, 0); }
		public DllStorageClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dllStorageClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterDllStorageClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitDllStorageClass(this);
		}
	}

	public final DllStorageClassContext dllStorageClass() throws RecognitionException {
		DllStorageClassContext _localctx = new DllStorageClassContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_dllStorageClass);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3832);
			_la = _input.LA(1);
			if ( !(_la==DLLEXPORT || _la==DLLIMPORT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptExactContext extends ParserRuleContext {
		public TerminalNode EXACT() { return getToken(LLVMParser.EXACT, 0); }
		public OptExactContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optExact; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptExact(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptExact(this);
		}
	}

	public final OptExactContext optExact() throws RecognitionException {
		OptExactContext _localctx = new OptExactContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_optExact);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXACT) {
				{
				setState(3834);
				match(EXACT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExceptionArgsContext extends ParserRuleContext {
		public ExceptionArgListContext exceptionArgList() {
			return getRuleContext(ExceptionArgListContext.class,0);
		}
		public ExceptionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exceptionArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterExceptionArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitExceptionArgs(this);
		}
	}

	public final ExceptionArgsContext exceptionArgs() throws RecognitionException {
		ExceptionArgsContext _localctx = new ExceptionArgsContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_exceptionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LBRACK) | (1L << LBRACE))) != 0) || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (DOUBLE - 126)) | (1L << (FLOAT - 126)) | (1L << (FP128 - 126)) | (1L << (HALF - 126)))) != 0) || _la==LABEL || _la==METADATA || _la==PPC_FP128 || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (TOKEN - 351)) | (1L << (VOID - 351)) | (1L << (X86_FP80 - 351)) | (1L << (X86_MMX - 351)))) != 0) || _la==INT_TYPE || _la==LOCAL_IDENT) {
				{
				setState(3837);
				exceptionArgList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExceptionArgListContext extends ParserRuleContext {
		public ExceptionArgContext exceptionArg() {
			return getRuleContext(ExceptionArgContext.class,0);
		}
		public ExceptionArgListContext exceptionArgList() {
			return getRuleContext(ExceptionArgListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public ExceptionArgListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exceptionArgList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterExceptionArgList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitExceptionArgList(this);
		}
	}

	public final ExceptionArgListContext exceptionArgList() throws RecognitionException {
		return exceptionArgList(0);
	}

	private ExceptionArgListContext exceptionArgList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExceptionArgListContext _localctx = new ExceptionArgListContext(_ctx, _parentState);
		ExceptionArgListContext _prevctx = _localctx;
		int _startState = 768;
		enterRecursionRule(_localctx, 768, RULE_exceptionArgList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3841);
			exceptionArg();
			}
			_ctx.stop = _input.LT(-1);
			setState(3848);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,203,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExceptionArgListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_exceptionArgList);
					setState(3843);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3844);
					match(COMMA);
					setState(3845);
					exceptionArg();
					}
					} 
				}
				setState(3850);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,203,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExceptionArgContext extends ParserRuleContext {
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public OptAddrSpaceContext optAddrSpace() {
			return getRuleContext(OptAddrSpaceContext.class,0);
		}
		public TerminalNode STAR() { return getToken(LLVMParser.STAR, 0); }
		public ConcreteNonRecTypeContext concreteNonRecType() {
			return getRuleContext(ConcreteNonRecTypeContext.class,0);
		}
		public MetadataTypeContext metadataType() {
			return getRuleContext(MetadataTypeContext.class,0);
		}
		public MetadataContext metadata() {
			return getRuleContext(MetadataContext.class,0);
		}
		public ExceptionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exceptionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterExceptionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitExceptionArg(this);
		}
	}

	public final ExceptionArgContext exceptionArg() throws RecognitionException {
		ExceptionArgContext _localctx = new ExceptionArgContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_exceptionArg);
		try {
			setState(3863);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3856);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
				case 1:
					{
					setState(3851);
					llvmType(0);
					setState(3852);
					optAddrSpace();
					setState(3853);
					match(STAR);
					}
					break;
				case 2:
					{
					setState(3855);
					concreteNonRecType();
					}
					break;
				}
				setState(3858);
				value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3860);
				metadataType();
				setState(3861);
				metadata();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExceptionScopeContext extends ParserRuleContext {
		public NoneConstContext noneConst() {
			return getRuleContext(NoneConstContext.class,0);
		}
		public LocalIdentContext localIdent() {
			return getRuleContext(LocalIdentContext.class,0);
		}
		public ExceptionScopeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exceptionScope; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterExceptionScope(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitExceptionScope(this);
		}
	}

	public final ExceptionScopeContext exceptionScope() throws RecognitionException {
		ExceptionScopeContext _localctx = new ExceptionScopeContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_exceptionScope);
		try {
			setState(3867);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3865);
				noneConst();
				}
				break;
			case LOCAL_IDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3866);
				localIdent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FastMathFlagsContext extends ParserRuleContext {
		public FastMathFlagListContext fastMathFlagList() {
			return getRuleContext(FastMathFlagListContext.class,0);
		}
		public FastMathFlagsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fastMathFlags; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFastMathFlags(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFastMathFlags(this);
		}
	}

	public final FastMathFlagsContext fastMathFlags() throws RecognitionException {
		FastMathFlagsContext _localctx = new FastMathFlagsContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_fastMathFlags);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3870);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AFN || _la==ARCP || _la==CONTRACT || _la==FAST || ((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (NINF - 240)) | (1L << (NNAN - 240)) | (1L << (NSZ - 240)) | (1L << (REASSOC - 240)))) != 0)) {
				{
				setState(3869);
				fastMathFlagList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FastMathFlagListContext extends ParserRuleContext {
		public FastMathFlagContext fastMathFlag() {
			return getRuleContext(FastMathFlagContext.class,0);
		}
		public FastMathFlagListContext fastMathFlagList() {
			return getRuleContext(FastMathFlagListContext.class,0);
		}
		public FastMathFlagListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fastMathFlagList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFastMathFlagList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFastMathFlagList(this);
		}
	}

	public final FastMathFlagListContext fastMathFlagList() throws RecognitionException {
		return fastMathFlagList(0);
	}

	private FastMathFlagListContext fastMathFlagList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		FastMathFlagListContext _localctx = new FastMathFlagListContext(_ctx, _parentState);
		FastMathFlagListContext _prevctx = _localctx;
		int _startState = 776;
		enterRecursionRule(_localctx, 776, RULE_fastMathFlagList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3873);
			fastMathFlag();
			}
			_ctx.stop = _input.LT(-1);
			setState(3879);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,208,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FastMathFlagListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_fastMathFlagList);
					setState(3875);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3876);
					fastMathFlag();
					}
					} 
				}
				setState(3881);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,208,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class FastMathFlagContext extends ParserRuleContext {
		public TerminalNode AFN() { return getToken(LLVMParser.AFN, 0); }
		public TerminalNode ARCP() { return getToken(LLVMParser.ARCP, 0); }
		public TerminalNode CONTRACT() { return getToken(LLVMParser.CONTRACT, 0); }
		public TerminalNode FAST() { return getToken(LLVMParser.FAST, 0); }
		public TerminalNode NINF() { return getToken(LLVMParser.NINF, 0); }
		public TerminalNode NNAN() { return getToken(LLVMParser.NNAN, 0); }
		public TerminalNode NSZ() { return getToken(LLVMParser.NSZ, 0); }
		public TerminalNode REASSOC() { return getToken(LLVMParser.REASSOC, 0); }
		public FastMathFlagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fastMathFlag; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFastMathFlag(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFastMathFlag(this);
		}
	}

	public final FastMathFlagContext fastMathFlag() throws RecognitionException {
		FastMathFlagContext _localctx = new FastMathFlagContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_fastMathFlag);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3882);
			_la = _input.LA(1);
			if ( !(_la==AFN || _la==ARCP || _la==CONTRACT || _la==FAST || ((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (NINF - 240)) | (1L << (NNAN - 240)) | (1L << (NSZ - 240)) | (1L << (REASSOC - 240)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FpredContext extends ParserRuleContext {
		public TerminalNode FALSE() { return getToken(LLVMParser.FALSE, 0); }
		public TerminalNode OEQ() { return getToken(LLVMParser.OEQ, 0); }
		public TerminalNode OGE() { return getToken(LLVMParser.OGE, 0); }
		public TerminalNode OGT() { return getToken(LLVMParser.OGT, 0); }
		public TerminalNode OLE() { return getToken(LLVMParser.OLE, 0); }
		public TerminalNode OLT() { return getToken(LLVMParser.OLT, 0); }
		public TerminalNode ONE() { return getToken(LLVMParser.ONE, 0); }
		public TerminalNode ORD() { return getToken(LLVMParser.ORD, 0); }
		public TerminalNode TRUE() { return getToken(LLVMParser.TRUE, 0); }
		public TerminalNode UEQ() { return getToken(LLVMParser.UEQ, 0); }
		public TerminalNode UGE() { return getToken(LLVMParser.UGE, 0); }
		public TerminalNode UGT() { return getToken(LLVMParser.UGT, 0); }
		public TerminalNode ULE() { return getToken(LLVMParser.ULE, 0); }
		public TerminalNode ULT() { return getToken(LLVMParser.ULT, 0); }
		public TerminalNode UNE() { return getToken(LLVMParser.UNE, 0); }
		public TerminalNode UNO() { return getToken(LLVMParser.UNO, 0); }
		public FpredContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fpred; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFpred(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFpred(this);
		}
	}

	public final FpredContext fpred() throws RecognitionException {
		FpredContext _localctx = new FpredContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_fpred);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3884);
			_la = _input.LA(1);
			if ( !(_la==FALSE || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (OEQ - 263)) | (1L << (OGE - 263)) | (1L << (OGT - 263)) | (1L << (OLE - 263)) | (1L << (OLT - 263)) | (1L << (ONE - 263)) | (1L << (ORD - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (TRUE - 353)) | (1L << (UEQ - 353)) | (1L << (UGE - 353)) | (1L << (UGT - 353)) | (1L << (ULE - 353)) | (1L << (ULT - 353)) | (1L << (UNE - 353)) | (1L << (UNO - 353)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncAttrsContext extends ParserRuleContext {
		public FuncAttrListContext funcAttrList() {
			return getRuleContext(FuncAttrListContext.class,0);
		}
		public FuncAttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcAttrs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFuncAttrs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFuncAttrs(this);
		}
	}

	public final FuncAttrsContext funcAttrs() throws RecognitionException {
		FuncAttrsContext _localctx = new FuncAttrsContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_funcAttrs);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3887);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				setState(3886);
				funcAttrList(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncAttrListContext extends ParserRuleContext {
		public FuncAttrContext funcAttr() {
			return getRuleContext(FuncAttrContext.class,0);
		}
		public FuncAttrListContext funcAttrList() {
			return getRuleContext(FuncAttrListContext.class,0);
		}
		public FuncAttrListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcAttrList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFuncAttrList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFuncAttrList(this);
		}
	}

	public final FuncAttrListContext funcAttrList() throws RecognitionException {
		return funcAttrList(0);
	}

	private FuncAttrListContext funcAttrList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		FuncAttrListContext _localctx = new FuncAttrListContext(_ctx, _parentState);
		FuncAttrListContext _prevctx = _localctx;
		int _startState = 784;
		enterRecursionRule(_localctx, 784, RULE_funcAttrList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3890);
			funcAttr();
			}
			_ctx.stop = _input.LT(-1);
			setState(3896);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,210,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FuncAttrListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_funcAttrList);
					setState(3892);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3893);
					funcAttr();
					}
					} 
				}
				setState(3898);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,210,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class FuncAttrContext extends ParserRuleContext {
		public AttrGroupIDContext attrGroupID() {
			return getRuleContext(AttrGroupIDContext.class,0);
		}
		public TerminalNode ALIGN() { return getToken(LLVMParser.ALIGN, 0); }
		public TerminalNode EQSIGN() { return getToken(LLVMParser.EQSIGN, 0); }
		public TerminalNode INT_LIT() { return getToken(LLVMParser.INT_LIT, 0); }
		public TerminalNode ALIGNSTACK() { return getToken(LLVMParser.ALIGNSTACK, 0); }
		public AlignmentContext alignment() {
			return getRuleContext(AlignmentContext.class,0);
		}
		public AllocSizeContext allocSize() {
			return getRuleContext(AllocSizeContext.class,0);
		}
		public StackAlignmentContext stackAlignment() {
			return getRuleContext(StackAlignmentContext.class,0);
		}
		public List<StringLitContext> stringLit() {
			return getRuleContexts(StringLitContext.class);
		}
		public StringLitContext stringLit(int i) {
			return getRuleContext(StringLitContext.class,i);
		}
		public TerminalNode ALWAYSINLINE() { return getToken(LLVMParser.ALWAYSINLINE, 0); }
		public TerminalNode ARGMEMONLY() { return getToken(LLVMParser.ARGMEMONLY, 0); }
		public TerminalNode BUILTIN() { return getToken(LLVMParser.BUILTIN, 0); }
		public TerminalNode COLD() { return getToken(LLVMParser.COLD, 0); }
		public TerminalNode CONVERGENT() { return getToken(LLVMParser.CONVERGENT, 0); }
		public TerminalNode INACCESSIBLEMEM_OR_ARGMEMONLY() { return getToken(LLVMParser.INACCESSIBLEMEM_OR_ARGMEMONLY, 0); }
		public TerminalNode INACCESSIBLEMEMONLY() { return getToken(LLVMParser.INACCESSIBLEMEMONLY, 0); }
		public TerminalNode INLINEHINT() { return getToken(LLVMParser.INLINEHINT, 0); }
		public TerminalNode JUMPTABLE() { return getToken(LLVMParser.JUMPTABLE, 0); }
		public TerminalNode MINSIZE() { return getToken(LLVMParser.MINSIZE, 0); }
		public TerminalNode NAKED() { return getToken(LLVMParser.NAKED, 0); }
		public TerminalNode NOBUILTIN() { return getToken(LLVMParser.NOBUILTIN, 0); }
		public TerminalNode NODUPLICATE() { return getToken(LLVMParser.NODUPLICATE, 0); }
		public TerminalNode NOIMPLICITFLOAT() { return getToken(LLVMParser.NOIMPLICITFLOAT, 0); }
		public TerminalNode NOINLINE() { return getToken(LLVMParser.NOINLINE, 0); }
		public TerminalNode NONLAZYBIND() { return getToken(LLVMParser.NONLAZYBIND, 0); }
		public TerminalNode NORECURSE() { return getToken(LLVMParser.NORECURSE, 0); }
		public TerminalNode NOREDZONE() { return getToken(LLVMParser.NOREDZONE, 0); }
		public TerminalNode NORETURN() { return getToken(LLVMParser.NORETURN, 0); }
		public TerminalNode NOUNWIND() { return getToken(LLVMParser.NOUNWIND, 0); }
		public TerminalNode OPTNONE() { return getToken(LLVMParser.OPTNONE, 0); }
		public TerminalNode OPTSIZE() { return getToken(LLVMParser.OPTSIZE, 0); }
		public TerminalNode READNONE() { return getToken(LLVMParser.READNONE, 0); }
		public TerminalNode READONLY() { return getToken(LLVMParser.READONLY, 0); }
		public TerminalNode RETURNS_TWICE() { return getToken(LLVMParser.RETURNS_TWICE, 0); }
		public TerminalNode SAFESTACK() { return getToken(LLVMParser.SAFESTACK, 0); }
		public TerminalNode SANITIZE_ADDRESS() { return getToken(LLVMParser.SANITIZE_ADDRESS, 0); }
		public TerminalNode SANITIZE_HWADDRESS() { return getToken(LLVMParser.SANITIZE_HWADDRESS, 0); }
		public TerminalNode SANITIZE_MEMORY() { return getToken(LLVMParser.SANITIZE_MEMORY, 0); }
		public TerminalNode SANITIZE_THREAD() { return getToken(LLVMParser.SANITIZE_THREAD, 0); }
		public TerminalNode SPECULATABLE() { return getToken(LLVMParser.SPECULATABLE, 0); }
		public TerminalNode SSP() { return getToken(LLVMParser.SSP, 0); }
		public TerminalNode SSPREQ() { return getToken(LLVMParser.SSPREQ, 0); }
		public TerminalNode SSPSTRONG() { return getToken(LLVMParser.SSPSTRONG, 0); }
		public TerminalNode STRICTFP() { return getToken(LLVMParser.STRICTFP, 0); }
		public TerminalNode UWTABLE() { return getToken(LLVMParser.UWTABLE, 0); }
		public TerminalNode WRITEONLY() { return getToken(LLVMParser.WRITEONLY, 0); }
		public FuncAttrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcAttr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterFuncAttr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitFuncAttr(this);
		}
	}

	public final FuncAttrContext funcAttr() throws RecognitionException {
		FuncAttrContext _localctx = new FuncAttrContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_funcAttr);
		try {
			setState(3951);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3899);
				attrGroupID();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3900);
				match(ALIGN);
				setState(3901);
				match(EQSIGN);
				setState(3902);
				match(INT_LIT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3903);
				match(ALIGNSTACK);
				setState(3904);
				match(EQSIGN);
				setState(3905);
				match(INT_LIT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3906);
				alignment();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3907);
				allocSize();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3908);
				stackAlignment();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3909);
				stringLit();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3910);
				stringLit();
				setState(3911);
				match(EQSIGN);
				setState(3912);
				stringLit();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3914);
				match(ALWAYSINLINE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3915);
				match(ARGMEMONLY);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3916);
				match(BUILTIN);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3917);
				match(COLD);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3918);
				match(CONVERGENT);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3919);
				match(INACCESSIBLEMEM_OR_ARGMEMONLY);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3920);
				match(INACCESSIBLEMEMONLY);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3921);
				match(INLINEHINT);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3922);
				match(JUMPTABLE);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(3923);
				match(MINSIZE);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(3924);
				match(NAKED);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(3925);
				match(NOBUILTIN);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(3926);
				match(NODUPLICATE);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(3927);
				match(NOIMPLICITFLOAT);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(3928);
				match(NOINLINE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(3929);
				match(NONLAZYBIND);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(3930);
				match(NORECURSE);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(3931);
				match(NOREDZONE);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(3932);
				match(NORETURN);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(3933);
				match(NOUNWIND);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(3934);
				match(OPTNONE);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(3935);
				match(OPTSIZE);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(3936);
				match(READNONE);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(3937);
				match(READONLY);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(3938);
				match(RETURNS_TWICE);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(3939);
				match(SAFESTACK);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(3940);
				match(SANITIZE_ADDRESS);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(3941);
				match(SANITIZE_HWADDRESS);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(3942);
				match(SANITIZE_MEMORY);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(3943);
				match(SANITIZE_THREAD);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(3944);
				match(SPECULATABLE);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(3945);
				match(SSP);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(3946);
				match(SSPREQ);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(3947);
				match(SSPSTRONG);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(3948);
				match(STRICTFP);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(3949);
				match(UWTABLE);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(3950);
				match(WRITEONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptInBoundsContext extends ParserRuleContext {
		public TerminalNode INBOUNDS() { return getToken(LLVMParser.INBOUNDS, 0); }
		public OptInBoundsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optInBounds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptInBounds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptInBounds(this);
		}
	}

	public final OptInBoundsContext optInBounds() throws RecognitionException {
		OptInBoundsContext _localctx = new OptInBoundsContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_optInBounds);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INBOUNDS) {
				{
				setState(3953);
				match(INBOUNDS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndicesContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public IndexListContext indexList() {
			return getRuleContext(IndexListContext.class,0);
		}
		public IndicesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indices; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterIndices(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitIndices(this);
		}
	}

	public final IndicesContext indices() throws RecognitionException {
		IndicesContext _localctx = new IndicesContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_indices);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3958);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3956);
				match(COMMA);
				setState(3957);
				indexList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexListContext extends ParserRuleContext {
		public IndexContext index() {
			return getRuleContext(IndexContext.class,0);
		}
		public IndexListContext indexList() {
			return getRuleContext(IndexListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public IndexListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterIndexList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitIndexList(this);
		}
	}

	public final IndexListContext indexList() throws RecognitionException {
		return indexList(0);
	}

	private IndexListContext indexList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		IndexListContext _localctx = new IndexListContext(_ctx, _parentState);
		IndexListContext _prevctx = _localctx;
		int _startState = 792;
		enterRecursionRule(_localctx, 792, RULE_indexList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3961);
			index();
			}
			_ctx.stop = _input.LT(-1);
			setState(3968);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,214,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IndexListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_indexList);
					setState(3963);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3964);
					match(COMMA);
					setState(3965);
					index();
					}
					} 
				}
				setState(3970);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,214,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class IndexContext extends ParserRuleContext {
		public TerminalNode INT_LIT() { return getToken(LLVMParser.INT_LIT, 0); }
		public IndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitIndex(this);
		}
	}

	public final IndexContext index() throws RecognitionException {
		IndexContext _localctx = new IndexContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3971);
			match(INT_LIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IPredContext extends ParserRuleContext {
		public TerminalNode EQ() { return getToken(LLVMParser.EQ, 0); }
		public TerminalNode NE() { return getToken(LLVMParser.NE, 0); }
		public TerminalNode SGE() { return getToken(LLVMParser.SGE, 0); }
		public TerminalNode SGT() { return getToken(LLVMParser.SGT, 0); }
		public TerminalNode SLE() { return getToken(LLVMParser.SLE, 0); }
		public TerminalNode SLT() { return getToken(LLVMParser.SLT, 0); }
		public TerminalNode UGE() { return getToken(LLVMParser.UGE, 0); }
		public TerminalNode UGT() { return getToken(LLVMParser.UGT, 0); }
		public TerminalNode ULE() { return getToken(LLVMParser.ULE, 0); }
		public TerminalNode ULT() { return getToken(LLVMParser.ULT, 0); }
		public IPredContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iPred; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterIPred(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitIPred(this);
		}
	}

	public final IPredContext iPred() throws RecognitionException {
		IPredContext _localctx = new IPredContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_iPred);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3973);
			_la = _input.LA(1);
			if ( !(_la==EQ || _la==NE || ((((_la - 314)) & ~0x3f) == 0 && ((1L << (_la - 314)) & ((1L << (SGE - 314)) | (1L << (SGT - 314)) | (1L << (SLE - 314)) | (1L << (SLT - 314)) | (1L << (UGE - 314)) | (1L << (UGT - 314)) | (1L << (ULE - 314)) | (1L << (ULT - 314)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptLinkageContext extends ParserRuleContext {
		public LinkageContext linkage() {
			return getRuleContext(LinkageContext.class,0);
		}
		public OptLinkageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optLinkage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptLinkage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptLinkage(this);
		}
	}

	public final OptLinkageContext optLinkage() throws RecognitionException {
		OptLinkageContext _localctx = new OptLinkageContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_optLinkage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3976);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (APPENDING - 39)) | (1L << (AVAILABLE_EXTERNALLY - 39)) | (1L << (COMMON - 39)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (INTERNAL - 201)) | (1L << (LINKONCE - 201)) | (1L << (LINKONCE_ODR - 201)))) != 0) || _la==PRIVATE || _la==WEAK || _la==WEAK_ODR) {
				{
				setState(3975);
				linkage();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LinkageContext extends ParserRuleContext {
		public TerminalNode APPENDING() { return getToken(LLVMParser.APPENDING, 0); }
		public TerminalNode AVAILABLE_EXTERNALLY() { return getToken(LLVMParser.AVAILABLE_EXTERNALLY, 0); }
		public TerminalNode COMMON() { return getToken(LLVMParser.COMMON, 0); }
		public TerminalNode INTERNAL() { return getToken(LLVMParser.INTERNAL, 0); }
		public TerminalNode LINKONCE() { return getToken(LLVMParser.LINKONCE, 0); }
		public TerminalNode LINKONCE_ODR() { return getToken(LLVMParser.LINKONCE_ODR, 0); }
		public TerminalNode PRIVATE() { return getToken(LLVMParser.PRIVATE, 0); }
		public TerminalNode WEAK() { return getToken(LLVMParser.WEAK, 0); }
		public TerminalNode WEAK_ODR() { return getToken(LLVMParser.WEAK_ODR, 0); }
		public LinkageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linkage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterLinkage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitLinkage(this);
		}
	}

	public final LinkageContext linkage() throws RecognitionException {
		LinkageContext _localctx = new LinkageContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_linkage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3978);
			_la = _input.LA(1);
			if ( !(((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (APPENDING - 39)) | (1L << (AVAILABLE_EXTERNALLY - 39)) | (1L << (COMMON - 39)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (INTERNAL - 201)) | (1L << (LINKONCE - 201)) | (1L << (LINKONCE_ODR - 201)))) != 0) || _la==PRIVATE || _la==WEAK || _la==WEAK_ODR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptExternLinkageContext extends ParserRuleContext {
		public ExternLinkageContext externLinkage() {
			return getRuleContext(ExternLinkageContext.class,0);
		}
		public OptExternLinkageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optExternLinkage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptExternLinkage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptExternLinkage(this);
		}
	}

	public final OptExternLinkageContext optExternLinkage() throws RecognitionException {
		OptExternLinkageContext _localctx = new OptExternLinkageContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_optExternLinkage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL || _la==EXTERN_WEAK) {
				{
				setState(3980);
				externLinkage();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExternLinkageContext extends ParserRuleContext {
		public TerminalNode EXTERN_WEAK() { return getToken(LLVMParser.EXTERN_WEAK, 0); }
		public TerminalNode EXTERNAL() { return getToken(LLVMParser.EXTERNAL, 0); }
		public ExternLinkageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_externLinkage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterExternLinkage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitExternLinkage(this);
		}
	}

	public final ExternLinkageContext externLinkage() throws RecognitionException {
		ExternLinkageContext _localctx = new ExternLinkageContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_externLinkage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3983);
			_la = _input.LA(1);
			if ( !(_la==EXTERNAL || _la==EXTERN_WEAK) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperandBundlesContext extends ParserRuleContext {
		public TerminalNode LBRACK() { return getToken(LLVMParser.LBRACK, 0); }
		public OperandBundleListContext operandBundleList() {
			return getRuleContext(OperandBundleListContext.class,0);
		}
		public TerminalNode RBRACK() { return getToken(LLVMParser.RBRACK, 0); }
		public OperandBundlesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operandBundles; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOperandBundles(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOperandBundles(this);
		}
	}

	public final OperandBundlesContext operandBundles() throws RecognitionException {
		OperandBundlesContext _localctx = new OperandBundlesContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_operandBundles);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3989);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				{
				setState(3985);
				match(LBRACK);
				setState(3986);
				operandBundleList(0);
				setState(3987);
				match(RBRACK);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperandBundleListContext extends ParserRuleContext {
		public OperandBundleContext operandBundle() {
			return getRuleContext(OperandBundleContext.class,0);
		}
		public OperandBundleListContext operandBundleList() {
			return getRuleContext(OperandBundleListContext.class,0);
		}
		public OperandBundleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operandBundleList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOperandBundleList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOperandBundleList(this);
		}
	}

	public final OperandBundleListContext operandBundleList() throws RecognitionException {
		return operandBundleList(0);
	}

	private OperandBundleListContext operandBundleList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OperandBundleListContext _localctx = new OperandBundleListContext(_ctx, _parentState);
		OperandBundleListContext _prevctx = _localctx;
		int _startState = 808;
		enterRecursionRule(_localctx, 808, RULE_operandBundleList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3992);
			operandBundle();
			}
			_ctx.stop = _input.LT(-1);
			setState(3998);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,218,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OperandBundleListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_operandBundleList);
					setState(3994);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3995);
					operandBundle();
					}
					} 
				}
				setState(4000);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,218,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class OperandBundleContext extends ParserRuleContext {
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public TypeValuesContext typeValues() {
			return getRuleContext(TypeValuesContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public OperandBundleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operandBundle; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOperandBundle(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOperandBundle(this);
		}
	}

	public final OperandBundleContext operandBundle() throws RecognitionException {
		OperandBundleContext _localctx = new OperandBundleContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_operandBundle);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4001);
			stringLit();
			setState(4002);
			match(LPAREN);
			setState(4003);
			typeValues();
			setState(4004);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverflowFlagsContext extends ParserRuleContext {
		public OverflowFlagListContext overflowFlagList() {
			return getRuleContext(OverflowFlagListContext.class,0);
		}
		public OverflowFlagsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overflowFlags; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOverflowFlags(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOverflowFlags(this);
		}
	}

	public final OverflowFlagsContext overflowFlags() throws RecognitionException {
		OverflowFlagsContext _localctx = new OverflowFlagsContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_overflowFlags);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4007);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NSW || _la==NUW) {
				{
				setState(4006);
				overflowFlagList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverflowFlagListContext extends ParserRuleContext {
		public OverflowFlagContext overflowFlag() {
			return getRuleContext(OverflowFlagContext.class,0);
		}
		public OverflowFlagListContext overflowFlagList() {
			return getRuleContext(OverflowFlagListContext.class,0);
		}
		public OverflowFlagListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overflowFlagList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOverflowFlagList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOverflowFlagList(this);
		}
	}

	public final OverflowFlagListContext overflowFlagList() throws RecognitionException {
		return overflowFlagList(0);
	}

	private OverflowFlagListContext overflowFlagList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OverflowFlagListContext _localctx = new OverflowFlagListContext(_ctx, _parentState);
		OverflowFlagListContext _prevctx = _localctx;
		int _startState = 814;
		enterRecursionRule(_localctx, 814, RULE_overflowFlagList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4010);
			overflowFlag();
			}
			_ctx.stop = _input.LT(-1);
			setState(4016);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,220,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OverflowFlagListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_overflowFlagList);
					setState(4012);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4013);
					overflowFlag();
					}
					} 
				}
				setState(4018);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,220,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class OverflowFlagContext extends ParserRuleContext {
		public TerminalNode NSW() { return getToken(LLVMParser.NSW, 0); }
		public TerminalNode NUW() { return getToken(LLVMParser.NUW, 0); }
		public OverflowFlagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overflowFlag; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOverflowFlag(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOverflowFlag(this);
		}
	}

	public final OverflowFlagContext overflowFlag() throws RecognitionException {
		OverflowFlagContext _localctx = new OverflowFlagContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_overflowFlag);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4019);
			_la = _input.LA(1);
			if ( !(_la==NSW || _la==NUW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParamAttrsContext extends ParserRuleContext {
		public ParamAttrListContext paramAttrList() {
			return getRuleContext(ParamAttrListContext.class,0);
		}
		public ParamAttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paramAttrs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterParamAttrs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitParamAttrs(this);
		}
	}

	public final ParamAttrsContext paramAttrs() throws RecognitionException {
		ParamAttrsContext _localctx = new ParamAttrsContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_paramAttrs);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				setState(4021);
				paramAttrList(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParamAttrListContext extends ParserRuleContext {
		public ParamAttrContext paramAttr() {
			return getRuleContext(ParamAttrContext.class,0);
		}
		public ParamAttrListContext paramAttrList() {
			return getRuleContext(ParamAttrListContext.class,0);
		}
		public ParamAttrListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paramAttrList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterParamAttrList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitParamAttrList(this);
		}
	}

	public final ParamAttrListContext paramAttrList() throws RecognitionException {
		return paramAttrList(0);
	}

	private ParamAttrListContext paramAttrList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ParamAttrListContext _localctx = new ParamAttrListContext(_ctx, _parentState);
		ParamAttrListContext _prevctx = _localctx;
		int _startState = 820;
		enterRecursionRule(_localctx, 820, RULE_paramAttrList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4025);
			paramAttr();
			}
			_ctx.stop = _input.LT(-1);
			setState(4031);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,222,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParamAttrListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_paramAttrList);
					setState(4027);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4028);
					paramAttr();
					}
					} 
				}
				setState(4033);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,222,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ParamAttrContext extends ParserRuleContext {
		public AlignmentContext alignment() {
			return getRuleContext(AlignmentContext.class,0);
		}
		public DereferenceableContext dereferenceable() {
			return getRuleContext(DereferenceableContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode BYVAL() { return getToken(LLVMParser.BYVAL, 0); }
		public TerminalNode INALLOCA() { return getToken(LLVMParser.INALLOCA, 0); }
		public TerminalNode INREG() { return getToken(LLVMParser.INREG, 0); }
		public TerminalNode NEST() { return getToken(LLVMParser.NEST, 0); }
		public TerminalNode NOALIAS() { return getToken(LLVMParser.NOALIAS, 0); }
		public TerminalNode NOCAPTURE() { return getToken(LLVMParser.NOCAPTURE, 0); }
		public TerminalNode NONNULL() { return getToken(LLVMParser.NONNULL, 0); }
		public TerminalNode READNONE() { return getToken(LLVMParser.READNONE, 0); }
		public TerminalNode READONLY() { return getToken(LLVMParser.READONLY, 0); }
		public TerminalNode RETURNED() { return getToken(LLVMParser.RETURNED, 0); }
		public TerminalNode SIGNEXT() { return getToken(LLVMParser.SIGNEXT, 0); }
		public TerminalNode SRET() { return getToken(LLVMParser.SRET, 0); }
		public TerminalNode SWIFTERROR() { return getToken(LLVMParser.SWIFTERROR, 0); }
		public TerminalNode SWIFTSELF() { return getToken(LLVMParser.SWIFTSELF, 0); }
		public TerminalNode WRITEONLY() { return getToken(LLVMParser.WRITEONLY, 0); }
		public TerminalNode ZEROEXT() { return getToken(LLVMParser.ZEROEXT, 0); }
		public ParamAttrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paramAttr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterParamAttr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitParamAttr(this);
		}
	}

	public final ParamAttrContext paramAttr() throws RecognitionException {
		ParamAttrContext _localctx = new ParamAttrContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_paramAttr);
		try {
			setState(4053);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALIGN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4034);
				alignment();
				}
				break;
			case DEREFERENCEABLE:
			case DEREFERENCEABLE_OR_NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4035);
				dereferenceable();
				}
				break;
			case STRING_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4036);
				stringLit();
				}
				break;
			case BYVAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(4037);
				match(BYVAL);
				}
				break;
			case INALLOCA:
				enterOuterAlt(_localctx, 5);
				{
				setState(4038);
				match(INALLOCA);
				}
				break;
			case INREG:
				enterOuterAlt(_localctx, 6);
				{
				setState(4039);
				match(INREG);
				}
				break;
			case NEST:
				enterOuterAlt(_localctx, 7);
				{
				setState(4040);
				match(NEST);
				}
				break;
			case NOALIAS:
				enterOuterAlt(_localctx, 8);
				{
				setState(4041);
				match(NOALIAS);
				}
				break;
			case NOCAPTURE:
				enterOuterAlt(_localctx, 9);
				{
				setState(4042);
				match(NOCAPTURE);
				}
				break;
			case NONNULL:
				enterOuterAlt(_localctx, 10);
				{
				setState(4043);
				match(NONNULL);
				}
				break;
			case READNONE:
				enterOuterAlt(_localctx, 11);
				{
				setState(4044);
				match(READNONE);
				}
				break;
			case READONLY:
				enterOuterAlt(_localctx, 12);
				{
				setState(4045);
				match(READONLY);
				}
				break;
			case RETURNED:
				enterOuterAlt(_localctx, 13);
				{
				setState(4046);
				match(RETURNED);
				}
				break;
			case SIGNEXT:
				enterOuterAlt(_localctx, 14);
				{
				setState(4047);
				match(SIGNEXT);
				}
				break;
			case SRET:
				enterOuterAlt(_localctx, 15);
				{
				setState(4048);
				match(SRET);
				}
				break;
			case SWIFTERROR:
				enterOuterAlt(_localctx, 16);
				{
				setState(4049);
				match(SWIFTERROR);
				}
				break;
			case SWIFTSELF:
				enterOuterAlt(_localctx, 17);
				{
				setState(4050);
				match(SWIFTSELF);
				}
				break;
			case WRITEONLY:
				enterOuterAlt(_localctx, 18);
				{
				setState(4051);
				match(WRITEONLY);
				}
				break;
			case ZEROEXT:
				enterOuterAlt(_localctx, 19);
				{
				setState(4052);
				match(ZEROEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParamsContext extends ParserRuleContext {
		public TerminalNode DOTS() { return getToken(LLVMParser.DOTS, 0); }
		public ParamListContext paramList() {
			return getRuleContext(ParamListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public ParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterParams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitParams(this);
		}
	}

	public final ParamsContext params() throws RecognitionException {
		ParamsContext _localctx = new ParamsContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_params);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4061);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				{
				setState(4055);
				match(DOTS);
				}
				break;
			case 2:
				{
				setState(4056);
				paramList(0);
				}
				break;
			case 3:
				{
				setState(4057);
				paramList(0);
				setState(4058);
				match(COMMA);
				setState(4059);
				match(DOTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParamListContext extends ParserRuleContext {
		public ParamContext param() {
			return getRuleContext(ParamContext.class,0);
		}
		public ParamListContext paramList() {
			return getRuleContext(ParamListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(LLVMParser.COMMA, 0); }
		public ParamListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paramList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterParamList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitParamList(this);
		}
	}

	public final ParamListContext paramList() throws RecognitionException {
		return paramList(0);
	}

	private ParamListContext paramList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ParamListContext _localctx = new ParamListContext(_ctx, _parentState);
		ParamListContext _prevctx = _localctx;
		int _startState = 826;
		enterRecursionRule(_localctx, 826, RULE_paramList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4064);
			param();
			}
			_ctx.stop = _input.LT(-1);
			setState(4071);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,225,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParamListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_paramList);
					setState(4066);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4067);
					match(COMMA);
					setState(4068);
					param();
					}
					} 
				}
				setState(4073);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,225,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ParamContext extends ParserRuleContext {
		public LlvmTypeContext llvmType() {
			return getRuleContext(LlvmTypeContext.class,0);
		}
		public ParamAttrsContext paramAttrs() {
			return getRuleContext(ParamAttrsContext.class,0);
		}
		public LocalIdentContext localIdent() {
			return getRuleContext(LocalIdentContext.class,0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitParam(this);
		}
	}

	public final ParamContext param() throws RecognitionException {
		ParamContext _localctx = new ParamContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_param);
		try {
			setState(4081);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4074);
				llvmType(0);
				setState(4075);
				paramAttrs();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4077);
				llvmType(0);
				setState(4078);
				paramAttrs();
				setState(4079);
				localIdent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptPreemptionSpecifierContext extends ParserRuleContext {
		public PreemptionSpecifierContext preemptionSpecifier() {
			return getRuleContext(PreemptionSpecifierContext.class,0);
		}
		public OptPreemptionSpecifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optPreemptionSpecifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptPreemptionSpecifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptPreemptionSpecifier(this);
		}
	}

	public final OptPreemptionSpecifierContext optPreemptionSpecifier() throws RecognitionException {
		OptPreemptionSpecifierContext _localctx = new OptPreemptionSpecifierContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_optPreemptionSpecifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DSO_LOCAL || _la==DSO_PREEMPTABLE) {
				{
				setState(4083);
				preemptionSpecifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreemptionSpecifierContext extends ParserRuleContext {
		public TerminalNode DSO_LOCAL() { return getToken(LLVMParser.DSO_LOCAL, 0); }
		public TerminalNode DSO_PREEMPTABLE() { return getToken(LLVMParser.DSO_PREEMPTABLE, 0); }
		public PreemptionSpecifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preemptionSpecifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterPreemptionSpecifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitPreemptionSpecifier(this);
		}
	}

	public final PreemptionSpecifierContext preemptionSpecifier() throws RecognitionException {
		PreemptionSpecifierContext _localctx = new PreemptionSpecifierContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_preemptionSpecifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4086);
			_la = _input.LA(1);
			if ( !(_la==DSO_LOCAL || _la==DSO_PREEMPTABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnAttrsContext extends ParserRuleContext {
		public ReturnAttrListContext returnAttrList() {
			return getRuleContext(ReturnAttrListContext.class,0);
		}
		public ReturnAttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnAttrs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterReturnAttrs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitReturnAttrs(this);
		}
	}

	public final ReturnAttrsContext returnAttrs() throws RecognitionException {
		ReturnAttrsContext _localctx = new ReturnAttrsContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_returnAttrs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4089);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALIGN || _la==DEREFERENCEABLE || _la==DEREFERENCEABLE_OR_NULL || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INREG - 196)) | (1L << (NOALIAS - 196)) | (1L << (NONNULL - 196)))) != 0) || _la==SIGNEXT || _la==ZEROEXT || _la==STRING_LIT) {
				{
				setState(4088);
				returnAttrList(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnAttrListContext extends ParserRuleContext {
		public ReturnAttrContext returnAttr() {
			return getRuleContext(ReturnAttrContext.class,0);
		}
		public ReturnAttrListContext returnAttrList() {
			return getRuleContext(ReturnAttrListContext.class,0);
		}
		public ReturnAttrListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnAttrList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterReturnAttrList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitReturnAttrList(this);
		}
	}

	public final ReturnAttrListContext returnAttrList() throws RecognitionException {
		return returnAttrList(0);
	}

	private ReturnAttrListContext returnAttrList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ReturnAttrListContext _localctx = new ReturnAttrListContext(_ctx, _parentState);
		ReturnAttrListContext _prevctx = _localctx;
		int _startState = 836;
		enterRecursionRule(_localctx, 836, RULE_returnAttrList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4092);
			returnAttr();
			}
			_ctx.stop = _input.LT(-1);
			setState(4098);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,229,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ReturnAttrListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_returnAttrList);
					setState(4094);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4095);
					returnAttr();
					}
					} 
				}
				setState(4100);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,229,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ReturnAttrContext extends ParserRuleContext {
		public AlignmentContext alignment() {
			return getRuleContext(AlignmentContext.class,0);
		}
		public DereferenceableContext dereferenceable() {
			return getRuleContext(DereferenceableContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode INREG() { return getToken(LLVMParser.INREG, 0); }
		public TerminalNode NOALIAS() { return getToken(LLVMParser.NOALIAS, 0); }
		public TerminalNode NONNULL() { return getToken(LLVMParser.NONNULL, 0); }
		public TerminalNode SIGNEXT() { return getToken(LLVMParser.SIGNEXT, 0); }
		public TerminalNode ZEROEXT() { return getToken(LLVMParser.ZEROEXT, 0); }
		public ReturnAttrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnAttr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterReturnAttr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitReturnAttr(this);
		}
	}

	public final ReturnAttrContext returnAttr() throws RecognitionException {
		ReturnAttrContext _localctx = new ReturnAttrContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_returnAttr);
		try {
			setState(4109);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALIGN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4101);
				alignment();
				}
				break;
			case DEREFERENCEABLE:
			case DEREFERENCEABLE_OR_NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4102);
				dereferenceable();
				}
				break;
			case STRING_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4103);
				stringLit();
				}
				break;
			case INREG:
				enterOuterAlt(_localctx, 4);
				{
				setState(4104);
				match(INREG);
				}
				break;
			case NOALIAS:
				enterOuterAlt(_localctx, 5);
				{
				setState(4105);
				match(NOALIAS);
				}
				break;
			case NONNULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(4106);
				match(NONNULL);
				}
				break;
			case SIGNEXT:
				enterOuterAlt(_localctx, 7);
				{
				setState(4107);
				match(SIGNEXT);
				}
				break;
			case ZEROEXT:
				enterOuterAlt(_localctx, 8);
				{
				setState(4108);
				match(ZEROEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SectionContext extends ParserRuleContext {
		public TerminalNode SECTION() { return getToken(LLVMParser.SECTION, 0); }
		public TerminalNode STRING_LIT() { return getToken(LLVMParser.STRING_LIT, 0); }
		public SectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterSection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitSection(this);
		}
	}

	public final SectionContext section() throws RecognitionException {
		SectionContext _localctx = new SectionContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4111);
			match(SECTION);
			setState(4112);
			match(STRING_LIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StackAlignmentContext extends ParserRuleContext {
		public TerminalNode ALIGNSTACK() { return getToken(LLVMParser.ALIGNSTACK, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public TerminalNode INT_LIT() { return getToken(LLVMParser.INT_LIT, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public StackAlignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stackAlignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterStackAlignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitStackAlignment(this);
		}
	}

	public final StackAlignmentContext stackAlignment() throws RecognitionException {
		StackAlignmentContext _localctx = new StackAlignmentContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_stackAlignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4114);
			match(ALIGNSTACK);
			setState(4115);
			match(LPAREN);
			setState(4116);
			match(INT_LIT);
			setState(4117);
			match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptSyncScopeContext extends ParserRuleContext {
		public TerminalNode SYNCSCOPE() { return getToken(LLVMParser.SYNCSCOPE, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public TerminalNode STRING_LIT() { return getToken(LLVMParser.STRING_LIT, 0); }
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public OptSyncScopeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optSyncScope; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterOptSyncScope(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitOptSyncScope(this);
		}
	}

	public final OptSyncScopeContext optSyncScope() throws RecognitionException {
		OptSyncScopeContext _localctx = new OptSyncScopeContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_optSyncScope);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SYNCSCOPE) {
				{
				setState(4119);
				match(SYNCSCOPE);
				setState(4120);
				match(LPAREN);
				setState(4121);
				match(STRING_LIT);
				setState(4122);
				match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadLocalContext extends ParserRuleContext {
		public TerminalNode THREAD_LOCAL() { return getToken(LLVMParser.THREAD_LOCAL, 0); }
		public TerminalNode LPAREN() { return getToken(LLVMParser.LPAREN, 0); }
		public TlsModelContext tlsModel() {
			return getRuleContext(TlsModelContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(LLVMParser.RPAREN, 0); }
		public ThreadLocalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadLocal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterThreadLocal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitThreadLocal(this);
		}
	}

	public final ThreadLocalContext threadLocal() throws RecognitionException {
		ThreadLocalContext _localctx = new ThreadLocalContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_threadLocal);
		try {
			setState(4131);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4125);
				match(THREAD_LOCAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4126);
				match(THREAD_LOCAL);
				setState(4127);
				match(LPAREN);
				setState(4128);
				tlsModel();
				setState(4129);
				match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TlsModelContext extends ParserRuleContext {
		public TerminalNode INITIALEXEC() { return getToken(LLVMParser.INITIALEXEC, 0); }
		public TerminalNode LOCALDYNAMIC() { return getToken(LLVMParser.LOCALDYNAMIC, 0); }
		public TerminalNode LOCALEXEC() { return getToken(LLVMParser.LOCALEXEC, 0); }
		public TlsModelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tlsModel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterTlsModel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitTlsModel(this);
		}
	}

	public final TlsModelContext tlsModel() throws RecognitionException {
		TlsModelContext _localctx = new TlsModelContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_tlsModel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4133);
			_la = _input.LA(1);
			if ( !(((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INITIALEXEC - 192)) | (1L << (LOCALDYNAMIC - 192)) | (1L << (LOCALEXEC - 192)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnnamedAddrContext extends ParserRuleContext {
		public TerminalNode LOCAL_UNNAMED_ADDR() { return getToken(LLVMParser.LOCAL_UNNAMED_ADDR, 0); }
		public TerminalNode UNNAMED_ADDR() { return getToken(LLVMParser.UNNAMED_ADDR, 0); }
		public UnnamedAddrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unnamedAddr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterUnnamedAddr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitUnnamedAddr(this);
		}
	}

	public final UnnamedAddrContext unnamedAddr() throws RecognitionException {
		UnnamedAddrContext _localctx = new UnnamedAddrContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_unnamedAddr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4135);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_UNNAMED_ADDR || _la==UNNAMED_ADDR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VisibilityContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(LLVMParser.DEFAULT, 0); }
		public TerminalNode HIDDEN_VISIB() { return getToken(LLVMParser.HIDDEN_VISIB, 0); }
		public TerminalNode PROTECTED() { return getToken(LLVMParser.PROTECTED, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_visibility; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).enterVisibility(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof LLVMParserListener ) ((LLVMParserListener)listener).exitVisibility(this);
		}
	}

	public final VisibilityContext visibility() throws RecognitionException {
		VisibilityContext _localctx = new VisibilityContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_visibility);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4137);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==HIDDEN_VISIB || _la==PROTECTED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3:
			return topLevelEntityList_sempred((TopLevelEntityListContext)_localctx, predIndex);
		case 16:
			return globalAttrList_sempred((GlobalAttrListContext)_localctx, predIndex);
		case 31:
			return metadataNodeList_sempred((MetadataNodeListContext)_localctx, predIndex);
		case 36:
			return useListOrderList_sempred((UseListOrderListContext)_localctx, predIndex);
		case 46:
			return llvmType_sempred((LlvmTypeContext)_localctx, predIndex);
		case 61:
			return typeList_sempred((TypeListContext)_localctx, predIndex);
		case 111:
			return gepConstIndexList_sempred((GepConstIndexListContext)_localctx, predIndex);
		case 130:
			return basicBlockList_sempred((BasicBlockListContext)_localctx, predIndex);
		case 134:
			return instructionList_sempred((InstructionListContext)_localctx, predIndex);
		case 187:
			return incList_sempred((IncListContext)_localctx, predIndex);
		case 196:
			return clauseList_sempred((ClauseListContext)_localctx, predIndex);
		case 206:
			return caseList_sempred((CaseListContext)_localctx, predIndex);
		case 209:
			return labelList_sempred((LabelListContext)_localctx, predIndex);
		case 220:
			return mdFieldList_sempred((MdFieldListContext)_localctx, predIndex);
		case 227:
			return metadataAttachmentList_sempred((MetadataAttachmentListContext)_localctx, predIndex);
		case 229:
			return commaSepMetadataAttachmentList_sempred((CommaSepMetadataAttachmentListContext)_localctx, predIndex);
		case 233:
			return diCompileUnitFieldList_sempred((DiCompileUnitFieldListContext)_localctx, predIndex);
		case 237:
			return diFileFieldList_sempred((DiFileFieldListContext)_localctx, predIndex);
		case 241:
			return diBasicTypeFieldList_sempred((DiBasicTypeFieldListContext)_localctx, predIndex);
		case 245:
			return diSubroutineTypeFieldList_sempred((DiSubroutineTypeFieldListContext)_localctx, predIndex);
		case 249:
			return diDerivedTypeFieldList_sempred((DiDerivedTypeFieldListContext)_localctx, predIndex);
		case 253:
			return diCompositeTypeFieldList_sempred((DiCompositeTypeFieldListContext)_localctx, predIndex);
		case 257:
			return diSubrangeFieldList_sempred((DiSubrangeFieldListContext)_localctx, predIndex);
		case 261:
			return diEnumeratorFieldList_sempred((DiEnumeratorFieldListContext)_localctx, predIndex);
		case 265:
			return diTemplateTypeParameterFieldList_sempred((DiTemplateTypeParameterFieldListContext)_localctx, predIndex);
		case 269:
			return diTemplateValueParameterFieldList_sempred((DiTemplateValueParameterFieldListContext)_localctx, predIndex);
		case 273:
			return diModuleFieldList_sempred((DiModuleFieldListContext)_localctx, predIndex);
		case 277:
			return diNamespaceFieldList_sempred((DiNamespaceFieldListContext)_localctx, predIndex);
		case 281:
			return diGlobalVariableFieldList_sempred((DiGlobalVariableFieldListContext)_localctx, predIndex);
		case 285:
			return diSubprogramFieldList_sempred((DiSubprogramFieldListContext)_localctx, predIndex);
		case 289:
			return diLexicalBlockFieldList_sempred((DiLexicalBlockFieldListContext)_localctx, predIndex);
		case 293:
			return diLexicalBlockFileFieldList_sempred((DiLexicalBlockFileFieldListContext)_localctx, predIndex);
		case 297:
			return diLocationFieldList_sempred((DiLocationFieldListContext)_localctx, predIndex);
		case 301:
			return diLocalVariableFieldList_sempred((DiLocalVariableFieldListContext)_localctx, predIndex);
		case 305:
			return diExpressionFieldList_sempred((DiExpressionFieldListContext)_localctx, predIndex);
		case 309:
			return diGlobalVariableExpressionFieldList_sempred((DiGlobalVariableExpressionFieldListContext)_localctx, predIndex);
		case 313:
			return diObjCPropertyFieldList_sempred((DiObjCPropertyFieldListContext)_localctx, predIndex);
		case 317:
			return diImportedEntityFieldList_sempred((DiImportedEntityFieldListContext)_localctx, predIndex);
		case 321:
			return diMacroFieldList_sempred((DiMacroFieldListContext)_localctx, predIndex);
		case 325:
			return diMacroFileFieldList_sempred((DiMacroFileFieldListContext)_localctx, predIndex);
		case 329:
			return genericDINodeFieldList_sempred((GenericDINodeFieldListContext)_localctx, predIndex);
		case 352:
			return diFlagList_sempred((DiFlagListContext)_localctx, predIndex);
		case 363:
			return typeValueList_sempred((TypeValueListContext)_localctx, predIndex);
		case 364:
			return commaSepTypeValueList_sempred((CommaSepTypeValueListContext)_localctx, predIndex);
		case 367:
			return typeConstList_sempred((TypeConstListContext)_localctx, predIndex);
		case 372:
			return argList_sempred((ArgListContext)_localctx, predIndex);
		case 384:
			return exceptionArgList_sempred((ExceptionArgListContext)_localctx, predIndex);
		case 388:
			return fastMathFlagList_sempred((FastMathFlagListContext)_localctx, predIndex);
		case 392:
			return funcAttrList_sempred((FuncAttrListContext)_localctx, predIndex);
		case 396:
			return indexList_sempred((IndexListContext)_localctx, predIndex);
		case 404:
			return operandBundleList_sempred((OperandBundleListContext)_localctx, predIndex);
		case 407:
			return overflowFlagList_sempred((OverflowFlagListContext)_localctx, predIndex);
		case 410:
			return paramAttrList_sempred((ParamAttrListContext)_localctx, predIndex);
		case 413:
			return paramList_sempred((ParamListContext)_localctx, predIndex);
		case 418:
			return returnAttrList_sempred((ReturnAttrListContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean topLevelEntityList_sempred(TopLevelEntityListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean globalAttrList_sempred(GlobalAttrListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean metadataNodeList_sempred(MetadataNodeListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean useListOrderList_sempred(UseListOrderListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean llvmType_sempred(LlvmTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4:
			return precpred(_ctx, 3);
		case 5:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean typeList_sempred(TypeListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean gepConstIndexList_sempred(GepConstIndexListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean basicBlockList_sempred(BasicBlockListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean instructionList_sempred(InstructionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean incList_sempred(IncListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean clauseList_sempred(ClauseListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean caseList_sempred(CaseListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean labelList_sempred(LabelListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean mdFieldList_sempred(MdFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean metadataAttachmentList_sempred(MetadataAttachmentListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean commaSepMetadataAttachmentList_sempred(CommaSepMetadataAttachmentListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diCompileUnitFieldList_sempred(DiCompileUnitFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diFileFieldList_sempred(DiFileFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diBasicTypeFieldList_sempred(DiBasicTypeFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diSubroutineTypeFieldList_sempred(DiSubroutineTypeFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diDerivedTypeFieldList_sempred(DiDerivedTypeFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diCompositeTypeFieldList_sempred(DiCompositeTypeFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diSubrangeFieldList_sempred(DiSubrangeFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diEnumeratorFieldList_sempred(DiEnumeratorFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diTemplateTypeParameterFieldList_sempred(DiTemplateTypeParameterFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diTemplateValueParameterFieldList_sempred(DiTemplateValueParameterFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diModuleFieldList_sempred(DiModuleFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diNamespaceFieldList_sempred(DiNamespaceFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diGlobalVariableFieldList_sempred(DiGlobalVariableFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diSubprogramFieldList_sempred(DiSubprogramFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diLexicalBlockFieldList_sempred(DiLexicalBlockFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diLexicalBlockFileFieldList_sempred(DiLexicalBlockFileFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diLocationFieldList_sempred(DiLocationFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diLocalVariableFieldList_sempred(DiLocalVariableFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diExpressionFieldList_sempred(DiExpressionFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diGlobalVariableExpressionFieldList_sempred(DiGlobalVariableExpressionFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diObjCPropertyFieldList_sempred(DiObjCPropertyFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diImportedEntityFieldList_sempred(DiImportedEntityFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diMacroFieldList_sempred(DiMacroFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diMacroFileFieldList_sempred(DiMacroFileFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean genericDINodeFieldList_sempred(GenericDINodeFieldListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean diFlagList_sempred(DiFlagListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean typeValueList_sempred(TypeValueListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean commaSepTypeValueList_sempred(CommaSepTypeValueListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean typeConstList_sempred(TypeConstListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean argList_sempred(ArgListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean exceptionArgList_sempred(ExceptionArgListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean fastMathFlagList_sempred(FastMathFlagListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean funcAttrList_sempred(FuncAttrListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean indexList_sempred(IndexListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean operandBundleList_sempred(OperandBundleListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean overflowFlagList_sempred(OverflowFlagListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean paramAttrList_sempred(ParamAttrListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean paramList_sempred(ParamListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean returnAttrList_sempred(ReturnAttrListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55:
			return precpred(_ctx, 1);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u01bd\u102c\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"+
		"\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"+
		"\u0158\u0002\u0159\u0007\u0159\u0002\u015a\u0007\u015a\u0002\u015b\u0007"+
		"\u015b\u0002\u015c\u0007\u015c\u0002\u015d\u0007\u015d\u0002\u015e\u0007"+
		"\u015e\u0002\u015f\u0007\u015f\u0002\u0160\u0007\u0160\u0002\u0161\u0007"+
		"\u0161\u0002\u0162\u0007\u0162\u0002\u0163\u0007\u0163\u0002\u0164\u0007"+
		"\u0164\u0002\u0165\u0007\u0165\u0002\u0166\u0007\u0166\u0002\u0167\u0007"+
		"\u0167\u0002\u0168\u0007\u0168\u0002\u0169\u0007\u0169\u0002\u016a\u0007"+
		"\u016a\u0002\u016b\u0007\u016b\u0002\u016c\u0007\u016c\u0002\u016d\u0007"+
		"\u016d\u0002\u016e\u0007\u016e\u0002\u016f\u0007\u016f\u0002\u0170\u0007"+
		"\u0170\u0002\u0171\u0007\u0171\u0002\u0172\u0007\u0172\u0002\u0173\u0007"+
		"\u0173\u0002\u0174\u0007\u0174\u0002\u0175\u0007\u0175\u0002\u0176\u0007"+
		"\u0176\u0002\u0177\u0007\u0177\u0002\u0178\u0007\u0178\u0002\u0179\u0007"+
		"\u0179\u0002\u017a\u0007\u017a\u0002\u017b\u0007\u017b\u0002\u017c\u0007"+
		"\u017c\u0002\u017d\u0007\u017d\u0002\u017e\u0007\u017e\u0002\u017f\u0007"+
		"\u017f\u0002\u0180\u0007\u0180\u0002\u0181\u0007\u0181\u0002\u0182\u0007"+
		"\u0182\u0002\u0183\u0007\u0183\u0002\u0184\u0007\u0184\u0002\u0185\u0007"+
		"\u0185\u0002\u0186\u0007\u0186\u0002\u0187\u0007\u0187\u0002\u0188\u0007"+
		"\u0188\u0002\u0189\u0007\u0189\u0002\u018a\u0007\u018a\u0002\u018b\u0007"+
		"\u018b\u0002\u018c\u0007\u018c\u0002\u018d\u0007\u018d\u0002\u018e\u0007"+
		"\u018e\u0002\u018f\u0007\u018f\u0002\u0190\u0007\u0190\u0002\u0191\u0007"+
		"\u0191\u0002\u0192\u0007\u0192\u0002\u0193\u0007\u0193\u0002\u0194\u0007"+
		"\u0194\u0002\u0195\u0007\u0195\u0002\u0196\u0007\u0196\u0002\u0197\u0007"+
		"\u0197\u0002\u0198\u0007\u0198\u0002\u0199\u0007\u0199\u0002\u019a\u0007"+
		"\u019a\u0002\u019b\u0007\u019b\u0002\u019c\u0007\u019c\u0002\u019d\u0007"+
		"\u019d\u0002\u019e\u0007\u019e\u0002\u019f\u0007\u019f\u0002\u01a0\u0007"+
		"\u01a0\u0002\u01a1\u0007\u01a1\u0002\u01a2\u0007\u01a2\u0002\u01a3\u0007"+
		"\u01a3\u0002\u01a4\u0007\u01a4\u0002\u01a5\u0007\u01a5\u0002\u01a6\u0007"+
		"\u01a6\u0002\u01a7\u0007\u01a7\u0002\u01a8\u0007\u01a8\u0002\u01a9\u0007"+
		"\u01a9\u0002\u01aa\u0007\u01aa\u0001\u0000\u0001\u0000\u0003\u0000\u0359"+
		"\b\u0000\u0001\u0001\u0001\u0001\u0001\u0002\u0003\u0002\u035e\b\u0002"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0005\u0003"+
		"\u0365\b\u0003\n\u0003\f\u0003\u0368\t\u0003\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0003\u0004\u0379\b\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001"+
		"\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u0387\b\u0006\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b"+
		"\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0003\b\u0397\b\b\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\n\u0001\n\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0003\u000b\u03a5\b\u000b\u0001\u000b\u0001"+
		"\u000b\u0003\u000b\u03a9\b\u000b\u0001\u000b\u0003\u000b\u03ac\b\u000b"+
		"\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b"+
		"\u0001\u000b\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0003\f\u03ba\b\f"+
		"\u0001\f\u0001\f\u0003\f\u03be\b\f\u0001\f\u0003\f\u03c1\b\f\u0001\f\u0001"+
		"\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\r\u0003\r\u03cc"+
		"\b\r\u0001\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0003\u000f\u03d2"+
		"\b\u000f\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001"+
		"\u0010\u0005\u0010\u03da\b\u0010\n\u0010\f\u0010\u03dd\t\u0010\u0001\u0011"+
		"\u0001\u0011\u0001\u0011\u0001\u0011\u0003\u0011\u03e3\b\u0011\u0001\u0012"+
		"\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003\u0012\u03ea\b\u0012"+
		"\u0001\u0012\u0001\u0012\u0003\u0012\u03ee\b\u0012\u0001\u0012\u0003\u0012"+
		"\u03f1\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012"+
		"\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012"+
		"\u0003\u0012\u03fe\b\u0012\u0001\u0012\u0001\u0012\u0003\u0012\u0402\b"+
		"\u0012\u0001\u0012\u0003\u0012\u0405\b\u0012\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003\u0012\u040d\b\u0012\u0001"+
		"\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001"+
		"\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001"+
		"\u0015\u0001\u0016\u0001\u0016\u0003\u0016\u041e\b\u0016\u0001\u0016\u0001"+
		"\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001"+
		"\u0016\u0001\u0016\u0003\u0016\u0429\b\u0016\u0001\u0016\u0001\u0016\u0003"+
		"\u0016\u042d\b\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001"+
		"\u0016\u0001\u0016\u0001\u0017\u0001\u0017\u0003\u0017\u0437\b\u0017\u0001"+
		"\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0003\u0018\u043d\b\u0018\u0001"+
		"\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0443\b\u0019\u0001"+
		"\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0003\u001a\u0449\b\u001a\u0001"+
		"\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001"+
		"\u001d\u0001\u001e\u0003\u001e\u045f\b\u001e\u0001\u001f\u0001\u001f\u0001"+
		"\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0005\u001f\u0467\b\u001f\n"+
		"\u001f\f\u001f\u046a\t\u001f\u0001 \u0001 \u0003 \u046e\b \u0001!\u0001"+
		"!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0003!\u047a"+
		"\b!\u0001\"\u0003\"\u047d\b\"\u0001#\u0003#\u0480\b#\u0001$\u0001$\u0001"+
		"$\u0001$\u0001$\u0005$\u0487\b$\n$\f$\u048a\t$\u0001%\u0001%\u0001%\u0001"+
		"%\u0001%\u0001%\u0001%\u0001%\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001\'\u0001\'\u0001(\u0001(\u0001)\u0001)\u0001"+
		"*\u0001*\u0001+\u0001+\u0001,\u0001,\u0001-\u0001-\u0001.\u0001.\u0001"+
		".\u0001.\u0003.\u04af\b.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0001.\u0001.\u0005.\u04ba\b.\n.\f.\u04bd\t.\u0001/\u0001/\u0001/\u0001"+
		"/\u0001/\u0001/\u0001/\u0001/\u0001/\u0003/\u04c8\b/\u00010\u00010\u0001"+
		"1\u00011\u00012\u00012\u00013\u00013\u00014\u00014\u00015\u00035\u04d5"+
		"\b5\u00016\u00016\u00016\u00016\u00016\u00017\u00017\u00017\u00017\u0001"+
		"7\u00017\u00018\u00018\u00019\u00019\u0001:\u0001:\u0001;\u0001;\u0001"+
		";\u0001;\u0001;\u0001;\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001"+
		"<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0003"+
		"<\u04fe\b<\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0005=\u0506\b=\n"+
		"=\f=\u0509\t=\u0001>\u0001>\u0001?\u0001?\u0001@\u0001@\u0001@\u0003@"+
		"\u0512\b@\u0001A\u0001A\u0001A\u0001A\u0001A\u0001A\u0001A\u0001A\u0001"+
		"B\u0003B\u051d\bB\u0001C\u0003C\u0520\bC\u0001D\u0003D\u0523\bD\u0001"+
		"E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001"+
		"E\u0001E\u0001E\u0001E\u0003E\u0533\bE\u0001F\u0001F\u0001G\u0001G\u0001"+
		"H\u0001H\u0001I\u0001I\u0001J\u0001J\u0001K\u0001K\u0001L\u0001L\u0001"+
		"M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001"+
		"M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0553\bM\u0001N\u0001N\u0001"+
		"N\u0001N\u0001O\u0001O\u0001O\u0001P\u0001P\u0001Q\u0001Q\u0001Q\u0001"+
		"Q\u0001R\u0001R\u0001S\u0001S\u0001T\u0001T\u0001T\u0001T\u0001T\u0001"+
		"T\u0001T\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001"+
		"U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001"+
		"U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001"+
		"U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001"+
		"U\u0001U\u0003U\u0595\bU\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001"+
		"V\u0001V\u0001V\u0001V\u0001W\u0001W\u0001W\u0001W\u0001W\u0001W\u0001"+
		"W\u0001W\u0001W\u0001X\u0001X\u0001X\u0001X\u0001X\u0001X\u0001X\u0001"+
		"X\u0001X\u0001X\u0001Y\u0001Y\u0001Y\u0001Y\u0001Y\u0001Y\u0001Y\u0001"+
		"Y\u0001Y\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0001"+
		"Z\u0001Z\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001"+
		"[\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001"+
		"\\\u0001\\\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001"+
		"]\u0001]\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001"+
		"^\u0001_\u0001_\u0001_\u0001_\u0001_\u0001_\u0001_\u0001_\u0001_\u0001"+
		"`\u0001`\u0001`\u0001`\u0001`\u0001`\u0001`\u0001`\u0001`\u0001a\u0001"+
		"a\u0001a\u0001a\u0001a\u0001a\u0001a\u0001a\u0001a\u0001b\u0001b\u0001"+
		"b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001c\u0001c\u0001"+
		"c\u0001c\u0001c\u0001c\u0001c\u0001c\u0001c\u0001c\u0001d\u0001d\u0001"+
		"d\u0001d\u0001d\u0001d\u0001d\u0001d\u0001d\u0001d\u0001e\u0001e\u0001"+
		"e\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0001f\u0001f\u0001f\u0001"+
		"f\u0001f\u0001f\u0001f\u0001f\u0001f\u0001g\u0001g\u0001g\u0001g\u0001"+
		"g\u0001g\u0001g\u0001g\u0001g\u0001h\u0001h\u0001h\u0001h\u0001h\u0001"+
		"h\u0001h\u0001h\u0001h\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001"+
		"i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001k\u0001k\u0001"+
		"k\u0001k\u0001k\u0001k\u0001k\u0001l\u0001l\u0001l\u0001l\u0001l\u0001"+
		"l\u0001l\u0001l\u0001l\u0001l\u0001m\u0001m\u0001m\u0001m\u0001m\u0001"+
		"m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001n\u0003n\u067f\bn\u0001o\u0001"+
		"o\u0001o\u0001o\u0001o\u0001o\u0005o\u0687\bo\no\fo\u068a\to\u0001p\u0001"+
		"p\u0001p\u0001p\u0001q\u0003q\u0691\bq\u0001r\u0001r\u0001r\u0001r\u0001"+
		"r\u0001r\u0001r\u0001r\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001"+
		"s\u0001s\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001"+
		"u\u0001u\u0001u\u0001u\u0001u\u0001u\u0001u\u0001u\u0001v\u0001v\u0001"+
		"v\u0001v\u0001v\u0001v\u0001v\u0001v\u0001w\u0001w\u0001w\u0001w\u0001"+
		"w\u0001w\u0001w\u0001w\u0001x\u0001x\u0001x\u0001x\u0001x\u0001x\u0001"+
		"x\u0001x\u0001y\u0001y\u0001y\u0001y\u0001y\u0001y\u0001y\u0001y\u0001"+
		"z\u0001z\u0001z\u0001z\u0001z\u0001z\u0001z\u0001z\u0001{\u0001{\u0001"+
		"{\u0001{\u0001{\u0001{\u0001{\u0001{\u0001|\u0001|\u0001|\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0001}\u0001}\u0001}\u0001}\u0001}\u0001}\u0001"+
		"}\u0001}\u0001~\u0001~\u0001~\u0001~\u0001~\u0001~\u0001~\u0001~\u0001"+
		"\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001"+
		"\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u0080\u0001\u0080\u0001"+
		"\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001"+
		"\u0080\u0001\u0080\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001"+
		"\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001"+
		"\u0081\u0001\u0081\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001"+
		"\u0082\u0005\u0082\u0720\b\u0082\n\u0082\f\u0082\u0723\t\u0082\u0001\u0083"+
		"\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0084\u0003\u0084\u072a\b\u0084"+
		"\u0001\u0085\u0003\u0085\u072d\b\u0085\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0005\u0086\u0734\b\u0086\n\u0086\f\u0086\u0737"+
		"\t\u0086\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0003\u0087\u0742\b\u0087\u0001"+
		"\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001"+
		"\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001"+
		"\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001"+
		"\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001"+
		"\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001"+
		"\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001"+
		"\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001"+
		"\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0003"+
		"\u0088\u0774\b\u0088\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001"+
		"\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u008a\u0001\u008a\u0001"+
		"\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001"+
		"\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001"+
		"\u008b\u0001\u008b\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001"+
		"\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008d\u0001\u008d\u0001"+
		"\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001"+
		"\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001"+
		"\u008e\u0001\u008e\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u0090\u0001\u0090\u0001"+
		"\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001"+
		"\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001"+
		"\u0091\u0001\u0091\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001"+
		"\u0092\u0001\u0092\u0001\u0092\u0001\u0093\u0001\u0093\u0001\u0093\u0001"+
		"\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0094\u0001\u0094\u0001"+
		"\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001"+
		"\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001"+
		"\u0095\u0001\u0095\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001"+
		"\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0097\u0001\u0097\u0001"+
		"\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0001"+
		"\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001"+
		"\u0098\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001"+
		"\u0099\u0001\u0099\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001"+
		"\u009a\u0001\u009a\u0001\u009a\u0001\u009b\u0001\u009b\u0001\u009b\u0001"+
		"\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009c\u0001"+
		"\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001"+
		"\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009d\u0001\u009d\u0001"+
		"\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001"+
		"\u009d\u0001\u009d\u0001\u009d\u0001\u009e\u0001\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009f\u0001\u009f\u0001"+
		"\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001"+
		"\u009f\u0001\u009f\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0003"+
		"\u00a0\u087c\b\u00a0\u0001\u00a1\u0003\u00a1\u087f\b\u00a1\u0001\u00a2"+
		"\u0003\u00a2\u0882\b\u00a2\u0001\u00a3\u0001\u00a3\u0003\u00a3\u0886\b"+
		"\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001"+
		"\u00a3\u0001\u00a3\u0001\u00a3\u0003\u00a3\u0890\b\u00a3\u0001\u00a3\u0001"+
		"\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001"+
		"\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0003\u00a3\u089d\b\u00a3\u0001"+
		"\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001"+
		"\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0003\u00a3\u08aa"+
		"\b\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001"+
		"\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0003\u00a3\u08b6"+
		"\b\u00a3\u0001\u00a4\u0001\u00a4\u0003\u00a4\u08ba\b\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0003\u00a4\u08c5\b\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0003\u00a4\u08d3\b\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0003\u00a4\u08e1\b\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0003\u00a4\u08ee\b\u00a4\u0001\u00a5\u0001\u00a5\u0001\u00a5"+
		"\u0001\u00a5\u0001\u00a5\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0003\u00a6"+
		"\u08f8\b\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6"+
		"\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6"+
		"\u0001\u00a6\u0001\u00a6\u0001\u00a7\u0003\u00a7\u0908\b\u00a7\u0001\u00a8"+
		"\u0001\u00a8\u0003\u00a8\u090c\b\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8"+
		"\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8"+
		"\u0001\u00a8\u0001\u00a9\u0001\u00a9\u0001\u00aa\u0001\u00aa\u0001\u00aa"+
		"\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa"+
		"\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa"+
		"\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa\u092c\b\u00aa\u0001\u00ab"+
		"\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad"+
		"\u0001\u00ad\u0001\u00ad\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae"+
		"\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00af\u0001\u00af\u0001\u00af"+
		"\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00b0\u0001\u00b0"+
		"\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b1"+
		"\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1"+
		"\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2"+
		"\u0001\u00b2\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3"+
		"\u0001\u00b3\u0001\u00b3\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4"+
		"\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b5\u0001\u00b5\u0001\u00b5"+
		"\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b6\u0001\u00b6"+
		"\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b7"+
		"\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7"+
		"\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8"+
		"\u0001\u00b8\u0001\u00b8\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9"+
		"\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00ba"+
		"\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00bb\u0001\u00bb"+
		"\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0005\u00bb\u09a5\b\u00bb"+
		"\n\u00bb\f\u00bb\u09a8\t\u00bb\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001"+
		"\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00bf\u0003\u00bf\u09ca"+
		"\b\u00bf\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001"+
		"\u00c0\u0001\u00c0\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0001"+
		"\u00c1\u0001\u00c1\u0001\u00c2\u0003\u00c2\u09da\b\u00c2\u0001\u00c3\u0003"+
		"\u00c3\u09dd\b\u00c3\u0001\u00c4\u0001\u00c4\u0001\u00c4\u0001\u00c4\u0001"+
		"\u00c4\u0005\u00c4\u09e4\b\u00c4\n\u00c4\f\u00c4\u09e7\t\u00c4\u0001\u00c5"+
		"\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5"+
		"\u0001\u00c5\u0003\u00c5\u09f1\b\u00c5\u0001\u00c6\u0001\u00c6\u0001\u00c6"+
		"\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c7"+
		"\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7"+
		"\u0001\u00c7\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8"+
		"\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8"+
		"\u0003\u00c8\u0a0e\b\u00c8\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9"+
		"\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9"+
		"\u0003\u00c9\u0a1a\b\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0003\u00c9"+
		"\u0a1f\b\u00c9\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca"+
		"\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb"+
		"\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cc"+
		"\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc"+
		"\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cd\u0003\u00cd"+
		"\u0a3d\b\u00cd\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce"+
		"\u0005\u00ce\u0a44\b\u00ce\n\u00ce\f\u00ce\u0a47\t\u00ce\u0001\u00cf\u0001"+
		"\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00d0\u0001"+
		"\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001"+
		"\u00d0\u0001\u00d0\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001"+
		"\u00d1\u0001\u00d1\u0005\u00d1\u0a5e\b\u00d1\n\u00d1\f\u00d1\u0a61\t\u00d1"+
		"\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d3\u0001\u00d3\u0001\u00d3"+
		"\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3"+
		"\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3"+
		"\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d4\u0001\u00d4\u0001\u00d4"+
		"\u0001\u00d4\u0001\u00d4\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5"+
		"\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5"+
		"\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6"+
		"\u0001\u00d6\u0001\u00d6\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7"+
		"\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0003\u00d9"+
		"\u0a9e\b\u00d9\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00db\u0001\u00db"+
		"\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00db\u0003\u00db\u0aa9\b\u00db"+
		"\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc"+
		"\u0005\u00dc\u0ab1\b\u00dc\n\u00dc\f\u00dc\u0ab4\t\u00dc\u0001\u00dd\u0001"+
		"\u00dd\u0003\u00dd\u0ab8\b\u00dd\u0001\u00de\u0001\u00de\u0001\u00de\u0001"+
		"\u00de\u0001\u00de\u0001\u00de\u0001\u00de\u0003\u00de\u0ac1\b\u00de\u0001"+
		"\u00df\u0001\u00df\u0001\u00df\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001"+
		"\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u0acc\b\u00e1\u0001\u00e2\u0003"+
		"\u00e2\u0acf\b\u00e2\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0005\u00e3\u0ad6\b\u00e3\n\u00e3\f\u00e3\u0ad9\t\u00e3\u0001\u00e4"+
		"\u0001\u00e4\u0003\u00e4\u0add\b\u00e4\u0001\u00e5\u0001\u00e5\u0001\u00e5"+
		"\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0005\u00e5\u0ae5\b\u00e5\n\u00e5"+
		"\f\u00e5\u0ae8\t\u00e5\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6"+
		"\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6"+
		"\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6"+
		"\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6"+
		"\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0003\u00e6\u0b03\b\u00e6\u0001\u00e7"+
		"\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e8\u0003\u00e8"+
		"\u0b0b\b\u00e8\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0005\u00e9\u0b13\b\u00e9\n\u00e9\f\u00e9\u0b16\t\u00e9\u0001"+
		"\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001"+
		"\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001"+
		"\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001"+
		"\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001"+
		"\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001"+
		"\u00ea\u0001\u00ea\u0003\u00ea\u0b38\b\u00ea\u0001\u00eb\u0001\u00eb\u0001"+
		"\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00ec\u0003\u00ec\u0b40\b\u00ec\u0001"+
		"\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0005"+
		"\u00ed\u0b48\b\u00ed\n\u00ed\f\u00ed\u0b4b\t\u00ed\u0001\u00ee\u0001\u00ee"+
		"\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee"+
		"\u0003\u00ee\u0b55\b\u00ee\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00f0\u0003\u00f0\u0b5d\b\u00f0\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0005\u00f1\u0b65\b\u00f1"+
		"\n\u00f1\f\u00f1\u0b68\t\u00f1\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001"+
		"\u00f2\u0001\u00f2\u0001\u00f2\u0003\u00f2\u0b70\b\u00f2\u0001\u00f3\u0001"+
		"\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f4\u0003\u00f4\u0b78"+
		"\b\u00f4\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001"+
		"\u00f5\u0005\u00f5\u0b80\b\u00f5\n\u00f5\f\u00f5\u0b83\t\u00f5\u0001\u00f6"+
		"\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0003\u00f6\u0b8a\b\u00f6"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f8"+
		"\u0003\u00f8\u0b92\b\u00f8\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9"+
		"\u0001\u00f9\u0001\u00f9\u0005\u00f9\u0b9a\b\u00f9\n\u00f9\f\u00f9\u0b9d"+
		"\t\u00f9\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001"+
		"\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001"+
		"\u00fa\u0001\u00fa\u0001\u00fa\u0003\u00fa\u0bad\b\u00fa\u0001\u00fb\u0001"+
		"\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fc\u0003\u00fc\u0bb5"+
		"\b\u00fc\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001"+
		"\u00fd\u0005\u00fd\u0bbd\b\u00fd\n\u00fd\f\u00fd\u0bc0\t\u00fd\u0001\u00fe"+
		"\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe"+
		"\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe"+
		"\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe"+
		"\u0001\u00fe\u0001\u00fe\u0003\u00fe\u0bd7\b\u00fe\u0001\u00ff\u0001\u00ff"+
		"\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u0100\u0003\u0100\u0bdf\b\u0100"+
		"\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101"+
		"\u0005\u0101\u0be7\b\u0101\n\u0101\f\u0101\u0bea\t\u0101\u0001\u0102\u0001"+
		"\u0102\u0001\u0102\u0001\u0102\u0003\u0102\u0bf0\b\u0102\u0001\u0103\u0001"+
		"\u0103\u0001\u0103\u0001\u0103\u0001\u0103\u0001\u0104\u0003\u0104\u0bf8"+
		"\b\u0104\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105\u0001"+
		"\u0105\u0005\u0105\u0c00\b\u0105\n\u0105\f\u0105\u0c03\t\u0105\u0001\u0106"+
		"\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0003\u0106\u0c0a\b\u0106"+
		"\u0001\u0107\u0001\u0107\u0001\u0107\u0001\u0107\u0001\u0107\u0001\u0108"+
		"\u0003\u0108\u0c12\b\u0108\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0005\u0109\u0c1a\b\u0109\n\u0109\f\u0109\u0c1d"+
		"\t\u0109\u0001\u010a\u0001\u010a\u0003\u010a\u0c21\b\u010a\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010c\u0003\u010c"+
		"\u0c29\b\u010c\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0001\u010d\u0005\u010d\u0c31\b\u010d\n\u010d\f\u010d\u0c34\t\u010d\u0001"+
		"\u010e\u0001\u010e\u0001\u010e\u0001\u010e\u0001\u010e\u0003\u010e\u0c3b"+
		"\b\u010e\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0001"+
		"\u0110\u0003\u0110\u0c43\b\u0110\u0001\u0111\u0001\u0111\u0001\u0111\u0001"+
		"\u0111\u0001\u0111\u0001\u0111\u0005\u0111\u0c4b\b\u0111\n\u0111\f\u0111"+
		"\u0c4e\t\u0111\u0001\u0112\u0001\u0112\u0001\u0112\u0001\u0112\u0001\u0112"+
		"\u0001\u0112\u0001\u0112\u0001\u0112\u0003\u0112\u0c58\b\u0112\u0001\u0113"+
		"\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0114\u0003\u0114"+
		"\u0c60\b\u0114\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115"+
		"\u0001\u0115\u0005\u0115\u0c68\b\u0115\n\u0115\f\u0115\u0c6b\t\u0115\u0001"+
		"\u0116\u0001\u0116\u0001\u0116\u0001\u0116\u0003\u0116\u0c71\b\u0116\u0001"+
		"\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0118\u0003"+
		"\u0118\u0c79\b\u0118\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001"+
		"\u0119\u0001\u0119\u0005\u0119\u0c81\b\u0119\n\u0119\f\u0119\u0c84\t\u0119"+
		"\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a"+
		"\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0003\u011a\u0c90\b\u011a"+
		"\u0001\u011b\u0001\u011b\u0001\u011b\u0001\u011b\u0001\u011b\u0001\u011c"+
		"\u0003\u011c\u0c98\b\u011c\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d"+
		"\u0001\u011d\u0001\u011d\u0005\u011d\u0ca0\b\u011d\n\u011d\f\u011d\u0ca3"+
		"\t\u011d\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001"+
		"\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001"+
		"\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001"+
		"\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001"+
		"\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0003\u011e\u0cc1"+
		"\b\u011e\u0001\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0001"+
		"\u0120\u0003\u0120\u0cc9\b\u0120\u0001\u0121\u0001\u0121\u0001\u0121\u0001"+
		"\u0121\u0001\u0121\u0001\u0121\u0005\u0121\u0cd1\b\u0121\n\u0121\f\u0121"+
		"\u0cd4\t\u0121\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0003\u0122"+
		"\u0cda\b\u0122\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123"+
		"\u0001\u0124\u0003\u0124\u0ce2\b\u0124\u0001\u0125\u0001\u0125\u0001\u0125"+
		"\u0001\u0125\u0001\u0125\u0001\u0125\u0005\u0125\u0cea\b\u0125\n\u0125"+
		"\f\u0125\u0ced\t\u0125\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126"+
		"\u0003\u0126\u0cf3\b\u0126\u0001\u0127\u0001\u0127\u0001\u0127\u0001\u0127"+
		"\u0001\u0127\u0001\u0128\u0003\u0128\u0cfb\b\u0128\u0001\u0129\u0001\u0129"+
		"\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0005\u0129\u0d03\b\u0129"+
		"\n\u0129\f\u0129\u0d06\t\u0129\u0001\u012a\u0001\u012a\u0001\u012a\u0001"+
		"\u012a\u0001\u012a\u0003\u012a\u0d0d\b\u012a\u0001\u012b\u0001\u012b\u0001"+
		"\u012b\u0001\u012b\u0001\u012b\u0001\u012c\u0003\u012c\u0d15\b\u012c\u0001"+
		"\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0005"+
		"\u012d\u0d1d\b\u012d\n\u012d\f\u012d\u0d20\t\u012d\u0001\u012e\u0001\u012e"+
		"\u0001\u012e\u0001\u012e\u0001\u012e\u0001\u012e\u0001\u012e\u0001\u012e"+
		"\u0001\u012e\u0003\u012e\u0d2b\b\u012e\u0001\u012f\u0001\u012f\u0001\u012f"+
		"\u0001\u012f\u0001\u012f\u0001\u0130\u0003\u0130\u0d33\b\u0130\u0001\u0131"+
		"\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0005\u0131"+
		"\u0d3b\b\u0131\n\u0131\f\u0131\u0d3e\t\u0131\u0001\u0132\u0001\u0132\u0003"+
		"\u0132\u0d42\b\u0132\u0001\u0133\u0001\u0133\u0001\u0133\u0001\u0133\u0001"+
		"\u0133\u0001\u0134\u0003\u0134\u0d4a\b\u0134\u0001\u0135\u0001\u0135\u0001"+
		"\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0005\u0135\u0d52\b\u0135\n"+
		"\u0135\f\u0135\u0d55\t\u0135\u0001\u0136\u0001\u0136\u0001\u0136\u0001"+
		"\u0136\u0003\u0136\u0d5b\b\u0136\u0001\u0137\u0001\u0137\u0001\u0137\u0001"+
		"\u0137\u0001\u0137\u0001\u0138\u0003\u0138\u0d63\b\u0138\u0001\u0139\u0001"+
		"\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0005\u0139\u0d6b"+
		"\b\u0139\n\u0139\f\u0139\u0d6e\t\u0139\u0001\u013a\u0001\u013a\u0001\u013a"+
		"\u0001\u013a\u0001\u013a\u0001\u013a\u0001\u013a\u0001\u013a\u0001\u013a"+
		"\u0001\u013a\u0003\u013a\u0d7a\b\u013a\u0001\u013b\u0001\u013b\u0001\u013b"+
		"\u0001\u013b\u0001\u013b\u0001\u013c\u0003\u013c\u0d82\b\u013c\u0001\u013d"+
		"\u0001\u013d\u0001\u013d\u0001\u013d\u0001\u013d\u0001\u013d\u0005\u013d"+
		"\u0d8a\b\u013d\n\u013d\f\u013d\u0d8d\t\u013d\u0001\u013e\u0001\u013e\u0001"+
		"\u013e\u0001\u013e\u0001\u013e\u0001\u013e\u0001\u013e\u0003\u013e\u0d96"+
		"\b\u013e\u0001\u013f\u0001\u013f\u0001\u013f\u0001\u013f\u0001\u013f\u0001"+
		"\u0140\u0003\u0140\u0d9e\b\u0140\u0001\u0141\u0001\u0141\u0001\u0141\u0001"+
		"\u0141\u0001\u0141\u0001\u0141\u0005\u0141\u0da6\b\u0141\n\u0141\f\u0141"+
		"\u0da9\t\u0141\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142"+
		"\u0003\u0142\u0db0\b\u0142\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143"+
		"\u0001\u0143\u0001\u0144\u0003\u0144\u0db8\b\u0144\u0001\u0145\u0001\u0145"+
		"\u0001\u0145\u0001\u0145\u0001\u0145\u0001\u0145\u0005\u0145\u0dc0\b\u0145"+
		"\n\u0145\f\u0145\u0dc3\t\u0145\u0001\u0146\u0001\u0146\u0001\u0146\u0001"+
		"\u0146\u0001\u0146\u0003\u0146\u0dca\b\u0146\u0001\u0147\u0001\u0147\u0001"+
		"\u0147\u0001\u0147\u0001\u0147\u0001\u0148\u0003\u0148\u0dd2\b\u0148\u0001"+
		"\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0005"+
		"\u0149\u0dda\b\u0149\n\u0149\f\u0149\u0ddd\t\u0149\u0001\u014a\u0001\u014a"+
		"\u0001\u014a\u0001\u014a\u0001\u014a\u0003\u014a\u0de4\b\u014a\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014d"+
		"\u0001\u014d\u0001\u014d\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014f"+
		"\u0001\u014f\u0001\u014f\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0151"+
		"\u0001\u0151\u0001\u0151\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0153"+
		"\u0001\u0153\u0001\u0153\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0155"+
		"\u0001\u0155\u0001\u0155\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0157"+
		"\u0001\u0157\u0003\u0157\u0e0c\b\u0157\u0001\u0158\u0001\u0158\u0001\u0158"+
		"\u0001\u0159\u0001\u0159\u0001\u0159\u0001\u015a\u0001\u015a\u0001\u015a"+
		"\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015c\u0001\u015c\u0001\u015c"+
		"\u0001\u015d\u0001\u015d\u0001\u015d\u0001\u015e\u0001\u015e\u0001\u015e"+
		"\u0001\u015f\u0001\u015f\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160"+
		"\u0001\u0160\u0001\u0160\u0005\u0160\u0e2b\b\u0160\n\u0160\f\u0160\u0e2e"+
		"\t\u0160\u0001\u0161\u0001\u0161\u0003\u0161\u0e32\b\u0161\u0001\u0162"+
		"\u0001\u0162\u0003\u0162\u0e36\b\u0162\u0001\u0163\u0001\u0163\u0003\u0163"+
		"\u0e3a\b\u0163\u0001\u0164\u0001\u0164\u0003\u0164\u0e3e\b\u0164\u0001"+
		"\u0165\u0001\u0165\u0003\u0165\u0e42\b\u0165\u0001\u0166\u0001\u0166\u0001"+
		"\u0167\u0001\u0167\u0003\u0167\u0e48\b\u0167\u0001\u0168\u0001\u0168\u0003"+
		"\u0168\u0e4c\b\u0168\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0003"+
		"\u0169\u0e52\b\u0169\u0001\u016a\u0003\u016a\u0e55\b\u016a\u0001\u016b"+
		"\u0001\u016b\u0001\u016b\u0001\u016b\u0001\u016b\u0005\u016b\u0e5c\b\u016b"+
		"\n\u016b\f\u016b\u0e5f\t\u016b\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0005\u016c\u0e67\b\u016c\n\u016c\f\u016c"+
		"\u0e6a\t\u016c\u0001\u016d\u0001\u016d\u0001\u016d\u0001\u016e\u0003\u016e"+
		"\u0e70\b\u016e\u0001\u016f\u0001\u016f\u0001\u016f\u0001\u016f\u0001\u016f"+
		"\u0001\u016f\u0005\u016f\u0e78\b\u016f\n\u016f\f\u016f\u0e7b\t\u016f\u0001"+
		"\u0170\u0001\u0170\u0001\u0170\u0001\u0171\u0001\u0171\u0001\u0171\u0001"+
		"\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001"+
		"\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0003\u0172\u0e8d\b\u0172\u0001"+
		"\u0173\u0001\u0173\u0001\u0173\u0001\u0173\u0001\u0173\u0001\u0173\u0003"+
		"\u0173\u0e95\b\u0173\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001"+
		"\u0174\u0001\u0174\u0005\u0174\u0e9d\b\u0174\n\u0174\f\u0174\u0ea0\t\u0174"+
		"\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0003\u0175"+
		"\u0ea7\b\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175"+
		"\u0001\u0175\u0003\u0175\u0eaf\b\u0175\u0001\u0176\u0001\u0176\u0001\u0177"+
		"\u0003\u0177\u0eb4\b\u0177\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178"+
		"\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178"+
		"\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178"+
		"\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178"+
		"\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178"+
		"\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178"+
		"\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178"+
		"\u0001\u0178\u0003\u0178\u0edf\b\u0178\u0001\u0179\u0003\u0179\u0ee2\b"+
		"\u0179\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001"+
		"\u017a\u0003\u017a\u0eea\b\u017a\u0001\u017b\u0001\u017b\u0001\u017b\u0001"+
		"\u017b\u0001\u017b\u0001\u017b\u0001\u017b\u0001\u017b\u0003\u017b\u0ef4"+
		"\b\u017b\u0001\u017c\u0003\u017c\u0ef7\b\u017c\u0001\u017d\u0001\u017d"+
		"\u0001\u017e\u0003\u017e\u0efc\b\u017e\u0001\u017f\u0003\u017f\u0eff\b"+
		"\u017f\u0001\u0180\u0001\u0180\u0001\u0180\u0001\u0180\u0001\u0180\u0001"+
		"\u0180\u0005\u0180\u0f07\b\u0180\n\u0180\f\u0180\u0f0a\t\u0180\u0001\u0181"+
		"\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181\u0003\u0181\u0f11\b\u0181"+
		"\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181\u0003\u0181"+
		"\u0f18\b\u0181\u0001\u0182\u0001\u0182\u0003\u0182\u0f1c\b\u0182\u0001"+
		"\u0183\u0003\u0183\u0f1f\b\u0183\u0001\u0184\u0001\u0184\u0001\u0184\u0001"+
		"\u0184\u0001\u0184\u0005\u0184\u0f26\b\u0184\n\u0184\f\u0184\u0f29\t\u0184"+
		"\u0001\u0185\u0001\u0185\u0001\u0186\u0001\u0186\u0001\u0187\u0003\u0187"+
		"\u0f30\b\u0187\u0001\u0188\u0001\u0188\u0001\u0188\u0001\u0188\u0001\u0188"+
		"\u0005\u0188\u0f37\b\u0188\n\u0188\f\u0188\u0f3a\t\u0188\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0001\u0189\u0003\u0189\u0f70\b\u0189\u0001\u018a\u0003"+
		"\u018a\u0f73\b\u018a\u0001\u018b\u0001\u018b\u0003\u018b\u0f77\b\u018b"+
		"\u0001\u018c\u0001\u018c\u0001\u018c\u0001\u018c\u0001\u018c\u0001\u018c"+
		"\u0005\u018c\u0f7f\b\u018c\n\u018c\f\u018c\u0f82\t\u018c\u0001\u018d\u0001"+
		"\u018d\u0001\u018e\u0001\u018e\u0001\u018f\u0003\u018f\u0f89\b\u018f\u0001"+
		"\u0190\u0001\u0190\u0001\u0191\u0003\u0191\u0f8e\b\u0191\u0001\u0192\u0001"+
		"\u0192\u0001\u0193\u0001\u0193\u0001\u0193\u0001\u0193\u0003\u0193\u0f96"+
		"\b\u0193\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0194\u0005"+
		"\u0194\u0f9d\b\u0194\n\u0194\f\u0194\u0fa0\t\u0194\u0001\u0195\u0001\u0195"+
		"\u0001\u0195\u0001\u0195\u0001\u0195\u0001\u0196\u0003\u0196\u0fa8\b\u0196"+
		"\u0001\u0197\u0001\u0197\u0001\u0197\u0001\u0197\u0001\u0197\u0005\u0197"+
		"\u0faf\b\u0197\n\u0197\f\u0197\u0fb2\t\u0197\u0001\u0198\u0001\u0198\u0001"+
		"\u0199\u0003\u0199\u0fb7\b\u0199\u0001\u019a\u0001\u019a\u0001\u019a\u0001"+
		"\u019a\u0001\u019a\u0005\u019a\u0fbe\b\u019a\n\u019a\f\u019a\u0fc1\t\u019a"+
		"\u0001\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0001\u019b"+
		"\u0001\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0001\u019b"+
		"\u0001\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0001\u019b"+
		"\u0001\u019b\u0003\u019b\u0fd6\b\u019b\u0001\u019c\u0001\u019c\u0001\u019c"+
		"\u0001\u019c\u0001\u019c\u0001\u019c\u0003\u019c\u0fde\b\u019c\u0001\u019d"+
		"\u0001\u019d\u0001\u019d\u0001\u019d\u0001\u019d\u0001\u019d\u0005\u019d"+
		"\u0fe6\b\u019d\n\u019d\f\u019d\u0fe9\t\u019d\u0001\u019e\u0001\u019e\u0001"+
		"\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0003\u019e\u0ff2"+
		"\b\u019e\u0001\u019f\u0003\u019f\u0ff5\b\u019f\u0001\u01a0\u0001\u01a0"+
		"\u0001\u01a1\u0003\u01a1\u0ffa\b\u01a1\u0001\u01a2\u0001\u01a2\u0001\u01a2"+
		"\u0001\u01a2\u0001\u01a2\u0005\u01a2\u1001\b\u01a2\n\u01a2\f\u01a2\u1004"+
		"\t\u01a2\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001"+
		"\u01a3\u0001\u01a3\u0001\u01a3\u0003\u01a3\u100e\b\u01a3\u0001\u01a4\u0001"+
		"\u01a4\u0001\u01a4\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001"+
		"\u01a5\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0003\u01a6\u101c"+
		"\b\u01a6\u0001\u01a7\u0001\u01a7\u0001\u01a7\u0001\u01a7\u0001\u01a7\u0001"+
		"\u01a7\u0003\u01a7\u1024\b\u01a7\u0001\u01a8\u0001\u01a8\u0001\u01a9\u0001"+
		"\u01a9\u0001\u01aa\u0001\u01aa\u0001\u01aa\u00007\u0006 >H\\z\u00de\u0104"+
		"\u010c\u0176\u0188\u019c\u01a2\u01b8\u01c6\u01ca\u01d2\u01da\u01e2\u01ea"+
		"\u01f2\u01fa\u0202\u020a\u0212\u021a\u0222\u022a\u0232\u023a\u0242\u024a"+
		"\u0252\u025a\u0262\u026a\u0272\u027a\u0282\u028a\u0292\u02c0\u02d6\u02d8"+
		"\u02de\u02e8\u0300\u0308\u0310\u0318\u0328\u032e\u0334\u033a\u0344\u01ab"+
		"\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a"+
		"\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082"+
		"\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a"+
		"\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2"+
		"\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca"+
		"\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2"+
		"\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa"+
		"\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112"+
		"\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a"+
		"\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142"+
		"\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a"+
		"\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172"+
		"\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a"+
		"\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2"+
		"\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba"+
		"\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2"+
		"\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea"+
		"\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202"+
		"\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a"+
		"\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232"+
		"\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a"+
		"\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262"+
		"\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a"+
		"\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292"+
		"\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa"+
		"\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2"+
		"\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da"+
		"\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2"+
		"\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a"+
		"\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322"+
		"\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a"+
		"\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352"+
		"\u0354\u0000\u0013\u0005\u0000%%\u008a\u008a\u00d5\u00d5\u00f8\u00f8\u012d"+
		"\u012d\u0002\u0000SS\u00ae\u00ae\u0002\u0000\u0015\u0015\u00b8\u00b8\u0006"+
		"\u0000~~\u009e\u009e\u00a0\u00a0\u00b1\u00b1\u0116\u0116\u018c\u018c\u0002"+
		"\u0000\u0094\u0094\u0161\u0161\t\u0000\u0011\u0011$$\u00e2\u00e2\u00e4"+
		"\u00e4\u00ed\u00ed\u0112\u0112\u0151\u0151\u016d\u016e\u0193\u0194\u0003"+
		"\u0000\u00ea\u00ea\u0101\u0101\u0158\u0158\u0005\u0000\u000f\u0010\u00e7"+
		"\u00e7\u0124\u0124\u0137\u0137\u0174\u0174\u0001\u0000|}\u0007\u0000\u0014"+
		"\u0014((UU\u0095\u0095\u00f0\u00f1\u0104\u0104\u0123\u0123\t\u0000\u0094"+
		"\u0094\u0107\u0107\u0109\u010d\u0113\u0113\u0161\u0161\u0167\u0169\u016b"+
		"\u016c\u0170\u0170\u0173\u0173\u0006\u0000\u0088\u0088\u00ee\u00ee\u013a"+
		"\u013b\u0142\u0143\u0168\u0169\u016b\u016c\u0007\u0000\'\'44QQ\u00c9\u00c9"+
		"\u00d9\u00da\u011a\u011a\u0183\u0184\u0002\u0000\u008d\u008d\u008f\u008f"+
		"\u0002\u0000\u0103\u0103\u0106\u0106\u0001\u0000\u007f\u0080\u0002\u0000"+
		"\u00c0\u00c0\u00dc\u00dd\u0002\u0000\u00de\u00de\u0172\u0172\u0003\u0000"+
		"]]\u00b5\u00b5\u011d\u011d\u10ec\u0000\u0358\u0001\u0000\u0000\u0000\u0002"+
		"\u035a\u0001\u0000\u0000\u0000\u0004\u035d\u0001\u0000\u0000\u0000\u0006"+
		"\u035f\u0001\u0000\u0000\u0000\b\u0378\u0001\u0000\u0000\u0000\n\u037a"+
		"\u0001\u0000\u0000\u0000\f\u0386\u0001\u0000\u0000\u0000\u000e\u0388\u0001"+
		"\u0000\u0000\u0000\u0010\u0396\u0001\u0000\u0000\u0000\u0012\u0398\u0001"+
		"\u0000\u0000\u0000\u0014\u039d\u0001\u0000\u0000\u0000\u0016\u039f\u0001"+
		"\u0000\u0000\u0000\u0018\u03b4\u0001\u0000\u0000\u0000\u001a\u03cb\u0001"+
		"\u0000\u0000\u0000\u001c\u03cd\u0001\u0000\u0000\u0000\u001e\u03d1\u0001"+
		"\u0000\u0000\u0000 \u03d3\u0001\u0000\u0000\u0000\"\u03e2\u0001\u0000"+
		"\u0000\u0000$\u040c\u0001\u0000\u0000\u0000&\u040e\u0001\u0000\u0000\u0000"+
		"(\u0410\u0001\u0000\u0000\u0000*\u0415\u0001\u0000\u0000\u0000,\u041b"+
		"\u0001\u0000\u0000\u0000.\u0436\u0001\u0000\u0000\u00000\u043c\u0001\u0000"+
		"\u0000\u00002\u0442\u0001\u0000\u0000\u00004\u0448\u0001\u0000\u0000\u0000"+
		"6\u044a\u0001\u0000\u0000\u00008\u044f\u0001\u0000\u0000\u0000:\u0456"+
		"\u0001\u0000\u0000\u0000<\u045e\u0001\u0000\u0000\u0000>\u0460\u0001\u0000"+
		"\u0000\u0000@\u046d\u0001\u0000\u0000\u0000B\u0479\u0001\u0000\u0000\u0000"+
		"D\u047c\u0001\u0000\u0000\u0000F\u047f\u0001\u0000\u0000\u0000H\u0481"+
		"\u0001\u0000\u0000\u0000J\u048b\u0001\u0000\u0000\u0000L\u0493\u0001\u0000"+
		"\u0000\u0000N\u049c\u0001\u0000\u0000\u0000P\u049e\u0001\u0000\u0000\u0000"+
		"R\u04a0\u0001\u0000\u0000\u0000T\u04a2\u0001\u0000\u0000\u0000V\u04a4"+
		"\u0001\u0000\u0000\u0000X\u04a6\u0001\u0000\u0000\u0000Z\u04a8\u0001\u0000"+
		"\u0000\u0000\\\u04ae\u0001\u0000\u0000\u0000^\u04c7\u0001\u0000\u0000"+
		"\u0000`\u04c9\u0001\u0000\u0000\u0000b\u04cb\u0001\u0000\u0000\u0000d"+
		"\u04cd\u0001\u0000\u0000\u0000f\u04cf\u0001\u0000\u0000\u0000h\u04d1\u0001"+
		"\u0000\u0000\u0000j\u04d4\u0001\u0000\u0000\u0000l\u04d6\u0001\u0000\u0000"+
		"\u0000n\u04db\u0001\u0000\u0000\u0000p\u04e1\u0001\u0000\u0000\u0000r"+
		"\u04e3\u0001\u0000\u0000\u0000t\u04e5\u0001\u0000\u0000\u0000v\u04e7\u0001"+
		"\u0000\u0000\u0000x\u04fd\u0001\u0000\u0000\u0000z\u04ff\u0001\u0000\u0000"+
		"\u0000|\u050a\u0001\u0000\u0000\u0000~\u050c\u0001\u0000\u0000\u0000\u0080"+
		"\u0511\u0001\u0000\u0000\u0000\u0082\u0513\u0001\u0000\u0000\u0000\u0084"+
		"\u051c\u0001\u0000\u0000\u0000\u0086\u051f\u0001\u0000\u0000\u0000\u0088"+
		"\u0522\u0001\u0000\u0000\u0000\u008a\u0532\u0001\u0000\u0000\u0000\u008c"+
		"\u0534\u0001\u0000\u0000\u0000\u008e\u0536\u0001\u0000\u0000\u0000\u0090"+
		"\u0538\u0001\u0000\u0000\u0000\u0092\u053a\u0001\u0000\u0000\u0000\u0094"+
		"\u053c\u0001\u0000\u0000\u0000\u0096\u053e\u0001\u0000\u0000\u0000\u0098"+
		"\u0540\u0001\u0000\u0000\u0000\u009a\u0552\u0001\u0000\u0000\u0000\u009c"+
		"\u0554\u0001\u0000\u0000\u0000\u009e\u0558\u0001\u0000\u0000\u0000\u00a0"+
		"\u055b\u0001\u0000\u0000\u0000\u00a2\u055d\u0001\u0000\u0000\u0000\u00a4"+
		"\u0561\u0001\u0000\u0000\u0000\u00a6\u0563\u0001\u0000\u0000\u0000\u00a8"+
		"\u0565\u0001\u0000\u0000\u0000\u00aa\u0594\u0001\u0000\u0000\u0000\u00ac"+
		"\u0596\u0001\u0000\u0000\u0000\u00ae\u05a0\u0001\u0000\u0000\u0000\u00b0"+
		"\u05a9\u0001\u0000\u0000\u0000\u00b2\u05b3\u0001\u0000\u0000\u0000\u00b4"+
		"\u05bc\u0001\u0000\u0000\u0000\u00b6\u05c6\u0001\u0000\u0000\u0000\u00b8"+
		"\u05cf\u0001\u0000\u0000\u0000\u00ba\u05d9\u0001\u0000\u0000\u0000\u00bc"+
		"\u05e3\u0001\u0000\u0000\u0000\u00be\u05ec\u0001\u0000\u0000\u0000\u00c0"+
		"\u05f5\u0001\u0000\u0000\u0000\u00c2\u05fe\u0001\u0000\u0000\u0000\u00c4"+
		"\u0607\u0001\u0000\u0000\u0000\u00c6\u0611\u0001\u0000\u0000\u0000\u00c8"+
		"\u061b\u0001\u0000\u0000\u0000\u00ca\u0625\u0001\u0000\u0000\u0000\u00cc"+
		"\u062e\u0001\u0000\u0000\u0000\u00ce\u0637\u0001\u0000\u0000\u0000\u00d0"+
		"\u0640\u0001\u0000\u0000\u0000\u00d2\u0649\u0001\u0000\u0000\u0000\u00d4"+
		"\u0655\u0001\u0000\u0000\u0000\u00d6\u0661\u0001\u0000\u0000\u0000\u00d8"+
		"\u0668\u0001\u0000\u0000\u0000\u00da\u0672\u0001\u0000\u0000\u0000\u00dc"+
		"\u067e\u0001\u0000\u0000\u0000\u00de\u0680\u0001\u0000\u0000\u0000\u00e0"+
		"\u068b\u0001\u0000\u0000\u0000\u00e2\u0690\u0001\u0000\u0000\u0000\u00e4"+
		"\u0692\u0001\u0000\u0000\u0000\u00e6\u069a\u0001\u0000\u0000\u0000\u00e8"+
		"\u06a2\u0001\u0000\u0000\u0000\u00ea\u06aa\u0001\u0000\u0000\u0000\u00ec"+
		"\u06b2\u0001\u0000\u0000\u0000\u00ee\u06ba\u0001\u0000\u0000\u0000\u00f0"+
		"\u06c2\u0001\u0000\u0000\u0000\u00f2\u06ca\u0001\u0000\u0000\u0000\u00f4"+
		"\u06d2\u0001\u0000\u0000\u0000\u00f6\u06da\u0001\u0000\u0000\u0000\u00f8"+
		"\u06e2\u0001\u0000\u0000\u0000\u00fa\u06ea\u0001\u0000\u0000\u0000\u00fc"+
		"\u06f2\u0001\u0000\u0000\u0000\u00fe\u06fa\u0001\u0000\u0000\u0000\u0100"+
		"\u0704\u0001\u0000\u0000\u0000\u0102\u070e\u0001\u0000\u0000\u0000\u0104"+
		"\u071a\u0001\u0000\u0000\u0000\u0106\u0724\u0001\u0000\u0000\u0000\u0108"+
		"\u0729\u0001\u0000\u0000\u0000\u010a\u072c\u0001\u0000\u0000\u0000\u010c"+
		"\u072e\u0001\u0000\u0000\u0000\u010e\u0741\u0001\u0000\u0000\u0000\u0110"+
		"\u0773\u0001\u0000\u0000\u0000\u0112\u0775\u0001\u0000\u0000\u0000\u0114"+
		"\u077d\u0001\u0000\u0000\u0000\u0116\u0785\u0001\u0000\u0000\u0000\u0118"+
		"\u078d\u0001\u0000\u0000\u0000\u011a\u0795\u0001\u0000\u0000\u0000\u011c"+
		"\u079d\u0001\u0000\u0000\u0000\u011e\u07a5\u0001\u0000\u0000\u0000\u0120"+
		"\u07ad\u0001\u0000\u0000\u0000\u0122\u07b5\u0001\u0000\u0000\u0000\u0124"+
		"\u07bd\u0001\u0000\u0000\u0000\u0126\u07c4\u0001\u0000\u0000\u0000\u0128"+
		"\u07cb\u0001\u0000\u0000\u0000\u012a\u07d3\u0001\u0000\u0000\u0000\u012c"+
		"\u07db\u0001\u0000\u0000\u0000\u012e\u07e3\u0001\u0000\u0000\u0000\u0130"+
		"\u07eb\u0001\u0000\u0000\u0000\u0132\u07f2\u0001\u0000\u0000\u0000\u0134"+
		"\u07f9\u0001\u0000\u0000\u0000\u0136\u0800\u0001\u0000\u0000\u0000\u0138"+
		"\u0808\u0001\u0000\u0000\u0000\u013a\u0813\u0001\u0000\u0000\u0000\u013c"+
		"\u081e\u0001\u0000\u0000\u0000\u013e\u0825\u0001\u0000\u0000\u0000\u0140"+
		"\u087b\u0001\u0000\u0000\u0000\u0142\u087e\u0001\u0000\u0000\u0000\u0144"+
		"\u0881\u0001\u0000\u0000\u0000\u0146\u08b5\u0001\u0000\u0000\u0000\u0148"+
		"\u08ed\u0001\u0000\u0000\u0000\u014a\u08ef\u0001\u0000\u0000\u0000\u014c"+
		"\u08f4\u0001\u0000\u0000\u0000\u014e\u0907\u0001\u0000\u0000\u0000\u0150"+
		"\u0909\u0001\u0000\u0000\u0000\u0152\u0917\u0001\u0000\u0000\u0000\u0154"+
		"\u092b\u0001\u0000\u0000\u0000\u0156\u092d\u0001\u0000\u0000\u0000\u0158"+
		"\u0934\u0001\u0000\u0000\u0000\u015a\u093b\u0001\u0000\u0000\u0000\u015c"+
		"\u0942\u0001\u0000\u0000\u0000\u015e\u0949\u0001\u0000\u0000\u0000\u0160"+
		"\u0950\u0001\u0000\u0000\u0000\u0162\u0957\u0001\u0000\u0000\u0000\u0164"+
		"\u095e\u0001\u0000\u0000\u0000\u0166\u0965\u0001\u0000\u0000\u0000\u0168"+
		"\u096c\u0001\u0000\u0000\u0000\u016a\u0973\u0001\u0000\u0000\u0000\u016c"+
		"\u097a\u0001\u0000\u0000\u0000\u016e\u0981\u0001\u0000\u0000\u0000\u0170"+
		"\u0988\u0001\u0000\u0000\u0000\u0172\u0990\u0001\u0000\u0000\u0000\u0174"+
		"\u0999\u0001\u0000\u0000\u0000\u0176\u099e\u0001\u0000\u0000\u0000\u0178"+
		"\u09a9\u0001\u0000\u0000\u0000\u017a\u09af\u0001\u0000\u0000\u0000\u017c"+
		"\u09ba\u0001\u0000\u0000\u0000\u017e\u09c9\u0001\u0000\u0000\u0000\u0180"+
		"\u09cb\u0001\u0000\u0000\u0000\u0182\u09d2\u0001\u0000\u0000\u0000\u0184"+
		"\u09d9\u0001\u0000\u0000\u0000\u0186\u09dc\u0001\u0000\u0000\u0000\u0188"+
		"\u09de\u0001\u0000\u0000\u0000\u018a\u09f0\u0001\u0000\u0000\u0000\u018c"+
		"\u09f2\u0001\u0000\u0000\u0000\u018e\u09fa\u0001\u0000\u0000\u0000\u0190"+
		"\u0a0d\u0001\u0000\u0000\u0000\u0192\u0a1e\u0001\u0000\u0000\u0000\u0194"+
		"\u0a20\u0001\u0000\u0000\u0000\u0196\u0a25\u0001\u0000\u0000\u0000\u0198"+
		"\u0a30\u0001\u0000\u0000\u0000\u019a\u0a3c\u0001\u0000\u0000\u0000\u019c"+
		"\u0a3e\u0001\u0000\u0000\u0000\u019e\u0a48\u0001\u0000\u0000\u0000\u01a0"+
		"\u0a4e\u0001\u0000\u0000\u0000\u01a2\u0a57\u0001\u0000\u0000\u0000\u01a4"+
		"\u0a62\u0001\u0000\u0000\u0000\u01a6\u0a65\u0001\u0000\u0000\u0000\u01a8"+
		"\u0a77\u0001\u0000\u0000\u0000\u01aa\u0a7c\u0001\u0000\u0000\u0000\u01ac"+
		"\u0a86\u0001\u0000\u0000\u0000\u01ae\u0a8e\u0001\u0000\u0000\u0000\u01b0"+
		"\u0a95\u0001\u0000\u0000\u0000\u01b2\u0a9d\u0001\u0000\u0000\u0000\u01b4"+
		"\u0a9f\u0001\u0000\u0000\u0000\u01b6\u0aa8\u0001\u0000\u0000\u0000\u01b8"+
		"\u0aaa\u0001\u0000\u0000\u0000\u01ba\u0ab7\u0001\u0000\u0000\u0000\u01bc"+
		"\u0ac0\u0001\u0000\u0000\u0000\u01be\u0ac2\u0001\u0000\u0000\u0000\u01c0"+
		"\u0ac5\u0001\u0000\u0000\u0000\u01c2\u0acb\u0001\u0000\u0000\u0000\u01c4"+
		"\u0ace\u0001\u0000\u0000\u0000\u01c6\u0ad0\u0001\u0000\u0000\u0000\u01c8"+
		"\u0adc\u0001\u0000\u0000\u0000\u01ca\u0ade\u0001\u0000\u0000\u0000\u01cc"+
		"\u0b02\u0001\u0000\u0000\u0000\u01ce\u0b04\u0001\u0000\u0000\u0000\u01d0"+
		"\u0b0a\u0001\u0000\u0000\u0000\u01d2\u0b0c\u0001\u0000\u0000\u0000\u01d4"+
		"\u0b37\u0001\u0000\u0000\u0000\u01d6\u0b39\u0001\u0000\u0000\u0000\u01d8"+
		"\u0b3f\u0001\u0000\u0000\u0000\u01da\u0b41\u0001\u0000\u0000\u0000\u01dc"+
		"\u0b54\u0001\u0000\u0000\u0000\u01de\u0b56\u0001\u0000\u0000\u0000\u01e0"+
		"\u0b5c\u0001\u0000\u0000\u0000\u01e2\u0b5e\u0001\u0000\u0000\u0000\u01e4"+
		"\u0b6f\u0001\u0000\u0000\u0000\u01e6\u0b71\u0001\u0000\u0000\u0000\u01e8"+
		"\u0b77\u0001\u0000\u0000\u0000\u01ea\u0b79\u0001\u0000\u0000\u0000\u01ec"+
		"\u0b89\u0001\u0000\u0000\u0000\u01ee\u0b8b\u0001\u0000\u0000\u0000\u01f0"+
		"\u0b91\u0001\u0000\u0000\u0000\u01f2\u0b93\u0001\u0000\u0000\u0000\u01f4"+
		"\u0bac\u0001\u0000\u0000\u0000\u01f6\u0bae\u0001\u0000\u0000\u0000\u01f8"+
		"\u0bb4\u0001\u0000\u0000\u0000\u01fa\u0bb6\u0001\u0000\u0000\u0000\u01fc"+
		"\u0bd6\u0001\u0000\u0000\u0000\u01fe\u0bd8\u0001\u0000\u0000\u0000\u0200"+
		"\u0bde\u0001\u0000\u0000\u0000\u0202\u0be0\u0001\u0000\u0000\u0000\u0204"+
		"\u0bef\u0001\u0000\u0000\u0000\u0206\u0bf1\u0001\u0000\u0000\u0000\u0208"+
		"\u0bf7\u0001\u0000\u0000\u0000\u020a\u0bf9\u0001\u0000\u0000\u0000\u020c"+
		"\u0c09\u0001\u0000\u0000\u0000\u020e\u0c0b\u0001\u0000\u0000\u0000\u0210"+
		"\u0c11\u0001\u0000\u0000\u0000\u0212\u0c13\u0001\u0000\u0000\u0000\u0214"+
		"\u0c20\u0001\u0000\u0000\u0000\u0216\u0c22\u0001\u0000\u0000\u0000\u0218"+
		"\u0c28\u0001\u0000\u0000\u0000\u021a\u0c2a\u0001\u0000\u0000\u0000\u021c"+
		"\u0c3a\u0001\u0000\u0000\u0000\u021e\u0c3c\u0001\u0000\u0000\u0000\u0220"+
		"\u0c42\u0001\u0000\u0000\u0000\u0222\u0c44\u0001\u0000\u0000\u0000\u0224"+
		"\u0c57\u0001\u0000\u0000\u0000\u0226\u0c59\u0001\u0000\u0000\u0000\u0228"+
		"\u0c5f\u0001\u0000\u0000\u0000\u022a\u0c61\u0001\u0000\u0000\u0000\u022c"+
		"\u0c70\u0001\u0000\u0000\u0000\u022e\u0c72\u0001\u0000\u0000\u0000\u0230"+
		"\u0c78\u0001\u0000\u0000\u0000\u0232\u0c7a\u0001\u0000\u0000\u0000\u0234"+
		"\u0c8f\u0001\u0000\u0000\u0000\u0236\u0c91\u0001\u0000\u0000\u0000\u0238"+
		"\u0c97\u0001\u0000\u0000\u0000\u023a\u0c99\u0001\u0000\u0000\u0000\u023c"+
		"\u0cc0\u0001\u0000\u0000\u0000\u023e\u0cc2\u0001\u0000\u0000\u0000\u0240"+
		"\u0cc8\u0001\u0000\u0000\u0000\u0242\u0cca\u0001\u0000\u0000\u0000\u0244"+
		"\u0cd9\u0001\u0000\u0000\u0000\u0246\u0cdb\u0001\u0000\u0000\u0000\u0248"+
		"\u0ce1\u0001\u0000\u0000\u0000\u024a\u0ce3\u0001\u0000\u0000\u0000\u024c"+
		"\u0cf2\u0001\u0000\u0000\u0000\u024e\u0cf4\u0001\u0000\u0000\u0000\u0250"+
		"\u0cfa\u0001\u0000\u0000\u0000\u0252\u0cfc\u0001\u0000\u0000\u0000\u0254"+
		"\u0d0c\u0001\u0000\u0000\u0000\u0256\u0d0e\u0001\u0000\u0000\u0000\u0258"+
		"\u0d14\u0001\u0000\u0000\u0000\u025a\u0d16\u0001\u0000\u0000\u0000\u025c"+
		"\u0d2a\u0001\u0000\u0000\u0000\u025e\u0d2c\u0001\u0000\u0000\u0000\u0260"+
		"\u0d32\u0001\u0000\u0000\u0000\u0262\u0d34\u0001\u0000\u0000\u0000\u0264"+
		"\u0d41\u0001\u0000\u0000\u0000\u0266\u0d43\u0001\u0000\u0000\u0000\u0268"+
		"\u0d49\u0001\u0000\u0000\u0000\u026a\u0d4b\u0001\u0000\u0000\u0000\u026c"+
		"\u0d5a\u0001\u0000\u0000\u0000\u026e\u0d5c\u0001\u0000\u0000\u0000\u0270"+
		"\u0d62\u0001\u0000\u0000\u0000\u0272\u0d64\u0001\u0000\u0000\u0000\u0274"+
		"\u0d79\u0001\u0000\u0000\u0000\u0276\u0d7b\u0001\u0000\u0000\u0000\u0278"+
		"\u0d81\u0001\u0000\u0000\u0000\u027a\u0d83\u0001\u0000\u0000\u0000\u027c"+
		"\u0d95\u0001\u0000\u0000\u0000\u027e\u0d97\u0001\u0000\u0000\u0000\u0280"+
		"\u0d9d\u0001\u0000\u0000\u0000\u0282\u0d9f\u0001\u0000\u0000\u0000\u0284"+
		"\u0daf\u0001\u0000\u0000\u0000\u0286\u0db1\u0001\u0000\u0000\u0000\u0288"+
		"\u0db7\u0001\u0000\u0000\u0000\u028a\u0db9\u0001\u0000\u0000\u0000\u028c"+
		"\u0dc9\u0001\u0000\u0000\u0000\u028e\u0dcb\u0001\u0000\u0000\u0000\u0290"+
		"\u0dd1\u0001\u0000\u0000\u0000\u0292\u0dd3\u0001\u0000\u0000\u0000\u0294"+
		"\u0de3\u0001\u0000\u0000\u0000\u0296\u0de5\u0001\u0000\u0000\u0000\u0298"+
		"\u0de8\u0001\u0000\u0000\u0000\u029a\u0deb\u0001\u0000\u0000\u0000\u029c"+
		"\u0dee\u0001\u0000\u0000\u0000\u029e\u0df1\u0001\u0000\u0000\u0000\u02a0"+
		"\u0df4\u0001\u0000\u0000\u0000\u02a2\u0df7\u0001\u0000\u0000\u0000\u02a4"+
		"\u0dfa\u0001\u0000\u0000\u0000\u02a6\u0dfd\u0001\u0000\u0000\u0000\u02a8"+
		"\u0e00\u0001\u0000\u0000\u0000\u02aa\u0e03\u0001\u0000\u0000\u0000\u02ac"+
		"\u0e06\u0001\u0000\u0000\u0000\u02ae\u0e0b\u0001\u0000\u0000\u0000\u02b0"+
		"\u0e0d\u0001\u0000\u0000\u0000\u02b2\u0e10\u0001\u0000\u0000\u0000\u02b4"+
		"\u0e13\u0001\u0000\u0000\u0000\u02b6\u0e16\u0001\u0000\u0000\u0000\u02b8"+
		"\u0e19\u0001\u0000\u0000\u0000\u02ba\u0e1c\u0001\u0000\u0000\u0000\u02bc"+
		"\u0e1f\u0001\u0000\u0000\u0000\u02be\u0e22\u0001\u0000\u0000\u0000\u02c0"+
		"\u0e24\u0001\u0000\u0000\u0000\u02c2\u0e31\u0001\u0000\u0000\u0000\u02c4"+
		"\u0e35\u0001\u0000\u0000\u0000\u02c6\u0e39\u0001\u0000\u0000\u0000\u02c8"+
		"\u0e3d\u0001\u0000\u0000\u0000\u02ca\u0e41\u0001\u0000\u0000\u0000\u02cc"+
		"\u0e43\u0001\u0000\u0000\u0000\u02ce\u0e47\u0001\u0000\u0000\u0000\u02d0"+
		"\u0e4b\u0001\u0000\u0000\u0000\u02d2\u0e51\u0001\u0000\u0000\u0000\u02d4"+
		"\u0e54\u0001\u0000\u0000\u0000\u02d6\u0e56\u0001\u0000\u0000\u0000\u02d8"+
		"\u0e60\u0001\u0000\u0000\u0000\u02da\u0e6b\u0001\u0000\u0000\u0000\u02dc"+
		"\u0e6f\u0001\u0000\u0000\u0000\u02de\u0e71\u0001\u0000\u0000\u0000\u02e0"+
		"\u0e7c\u0001\u0000\u0000\u0000\u02e2\u0e7f\u0001\u0000\u0000\u0000\u02e4"+
		"\u0e8c\u0001\u0000\u0000\u0000\u02e6\u0e94\u0001\u0000\u0000\u0000\u02e8"+
		"\u0e96\u0001\u0000\u0000\u0000\u02ea\u0eae\u0001\u0000\u0000\u0000\u02ec"+
		"\u0eb0\u0001\u0000\u0000\u0000\u02ee\u0eb3\u0001\u0000\u0000\u0000\u02f0"+
		"\u0ede\u0001\u0000\u0000\u0000\u02f2\u0ee1\u0001\u0000\u0000\u0000\u02f4"+
		"\u0ee9\u0001\u0000\u0000\u0000\u02f6\u0ef3\u0001\u0000\u0000\u0000\u02f8"+
		"\u0ef6\u0001\u0000\u0000\u0000\u02fa\u0ef8\u0001\u0000\u0000\u0000\u02fc"+
		"\u0efb\u0001\u0000\u0000\u0000\u02fe\u0efe\u0001\u0000\u0000\u0000\u0300"+
		"\u0f00\u0001\u0000\u0000\u0000\u0302\u0f17\u0001\u0000\u0000\u0000\u0304"+
		"\u0f1b\u0001\u0000\u0000\u0000\u0306\u0f1e\u0001\u0000\u0000\u0000\u0308"+
		"\u0f20\u0001\u0000\u0000\u0000\u030a\u0f2a\u0001\u0000\u0000\u0000\u030c"+
		"\u0f2c\u0001\u0000\u0000\u0000\u030e\u0f2f\u0001\u0000\u0000\u0000\u0310"+
		"\u0f31\u0001\u0000\u0000\u0000\u0312\u0f6f\u0001\u0000\u0000\u0000\u0314"+
		"\u0f72\u0001\u0000\u0000\u0000\u0316\u0f76\u0001\u0000\u0000\u0000\u0318"+
		"\u0f78\u0001\u0000\u0000\u0000\u031a\u0f83\u0001\u0000\u0000\u0000\u031c"+
		"\u0f85\u0001\u0000\u0000\u0000\u031e\u0f88\u0001\u0000\u0000\u0000\u0320"+
		"\u0f8a\u0001\u0000\u0000\u0000\u0322\u0f8d\u0001\u0000\u0000\u0000\u0324"+
		"\u0f8f\u0001\u0000\u0000\u0000\u0326\u0f95\u0001\u0000\u0000\u0000\u0328"+
		"\u0f97\u0001\u0000\u0000\u0000\u032a\u0fa1\u0001\u0000\u0000\u0000\u032c"+
		"\u0fa7\u0001\u0000\u0000\u0000\u032e\u0fa9\u0001\u0000\u0000\u0000\u0330"+
		"\u0fb3\u0001\u0000\u0000\u0000\u0332\u0fb6\u0001\u0000\u0000\u0000\u0334"+
		"\u0fb8\u0001\u0000\u0000\u0000\u0336\u0fd5\u0001\u0000\u0000\u0000\u0338"+
		"\u0fdd\u0001\u0000\u0000\u0000\u033a\u0fdf\u0001\u0000\u0000\u0000\u033c"+
		"\u0ff1\u0001\u0000\u0000\u0000\u033e\u0ff4\u0001\u0000\u0000\u0000\u0340"+
		"\u0ff6\u0001\u0000\u0000\u0000\u0342\u0ff9\u0001\u0000\u0000\u0000\u0344"+
		"\u0ffb\u0001\u0000\u0000\u0000\u0346\u100d\u0001\u0000\u0000\u0000\u0348"+
		"\u100f\u0001\u0000\u0000\u0000\u034a\u1012\u0001\u0000\u0000\u0000\u034c"+
		"\u101b\u0001\u0000\u0000\u0000\u034e\u1023\u0001\u0000\u0000\u0000\u0350"+
		"\u1025\u0001\u0000\u0000\u0000\u0352\u1027\u0001\u0000\u0000\u0000\u0354"+
		"\u1029\u0001\u0000\u0000\u0000\u0356\u0359\u0003\u010e\u0087\u0000\u0357"+
		"\u0359\u0003\u0190\u00c8\u0000\u0358\u0356\u0001\u0000\u0000\u0000\u0358"+
		"\u0357\u0001\u0000\u0000\u0000\u0359\u0001\u0001\u0000\u0000\u0000\u035a"+
		"\u035b\u0003\u0004\u0002\u0000\u035b\u0003\u0001\u0000\u0000\u0000\u035c"+
		"\u035e\u0003\u0006\u0003\u0000\u035d\u035c\u0001\u0000\u0000\u0000\u035d"+
		"\u035e\u0001\u0000\u0000\u0000\u035e\u0005\u0001\u0000\u0000\u0000\u035f"+
		"\u0360\u0006\u0003\uffff\uffff\u0000\u0360\u0361\u0003\b\u0004\u0000\u0361"+
		"\u0366\u0001\u0000\u0000\u0000\u0362\u0363\n\u0001\u0000\u0000\u0363\u0365"+
		"\u0003\b\u0004\u0000\u0364\u0362\u0001\u0000\u0000\u0000\u0365\u0368\u0001"+
		"\u0000\u0000\u0000\u0366\u0364\u0001\u0000\u0000\u0000\u0366\u0367\u0001"+
		"\u0000\u0000\u0000\u0367\u0007\u0001\u0000\u0000\u0000\u0368\u0366\u0001"+
		"\u0000\u0000\u0000\u0369\u0379\u0003\n\u0005\u0000\u036a\u0379\u0003\f"+
		"\u0006\u0000\u036b\u0379\u0003\u000e\u0007\u0000\u036c\u0379\u0003\u0010"+
		"\b\u0000\u036d\u0379\u0003\u0012\t\u0000\u036e\u0379\u0003\u0016\u000b"+
		"\u0000\u036f\u0379\u0003\u0018\f\u0000\u0370\u0379\u0003$\u0012\u0000"+
		"\u0371\u0379\u0003(\u0014\u0000\u0372\u0379\u0003*\u0015\u0000\u0373\u0379"+
		"\u00038\u001c\u0000\u0374\u0379\u0003:\u001d\u0000\u0375\u0379\u0003B"+
		"!\u0000\u0376\u0379\u0003J%\u0000\u0377\u0379\u0003L&\u0000\u0378\u0369"+
		"\u0001\u0000\u0000\u0000\u0378\u036a\u0001\u0000\u0000\u0000\u0378\u036b"+
		"\u0001\u0000\u0000\u0000\u0378\u036c\u0001\u0000\u0000\u0000\u0378\u036d"+
		"\u0001\u0000\u0000\u0000\u0378\u036e\u0001\u0000\u0000\u0000\u0378\u036f"+
		"\u0001\u0000\u0000\u0000\u0378\u0370\u0001\u0000\u0000\u0000\u0378\u0371"+
		"\u0001\u0000\u0000\u0000\u0378\u0372\u0001\u0000\u0000\u0000\u0378\u0373"+
		"\u0001\u0000\u0000\u0000\u0378\u0374\u0001\u0000\u0000\u0000\u0378\u0375"+
		"\u0001\u0000\u0000\u0000\u0378\u0376\u0001\u0000\u0000\u0000\u0378\u0377"+
		"\u0001\u0000\u0000\u0000\u0379\t\u0001\u0000\u0000\u0000\u037a\u037b\u0005"+
		"\u0144\u0000\u0000\u037b\u037c\u0005\u0002\u0000\u0000\u037c\u037d\u0003"+
		"\u00a0P\u0000\u037d\u000b\u0001\u0000\u0000\u0000\u037e\u037f\u0005\u0159"+
		"\u0000\u0000\u037f\u0380\u0005Y\u0000\u0000\u0380\u0381\u0005\u0002\u0000"+
		"\u0000\u0381\u0387\u0003\u00a0P\u0000\u0382\u0383\u0005\u0159\u0000\u0000"+
		"\u0383\u0384\u0005\u0160\u0000\u0000\u0384\u0385\u0005\u0002\u0000\u0000"+
		"\u0385\u0387\u0003\u00a0P\u0000\u0386\u037e\u0001\u0000\u0000\u0000\u0386"+
		"\u0382\u0001\u0000\u0000\u0000\u0387\r\u0001\u0000\u0000\u0000\u0388\u0389"+
		"\u0005\u00e6\u0000\u0000\u0389\u038a\u0005/\u0000\u0000\u038a\u038b\u0003"+
		"\u00a0P\u0000\u038b\u000f\u0001\u0000\u0000\u0000\u038c\u038d\u0003P("+
		"\u0000\u038d\u038e\u0005\u0002\u0000\u0000\u038e\u038f\u0005\u0164\u0000"+
		"\u0000\u038f\u0390\u0003|>\u0000\u0390\u0397\u0001\u0000\u0000\u0000\u0391"+
		"\u0392\u0003P(\u0000\u0392\u0393\u0005\u0002\u0000\u0000\u0393\u0394\u0005"+
		"\u0164\u0000\u0000\u0394\u0395\u0003\\.\u0000\u0395\u0397\u0001\u0000"+
		"\u0000\u0000\u0396\u038c\u0001\u0000\u0000\u0000\u0396\u0391\u0001\u0000"+
		"\u0000\u0000\u0397\u0011\u0001\u0000\u0000\u0000\u0398\u0399\u0003V+\u0000"+
		"\u0399\u039a\u0005\u0002\u0000\u0000\u039a\u039b\u0005P\u0000\u0000\u039b"+
		"\u039c\u0003\u0014\n\u0000\u039c\u0013\u0001\u0000\u0000\u0000\u039d\u039e"+
		"\u0007\u0000\u0000\u0000\u039e\u0015\u0001\u0000\u0000\u0000\u039f\u03a0"+
		"\u0003N\'\u0000\u03a0\u03a1\u0005\u0002\u0000\u0000\u03a1\u03a2\u0003"+
		"\u0324\u0192\u0000\u03a2\u03a4\u0003\u033e\u019f\u0000\u03a3\u03a5\u0003"+
		"\u0354\u01aa\u0000\u03a4\u03a3\u0001\u0000\u0000\u0000\u03a4\u03a5\u0001"+
		"\u0000\u0000\u0000\u03a5\u03a6\u0001\u0000\u0000\u0000\u03a6\u03a8\u0003"+
		"\u02f8\u017c\u0000\u03a7\u03a9\u0003\u034e\u01a7\u0000\u03a8\u03a7\u0001"+
		"\u0000\u0000\u0000\u03a8\u03a9\u0001\u0000\u0000\u0000\u03a9\u03ab\u0001"+
		"\u0000\u0000\u0000\u03aa\u03ac\u0003\u0352\u01a9\u0000\u03ab\u03aa\u0001"+
		"\u0000\u0000\u0000\u03ab\u03ac\u0001\u0000\u0000\u0000\u03ac\u03ad\u0001"+
		"\u0000\u0000\u0000\u03ad\u03ae\u0003j5\u0000\u03ae\u03af\u0003\u001a\r"+
		"\u0000\u03af\u03b0\u0003\u001c\u000e\u0000\u03b0\u03b1\u0003\\.\u0000"+
		"\u03b1\u03b2\u0003\u001e\u000f\u0000\u03b2\u03b3\u0003\u030e\u0187\u0000"+
		"\u03b3\u0017\u0001\u0000\u0000\u0000\u03b4\u03b5\u0003N\'\u0000\u03b5"+
		"\u03b6\u0005\u0002\u0000\u0000\u03b6\u03b7\u0003\u031e\u018f\u0000\u03b7"+
		"\u03b9\u0003\u033e\u019f\u0000\u03b8\u03ba\u0003\u0354\u01aa\u0000\u03b9"+
		"\u03b8\u0001\u0000\u0000\u0000\u03b9\u03ba\u0001\u0000\u0000\u0000\u03ba"+
		"\u03bb\u0001\u0000\u0000\u0000\u03bb\u03bd\u0003\u02f8\u017c\u0000\u03bc"+
		"\u03be\u0003\u034e\u01a7\u0000\u03bd\u03bc\u0001\u0000\u0000\u0000\u03bd"+
		"\u03be\u0001\u0000\u0000\u0000\u03be\u03c0\u0001\u0000\u0000\u0000\u03bf"+
		"\u03c1\u0003\u0352\u01a9\u0000\u03c0\u03bf\u0001\u0000\u0000\u0000\u03c0"+
		"\u03c1\u0001\u0000\u0000\u0000\u03c1\u03c2\u0001\u0000\u0000\u0000\u03c2"+
		"\u03c3\u0003j5\u0000\u03c3\u03c4\u0003\u001a\r\u0000\u03c4\u03c5\u0003"+
		"\u001c\u000e\u0000\u03c5\u03c6\u0003\\.\u0000\u03c6\u03c7\u0003\u008a"+
		"E\u0000\u03c7\u03c8\u0003\u001e\u000f\u0000\u03c8\u03c9\u0003\u030e\u0187"+
		"\u0000\u03c9\u0019\u0001\u0000\u0000\u0000\u03ca\u03cc\u0005\u008e\u0000"+
		"\u0000\u03cb\u03ca\u0001\u0000\u0000\u0000\u03cb\u03cc\u0001\u0000\u0000"+
		"\u0000\u03cc\u001b\u0001\u0000\u0000\u0000\u03cd\u03ce\u0007\u0001\u0000"+
		"\u0000\u03ce\u001d\u0001\u0000\u0000\u0000\u03cf\u03d0\u0005\u0005\u0000"+
		"\u0000\u03d0\u03d2\u0003 \u0010\u0000\u03d1\u03cf\u0001\u0000\u0000\u0000"+
		"\u03d1\u03d2\u0001\u0000\u0000\u0000\u03d2\u001f\u0001\u0000\u0000\u0000"+
		"\u03d3\u03d4\u0006\u0010\uffff\uffff\u0000\u03d4\u03d5\u0003\"\u0011\u0000"+
		"\u03d5\u03db\u0001\u0000\u0000\u0000\u03d6\u03d7\n\u0001\u0000\u0000\u03d7"+
		"\u03d8\u0005\u0005\u0000\u0000\u03d8\u03da\u0003\"\u0011\u0000\u03d9\u03d6"+
		"\u0001\u0000\u0000\u0000\u03da\u03dd\u0001\u0000\u0000\u0000\u03db\u03d9"+
		"\u0001\u0000\u0000\u0000\u03db\u03dc\u0001\u0000\u0000\u0000\u03dc!\u0001"+
		"\u0000\u0000\u0000\u03dd\u03db\u0001\u0000\u0000\u0000\u03de\u03e3\u0003"+
		"\u0348\u01a4\u0000\u03df\u03e3\u0003\u02f4\u017a\u0000\u03e0\u03e3\u0003"+
		"\u02e2\u0171\u0000\u03e1\u03e3\u0003\u01c0\u00e0\u0000\u03e2\u03de\u0001"+
		"\u0000\u0000\u0000\u03e2\u03df\u0001\u0000\u0000\u0000\u03e2\u03e0\u0001"+
		"\u0000\u0000\u0000\u03e2\u03e1\u0001\u0000\u0000\u0000\u03e3#\u0001\u0000"+
		"\u0000\u0000\u03e4\u03e5\u0003N\'\u0000\u03e5\u03e6\u0005\u0002\u0000"+
		"\u0000\u03e6\u03e7\u0003\u0324\u0192\u0000\u03e7\u03e9\u0003\u033e\u019f"+
		"\u0000\u03e8\u03ea\u0003\u0354\u01aa\u0000\u03e9\u03e8\u0001\u0000\u0000"+
		"\u0000\u03e9\u03ea\u0001\u0000\u0000\u0000\u03ea\u03eb\u0001\u0000\u0000"+
		"\u0000\u03eb\u03ed\u0003\u02f8\u017c\u0000\u03ec\u03ee\u0003\u034e\u01a7"+
		"\u0000\u03ed\u03ec\u0001\u0000\u0000\u0000\u03ed\u03ee\u0001\u0000\u0000"+
		"\u0000\u03ee\u03f0\u0001\u0000\u0000\u0000\u03ef\u03f1\u0003\u0352\u01a9"+
		"\u0000\u03f0\u03ef\u0001\u0000\u0000\u0000\u03f0\u03f1\u0001\u0000\u0000"+
		"\u0000\u03f1\u03f2\u0001\u0000\u0000\u0000\u03f2\u03f3\u0003&\u0013\u0000"+
		"\u03f3\u03f4\u0003\\.\u0000\u03f4\u03f5\u0005\u0005\u0000\u0000\u03f5"+
		"\u03f6\u0003\\.\u0000\u03f6\u03f7\u0003\u008aE\u0000\u03f7\u040d\u0001"+
		"\u0000\u0000\u0000\u03f8\u03f9\u0003N\'\u0000\u03f9\u03fa\u0005\u0002"+
		"\u0000\u0000\u03fa\u03fb\u0003\u031e\u018f\u0000\u03fb\u03fd\u0003\u033e"+
		"\u019f\u0000\u03fc\u03fe\u0003\u0354\u01aa\u0000\u03fd\u03fc\u0001\u0000"+
		"\u0000\u0000\u03fd\u03fe\u0001\u0000\u0000\u0000\u03fe\u03ff\u0001\u0000"+
		"\u0000\u0000\u03ff\u0401\u0003\u02f8\u017c\u0000\u0400\u0402\u0003\u034e"+
		"\u01a7\u0000\u0401\u0400\u0001\u0000\u0000\u0000\u0401\u0402\u0001\u0000"+
		"\u0000\u0000\u0402\u0404\u0001\u0000\u0000\u0000\u0403\u0405\u0003\u0352"+
		"\u01a9\u0000\u0404\u0403\u0001\u0000\u0000\u0000\u0404\u0405\u0001\u0000"+
		"\u0000\u0000\u0405\u0406\u0001\u0000\u0000\u0000\u0406\u0407\u0003&\u0013"+
		"\u0000\u0407\u0408\u0003\\.\u0000\u0408\u0409\u0005\u0005\u0000\u0000"+
		"\u0409\u040a\u0003\\.\u0000\u040a\u040b\u0003\u008aE\u0000\u040b\u040d"+
		"\u0001\u0000\u0000\u0000\u040c\u03e4\u0001\u0000\u0000\u0000\u040c\u03f8"+
		"\u0001\u0000\u0000\u0000\u040d%\u0001\u0000\u0000\u0000\u040e\u040f\u0007"+
		"\u0002\u0000\u0000\u040f\'\u0001\u0000\u0000\u0000\u0410\u0411\u0005\\"+
		"\u0000\u0000\u0411\u0412\u0003\u01c4\u00e2\u0000\u0412\u0413\u0003\u0322"+
		"\u0191\u0000\u0413\u0414\u0003,\u0016\u0000\u0414)\u0001\u0000\u0000\u0000"+
		"\u0415\u0416\u0005^\u0000\u0000\u0416\u0417\u0003\u031e\u018f\u0000\u0417"+
		"\u0418\u0003,\u0016\u0000\u0418\u0419\u0003\u01c4\u00e2\u0000\u0419\u041a"+
		"\u00036\u001b\u0000\u041a+\u0001\u0000\u0000\u0000\u041b\u041d\u0003\u033e"+
		"\u019f\u0000\u041c\u041e\u0003\u0354\u01aa\u0000\u041d\u041c\u0001\u0000"+
		"\u0000\u0000\u041d\u041e\u0001\u0000\u0000\u0000\u041e\u041f\u0001\u0000"+
		"\u0000\u0000\u041f\u0420\u0003\u02f8\u017c\u0000\u0420\u0421\u0003\u02ee"+
		"\u0177\u0000\u0421\u0422\u0003\u0342\u01a1\u0000\u0422\u0423\u0003\\."+
		"\u0000\u0423\u0424\u0003N\'\u0000\u0424\u0425\u0005\b\u0000\u0000\u0425"+
		"\u0426\u0003\u0338\u019c\u0000\u0426\u0428\u0005\t\u0000\u0000\u0427\u0429"+
		"\u0003\u0352\u01a9\u0000\u0428\u0427\u0001\u0000\u0000\u0000\u0428\u0429"+
		"\u0001\u0000\u0000\u0000\u0429\u042a\u0001\u0000\u0000\u0000\u042a\u042c"+
		"\u0003\u030e\u0187\u0000\u042b\u042d\u0003\u0348\u01a4\u0000\u042c\u042b"+
		"\u0001\u0000\u0000\u0000\u042c\u042d\u0001\u0000\u0000\u0000\u042d\u042e"+
		"\u0001\u0000\u0000\u0000\u042e\u042f\u0003\u02f2\u0179\u0000\u042f\u0430"+
		"\u0003.\u0017\u0000\u0430\u0431\u00030\u0018\u0000\u0431\u0432\u00032"+
		"\u0019\u0000\u0432\u0433\u00034\u001a\u0000\u0433-\u0001\u0000\u0000\u0000"+
		"\u0434\u0435\u0005\u00a9\u0000\u0000\u0435\u0437\u0003\u00a0P\u0000\u0436"+
		"\u0434\u0001\u0000\u0000\u0000\u0436\u0437\u0001\u0000\u0000\u0000\u0437"+
		"/\u0001\u0000\u0000\u0000\u0438\u0439\u0005\u0117\u0000\u0000\u0439\u043a"+
		"\u0003\\.\u0000\u043a\u043b\u0003\u008aE\u0000\u043b\u043d\u0001\u0000"+
		"\u0000\u0000\u043c\u0438\u0001\u0000\u0000\u0000\u043c\u043d\u0001\u0000"+
		"\u0000\u0000\u043d1\u0001\u0000\u0000\u0000\u043e\u043f\u0005\u011c\u0000"+
		"\u0000\u043f\u0440\u0003\\.\u0000\u0440\u0441\u0003\u008aE\u0000\u0441"+
		"\u0443\u0001\u0000\u0000\u0000\u0442\u043e\u0001\u0000\u0000\u0000\u0442"+
		"\u0443\u0001\u0000\u0000\u0000\u04433\u0001\u0000\u0000\u0000\u0444\u0445"+
		"\u0005\u0114\u0000\u0000\u0445\u0446\u0003\\.\u0000\u0446\u0447\u0003"+
		"\u008aE\u0000\u0447\u0449\u0001\u0000\u0000\u0000\u0448\u0444\u0001\u0000"+
		"\u0000\u0000\u0448\u0449\u0001\u0000\u0000\u0000\u04495\u0001\u0000\u0000"+
		"\u0000\u044a\u044b\u0005\f\u0000\u0000\u044b\u044c\u0003\u0104\u0082\u0000"+
		"\u044c\u044d\u0003F#\u0000\u044d\u044e\u0005\r\u0000\u0000\u044e7\u0001"+
		"\u0000\u0000\u0000\u044f\u0450\u00053\u0000\u0000\u0450\u0451\u0003T*"+
		"\u0000\u0451\u0452\u0005\u0002\u0000\u0000\u0452\u0453\u0005\f\u0000\u0000"+
		"\u0453\u0454\u0003\u030e\u0187\u0000\u0454\u0455\u0005\r\u0000\u0000\u0455"+
		"9\u0001\u0000\u0000\u0000\u0456\u0457\u0003X,\u0000\u0457\u0458\u0005"+
		"\u0002\u0000\u0000\u0458\u0459\u0005\u0006\u0000\u0000\u0459\u045a\u0005"+
		"\f\u0000\u0000\u045a\u045b\u0003<\u001e\u0000\u045b\u045c\u0005\r\u0000"+
		"\u0000\u045c;\u0001\u0000\u0000\u0000\u045d\u045f\u0003>\u001f\u0000\u045e"+
		"\u045d\u0001\u0000\u0000\u0000\u045e\u045f\u0001\u0000\u0000\u0000\u045f"+
		"=\u0001\u0000\u0000\u0000\u0460\u0461\u0006\u001f\uffff\uffff\u0000\u0461"+
		"\u0462\u0003@ \u0000\u0462\u0468\u0001\u0000\u0000\u0000\u0463\u0464\n"+
		"\u0001\u0000\u0000\u0464\u0465\u0005\u0005\u0000\u0000\u0465\u0467\u0003"+
		"@ \u0000\u0466\u0463\u0001\u0000\u0000\u0000\u0467\u046a\u0001\u0000\u0000"+
		"\u0000\u0468\u0466\u0001\u0000\u0000\u0000\u0468\u0469\u0001\u0000\u0000"+
		"\u0000\u0469?\u0001\u0000\u0000\u0000\u046a\u0468\u0001\u0000\u0000\u0000"+
		"\u046b\u046e\u0003Z-\u0000\u046c\u046e\u0003\u025e\u012f\u0000\u046d\u046b"+
		"\u0001\u0000\u0000\u0000\u046d\u046c\u0001\u0000\u0000\u0000\u046eA\u0001"+
		"\u0000\u0000\u0000\u046f\u0470\u0003Z-\u0000\u0470\u0471\u0005\u0002\u0000"+
		"\u0000\u0471\u0472\u0003D\"\u0000\u0472\u0473\u0003\u01b4\u00da\u0000"+
		"\u0473\u047a\u0001\u0000\u0000\u0000\u0474\u0475\u0003Z-\u0000\u0475\u0476"+
		"\u0005\u0002\u0000\u0000\u0476\u0477\u0003D\"\u0000\u0477\u0478\u0003"+
		"\u01cc\u00e6\u0000\u0478\u047a\u0001\u0000\u0000\u0000\u0479\u046f\u0001"+
		"\u0000\u0000\u0000\u0479\u0474\u0001\u0000\u0000\u0000\u047aC\u0001\u0000"+
		"\u0000\u0000\u047b\u047d\u0005v\u0000\u0000\u047c\u047b\u0001\u0000\u0000"+
		"\u0000\u047c\u047d\u0001\u0000\u0000\u0000\u047dE\u0001\u0000\u0000\u0000"+
		"\u047e\u0480\u0003H$\u0000\u047f\u047e\u0001\u0000\u0000\u0000\u047f\u0480"+
		"\u0001\u0000\u0000\u0000\u0480G\u0001\u0000\u0000\u0000\u0481\u0482\u0006"+
		"$\uffff\uffff\u0000\u0482\u0483\u0003J%\u0000\u0483\u0488\u0001\u0000"+
		"\u0000\u0000\u0484\u0485\n\u0001\u0000\u0000\u0485\u0487\u0003J%\u0000"+
		"\u0486\u0484\u0001\u0000\u0000\u0000\u0487\u048a\u0001\u0000\u0000\u0000"+
		"\u0488\u0486\u0001\u0000\u0000\u0000\u0488\u0489\u0001\u0000\u0000\u0000"+
		"\u0489I\u0001\u0000\u0000\u0000\u048a\u0488\u0001\u0000\u0000\u0000\u048b"+
		"\u048c\u0005\u0178\u0000\u0000\u048c\u048d\u0003\\.\u0000\u048d\u048e"+
		"\u0003\u0080@\u0000\u048e\u048f\u0005\u0005\u0000\u0000\u048f\u0490\u0005"+
		"\f\u0000\u0000\u0490\u0491\u0003\u0318\u018c\u0000\u0491\u0492\u0005\r"+
		"\u0000\u0000\u0492K\u0001\u0000\u0000\u0000\u0493\u0494\u0005\u0179\u0000"+
		"\u0000\u0494\u0495\u0003N\'\u0000\u0495\u0496\u0005\u0005\u0000\u0000"+
		"\u0496\u0497\u0003P(\u0000\u0497\u0498\u0005\u0005\u0000\u0000\u0498\u0499"+
		"\u0005\f\u0000\u0000\u0499\u049a\u0003\u0318\u018c\u0000\u049a\u049b\u0005"+
		"\r\u0000\u0000\u049bM\u0001\u0000\u0000\u0000\u049c\u049d\u0005\u01b7"+
		"\u0000\u0000\u049dO\u0001\u0000\u0000\u0000\u049e\u049f\u0005\u01ba\u0000"+
		"\u0000\u049fQ\u0001\u0000\u0000\u0000\u04a0\u04a1\u0005\u01bd\u0000\u0000"+
		"\u04a1S\u0001\u0000\u0000\u0000\u04a2\u04a3\u0005\u019b\u0000\u0000\u04a3"+
		"U\u0001\u0000\u0000\u0000\u04a4\u04a5\u0005\u019c\u0000\u0000\u04a5W\u0001"+
		"\u0000\u0000\u0000\u04a6\u04a7\u0005\u019d\u0000\u0000\u04a7Y\u0001\u0000"+
		"\u0000\u0000\u04a8\u04a9\u0005\u019e\u0000\u0000\u04a9[\u0001\u0000\u0000"+
		"\u0000\u04aa\u04ab\u0006.\uffff\uffff\u0000\u04ab\u04af\u0003`0\u0000"+
		"\u04ac\u04af\u0003^/\u0000\u04ad\u04af\u0003t:\u0000\u04ae\u04aa\u0001"+
		"\u0000\u0000\u0000\u04ae\u04ac\u0001\u0000\u0000\u0000\u04ae\u04ad\u0001"+
		"\u0000\u0000\u0000\u04af\u04bb\u0001\u0000\u0000\u0000\u04b0\u04b1\n\u0003"+
		"\u0000\u0000\u04b1\u04b2\u0005\b\u0000\u0000\u04b2\u04b3\u0003\u0338\u019c"+
		"\u0000\u04b3\u04b4\u0005\t\u0000\u0000\u04b4\u04ba\u0001\u0000\u0000\u0000"+
		"\u04b5\u04b6\n\u0001\u0000\u0000\u04b6\u04b7\u0003j5\u0000\u04b7\u04b8"+
		"\u0005\u000e\u0000\u0000\u04b8\u04ba\u0001\u0000\u0000\u0000\u04b9\u04b0"+
		"\u0001\u0000\u0000\u0000\u04b9\u04b5\u0001\u0000\u0000\u0000\u04ba\u04bd"+
		"\u0001\u0000\u0000\u0000\u04bb\u04b9\u0001\u0000\u0000\u0000\u04bb\u04bc"+
		"\u0001\u0000\u0000\u0000\u04bc]\u0001\u0000\u0000\u0000\u04bd\u04bb\u0001"+
		"\u0000\u0000\u0000\u04be\u04c8\u0003b1\u0000\u04bf\u04c8\u0003d2\u0000"+
		"\u04c0\u04c8\u0003n7\u0000\u04c1\u04c8\u0003p8\u0000\u04c2\u04c8\u0003"+
		"v;\u0000\u04c3\u04c8\u0003x<\u0000\u04c4\u04c8\u0003~?\u0000\u04c5\u04c8"+
		"\u0003h4\u0000\u04c6\u04c8\u0003r9\u0000\u04c7\u04be\u0001\u0000\u0000"+
		"\u0000\u04c7\u04bf\u0001\u0000\u0000\u0000\u04c7\u04c0\u0001\u0000\u0000"+
		"\u0000\u04c7\u04c1\u0001\u0000\u0000\u0000\u04c7\u04c2\u0001\u0000\u0000"+
		"\u0000\u04c7\u04c3\u0001\u0000\u0000\u0000\u04c7\u04c4\u0001\u0000\u0000"+
		"\u0000\u04c7\u04c5\u0001\u0000\u0000\u0000\u04c7\u04c6\u0001\u0000\u0000"+
		"\u0000\u04c8_\u0001\u0000\u0000\u0000\u04c9\u04ca\u0005\u0181\u0000\u0000"+
		"\u04caa\u0001\u0000\u0000\u0000\u04cb\u04cc\u0005\u01b2\u0000\u0000\u04cc"+
		"c\u0001\u0000\u0000\u0000\u04cd\u04ce\u0003f3\u0000\u04cee\u0001\u0000"+
		"\u0000\u0000\u04cf\u04d0\u0007\u0003\u0000\u0000\u04d0g\u0001\u0000\u0000"+
		"\u0000\u04d1\u04d2\u0005\u018e\u0000\u0000\u04d2i\u0001\u0000\u0000\u0000"+
		"\u04d3\u04d5\u0003l6\u0000\u04d4\u04d3\u0001\u0000\u0000\u0000\u04d4\u04d5"+
		"\u0001\u0000\u0000\u0000\u04d5k\u0001\u0000\u0000\u0000\u04d6\u04d7\u0005"+
		"\u0012\u0000\u0000\u04d7\u04d8\u0005\b\u0000\u0000\u04d8\u04d9\u0005\u01a8"+
		"\u0000\u0000\u04d9\u04da\u0005\t\u0000\u0000\u04dam\u0001\u0000\u0000"+
		"\u0000\u04db\u04dc\u0005\u0001\u0000\u0000\u04dc\u04dd\u0005\u01a8\u0000"+
		"\u0000\u04dd\u04de\u0005\u0189\u0000\u0000\u04de\u04df\u0003\\.\u0000"+
		"\u04df\u04e0\u0005\u0003\u0000\u0000\u04e0o\u0001\u0000\u0000\u0000\u04e1"+
		"\u04e2\u0005\u00d2\u0000\u0000\u04e2q\u0001\u0000\u0000\u0000\u04e3\u04e4"+
		"\u0005\u015f\u0000\u0000\u04e4s\u0001\u0000\u0000\u0000\u04e5\u04e6\u0005"+
		"\u00e3\u0000\u0000\u04e6u\u0001\u0000\u0000\u0000\u04e7\u04e8\u0005\n"+
		"\u0000\u0000\u04e8\u04e9\u0005\u01a8\u0000\u0000\u04e9\u04ea\u0005\u0189"+
		"\u0000\u0000\u04ea\u04eb\u0003\\.\u0000\u04eb\u04ec\u0005\u000b\u0000"+
		"\u0000\u04ecw\u0001\u0000\u0000\u0000\u04ed\u04ee\u0005\f\u0000\u0000"+
		"\u04ee\u04fe\u0005\r\u0000\u0000\u04ef\u04f0\u0005\f\u0000\u0000\u04f0"+
		"\u04f1\u0003z=\u0000\u04f1\u04f2\u0005\r\u0000\u0000\u04f2\u04fe\u0001"+
		"\u0000\u0000\u0000\u04f3\u04f4\u0005\u0001\u0000\u0000\u04f4\u04f5\u0005"+
		"\f\u0000\u0000\u04f5\u04f6\u0005\r\u0000\u0000\u04f6\u04fe\u0005\u0003"+
		"\u0000\u0000\u04f7\u04f8\u0005\u0001\u0000\u0000\u04f8\u04f9\u0005\f\u0000"+
		"\u0000\u04f9\u04fa\u0003z=\u0000\u04fa\u04fb\u0005\r\u0000\u0000\u04fb"+
		"\u04fc\u0005\u0003\u0000\u0000\u04fc\u04fe\u0001\u0000\u0000\u0000\u04fd"+
		"\u04ed\u0001\u0000\u0000\u0000\u04fd\u04ef\u0001\u0000\u0000\u0000\u04fd"+
		"\u04f3\u0001\u0000\u0000\u0000\u04fd\u04f7\u0001\u0000\u0000\u0000\u04fe"+
		"y\u0001\u0000\u0000\u0000\u04ff\u0500\u0006=\uffff\uffff\u0000\u0500\u0501"+
		"\u0003\\.\u0000\u0501\u0507\u0001\u0000\u0000\u0000\u0502\u0503\n\u0001"+
		"\u0000\u0000\u0503\u0504\u0005\u0005\u0000\u0000\u0504\u0506\u0003\\."+
		"\u0000\u0505\u0502\u0001\u0000\u0000\u0000\u0506\u0509\u0001\u0000\u0000"+
		"\u0000\u0507\u0505\u0001\u0000\u0000\u0000\u0507\u0508\u0001\u0000\u0000"+
		"\u0000\u0508{\u0001\u0000\u0000\u0000\u0509\u0507\u0001\u0000\u0000\u0000"+
		"\u050a\u050b\u0005\u010e\u0000\u0000\u050b}\u0001\u0000\u0000\u0000\u050c"+
		"\u050d\u0003P(\u0000\u050d\u007f\u0001\u0000\u0000\u0000\u050e\u0512\u0003"+
		"\u008aE\u0000\u050f\u0512\u0003P(\u0000\u0510\u0512\u0003\u0082A\u0000"+
		"\u0511\u050e\u0001\u0000\u0000\u0000\u0511\u050f\u0001\u0000\u0000\u0000"+
		"\u0511\u0510\u0001\u0000\u0000\u0000\u0512\u0081\u0001\u0000\u0000\u0000"+
		"\u0513\u0514\u0005/\u0000\u0000\u0514\u0515\u0003\u0084B\u0000\u0515\u0516"+
		"\u0003\u0086C\u0000\u0516\u0517\u0003\u0088D\u0000\u0517\u0518\u0003\u00a0"+
		"P\u0000\u0518\u0519\u0005\u0005\u0000\u0000\u0519\u051a\u0003\u00a0P\u0000"+
		"\u051a\u0083\u0001\u0000\u0000\u0000\u051b\u051d\u0005\u013e\u0000\u0000"+
		"\u051c\u051b\u0001\u0000\u0000\u0000\u051c\u051d\u0001\u0000\u0000\u0000"+
		"\u051d\u0085\u0001\u0000\u0000\u0000\u051e\u0520\u0005\u0018\u0000\u0000"+
		"\u051f\u051e\u0001\u0000\u0000\u0000\u051f\u0520\u0001\u0000\u0000\u0000"+
		"\u0520\u0087\u0001\u0000\u0000\u0000\u0521\u0523\u0005\u00c7\u0000\u0000"+
		"\u0522\u0521\u0001\u0000\u0000\u0000\u0522\u0523\u0001\u0000\u0000\u0000"+
		"\u0523\u0089\u0001\u0000\u0000\u0000\u0524\u0533\u0003\u008cF\u0000\u0525"+
		"\u0533\u0003\u0090H\u0000\u0526\u0533\u0003\u0094J\u0000\u0527\u0533\u0003"+
		"\u0096K\u0000\u0528\u0533\u0003\u0098L\u0000\u0529\u0533\u0003\u009aM"+
		"\u0000\u052a\u0533\u0003\u009cN\u0000\u052b\u0533\u0003\u009eO\u0000\u052c"+
		"\u0533\u0003\u00a2Q\u0000\u052d\u0533\u0003\u00a4R\u0000\u052e\u0533\u0003"+
		"N\'\u0000\u052f\u0533\u0003\u00a6S\u0000\u0530\u0533\u0003\u00a8T\u0000"+
		"\u0531\u0533\u0003\u00aaU\u0000\u0532\u0524\u0001\u0000\u0000\u0000\u0532"+
		"\u0525\u0001\u0000\u0000\u0000\u0532\u0526\u0001\u0000\u0000\u0000\u0532"+
		"\u0527\u0001\u0000\u0000\u0000\u0532\u0528\u0001\u0000\u0000\u0000\u0532"+
		"\u0529\u0001\u0000\u0000\u0000\u0532\u052a\u0001\u0000\u0000\u0000\u0532"+
		"\u052b\u0001\u0000\u0000\u0000\u0532\u052c\u0001\u0000\u0000\u0000\u0532"+
		"\u052d\u0001\u0000\u0000\u0000\u0532\u052e\u0001\u0000\u0000\u0000\u0532"+
		"\u052f\u0001\u0000\u0000\u0000\u0532\u0530\u0001\u0000\u0000\u0000\u0532"+
		"\u0531\u0001\u0000\u0000\u0000\u0533\u008b\u0001\u0000\u0000\u0000\u0534"+
		"\u0535\u0003\u008eG\u0000\u0535\u008d\u0001\u0000\u0000\u0000\u0536\u0537"+
		"\u0007\u0004\u0000\u0000\u0537\u008f\u0001\u0000\u0000\u0000\u0538\u0539"+
		"\u0005\u01a8\u0000\u0000\u0539\u0091\u0001\u0000\u0000\u0000\u053a\u053b"+
		"\u0005\u01a8\u0000\u0000\u053b\u0093\u0001\u0000\u0000\u0000\u053c\u053d"+
		"\u0005\u01ab\u0000\u0000\u053d\u0095\u0001\u0000\u0000\u0000\u053e\u053f"+
		"\u0005\u0105\u0000\u0000\u053f\u0097\u0001\u0000\u0000\u0000\u0540\u0541"+
		"\u0005\u00fb\u0000\u0000\u0541\u0099\u0001\u0000\u0000\u0000\u0542\u0543"+
		"\u0005\f\u0000\u0000\u0543\u0553\u0005\r\u0000\u0000\u0544\u0545\u0005"+
		"\f\u0000\u0000\u0545\u0546\u0003\u02de\u016f\u0000\u0546\u0547\u0005\r"+
		"\u0000\u0000\u0547\u0553\u0001\u0000\u0000\u0000\u0548\u0549\u0005\u0001"+
		"\u0000\u0000\u0549\u054a\u0005\f\u0000\u0000\u054a\u054b\u0005\r\u0000"+
		"\u0000\u054b\u0553\u0005\u0003\u0000\u0000\u054c\u054d\u0005\u0001\u0000"+
		"\u0000\u054d\u054e\u0005\f\u0000\u0000\u054e\u054f\u0003\u02de\u016f\u0000"+
		"\u054f\u0550\u0005\r\u0000\u0000\u0550\u0551\u0005\u0003\u0000\u0000\u0551"+
		"\u0553\u0001\u0000\u0000\u0000\u0552\u0542\u0001\u0000\u0000\u0000\u0552"+
		"\u0544\u0001\u0000\u0000\u0000\u0552\u0548\u0001\u0000\u0000\u0000\u0552"+
		"\u054c\u0001\u0000\u0000\u0000\u0553\u009b\u0001\u0000\u0000\u0000\u0554"+
		"\u0555\u0005\n\u0000\u0000\u0555\u0556\u0003\u02dc\u016e\u0000\u0556\u0557"+
		"\u0005\u000b\u0000\u0000\u0557\u009d\u0001\u0000\u0000\u0000\u0558\u0559"+
		"\u0005=\u0000\u0000\u0559\u055a\u0003\u00a0P\u0000\u055a\u009f\u0001\u0000"+
		"\u0000\u0000\u055b\u055c\u0005\u01b0\u0000\u0000\u055c\u00a1\u0001\u0000"+
		"\u0000\u0000\u055d\u055e\u0005\u0001\u0000\u0000\u055e\u055f\u0003\u02dc"+
		"\u016e\u0000\u055f\u0560\u0005\u0003\u0000\u0000\u0560\u00a3\u0001\u0000"+
		"\u0000\u0000\u0561\u0562\u0005\u0196\u0000\u0000\u0562\u00a5\u0001\u0000"+
		"\u0000\u0000\u0563\u0564\u0005\u016f\u0000\u0000\u0564\u00a7\u0001\u0000"+
		"\u0000\u0000\u0565\u0566\u00059\u0000\u0000\u0566\u0567\u0005\b\u0000"+
		"\u0000\u0567\u0568\u0003N\'\u0000\u0568\u0569\u0005\u0005\u0000\u0000"+
		"\u0569\u056a\u0003P(\u0000\u056a\u056b\u0005\t\u0000\u0000\u056b\u00a9"+
		"\u0001\u0000\u0000\u0000\u056c\u0595\u0003\u00acV\u0000\u056d\u0595\u0003"+
		"\u00aeW\u0000\u056e\u0595\u0003\u00b0X\u0000\u056f\u0595\u0003\u00b2Y"+
		"\u0000\u0570\u0595\u0003\u00b4Z\u0000\u0571\u0595\u0003\u00b6[\u0000\u0572"+
		"\u0595\u0003\u00b8\\\u0000\u0573\u0595\u0003\u00ba]\u0000\u0574\u0595"+
		"\u0003\u00bc^\u0000\u0575\u0595\u0003\u00be_\u0000\u0576\u0595\u0003\u00c0"+
		"`\u0000\u0577\u0595\u0003\u00c2a\u0000\u0578\u0595\u0003\u00c4b\u0000"+
		"\u0579\u0595\u0003\u00c6c\u0000\u057a\u0595\u0003\u00c8d\u0000\u057b\u0595"+
		"\u0003\u00cae\u0000\u057c\u0595\u0003\u00ccf\u0000\u057d\u0595\u0003\u00ce"+
		"g\u0000\u057e\u0595\u0003\u00d0h\u0000\u057f\u0595\u0003\u00d2i\u0000"+
		"\u0580\u0595\u0003\u00d4j\u0000\u0581\u0595\u0003\u00d6k\u0000\u0582\u0595"+
		"\u0003\u00d8l\u0000\u0583\u0595\u0003\u00dam\u0000\u0584\u0595\u0003\u00e4"+
		"r\u0000\u0585\u0595\u0003\u00e6s\u0000\u0586\u0595\u0003\u00e8t\u0000"+
		"\u0587\u0595\u0003\u00eau\u0000\u0588\u0595\u0003\u00ecv\u0000\u0589\u0595"+
		"\u0003\u00eew\u0000\u058a\u0595\u0003\u00f0x\u0000\u058b\u0595\u0003\u00f2"+
		"y\u0000\u058c\u0595\u0003\u00f4z\u0000\u058d\u0595\u0003\u00f6{\u0000"+
		"\u058e\u0595\u0003\u00f8|\u0000\u058f\u0595\u0003\u00fa}\u0000\u0590\u0595"+
		"\u0003\u00fc~\u0000\u0591\u0595\u0003\u00fe\u007f\u0000\u0592\u0595\u0003"+
		"\u0100\u0080\u0000\u0593\u0595\u0003\u0102\u0081\u0000\u0594\u056c\u0001"+
		"\u0000\u0000\u0000\u0594\u056d\u0001\u0000\u0000\u0000\u0594\u056e\u0001"+
		"\u0000\u0000\u0000\u0594\u056f\u0001\u0000\u0000\u0000\u0594\u0570\u0001"+
		"\u0000\u0000\u0000\u0594\u0571\u0001\u0000\u0000\u0000\u0594\u0572\u0001"+
		"\u0000\u0000\u0000\u0594\u0573\u0001\u0000\u0000\u0000\u0594\u0574\u0001"+
		"\u0000\u0000\u0000\u0594\u0575\u0001\u0000\u0000\u0000\u0594\u0576\u0001"+
		"\u0000\u0000\u0000\u0594\u0577\u0001\u0000\u0000\u0000\u0594\u0578\u0001"+
		"\u0000\u0000\u0000\u0594\u0579\u0001\u0000\u0000\u0000\u0594\u057a\u0001"+
		"\u0000\u0000\u0000\u0594\u057b\u0001\u0000\u0000\u0000\u0594\u057c\u0001"+
		"\u0000\u0000\u0000\u0594\u057d\u0001\u0000\u0000\u0000\u0594\u057e\u0001"+
		"\u0000\u0000\u0000\u0594\u057f\u0001\u0000\u0000\u0000\u0594\u0580\u0001"+
		"\u0000\u0000\u0000\u0594\u0581\u0001\u0000\u0000\u0000\u0594\u0582\u0001"+
		"\u0000\u0000\u0000\u0594\u0583\u0001\u0000\u0000\u0000\u0594\u0584\u0001"+
		"\u0000\u0000\u0000\u0594\u0585\u0001\u0000\u0000\u0000\u0594\u0586\u0001"+
		"\u0000\u0000\u0000\u0594\u0587\u0001\u0000\u0000\u0000\u0594\u0588\u0001"+
		"\u0000\u0000\u0000\u0594\u0589\u0001\u0000\u0000\u0000\u0594\u058a\u0001"+
		"\u0000\u0000\u0000\u0594\u058b\u0001\u0000\u0000\u0000\u0594\u058c\u0001"+
		"\u0000\u0000\u0000\u0594\u058d\u0001\u0000\u0000\u0000\u0594\u058e\u0001"+
		"\u0000\u0000\u0000\u0594\u058f\u0001\u0000\u0000\u0000\u0594\u0590\u0001"+
		"\u0000\u0000\u0000\u0594\u0591\u0001\u0000\u0000\u0000\u0594\u0592\u0001"+
		"\u0000\u0000\u0000\u0594\u0593\u0001\u0000\u0000\u0000\u0595\u00ab\u0001"+
		"\u0000\u0000\u0000\u0596\u0597\u0005\u0011\u0000\u0000\u0597\u0598\u0003"+
		"\u032c\u0196\u0000\u0598\u0599\u0005\b\u0000\u0000\u0599\u059a\u0003\\"+
		".\u0000\u059a\u059b\u0003\u008aE\u0000\u059b\u059c\u0005\u0005\u0000\u0000"+
		"\u059c\u059d\u0003\\.\u0000\u059d\u059e\u0003\u008aE\u0000\u059e\u059f"+
		"\u0005\t\u0000\u0000\u059f\u00ad\u0001\u0000\u0000\u0000\u05a0\u05a1\u0005"+
		"\u0093\u0000\u0000\u05a1\u05a2\u0005\b\u0000\u0000\u05a2\u05a3\u0003\\"+
		".\u0000\u05a3\u05a4\u0003\u008aE\u0000\u05a4\u05a5\u0005\u0005\u0000\u0000"+
		"\u05a5\u05a6\u0003\\.\u0000\u05a6\u05a7\u0003\u008aE\u0000\u05a7\u05a8"+
		"\u0005\t\u0000\u0000\u05a8\u00af\u0001\u0000\u0000\u0000\u05a9\u05aa\u0005"+
		"\u0151\u0000\u0000\u05aa\u05ab\u0003\u032c\u0196\u0000\u05ab\u05ac\u0005"+
		"\b\u0000\u0000\u05ac\u05ad\u0003\\.\u0000\u05ad\u05ae\u0003\u008aE\u0000"+
		"\u05ae\u05af\u0005\u0005\u0000\u0000\u05af\u05b0\u0003\\.\u0000\u05b0"+
		"\u05b1\u0003\u008aE\u0000\u05b1\u05b2\u0005\t\u0000\u0000\u05b2\u00b1"+
		"\u0001\u0000\u0000\u0000\u05b3\u05b4\u0005\u00a7\u0000\u0000\u05b4\u05b5"+
		"\u0005\b\u0000\u0000\u05b5\u05b6\u0003\\.\u0000\u05b6\u05b7\u0003\u008a"+
		"E\u0000\u05b7\u05b8\u0005\u0005\u0000\u0000\u05b8\u05b9\u0003\\.\u0000"+
		"\u05b9\u05ba\u0003\u008aE\u0000\u05ba\u05bb\u0005\t\u0000\u0000\u05bb"+
		"\u00b3\u0001\u0000\u0000\u0000\u05bc\u05bd\u0005\u00e9\u0000\u0000\u05bd"+
		"\u05be\u0003\u032c\u0196\u0000\u05be\u05bf\u0005\b\u0000\u0000\u05bf\u05c0"+
		"\u0003\\.\u0000\u05c0\u05c1\u0003\u008aE\u0000\u05c1\u05c2\u0005\u0005"+
		"\u0000\u0000\u05c2\u05c3\u0003\\.\u0000\u05c3\u05c4\u0003\u008aE\u0000"+
		"\u05c4\u05c5\u0005\t\u0000\u0000\u05c5\u00b5\u0001\u0000\u0000\u0000\u05c6"+
		"\u05c7\u0005\u009f\u0000\u0000\u05c7\u05c8\u0005\b\u0000\u0000\u05c8\u05c9"+
		"\u0003\\.\u0000\u05c9\u05ca\u0003\u008aE\u0000\u05ca\u05cb\u0005\u0005"+
		"\u0000\u0000\u05cb\u05cc\u0003\\.\u0000\u05cc\u05cd\u0003\u008aE\u0000"+
		"\u05cd\u05ce\u0005\t\u0000\u0000\u05ce\u00b7\u0001\u0000\u0000\u0000\u05cf"+
		"\u05d0\u0005\u0166\u0000\u0000\u05d0\u05d1\u0003\u02fc\u017e\u0000\u05d1"+
		"\u05d2\u0005\b\u0000\u0000\u05d2\u05d3\u0003\\.\u0000\u05d3\u05d4\u0003"+
		"\u008aE\u0000\u05d4\u05d5\u0005\u0005\u0000\u0000\u05d5\u05d6\u0003\\"+
		".\u0000\u05d6\u05d7\u0003\u008aE\u0000\u05d7\u05d8\u0005\t\u0000\u0000"+
		"\u05d8\u00b9\u0001\u0000\u0000\u0000\u05d9\u05da\u0005\u0134\u0000\u0000"+
		"\u05da\u05db\u0003\u02fc\u017e\u0000\u05db\u05dc\u0005\b\u0000\u0000\u05dc"+
		"\u05dd\u0003\\.\u0000\u05dd\u05de\u0003\u008aE\u0000\u05de\u05df\u0005"+
		"\u0005\u0000\u0000\u05df\u05e0\u0003\\.\u0000\u05e0\u05e1\u0003\u008a"+
		"E\u0000\u05e1\u05e2\u0005\t\u0000\u0000\u05e2\u00bb\u0001\u0000\u0000"+
		"\u0000\u05e3\u05e4\u0005\u0098\u0000\u0000\u05e4\u05e5\u0005\b\u0000\u0000"+
		"\u05e5\u05e6\u0003\\.\u0000\u05e6\u05e7\u0003\u008aE\u0000\u05e7\u05e8"+
		"\u0005\u0005\u0000\u0000\u05e8\u05e9\u0003\\.\u0000\u05e9\u05ea\u0003"+
		"\u008aE\u0000\u05ea\u05eb\u0005\t\u0000\u0000\u05eb\u00bd\u0001\u0000"+
		"\u0000\u0000\u05ec\u05ed\u0005\u0177\u0000\u0000\u05ed\u05ee\u0005\b\u0000"+
		"\u0000\u05ee\u05ef\u0003\\.\u0000\u05ef\u05f0\u0003\u008aE\u0000\u05f0"+
		"\u05f1\u0005\u0005\u0000\u0000\u05f1\u05f2\u0003\\.\u0000\u05f2\u05f3"+
		"\u0003\u008aE\u0000\u05f3\u05f4\u0005\t\u0000\u0000\u05f4\u00bf\u0001"+
		"\u0000\u0000\u0000\u05f5\u05f6\u0005\u014a\u0000\u0000\u05f6\u05f7\u0005"+
		"\b\u0000\u0000\u05f7\u05f8\u0003\\.\u0000\u05f8\u05f9\u0003\u008aE\u0000"+
		"\u05f9\u05fa\u0005\u0005\u0000\u0000\u05fa\u05fb\u0003\\.\u0000\u05fb"+
		"\u05fc\u0003\u008aE\u0000\u05fc\u05fd\u0005\t\u0000\u0000\u05fd\u00c1"+
		"\u0001\u0000\u0000\u0000\u05fe\u05ff\u0005\u00a5\u0000\u0000\u05ff\u0600"+
		"\u0005\b\u0000\u0000\u0600\u0601\u0003\\.\u0000\u0601\u0602\u0003\u008a"+
		"E\u0000\u0602\u0603\u0005\u0005\u0000\u0000\u0603\u0604\u0003\\.\u0000"+
		"\u0604\u0605\u0003\u008aE\u0000\u0605\u0606\u0005\t\u0000\u0000\u0606"+
		"\u00c3\u0001\u0000\u0000\u0000\u0607\u0608\u0005\u013c\u0000\u0000\u0608"+
		"\u0609\u0003\u032c\u0196\u0000\u0609\u060a\u0005\b\u0000\u0000\u060a\u060b"+
		"\u0003\\.\u0000\u060b\u060c\u0003\u008aE\u0000\u060c\u060d\u0005\u0005"+
		"\u0000\u0000\u060d\u060e\u0003\\.\u0000\u060e\u060f\u0003\u008aE\u0000"+
		"\u060f\u0610\u0005\t\u0000\u0000\u0610\u00c5\u0001\u0000\u0000\u0000\u0611"+
		"\u0612\u0005\u00e0\u0000\u0000\u0612\u0613\u0003\u02fc\u017e\u0000\u0613"+
		"\u0614\u0005\b\u0000\u0000\u0614\u0615\u0003\\.\u0000\u0615\u0616\u0003"+
		"\u008aE\u0000\u0616\u0617\u0005\u0005\u0000\u0000\u0617\u0618\u0003\\"+
		".\u0000\u0618\u0619\u0003\u008aE\u0000\u0619\u061a\u0005\t\u0000\u0000"+
		"\u061a\u00c7\u0001\u0000\u0000\u0000\u061b\u061c\u0005.\u0000\u0000\u061c"+
		"\u061d\u0003\u02fc\u017e\u0000\u061d\u061e\u0005\b\u0000\u0000\u061e\u061f"+
		"\u0003\\.\u0000\u061f\u0620\u0003\u008aE\u0000\u0620\u0621\u0005\u0005"+
		"\u0000\u0000\u0621\u0622\u0003\\.\u0000\u0622\u0623\u0003\u008aE\u0000"+
		"\u0623\u0624\u0005\t\u0000\u0000\u0624\u00c9\u0001\u0000\u0000\u0000\u0625"+
		"\u0626\u0005$\u0000\u0000\u0626\u0627\u0005\b\u0000\u0000\u0627\u0628"+
		"\u0003\\.\u0000\u0628\u0629\u0003\u008aE\u0000\u0629\u062a\u0005\u0005"+
		"\u0000\u0000\u062a\u062b\u0003\\.\u0000\u062b\u062c\u0003\u008aE\u0000"+
		"\u062c\u062d\u0005\t\u0000\u0000\u062d\u00cb\u0001\u0000\u0000\u0000\u062e"+
		"\u062f\u0005\u0112\u0000\u0000\u062f\u0630\u0005\b\u0000\u0000\u0630\u0631"+
		"\u0003\\.\u0000\u0631\u0632\u0003\u008aE\u0000\u0632\u0633\u0005\u0005"+
		"\u0000\u0000\u0633\u0634\u0003\\.\u0000\u0634\u0635\u0003\u008aE\u0000"+
		"\u0635\u0636\u0005\t\u0000\u0000\u0636\u00cd\u0001\u0000\u0000\u0000\u0637"+
		"\u0638\u0005\u0194\u0000\u0000\u0638\u0639\u0005\b\u0000\u0000\u0639\u063a"+
		"\u0003\\.\u0000\u063a\u063b\u0003\u008aE\u0000\u063b\u063c\u0005\u0005"+
		"\u0000\u0000\u063c\u063d\u0003\\.\u0000\u063d\u063e\u0003\u008aE\u0000"+
		"\u063e\u063f\u0005\t\u0000\u0000\u063f\u00cf\u0001\u0000\u0000\u0000\u0640"+
		"\u0641\u0005\u0090\u0000\u0000\u0641\u0642\u0005\b\u0000\u0000\u0642\u0643"+
		"\u0003\\.\u0000\u0643\u0644\u0003\u008aE\u0000\u0644\u0645\u0005\u0005"+
		"\u0000\u0000\u0645\u0646\u0003\\.\u0000\u0646\u0647\u0003\u008aE\u0000"+
		"\u0647\u0648\u0005\t\u0000\u0000\u0648\u00d1\u0001\u0000\u0000\u0000\u0649"+
		"\u064a\u0005\u00c5\u0000\u0000\u064a\u064b\u0005\b\u0000\u0000\u064b\u064c"+
		"\u0003\\.\u0000\u064c\u064d\u0003\u008aE\u0000\u064d\u064e\u0005\u0005"+
		"\u0000\u0000\u064e\u064f\u0003\\.\u0000\u064f\u0650\u0003\u008aE\u0000"+
		"\u0650\u0651\u0005\u0005\u0000\u0000\u0651\u0652\u0003\\.\u0000\u0652"+
		"\u0653\u0003\u008aE\u0000\u0653\u0654\u0005\t\u0000\u0000\u0654\u00d3"+
		"\u0001\u0000\u0000\u0000\u0655\u0656\u0005\u013d\u0000\u0000\u0656\u0657"+
		"\u0005\b\u0000\u0000\u0657\u0658\u0003\\.\u0000\u0658\u0659\u0003\u008a"+
		"E\u0000\u0659\u065a\u0005\u0005\u0000\u0000\u065a\u065b\u0003\\.\u0000"+
		"\u065b\u065c\u0003\u008aE\u0000\u065c\u065d\u0005\u0005\u0000\u0000\u065d"+
		"\u065e\u0003\\.\u0000\u065e\u065f\u0003\u008aE\u0000\u065f\u0660\u0005"+
		"\t\u0000\u0000\u0660\u00d5\u0001\u0000\u0000\u0000\u0661\u0662\u0005\u0091"+
		"\u0000\u0000\u0662\u0663\u0005\b\u0000\u0000\u0663\u0664\u0003\\.\u0000"+
		"\u0664\u0665\u0003\u008aE\u0000\u0665\u0666\u0003\u0316\u018b\u0000\u0666"+
		"\u0667\u0005\t\u0000\u0000\u0667\u00d7\u0001\u0000\u0000\u0000\u0668\u0669"+
		"\u0005\u00c6\u0000\u0000\u0669\u066a\u0005\b\u0000\u0000\u066a\u066b\u0003"+
		"\\.\u0000\u066b\u066c\u0003\u008aE\u0000\u066c\u066d\u0005\u0005\u0000"+
		"\u0000\u066d\u066e\u0003\\.\u0000\u066e\u066f\u0003\u008aE\u0000\u066f"+
		"\u0670\u0003\u0316\u018b\u0000\u0670\u0671\u0005\t\u0000\u0000\u0671\u00d9"+
		"\u0001\u0000\u0000\u0000\u0672\u0673\u0005\u00ab\u0000\u0000\u0673\u0674"+
		"\u0003\u0314\u018a\u0000\u0674\u0675\u0005\b\u0000\u0000\u0675\u0676\u0003"+
		"\\.\u0000\u0676\u0677\u0005\u0005\u0000\u0000\u0677\u0678\u0003\\.\u0000"+
		"\u0678\u0679\u0003\u008aE\u0000\u0679\u067a\u0005\u0005\u0000\u0000\u067a"+
		"\u067b\u0003\u00dcn\u0000\u067b\u067c\u0005\t\u0000\u0000\u067c\u00db"+
		"\u0001\u0000\u0000\u0000\u067d\u067f\u0003\u00deo\u0000\u067e\u067d\u0001"+
		"\u0000\u0000\u0000\u067e\u067f\u0001\u0000\u0000\u0000\u067f\u00dd\u0001"+
		"\u0000\u0000\u0000\u0680\u0681\u0006o\uffff\uffff\u0000\u0681\u0682\u0003"+
		"\u00e0p\u0000\u0682\u0688\u0001\u0000\u0000\u0000\u0683\u0684\n\u0001"+
		"\u0000\u0000\u0684\u0685\u0005\u0005\u0000\u0000\u0685\u0687\u0003\u00e0"+
		"p\u0000\u0686\u0683\u0001\u0000\u0000\u0000\u0687\u068a\u0001\u0000\u0000"+
		"\u0000\u0688\u0686\u0001\u0000\u0000\u0000\u0688\u0689\u0001\u0000\u0000"+
		"\u0000\u0689\u00df\u0001\u0000\u0000\u0000\u068a\u0688\u0001\u0000\u0000"+
		"\u0000\u068b\u068c\u0003\u00e2q\u0000\u068c\u068d\u0003\\.\u0000\u068d"+
		"\u068e\u0003\u008aE\u0000\u068e\u00e1\u0001\u0000\u0000\u0000\u068f\u0691"+
		"\u0005\u00c3\u0000\u0000\u0690\u068f\u0001\u0000\u0000\u0000\u0690\u0691"+
		"\u0001\u0000\u0000\u0000\u0691\u00e3\u0001\u0000\u0000\u0000\u0692\u0693"+
		"\u0005\u0162\u0000\u0000\u0693\u0694\u0005\b\u0000\u0000\u0694\u0695\u0003"+
		"\\.\u0000\u0695\u0696\u0003\u008aE\u0000\u0696\u0697\u0005\u015e\u0000"+
		"\u0000\u0697\u0698\u0003\\.\u0000\u0698\u0699\u0005\t\u0000\u0000\u0699"+
		"\u00e5\u0001\u0000\u0000\u0000\u069a\u069b\u0005\u0197\u0000\u0000\u069b"+
		"\u069c\u0005\b\u0000\u0000\u069c\u069d\u0003\\.\u0000\u069d\u069e\u0003"+
		"\u008aE\u0000\u069e\u069f\u0005\u015e\u0000\u0000\u069f\u06a0\u0003\\"+
		".\u0000\u06a0\u06a1\u0005\t\u0000\u0000\u06a1\u00e7\u0001\u0000\u0000"+
		"\u0000\u06a2\u06a3\u0005\u0139\u0000\u0000\u06a3\u06a4\u0005\b\u0000\u0000"+
		"\u06a4\u06a5\u0003\\.\u0000\u06a5\u06a6\u0003\u008aE\u0000\u06a6\u06a7"+
		"\u0005\u015e\u0000\u0000\u06a7\u06a8\u0003\\.\u0000\u06a8\u06a9\u0005"+
		"\t\u0000\u0000\u06a9\u00e9\u0001\u0000\u0000\u0000\u06aa\u06ab\u0005\u00a4"+
		"\u0000\u0000\u06ab\u06ac\u0005\b\u0000\u0000\u06ac\u06ad\u0003\\.\u0000"+
		"\u06ad\u06ae\u0003\u008aE\u0000\u06ae\u06af\u0005\u015e\u0000\u0000\u06af"+
		"\u06b0\u0003\\.\u0000\u06b0\u06b1\u0005\t\u0000\u0000\u06b1\u00eb\u0001"+
		"\u0000\u0000\u0000\u06b2\u06b3\u0005\u00a1\u0000\u0000\u06b3\u06b4\u0005"+
		"\b\u0000\u0000\u06b4\u06b5\u0003\\.\u0000\u06b5\u06b6\u0003\u008aE\u0000"+
		"\u06b6\u06b7\u0005\u015e\u0000\u0000\u06b7\u06b8\u0003\\.\u0000\u06b8"+
		"\u06b9\u0005\t\u0000\u0000\u06b9\u00ed\u0001\u0000\u0000\u0000\u06ba\u06bb"+
		"\u0005\u00a3\u0000\u0000\u06bb\u06bc\u0005\b\u0000\u0000\u06bc\u06bd\u0003"+
		"\\.\u0000\u06bd\u06be\u0003\u008aE\u0000\u06be\u06bf\u0005\u015e\u0000"+
		"\u0000\u06bf\u06c0\u0003\\.\u0000\u06c0\u06c1\u0005\t\u0000\u0000\u06c1"+
		"\u00ef\u0001\u0000\u0000\u0000\u06c2\u06c3\u0005\u00a2\u0000\u0000\u06c3"+
		"\u06c4\u0005\b\u0000\u0000\u06c4\u06c5\u0003\\.\u0000\u06c5\u06c6\u0003"+
		"\u008aE\u0000\u06c6\u06c7\u0005\u015e\u0000\u0000\u06c7\u06c8\u0003\\"+
		".\u0000\u06c8\u06c9\u0005\t\u0000\u0000\u06c9\u00f1\u0001\u0000\u0000"+
		"\u0000\u06ca\u06cb\u0005\u016a\u0000\u0000\u06cb\u06cc\u0005\b\u0000\u0000"+
		"\u06cc\u06cd\u0003\\.\u0000\u06cd\u06ce\u0003\u008aE\u0000\u06ce\u06cf"+
		"\u0005\u015e\u0000\u0000\u06cf\u06d0\u0003\\.\u0000\u06d0\u06d1\u0005"+
		"\t\u0000\u0000\u06d1\u00f3\u0001\u0000\u0000\u0000\u06d2\u06d3\u0005\u0140"+
		"\u0000\u0000\u06d3\u06d4\u0005\b\u0000\u0000\u06d4\u06d5\u0003\\.\u0000"+
		"\u06d5\u06d6\u0003\u008aE\u0000\u06d6\u06d7\u0005\u015e\u0000\u0000\u06d7"+
		"\u06d8\u0003\\.\u0000\u06d8\u06d9\u0005\t\u0000\u0000\u06d9\u00f5\u0001"+
		"\u0000\u0000\u0000\u06da\u06db\u0005\u011e\u0000\u0000\u06db\u06dc\u0005"+
		"\b\u0000\u0000\u06dc\u06dd\u0003\\.\u0000\u06dd\u06de\u0003\u008aE\u0000"+
		"\u06de\u06df\u0005\u015e\u0000\u0000\u06df\u06e0\u0003\\.\u0000\u06e0"+
		"\u06e1\u0005\t\u0000\u0000\u06e1\u00f7\u0001\u0000\u0000\u0000\u06e2\u06e3"+
		"\u0005\u00ca\u0000\u0000\u06e3\u06e4\u0005\b\u0000\u0000\u06e4\u06e5\u0003"+
		"\\.\u0000\u06e5\u06e6\u0003\u008aE\u0000\u06e6\u06e7\u0005\u015e\u0000"+
		"\u0000\u06e7\u06e8\u0003\\.\u0000\u06e8\u06e9\u0005\t\u0000\u0000\u06e9"+
		"\u00f9\u0001\u0000\u0000\u0000\u06ea\u06eb\u00058\u0000\u0000\u06eb\u06ec"+
		"\u0005\b\u0000\u0000\u06ec\u06ed\u0003\\.\u0000\u06ed\u06ee\u0003\u008a"+
		"E\u0000\u06ee\u06ef\u0005\u015e\u0000\u0000\u06ef\u06f0\u0003\\.\u0000"+
		"\u06f0\u06f1\u0005\t\u0000\u0000\u06f1\u00fb\u0001\u0000\u0000\u0000\u06f2"+
		"\u06f3\u0005\u0013\u0000\u0000\u06f3\u06f4\u0005\b\u0000\u0000\u06f4\u06f5"+
		"\u0003\\.\u0000\u06f5\u06f6\u0003\u008aE\u0000\u06f6\u06f7\u0005\u015e"+
		"\u0000\u0000\u06f7\u06f8\u0003\\.\u0000\u06f8\u06f9\u0005\t\u0000\u0000"+
		"\u06f9\u00fd\u0001\u0000\u0000\u0000\u06fa\u06fb\u0005\u00b6\u0000\u0000"+
		"\u06fb\u06fc\u0003\u031c\u018e\u0000\u06fc\u06fd\u0005\b\u0000\u0000\u06fd"+
		"\u06fe\u0003\\.\u0000\u06fe\u06ff\u0003\u008aE\u0000\u06ff\u0700\u0005"+
		"\u0005\u0000\u0000\u0700\u0701\u0003\\.\u0000\u0701\u0702\u0003\u008a"+
		"E\u0000\u0702\u0703\u0005\t\u0000\u0000\u0703\u00ff\u0001\u0000\u0000"+
		"\u0000\u0704\u0705\u0005\u0097\u0000\u0000\u0705\u0706\u0003\u030c\u0186"+
		"\u0000\u0706\u0707\u0005\b\u0000\u0000\u0707\u0708\u0003\\.\u0000\u0708"+
		"\u0709\u0003\u008aE\u0000\u0709\u070a\u0005\u0005\u0000\u0000\u070a\u070b"+
		"\u0003\\.\u0000\u070b\u070c\u0003\u008aE\u0000\u070c\u070d\u0005\t\u0000"+
		"\u0000\u070d\u0101\u0001\u0000\u0000\u0000\u070e\u070f\u0005\u0136\u0000"+
		"\u0000\u070f\u0710\u0005\b\u0000\u0000\u0710\u0711\u0003\\.\u0000\u0711"+
		"\u0712\u0003\u008aE\u0000\u0712\u0713\u0005\u0005\u0000\u0000\u0713\u0714"+
		"\u0003\\.\u0000\u0714\u0715\u0003\u008aE\u0000\u0715\u0716\u0005\u0005"+
		"\u0000\u0000\u0716\u0717\u0003\\.\u0000\u0717\u0718\u0003\u008aE\u0000"+
		"\u0718\u0719\u0005\t\u0000\u0000\u0719\u0103\u0001\u0000\u0000\u0000\u071a"+
		"\u071b\u0006\u0082\uffff\uffff\u0000\u071b\u071c\u0003\u0106\u0083\u0000"+
		"\u071c\u0721\u0001\u0000\u0000\u0000\u071d\u071e\n\u0001\u0000\u0000\u071e"+
		"\u0720\u0003\u0106\u0083\u0000\u071f\u071d\u0001\u0000\u0000\u0000\u0720"+
		"\u0723\u0001\u0000\u0000\u0000\u0721\u071f\u0001\u0000\u0000\u0000\u0721"+
		"\u0722\u0001\u0000\u0000\u0000\u0722\u0105\u0001\u0000\u0000\u0000\u0723"+
		"\u0721\u0001\u0000\u0000\u0000\u0724\u0725\u0003\u0108\u0084\u0000\u0725"+
		"\u0726\u0003\u010a\u0085\u0000\u0726\u0727\u0003\u0190\u00c8\u0000\u0727"+
		"\u0107\u0001\u0000\u0000\u0000\u0728\u072a\u0003R)\u0000\u0729\u0728\u0001"+
		"\u0000\u0000\u0000\u0729\u072a\u0001\u0000\u0000\u0000\u072a\u0109\u0001"+
		"\u0000\u0000\u0000\u072b\u072d\u0003\u010c\u0086\u0000\u072c\u072b\u0001"+
		"\u0000\u0000\u0000\u072c\u072d\u0001\u0000\u0000\u0000\u072d\u010b\u0001"+
		"\u0000\u0000\u0000\u072e\u072f\u0006\u0086\uffff\uffff\u0000\u072f\u0730"+
		"\u0003\u010e\u0087\u0000\u0730\u0735\u0001\u0000\u0000\u0000\u0731\u0732"+
		"\n\u0001\u0000\u0000\u0732\u0734\u0003\u010e\u0087\u0000\u0733\u0731\u0001"+
		"\u0000\u0000\u0000\u0734\u0737\u0001\u0000\u0000\u0000\u0735\u0733\u0001"+
		"\u0000\u0000\u0000\u0735\u0736\u0001\u0000\u0000\u0000\u0736\u010d\u0001"+
		"\u0000\u0000\u0000\u0737\u0735\u0001\u0000\u0000\u0000\u0738\u0742\u0003"+
		"\u0148\u00a4\u0000\u0739\u0742\u0003\u014a\u00a5\u0000\u073a\u0742\u0003"+
		"\u014c\u00a6\u0000\u073b\u0742\u0003\u0150\u00a8\u0000\u073c\u073d\u0003"+
		"P(\u0000\u073d\u073e\u0005\u0002\u0000\u0000\u073e\u073f\u0003\u0110\u0088"+
		"\u0000\u073f\u0742\u0001\u0000\u0000\u0000\u0740\u0742\u0003\u0110\u0088"+
		"\u0000\u0741\u0738\u0001\u0000\u0000\u0000\u0741\u0739\u0001\u0000\u0000"+
		"\u0000\u0741\u073a\u0001\u0000\u0000\u0000\u0741\u073b\u0001\u0000\u0000"+
		"\u0000\u0741\u073c\u0001\u0000\u0000\u0000\u0741\u0740\u0001\u0000\u0000"+
		"\u0000\u0742\u010f\u0001\u0000\u0000\u0000\u0743\u0774\u0003\u0112\u0089"+
		"\u0000\u0744\u0774\u0003\u0114\u008a\u0000\u0745\u0774\u0003\u0116\u008b"+
		"\u0000\u0746\u0774\u0003\u0118\u008c\u0000\u0747\u0774\u0003\u011a\u008d"+
		"\u0000\u0748\u0774\u0003\u011c\u008e\u0000\u0749\u0774\u0003\u011e\u008f"+
		"\u0000\u074a\u0774\u0003\u0120\u0090\u0000\u074b\u0774\u0003\u0122\u0091"+
		"\u0000\u074c\u0774\u0003\u0124\u0092\u0000\u074d\u0774\u0003\u0126\u0093"+
		"\u0000\u074e\u0774\u0003\u0128\u0094\u0000\u074f\u0774\u0003\u012a\u0095"+
		"\u0000\u0750\u0774\u0003\u012c\u0096\u0000\u0751\u0774\u0003\u012e\u0097"+
		"\u0000\u0752\u0774\u0003\u0130\u0098\u0000\u0753\u0774\u0003\u0132\u0099"+
		"\u0000\u0754\u0774\u0003\u0134\u009a\u0000\u0755\u0774\u0003\u0136\u009b"+
		"\u0000\u0756\u0774\u0003\u0138\u009c\u0000\u0757\u0774\u0003\u013a\u009d"+
		"\u0000\u0758\u0774\u0003\u013c\u009e\u0000\u0759\u0774\u0003\u013e\u009f"+
		"\u0000\u075a\u0774\u0003\u0140\u00a0\u0000\u075b\u0774\u0003\u0146\u00a3"+
		"\u0000\u075c\u0774\u0003\u0154\u00aa\u0000\u075d\u0774\u0003\u0156\u00ab"+
		"\u0000\u075e\u0774\u0003\u0158\u00ac\u0000\u075f\u0774\u0003\u015a\u00ad"+
		"\u0000\u0760\u0774\u0003\u015c\u00ae\u0000\u0761\u0774\u0003\u015e\u00af"+
		"\u0000\u0762\u0774\u0003\u0160\u00b0\u0000\u0763\u0774\u0003\u0162\u00b1"+
		"\u0000\u0764\u0774\u0003\u0164\u00b2\u0000\u0765\u0774\u0003\u0166\u00b3"+
		"\u0000\u0766\u0774\u0003\u0168\u00b4\u0000\u0767\u0774\u0003\u016a\u00b5"+
		"\u0000\u0768\u0774\u0003\u016c\u00b6\u0000\u0769\u0774\u0003\u016e\u00b7"+
		"\u0000\u076a\u0774\u0003\u0170\u00b8\u0000\u076b\u0774\u0003\u0172\u00b9"+
		"\u0000\u076c\u0774\u0003\u0174\u00ba\u0000\u076d\u0774\u0003\u017a\u00bd"+
		"\u0000\u076e\u0774\u0003\u017c\u00be\u0000\u076f\u0774\u0003\u0180\u00c0"+
		"\u0000\u0770\u0774\u0003\u0182\u00c1\u0000\u0771\u0774\u0003\u018c\u00c6"+
		"\u0000\u0772\u0774\u0003\u018e\u00c7\u0000\u0773\u0743\u0001\u0000\u0000"+
		"\u0000\u0773\u0744\u0001\u0000\u0000\u0000\u0773\u0745\u0001\u0000\u0000"+
		"\u0000\u0773\u0746\u0001\u0000\u0000\u0000\u0773\u0747\u0001\u0000\u0000"+
		"\u0000\u0773\u0748\u0001\u0000\u0000\u0000\u0773\u0749\u0001\u0000\u0000"+
		"\u0000\u0773\u074a\u0001\u0000\u0000\u0000\u0773\u074b\u0001\u0000\u0000"+
		"\u0000\u0773\u074c\u0001\u0000\u0000\u0000\u0773\u074d\u0001\u0000\u0000"+
		"\u0000\u0773\u074e\u0001\u0000\u0000\u0000\u0773\u074f\u0001\u0000\u0000"+
		"\u0000\u0773\u0750\u0001\u0000\u0000\u0000\u0773\u0751\u0001\u0000\u0000"+
		"\u0000\u0773\u0752\u0001\u0000\u0000\u0000\u0773\u0753\u0001\u0000\u0000"+
		"\u0000\u0773\u0754\u0001\u0000\u0000\u0000\u0773\u0755\u0001\u0000\u0000"+
		"\u0000\u0773\u0756\u0001\u0000\u0000\u0000\u0773\u0757\u0001\u0000\u0000"+
		"\u0000\u0773\u0758\u0001\u0000\u0000\u0000\u0773\u0759\u0001\u0000\u0000"+
		"\u0000\u0773\u075a\u0001\u0000\u0000\u0000\u0773\u075b\u0001\u0000\u0000"+
		"\u0000\u0773\u075c\u0001\u0000\u0000\u0000\u0773\u075d\u0001\u0000\u0000"+
		"\u0000\u0773\u075e\u0001\u0000\u0000\u0000\u0773\u075f\u0001\u0000\u0000"+
		"\u0000\u0773\u0760\u0001\u0000\u0000\u0000\u0773\u0761\u0001\u0000\u0000"+
		"\u0000\u0773\u0762\u0001\u0000\u0000\u0000\u0773\u0763\u0001\u0000\u0000"+
		"\u0000\u0773\u0764\u0001\u0000\u0000\u0000\u0773\u0765\u0001\u0000\u0000"+
		"\u0000\u0773\u0766\u0001\u0000\u0000\u0000\u0773\u0767\u0001\u0000\u0000"+
		"\u0000\u0773\u0768\u0001\u0000\u0000\u0000\u0773\u0769\u0001\u0000\u0000"+
		"\u0000\u0773\u076a\u0001\u0000\u0000\u0000\u0773\u076b\u0001\u0000\u0000"+
		"\u0000\u0773\u076c\u0001\u0000\u0000\u0000\u0773\u076d\u0001\u0000\u0000"+
		"\u0000\u0773\u076e\u0001\u0000\u0000\u0000\u0773\u076f\u0001\u0000\u0000"+
		"\u0000\u0773\u0770\u0001\u0000\u0000\u0000\u0773\u0771\u0001\u0000\u0000"+
		"\u0000\u0773\u0772\u0001\u0000\u0000\u0000\u0774\u0111\u0001\u0000\u0000"+
		"\u0000\u0775\u0776\u0005\u0011\u0000\u0000\u0776\u0777\u0003\u032c\u0196"+
		"\u0000\u0777\u0778\u0003\\.\u0000\u0778\u0779\u0003\u0080@\u0000\u0779"+
		"\u077a\u0005\u0005\u0000\u0000\u077a\u077b\u0003\u0080@\u0000\u077b\u077c"+
		"\u0003\u01c8\u00e4\u0000\u077c\u0113\u0001\u0000\u0000\u0000\u077d\u077e"+
		"\u0005\u0093\u0000\u0000\u077e\u077f\u0003\u0306\u0183\u0000\u077f\u0780"+
		"\u0003\\.\u0000\u0780\u0781\u0003\u0080@\u0000\u0781\u0782\u0005\u0005"+
		"\u0000\u0000\u0782\u0783\u0003\u0080@\u0000\u0783\u0784\u0003\u01c8\u00e4"+
		"\u0000\u0784\u0115\u0001\u0000\u0000\u0000\u0785\u0786\u0005\u0151\u0000"+
		"\u0000\u0786\u0787\u0003\u032c\u0196\u0000\u0787\u0788\u0003\\.\u0000"+
		"\u0788\u0789\u0003\u0080@\u0000\u0789\u078a\u0005\u0005\u0000\u0000\u078a"+
		"\u078b\u0003\u0080@\u0000\u078b\u078c\u0003\u01c8\u00e4\u0000\u078c\u0117"+
		"\u0001\u0000\u0000\u0000\u078d\u078e\u0005\u00a7\u0000\u0000\u078e\u078f"+
		"\u0003\u0306\u0183\u0000\u078f\u0790\u0003\\.\u0000\u0790\u0791\u0003"+
		"\u0080@\u0000\u0791\u0792\u0005\u0005\u0000\u0000\u0792\u0793\u0003\u0080"+
		"@\u0000\u0793\u0794\u0003\u01c8\u00e4\u0000\u0794\u0119\u0001\u0000\u0000"+
		"\u0000\u0795\u0796\u0005\u00e9\u0000\u0000\u0796\u0797\u0003\u032c\u0196"+
		"\u0000\u0797\u0798\u0003\\.\u0000\u0798\u0799\u0003\u0080@\u0000\u0799"+
		"\u079a\u0005\u0005\u0000\u0000\u079a\u079b\u0003\u0080@\u0000\u079b\u079c"+
		"\u0003\u01c8\u00e4\u0000\u079c\u011b\u0001\u0000\u0000\u0000\u079d\u079e"+
		"\u0005\u009f\u0000\u0000\u079e\u079f\u0003\u0306\u0183\u0000\u079f\u07a0"+
		"\u0003\\.\u0000\u07a0\u07a1\u0003\u0080@\u0000\u07a1\u07a2\u0005\u0005"+
		"\u0000\u0000\u07a2\u07a3\u0003\u0080@\u0000\u07a3\u07a4\u0003\u01c8\u00e4"+
		"\u0000\u07a4\u011d\u0001\u0000\u0000\u0000\u07a5\u07a6\u0005\u0166\u0000"+
		"\u0000\u07a6\u07a7\u0003\u02fc\u017e\u0000\u07a7\u07a8\u0003\\.\u0000"+
		"\u07a8\u07a9\u0003\u0080@\u0000\u07a9\u07aa\u0005\u0005\u0000\u0000\u07aa"+
		"\u07ab\u0003\u0080@\u0000\u07ab\u07ac\u0003\u01c8\u00e4\u0000\u07ac\u011f"+
		"\u0001\u0000\u0000\u0000\u07ad\u07ae\u0005\u0134\u0000\u0000\u07ae\u07af"+
		"\u0003\u02fc\u017e\u0000\u07af\u07b0\u0003\\.\u0000\u07b0\u07b1\u0003"+
		"\u0080@\u0000\u07b1\u07b2\u0005\u0005\u0000\u0000\u07b2\u07b3\u0003\u0080"+
		"@\u0000\u07b3\u07b4\u0003\u01c8\u00e4\u0000\u07b4\u0121\u0001\u0000\u0000"+
		"\u0000\u07b5\u07b6\u0005\u0098\u0000\u0000\u07b6\u07b7\u0003\u0306\u0183"+
		"\u0000\u07b7\u07b8\u0003\\.\u0000\u07b8\u07b9\u0003\u0080@\u0000\u07b9"+
		"\u07ba\u0005\u0005\u0000\u0000\u07ba\u07bb\u0003\u0080@\u0000\u07bb\u07bc"+
		"\u0003\u01c8\u00e4\u0000\u07bc\u0123\u0001\u0000\u0000\u0000\u07bd\u07be"+
		"\u0005\u0177\u0000\u0000\u07be\u07bf\u0003\\.\u0000\u07bf\u07c0\u0003"+
		"\u0080@\u0000\u07c0\u07c1\u0005\u0005\u0000\u0000\u07c1\u07c2\u0003\u0080"+
		"@\u0000\u07c2\u07c3\u0003\u01c8\u00e4\u0000\u07c3\u0125\u0001\u0000\u0000"+
		"\u0000\u07c4\u07c5\u0005\u014a\u0000\u0000\u07c5\u07c6\u0003\\.\u0000"+
		"\u07c6\u07c7\u0003\u0080@\u0000\u07c7\u07c8\u0005\u0005\u0000\u0000\u07c8"+
		"\u07c9\u0003\u0080@\u0000\u07c9\u07ca\u0003\u01c8\u00e4\u0000\u07ca\u0127"+
		"\u0001\u0000\u0000\u0000\u07cb\u07cc\u0005\u00a5\u0000\u0000\u07cc\u07cd"+
		"\u0003\u0306\u0183\u0000\u07cd\u07ce\u0003\\.\u0000\u07ce\u07cf\u0003"+
		"\u0080@\u0000\u07cf\u07d0\u0005\u0005\u0000\u0000\u07d0\u07d1\u0003\u0080"+
		"@\u0000\u07d1\u07d2\u0003\u01c8\u00e4\u0000\u07d2\u0129\u0001\u0000\u0000"+
		"\u0000\u07d3\u07d4\u0005\u013c\u0000\u0000\u07d4\u07d5\u0003\u032c\u0196"+
		"\u0000\u07d5\u07d6\u0003\\.\u0000\u07d6\u07d7\u0003\u0080@\u0000\u07d7"+
		"\u07d8\u0005\u0005\u0000\u0000\u07d8\u07d9\u0003\u0080@\u0000\u07d9\u07da"+
		"\u0003\u01c8\u00e4\u0000\u07da\u012b\u0001\u0000\u0000\u0000\u07db\u07dc"+
		"\u0005\u00e0\u0000\u0000\u07dc\u07dd\u0003\u02fc\u017e\u0000\u07dd\u07de"+
		"\u0003\\.\u0000\u07de\u07df\u0003\u0080@\u0000\u07df\u07e0\u0005\u0005"+
		"\u0000\u0000\u07e0\u07e1\u0003\u0080@\u0000\u07e1\u07e2\u0003\u01c8\u00e4"+
		"\u0000\u07e2\u012d\u0001\u0000\u0000\u0000\u07e3\u07e4\u0005.\u0000\u0000"+
		"\u07e4\u07e5\u0003\u02fc\u017e\u0000\u07e5\u07e6\u0003\\.\u0000\u07e6"+
		"\u07e7\u0003\u0080@\u0000\u07e7\u07e8\u0005\u0005\u0000\u0000\u07e8\u07e9"+
		"\u0003\u0080@\u0000\u07e9\u07ea\u0003\u01c8\u00e4\u0000\u07ea\u012f\u0001"+
		"\u0000\u0000\u0000\u07eb\u07ec\u0005$\u0000\u0000\u07ec\u07ed\u0003\\"+
		".\u0000\u07ed\u07ee\u0003\u0080@\u0000\u07ee\u07ef\u0005\u0005\u0000\u0000"+
		"\u07ef\u07f0\u0003\u0080@\u0000\u07f0\u07f1\u0003\u01c8\u00e4\u0000\u07f1"+
		"\u0131\u0001\u0000\u0000\u0000\u07f2\u07f3\u0005\u0112\u0000\u0000\u07f3"+
		"\u07f4\u0003\\.\u0000\u07f4\u07f5\u0003\u0080@\u0000\u07f5\u07f6\u0005"+
		"\u0005\u0000\u0000\u07f6\u07f7\u0003\u0080@\u0000\u07f7\u07f8\u0003\u01c8"+
		"\u00e4\u0000\u07f8\u0133\u0001\u0000\u0000\u0000\u07f9\u07fa\u0005\u0194"+
		"\u0000\u0000\u07fa\u07fb\u0003\\.\u0000\u07fb\u07fc\u0003\u0080@\u0000"+
		"\u07fc\u07fd\u0005\u0005\u0000\u0000\u07fd\u07fe\u0003\u0080@\u0000\u07fe"+
		"\u07ff\u0003\u01c8\u00e4\u0000\u07ff\u0135\u0001\u0000\u0000\u0000\u0800"+
		"\u0801\u0005\u0090\u0000\u0000\u0801\u0802\u0003\\.\u0000\u0802\u0803"+
		"\u0003\u0080@\u0000\u0803\u0804\u0005\u0005\u0000\u0000\u0804\u0805\u0003"+
		"\\.\u0000\u0805\u0806\u0003\u0080@\u0000\u0806\u0807\u0003\u01c8\u00e4"+
		"\u0000\u0807\u0137\u0001\u0000\u0000\u0000\u0808\u0809\u0005\u00c5\u0000"+
		"\u0000\u0809\u080a\u0003\\.\u0000\u080a\u080b\u0003\u0080@\u0000\u080b"+
		"\u080c\u0005\u0005\u0000\u0000\u080c\u080d\u0003\\.\u0000\u080d\u080e"+
		"\u0003\u0080@\u0000\u080e\u080f\u0005\u0005\u0000\u0000\u080f\u0810\u0003"+
		"\\.\u0000\u0810\u0811\u0003\u0080@\u0000\u0811\u0812\u0003\u01c8\u00e4"+
		"\u0000\u0812\u0139\u0001\u0000\u0000\u0000\u0813\u0814\u0005\u013d\u0000"+
		"\u0000\u0814\u0815\u0003\\.\u0000\u0815\u0816\u0003\u0080@\u0000\u0816"+
		"\u0817\u0005\u0005\u0000\u0000\u0817\u0818\u0003\\.\u0000\u0818\u0819"+
		"\u0003\u0080@\u0000\u0819\u081a\u0005\u0005\u0000\u0000\u081a\u081b\u0003"+
		"\\.\u0000\u081b\u081c\u0003\u0080@\u0000\u081c\u081d\u0003\u01c8\u00e4"+
		"\u0000\u081d\u013b\u0001\u0000\u0000\u0000\u081e\u081f\u0005\u0091\u0000"+
		"\u0000\u081f\u0820\u0003\\.\u0000\u0820\u0821\u0003\u0080@\u0000\u0821"+
		"\u0822\u0005\u0005\u0000\u0000\u0822\u0823\u0003\u0318\u018c\u0000\u0823"+
		"\u0824\u0003\u01c8\u00e4\u0000\u0824\u013d\u0001\u0000\u0000\u0000\u0825"+
		"\u0826\u0005\u00c6\u0000\u0000\u0826\u0827\u0003\\.\u0000\u0827\u0828"+
		"\u0003\u0080@\u0000\u0828\u0829\u0005\u0005\u0000\u0000\u0829\u082a\u0003"+
		"\\.\u0000\u082a\u082b\u0003\u0080@\u0000\u082b\u082c\u0005\u0005\u0000"+
		"\u0000\u082c\u082d\u0003\u0318\u018c\u0000\u082d\u082e\u0003\u01c8\u00e4"+
		"\u0000\u082e\u013f\u0001\u0000\u0000\u0000\u082f\u0830\u0005\u0019\u0000"+
		"\u0000\u0830\u0831\u0003\u0142\u00a1\u0000\u0831\u0832\u0003\u0144\u00a2"+
		"\u0000\u0832\u0833\u0003\\.\u0000\u0833\u0834\u0003\u01c8\u00e4\u0000"+
		"\u0834\u087c\u0001\u0000\u0000\u0000\u0835\u0836\u0005\u0019\u0000\u0000"+
		"\u0836\u0837\u0003\u0142\u00a1\u0000\u0837\u0838\u0003\u0144\u00a2\u0000"+
		"\u0838\u0839\u0003\\.\u0000\u0839\u083a\u0005\u0005\u0000\u0000\u083a"+
		"\u083b\u0003\u02e2\u0171\u0000\u083b\u083c\u0003\u01c8\u00e4\u0000\u083c"+
		"\u087c\u0001\u0000\u0000\u0000\u083d\u083e\u0005\u0019\u0000\u0000\u083e"+
		"\u083f\u0003\u0142\u00a1\u0000\u083f\u0840\u0003\u0144\u00a2\u0000\u0840"+
		"\u0841\u0003\\.\u0000\u0841\u0842\u0005\u0005\u0000\u0000\u0842\u0843"+
		"\u0003\\.\u0000\u0843\u0844\u0003\u0080@\u0000\u0844\u0845\u0003\u01c8"+
		"\u00e4\u0000\u0845\u087c\u0001\u0000\u0000\u0000\u0846\u0847\u0005\u0019"+
		"\u0000\u0000\u0847\u0848\u0003\u0142\u00a1\u0000\u0848\u0849\u0003\u0144"+
		"\u00a2\u0000\u0849\u084a\u0003\\.\u0000\u084a\u084b\u0005\u0005\u0000"+
		"\u0000\u084b\u084c\u0003\\.\u0000\u084c\u084d\u0003\u0080@\u0000\u084d"+
		"\u084e\u0005\u0005\u0000\u0000\u084e\u084f\u0003\u02e2\u0171\u0000\u084f"+
		"\u0850\u0003\u01c8\u00e4\u0000\u0850\u087c\u0001\u0000\u0000\u0000\u0851"+
		"\u0852\u0005\u0019\u0000\u0000\u0852\u0853\u0003\u0142\u00a1\u0000\u0853"+
		"\u0854\u0003\u0144\u00a2\u0000\u0854\u0855\u0003\\.\u0000\u0855\u0856"+
		"\u0005\u0005\u0000\u0000\u0856\u0857\u0003l6\u0000\u0857\u0858\u0003\u01c8"+
		"\u00e4\u0000\u0858\u087c\u0001\u0000\u0000\u0000\u0859\u085a\u0005\u0019"+
		"\u0000\u0000\u085a\u085b\u0003\u0142\u00a1\u0000\u085b\u085c\u0003\u0144"+
		"\u00a2\u0000\u085c\u085d\u0003\\.\u0000\u085d\u085e\u0005\u0005\u0000"+
		"\u0000\u085e\u085f\u0003\u02e2\u0171\u0000\u085f\u0860\u0005\u0005\u0000"+
		"\u0000\u0860\u0861\u0003l6\u0000\u0861\u0862\u0003\u01c8\u00e4\u0000\u0862"+
		"\u087c\u0001\u0000\u0000\u0000\u0863\u0864\u0005\u0019\u0000\u0000\u0864"+
		"\u0865\u0003\u0142\u00a1\u0000\u0865\u0866\u0003\u0144\u00a2\u0000\u0866"+
		"\u0867\u0003\\.\u0000\u0867\u0868\u0005\u0005\u0000\u0000\u0868\u0869"+
		"\u0003\\.\u0000\u0869\u086a\u0003\u0080@\u0000\u086a\u086b\u0005\u0005"+
		"\u0000\u0000\u086b\u086c\u0003l6\u0000\u086c\u086d\u0003\u01c8\u00e4\u0000"+
		"\u086d\u087c\u0001\u0000\u0000\u0000\u086e\u086f\u0005\u0019\u0000\u0000"+
		"\u086f\u0870\u0003\u0142\u00a1\u0000\u0870\u0871\u0003\u0144\u00a2\u0000"+
		"\u0871\u0872\u0003\\.\u0000\u0872\u0873\u0005\u0005\u0000\u0000\u0873"+
		"\u0874\u0003\\.\u0000\u0874\u0875\u0003\u0080@\u0000\u0875\u0876\u0005"+
		"\u0005\u0000\u0000\u0876\u0877\u0003\u02e2\u0171\u0000\u0877\u0878\u0005"+
		"\u0005\u0000\u0000\u0878\u0879\u0003l6\u0000\u0879\u087a\u0003\u01c8\u00e4"+
		"\u0000\u087a\u087c\u0001\u0000\u0000\u0000\u087b\u082f\u0001\u0000\u0000"+
		"\u0000\u087b\u0835\u0001\u0000\u0000\u0000\u087b\u083d\u0001\u0000\u0000"+
		"\u0000\u087b\u0846\u0001\u0000\u0000\u0000\u087b\u0851\u0001\u0000\u0000"+
		"\u0000\u087b\u0859\u0001\u0000\u0000\u0000\u087b\u0863\u0001\u0000\u0000"+
		"\u0000\u087b\u086e\u0001\u0000\u0000\u0000\u087c\u0141\u0001\u0000\u0000"+
		"\u0000\u087d\u087f\u0005\u00bc\u0000\u0000\u087e\u087d\u0001\u0000\u0000"+
		"\u0000\u087e\u087f\u0001\u0000\u0000\u0000\u087f\u0143\u0001\u0000\u0000"+
		"\u0000\u0880\u0882\u0005\u0153\u0000\u0000\u0881\u0880\u0001\u0000\u0000"+
		"\u0000\u0881\u0882\u0001\u0000\u0000\u0000\u0882\u0145\u0001\u0000\u0000"+
		"\u0000\u0883\u0885\u0005\u00db\u0000\u0000\u0884\u0886\u0005\u0198\u0000"+
		"\u0000\u0885\u0884\u0001\u0000\u0000\u0000\u0885\u0886\u0001\u0000\u0000"+
		"\u0000\u0886\u0887\u0001\u0000\u0000\u0000\u0887\u0888\u0003\\.\u0000"+
		"\u0888\u0889\u0005\u0005\u0000\u0000\u0889\u088a\u0003\\.\u0000\u088a"+
		"\u088b\u0003\u0080@\u0000\u088b\u088c\u0003\u01c8\u00e4\u0000\u088c\u08b6"+
		"\u0001\u0000\u0000\u0000\u088d\u088f\u0005\u00db\u0000\u0000\u088e\u0890"+
		"\u0005\u0198\u0000\u0000\u088f\u088e\u0001\u0000\u0000\u0000\u088f\u0890"+
		"\u0001\u0000\u0000\u0000\u0890\u0891\u0001\u0000\u0000\u0000\u0891\u0892"+
		"\u0003\\.\u0000\u0892\u0893\u0005\u0005\u0000\u0000\u0893\u0894\u0003"+
		"\\.\u0000\u0894\u0895\u0003\u0080@\u0000\u0895\u0896\u0005\u0005\u0000"+
		"\u0000\u0896\u0897\u0003\u02e2\u0171\u0000\u0897\u0898\u0003\u01c8\u00e4"+
		"\u0000\u0898\u08b6\u0001\u0000\u0000\u0000\u0899\u089a\u0005\u00db\u0000"+
		"\u0000\u089a\u089c\u00050\u0000\u0000\u089b\u089d\u0005\u0198\u0000\u0000"+
		"\u089c\u089b\u0001\u0000\u0000\u0000\u089c\u089d\u0001\u0000\u0000\u0000"+
		"\u089d\u089e\u0001\u0000\u0000\u0000\u089e\u089f\u0003\\.\u0000\u089f"+
		"\u08a0\u0005\u0005\u0000\u0000\u08a0\u08a1\u0003\\.\u0000\u08a1\u08a2"+
		"\u0003\u0080@\u0000\u08a2\u08a3\u0003\u034c\u01a6\u0000\u08a3\u08a4\u0003"+
		"\u02ec\u0176\u0000\u08a4\u08a5\u0003\u01c8\u00e4\u0000\u08a5\u08b6\u0001"+
		"\u0000\u0000\u0000\u08a6\u08a7\u0005\u00db\u0000\u0000\u08a7\u08a9\u0005"+
		"0\u0000\u0000\u08a8\u08aa\u0005\u0198\u0000\u0000\u08a9\u08a8\u0001\u0000"+
		"\u0000\u0000\u08a9\u08aa\u0001\u0000\u0000\u0000\u08aa\u08ab\u0001\u0000"+
		"\u0000\u0000\u08ab\u08ac\u0003\\.\u0000\u08ac\u08ad\u0005\u0005\u0000"+
		"\u0000\u08ad\u08ae\u0003\\.\u0000\u08ae\u08af\u0003\u0080@\u0000\u08af"+
		"\u08b0\u0003\u034c\u01a6\u0000\u08b0\u08b1\u0003\u02ec\u0176\u0000\u08b1"+
		"\u08b2\u0005\u0005\u0000\u0000\u08b2\u08b3\u0003\u02e2\u0171\u0000\u08b3"+
		"\u08b4\u0003\u01c8\u00e4\u0000\u08b4\u08b6\u0001\u0000\u0000\u0000\u08b5"+
		"\u0883\u0001\u0000\u0000\u0000\u08b5\u088d\u0001\u0000\u0000\u0000\u08b5"+
		"\u0899\u0001\u0000\u0000\u0000\u08b5\u08a6\u0001\u0000\u0000\u0000\u08b6"+
		"\u0147\u0001\u0000\u0000\u0000\u08b7\u08b9\u0005\u014f\u0000\u0000\u08b8"+
		"\u08ba\u0005\u0198\u0000\u0000\u08b9\u08b8\u0001\u0000\u0000\u0000\u08b9"+
		"\u08ba\u0001\u0000\u0000\u0000\u08ba\u08bb\u0001\u0000\u0000\u0000\u08bb"+
		"\u08bc\u0003\\.\u0000\u08bc\u08bd\u0003\u0080@\u0000\u08bd\u08be\u0005"+
		"\u0005\u0000\u0000\u08be\u08bf\u0003\\.\u0000\u08bf\u08c0\u0003\u0080"+
		"@\u0000\u08c0\u08c1\u0003\u01c8\u00e4\u0000\u08c1\u08ee\u0001\u0000\u0000"+
		"\u0000\u08c2\u08c4\u0005\u014f\u0000\u0000\u08c3\u08c5\u0005\u0198\u0000"+
		"\u0000\u08c4\u08c3\u0001\u0000\u0000\u0000\u08c4\u08c5\u0001\u0000\u0000"+
		"\u0000\u08c5\u08c6\u0001\u0000\u0000\u0000\u08c6\u08c7\u0003\\.\u0000"+
		"\u08c7\u08c8\u0003\u0080@\u0000\u08c8\u08c9\u0005\u0005\u0000\u0000\u08c9"+
		"\u08ca\u0003\\.\u0000\u08ca\u08cb\u0003\u0080@\u0000\u08cb\u08cc\u0005"+
		"\u0005\u0000\u0000\u08cc\u08cd\u0003\u02e2\u0171\u0000\u08cd\u08ce\u0003"+
		"\u01c8\u00e4\u0000\u08ce\u08ee\u0001\u0000\u0000\u0000\u08cf\u08d0\u0005"+
		"\u014f\u0000\u0000\u08d0\u08d2\u00050\u0000\u0000\u08d1\u08d3\u0005\u0198"+
		"\u0000\u0000\u08d2\u08d1\u0001\u0000\u0000\u0000\u08d2\u08d3\u0001\u0000"+
		"\u0000\u0000\u08d3\u08d4\u0001\u0000\u0000\u0000\u08d4\u08d5\u0003\\."+
		"\u0000\u08d5\u08d6\u0003\u0080@\u0000\u08d6\u08d7\u0005\u0005\u0000\u0000"+
		"\u08d7\u08d8\u0003\\.\u0000\u08d8\u08d9\u0003\u0080@\u0000\u08d9\u08da"+
		"\u0003\u034c\u01a6\u0000\u08da\u08db\u0003\u02ec\u0176\u0000\u08db\u08dc"+
		"\u0003\u01c8\u00e4\u0000\u08dc\u08ee\u0001\u0000\u0000\u0000\u08dd\u08de"+
		"\u0005\u014f\u0000\u0000\u08de\u08e0\u00050\u0000\u0000\u08df\u08e1\u0005"+
		"\u0198\u0000\u0000\u08e0\u08df\u0001\u0000\u0000\u0000\u08e0\u08e1\u0001"+
		"\u0000\u0000\u0000\u08e1\u08e2\u0001\u0000\u0000\u0000\u08e2\u08e3\u0003"+
		"\\.\u0000\u08e3\u08e4\u0003\u0080@\u0000\u08e4\u08e5\u0005\u0005\u0000"+
		"\u0000\u08e5\u08e6\u0003\\.\u0000\u08e6\u08e7\u0003\u0080@\u0000\u08e7"+
		"\u08e8\u0003\u034c\u01a6\u0000\u08e8\u08e9\u0003\u02ec\u0176\u0000\u08e9"+
		"\u08ea\u0005\u0005\u0000\u0000\u08ea\u08eb\u0003\u02e2\u0171\u0000\u08eb"+
		"\u08ec\u0003\u01c8\u00e4\u0000\u08ec\u08ee\u0001\u0000\u0000\u0000\u08ed"+
		"\u08b7\u0001\u0000\u0000\u0000\u08ed\u08c2\u0001\u0000\u0000\u0000\u08ed"+
		"\u08cf\u0001\u0000\u0000\u0000\u08ed\u08dd\u0001\u0000\u0000\u0000\u08ee"+
		"\u0149\u0001\u0000\u0000\u0000\u08ef\u08f0\u0005\u0099\u0000\u0000\u08f0"+
		"\u08f1\u0003\u034c\u01a6\u0000\u08f1\u08f2\u0003\u02ec\u0176\u0000\u08f2"+
		"\u08f3\u0003\u01c8\u00e4\u0000\u08f3\u014b\u0001\u0000\u0000\u0000\u08f4"+
		"\u08f5\u0005L\u0000\u0000\u08f5\u08f7\u0003\u014e\u00a7\u0000\u08f6\u08f8"+
		"\u0005\u0198\u0000\u0000\u08f7\u08f6\u0001\u0000\u0000\u0000\u08f7\u08f8"+
		"\u0001\u0000\u0000\u0000\u08f8\u08f9\u0001\u0000\u0000\u0000\u08f9\u08fa"+
		"\u0003\\.\u0000\u08fa\u08fb\u0003\u0080@\u0000\u08fb\u08fc\u0005\u0005"+
		"\u0000\u0000\u08fc\u08fd\u0003\\.\u0000\u08fd\u08fe\u0003\u0080@\u0000"+
		"\u08fe\u08ff\u0005\u0005\u0000\u0000\u08ff\u0900\u0003\\.\u0000\u0900"+
		"\u0901\u0003\u0080@\u0000\u0901\u0902\u0003\u034c\u01a6\u0000\u0902\u0903"+
		"\u0003\u02ec\u0176\u0000\u0903\u0904\u0003\u02ec\u0176\u0000\u0904\u0905"+
		"\u0003\u01c8\u00e4\u0000\u0905\u014d\u0001\u0000\u0000\u0000\u0906\u0908"+
		"\u0005\u0183\u0000\u0000\u0907\u0906\u0001\u0000\u0000\u0000\u0907\u0908"+
		"\u0001\u0000\u0000";
	private static final String _serializedATNSegment1 =
		"\u0000\u0908\u014f\u0001\u0000\u0000\u0000\u0909\u090b\u00051\u0000\u0000"+
		"\u090a\u090c\u0005\u0198\u0000\u0000\u090b\u090a\u0001\u0000\u0000\u0000"+
		"\u090b\u090c\u0001\u0000\u0000\u0000\u090c\u090d\u0001\u0000\u0000\u0000"+
		"\u090d\u090e\u0003\u0152\u00a9\u0000\u090e\u090f\u0003\\.\u0000\u090f"+
		"\u0910\u0003\u0080@\u0000\u0910\u0911\u0005\u0005\u0000\u0000\u0911\u0912"+
		"\u0003\\.\u0000\u0912\u0913\u0003\u0080@\u0000\u0913\u0914\u0003\u034c"+
		"\u01a6\u0000\u0914\u0915\u0003\u02ec\u0176\u0000\u0915\u0916\u0003\u01c8"+
		"\u00e4\u0000\u0916\u0151\u0001\u0000\u0000\u0000\u0917\u0918\u0007\u0005"+
		"\u0000\u0000\u0918\u0153\u0001\u0000\u0000\u0000\u0919\u091a\u0005\u00ab"+
		"\u0000\u0000\u091a\u091b\u0003\u0314\u018a\u0000\u091b\u091c\u0003\\."+
		"\u0000\u091c\u091d\u0005\u0005\u0000\u0000\u091d\u091e\u0003\\.\u0000"+
		"\u091e\u091f\u0003\u0080@\u0000\u091f\u0920\u0003\u01c8\u00e4\u0000\u0920"+
		"\u092c\u0001\u0000\u0000\u0000\u0921\u0922\u0005\u00ab\u0000\u0000\u0922"+
		"\u0923\u0003\u0314\u018a\u0000\u0923\u0924\u0003\\.\u0000\u0924\u0925"+
		"\u0005\u0005\u0000\u0000\u0925\u0926\u0003\\.\u0000\u0926\u0927\u0003"+
		"\u0080@\u0000\u0927\u0928\u0005\u0005\u0000\u0000\u0928\u0929\u0003\u02d8"+
		"\u016c\u0000\u0929\u092a\u0003\u01c8\u00e4\u0000\u092a\u092c\u0001\u0000"+
		"\u0000\u0000\u092b\u0919\u0001\u0000\u0000\u0000\u092b\u0921\u0001\u0000"+
		"\u0000\u0000\u092c\u0155\u0001\u0000\u0000\u0000\u092d\u092e\u0005\u0162"+
		"\u0000\u0000\u092e\u092f\u0003\\.\u0000\u092f\u0930\u0003\u0080@\u0000"+
		"\u0930\u0931\u0005\u015e\u0000\u0000\u0931\u0932\u0003\\.\u0000\u0932"+
		"\u0933\u0003\u01c8\u00e4\u0000\u0933\u0157\u0001\u0000\u0000\u0000\u0934"+
		"\u0935\u0005\u0197\u0000\u0000\u0935\u0936\u0003\\.\u0000\u0936\u0937"+
		"\u0003\u0080@\u0000\u0937\u0938\u0005\u015e\u0000\u0000\u0938\u0939\u0003"+
		"\\.\u0000\u0939\u093a\u0003\u01c8\u00e4\u0000\u093a\u0159\u0001\u0000"+
		"\u0000\u0000\u093b\u093c\u0005\u0139\u0000\u0000\u093c\u093d\u0003\\."+
		"\u0000\u093d\u093e\u0003\u0080@\u0000\u093e\u093f\u0005\u015e\u0000\u0000"+
		"\u093f\u0940\u0003\\.\u0000\u0940\u0941\u0003\u01c8\u00e4\u0000\u0941"+
		"\u015b\u0001\u0000\u0000\u0000\u0942\u0943\u0005\u00a4\u0000\u0000\u0943"+
		"\u0944\u0003\\.\u0000\u0944\u0945\u0003\u0080@\u0000\u0945\u0946\u0005"+
		"\u015e\u0000\u0000\u0946\u0947\u0003\\.\u0000\u0947\u0948\u0003\u01c8"+
		"\u00e4\u0000\u0948\u015d\u0001\u0000\u0000\u0000\u0949\u094a\u0005\u00a1"+
		"\u0000\u0000\u094a\u094b\u0003\\.\u0000\u094b\u094c\u0003\u0080@\u0000"+
		"\u094c\u094d\u0005\u015e\u0000\u0000\u094d\u094e\u0003\\.\u0000\u094e"+
		"\u094f\u0003\u01c8\u00e4\u0000\u094f\u015f\u0001\u0000\u0000\u0000\u0950"+
		"\u0951\u0005\u00a3\u0000\u0000\u0951\u0952\u0003\\.\u0000\u0952\u0953"+
		"\u0003\u0080@\u0000\u0953\u0954\u0005\u015e\u0000\u0000\u0954\u0955\u0003"+
		"\\.\u0000\u0955\u0956\u0003\u01c8\u00e4\u0000\u0956\u0161\u0001\u0000"+
		"\u0000\u0000\u0957\u0958\u0005\u00a2\u0000\u0000\u0958\u0959\u0003\\."+
		"\u0000\u0959\u095a\u0003\u0080@\u0000\u095a\u095b\u0005\u015e\u0000\u0000"+
		"\u095b\u095c\u0003\\.\u0000\u095c\u095d\u0003\u01c8\u00e4\u0000\u095d"+
		"\u0163\u0001\u0000\u0000\u0000\u095e\u095f\u0005\u016a\u0000\u0000\u095f"+
		"\u0960\u0003\\.\u0000\u0960\u0961\u0003\u0080@\u0000\u0961\u0962\u0005"+
		"\u015e\u0000\u0000\u0962\u0963\u0003\\.\u0000\u0963\u0964\u0003\u01c8"+
		"\u00e4\u0000\u0964\u0165\u0001\u0000\u0000\u0000\u0965\u0966\u0005\u0140"+
		"\u0000\u0000\u0966\u0967\u0003\\.\u0000\u0967\u0968\u0003\u0080@\u0000"+
		"\u0968\u0969\u0005\u015e\u0000\u0000\u0969\u096a\u0003\\.\u0000\u096a"+
		"\u096b\u0003\u01c8\u00e4\u0000\u096b\u0167\u0001\u0000\u0000\u0000\u096c"+
		"\u096d\u0005\u011e\u0000\u0000\u096d\u096e\u0003\\.\u0000\u096e\u096f"+
		"\u0003\u0080@\u0000\u096f\u0970\u0005\u015e\u0000\u0000\u0970\u0971\u0003"+
		"\\.\u0000\u0971\u0972\u0003\u01c8\u00e4\u0000\u0972\u0169\u0001\u0000"+
		"\u0000\u0000\u0973\u0974\u0005\u00ca\u0000\u0000\u0974\u0975\u0003\\."+
		"\u0000\u0975\u0976\u0003\u0080@\u0000\u0976\u0977\u0005\u015e\u0000\u0000"+
		"\u0977\u0978\u0003\\.\u0000\u0978\u0979\u0003\u01c8\u00e4\u0000\u0979"+
		"\u016b\u0001\u0000\u0000\u0000\u097a\u097b\u00058\u0000\u0000\u097b\u097c"+
		"\u0003\\.\u0000\u097c\u097d\u0003\u0080@\u0000\u097d\u097e\u0005\u015e"+
		"\u0000\u0000\u097e\u097f\u0003\\.\u0000\u097f\u0980\u0003\u01c8\u00e4"+
		"\u0000\u0980\u016d\u0001\u0000\u0000\u0000\u0981\u0982\u0005\u0013\u0000"+
		"\u0000\u0982\u0983\u0003\\.\u0000\u0983\u0984\u0003\u0080@\u0000\u0984"+
		"\u0985\u0005\u015e\u0000\u0000\u0985\u0986\u0003\\.\u0000\u0986\u0987"+
		"\u0003\u01c8\u00e4\u0000\u0987\u016f\u0001\u0000\u0000\u0000\u0988\u0989"+
		"\u0005\u00b6\u0000\u0000\u0989\u098a\u0003\u031c\u018e\u0000\u098a\u098b"+
		"\u0003\\.\u0000\u098b\u098c\u0003\u0080@\u0000\u098c\u098d\u0005\u0005"+
		"\u0000\u0000\u098d\u098e\u0003\u0080@\u0000\u098e\u098f\u0003\u01c8\u00e4"+
		"\u0000\u098f\u0171\u0001\u0000\u0000\u0000\u0990\u0991\u0005\u0097\u0000"+
		"\u0000\u0991\u0992\u0003\u0306\u0183\u0000\u0992\u0993\u0003\u030c\u0186"+
		"\u0000\u0993\u0994\u0003\\.\u0000\u0994\u0995\u0003\u0080@\u0000\u0995"+
		"\u0996\u0005\u0005\u0000\u0000\u0996\u0997\u0003\u0080@\u0000\u0997\u0998"+
		"\u0003\u01c8\u00e4\u0000\u0998\u0173\u0001\u0000\u0000\u0000\u0999\u099a"+
		"\u0005\u0115\u0000\u0000\u099a\u099b\u0003\\.\u0000\u099b\u099c\u0003"+
		"\u0176\u00bb\u0000\u099c\u099d\u0003\u01c8\u00e4\u0000\u099d\u0175\u0001"+
		"\u0000\u0000\u0000\u099e\u099f\u0006\u00bb\uffff\uffff\u0000\u099f\u09a0"+
		"\u0003\u0178\u00bc\u0000\u09a0\u09a6\u0001\u0000\u0000\u0000\u09a1\u09a2"+
		"\n\u0001\u0000\u0000\u09a2\u09a3\u0005\u0005\u0000\u0000\u09a3\u09a5\u0003"+
		"\u0178\u00bc\u0000\u09a4\u09a1\u0001\u0000\u0000\u0000\u09a5\u09a8\u0001"+
		"\u0000\u0000\u0000\u09a6\u09a4\u0001\u0000\u0000\u0000\u09a6\u09a7\u0001"+
		"\u0000\u0000\u0000\u09a7\u0177\u0001\u0000\u0000\u0000\u09a8\u09a6\u0001"+
		"\u0000\u0000\u0000\u09a9\u09aa\u0005\n\u0000\u0000\u09aa\u09ab\u0003\u0080"+
		"@\u0000\u09ab\u09ac\u0005\u0005\u0000\u0000\u09ac\u09ad\u0003P(\u0000"+
		"\u09ad\u09ae\u0005\u000b\u0000\u0000\u09ae\u0179\u0001\u0000\u0000\u0000"+
		"\u09af\u09b0\u0005\u0136\u0000\u0000\u09b0\u09b1\u0003\\.\u0000\u09b1"+
		"\u09b2\u0003\u0080@\u0000\u09b2\u09b3\u0005\u0005\u0000\u0000\u09b3\u09b4"+
		"\u0003\\.\u0000\u09b4\u09b5\u0003\u0080@\u0000\u09b5\u09b6\u0005\u0005"+
		"\u0000\u0000\u09b6\u09b7\u0003\\.\u0000\u09b7\u09b8\u0003\u0080@\u0000"+
		"\u09b8\u09b9\u0003\u01c8\u00e4\u0000\u09b9\u017b\u0001\u0000\u0000\u0000"+
		"\u09ba\u09bb\u0003\u017e\u00bf\u0000\u09bb\u09bc\u0005>\u0000\u0000\u09bc"+
		"\u09bd\u0003\u0306\u0183\u0000\u09bd\u09be\u0003\u02ee\u0177\u0000\u09be"+
		"\u09bf\u0003\u0342\u01a1\u0000\u09bf\u09c0\u0003\\.\u0000\u09c0\u09c1"+
		"\u0003\u0080@\u0000\u09c1\u09c2\u0005\b\u0000\u0000\u09c2\u09c3\u0003"+
		"\u02e6\u0173\u0000\u09c3\u09c4\u0005\t\u0000\u0000\u09c4\u09c5\u0003\u030e"+
		"\u0187\u0000\u09c5\u09c6\u0003\u0326\u0193\u0000\u09c6\u09c7\u0003\u01c8"+
		"\u00e4\u0000\u09c7\u017d\u0001\u0000\u0000\u0000\u09c8\u09ca\u0007\u0006"+
		"\u0000\u0000\u09c9\u09c8\u0001\u0000\u0000\u0000\u09c9\u09ca\u0001\u0000"+
		"\u0000\u0000\u09ca\u017f\u0001\u0000\u0000\u0000\u09cb\u09cc\u0005\u017b"+
		"\u0000\u0000\u09cc\u09cd\u0003\\.\u0000\u09cd\u09ce\u0003\u0080@\u0000"+
		"\u09ce\u09cf\u0005\u0005\u0000\u0000\u09cf\u09d0\u0003\\.\u0000\u09d0"+
		"\u09d1\u0003\u01c8\u00e4\u0000\u09d1\u0181\u0001\u0000\u0000\u0000\u09d2"+
		"\u09d3\u0005\u00d3\u0000\u0000\u09d3\u09d4\u0003\\.\u0000\u09d4\u09d5"+
		"\u0003\u0184\u00c2\u0000\u09d5\u09d6\u0003\u0186\u00c3\u0000\u09d6\u09d7"+
		"\u0003\u01c8\u00e4\u0000\u09d7\u0183\u0001\u0000\u0000\u0000\u09d8\u09da"+
		"\u0005I\u0000\u0000\u09d9\u09d8\u0001\u0000\u0000\u0000\u09d9\u09da\u0001"+
		"\u0000\u0000\u0000\u09da\u0185\u0001\u0000\u0000\u0000\u09db\u09dd\u0003"+
		"\u0188\u00c4\u0000\u09dc\u09db\u0001\u0000\u0000\u0000\u09dc\u09dd\u0001"+
		"\u0000\u0000\u0000\u09dd\u0187\u0001\u0000\u0000\u0000\u09de\u09df\u0006"+
		"\u00c4\uffff\uffff\u0000\u09df\u09e0\u0003\u018a\u00c5\u0000\u09e0\u09e5"+
		"\u0001\u0000\u0000\u0000\u09e1\u09e2\n\u0001\u0000\u0000\u09e2\u09e4\u0003"+
		"\u018a\u00c5\u0000\u09e3\u09e1\u0001\u0000\u0000\u0000\u09e4\u09e7\u0001"+
		"\u0000\u0000\u0000\u09e5\u09e3\u0001\u0000\u0000\u0000\u09e5\u09e6\u0001"+
		"\u0000\u0000\u0000\u09e6\u0189\u0001\u0000\u0000\u0000\u09e7\u09e5\u0001"+
		"\u0000\u0000\u0000\u09e8\u09e9\u0005@\u0000\u0000\u09e9\u09ea\u0003\\"+
		".\u0000\u09ea\u09eb\u0003\u0080@\u0000\u09eb\u09f1\u0001\u0000\u0000\u0000"+
		"\u09ec\u09ed\u0005\u009c\u0000\u0000\u09ed\u09ee\u0003\\.\u0000\u09ee"+
		"\u09ef\u0003\u009cN\u0000\u09ef\u09f1\u0001\u0000\u0000\u0000\u09f0\u09e8"+
		"\u0001\u0000\u0000\u0000\u09f0\u09ec\u0001\u0000\u0000\u0000\u09f1\u018b"+
		"\u0001\u0000\u0000\u0000\u09f2\u09f3\u0005A\u0000\u0000\u09f3\u09f4\u0005"+
		"\u0187\u0000\u0000\u09f4\u09f5\u0003P(\u0000\u09f5\u09f6\u0005\n\u0000"+
		"\u0000\u09f6\u09f7\u0003\u02fe\u017f\u0000\u09f7\u09f8\u0005\u000b\u0000"+
		"\u0000\u09f8\u09f9\u0003\u01c8\u00e4\u0000\u09f9\u018d\u0001\u0000\u0000"+
		"\u0000\u09fa\u09fb\u0005J\u0000\u0000\u09fb\u09fc\u0005\u0187\u0000\u0000"+
		"\u09fc\u09fd\u0003\u0304\u0182\u0000\u09fd\u09fe\u0005\n\u0000\u0000\u09fe"+
		"\u09ff\u0003\u02fe\u017f\u0000\u09ff\u0a00\u0005\u000b\u0000\u0000\u0a00"+
		"\u0a01\u0003\u01c8\u00e4\u0000\u0a01\u018f\u0001\u0000\u0000\u0000\u0a02"+
		"\u0a0e\u0003\u0192\u00c9\u0000\u0a03\u0a0e\u0003\u0194\u00ca\u0000\u0a04"+
		"\u0a0e\u0003\u0196\u00cb\u0000\u0a05\u0a0e\u0003\u0198\u00cc\u0000\u0a06"+
		"\u0a0e\u0003\u01a0\u00d0\u0000\u0a07\u0a0e\u0003\u01a6\u00d3\u0000\u0a08"+
		"\u0a0e\u0003\u01a8\u00d4\u0000\u0a09\u0a0e\u0003\u01aa\u00d5\u0000\u0a0a"+
		"\u0a0e\u0003\u01ac\u00d6\u0000\u0a0b\u0a0e\u0003\u01ae\u00d7\u0000\u0a0c"+
		"\u0a0e\u0003\u01b0\u00d8\u0000\u0a0d\u0a02\u0001\u0000\u0000\u0000\u0a0d"+
		"\u0a03\u0001\u0000\u0000\u0000\u0a0d\u0a04\u0001\u0000\u0000\u0000\u0a0d"+
		"\u0a05\u0001\u0000\u0000\u0000\u0a0d\u0a06\u0001\u0000\u0000\u0000\u0a0d"+
		"\u0a07\u0001\u0000\u0000\u0000\u0a0d\u0a08\u0001\u0000\u0000\u0000\u0a0d"+
		"\u0a09\u0001\u0000\u0000\u0000\u0a0d\u0a0a\u0001\u0000\u0000\u0000\u0a0d"+
		"\u0a0b\u0001\u0000\u0000\u0000\u0a0d\u0a0c\u0001\u0000\u0000\u0000\u0a0e"+
		"\u0191\u0001\u0000\u0000\u0000\u0a0f\u0a10\u0005\u0126\u0000\u0000\u0a10"+
		"\u0a11\u0003`0\u0000\u0a11\u0a12\u0003\u01c8\u00e4\u0000\u0a12\u0a1f\u0001"+
		"\u0000\u0000\u0000\u0a13\u0a19\u0005\u0126\u0000\u0000\u0a14\u0a15\u0003"+
		"\\.\u0000\u0a15\u0a16\u0003j5\u0000\u0a16\u0a17\u0005\u000e\u0000\u0000"+
		"\u0a17\u0a1a\u0001\u0000\u0000\u0000\u0a18\u0a1a\u0003^/\u0000\u0a19\u0a14"+
		"\u0001\u0000\u0000\u0000\u0a19\u0a18\u0001\u0000\u0000\u0000\u0a1a\u0a1b"+
		"\u0001\u0000\u0000\u0000\u0a1b\u0a1c\u0003\u0080@\u0000\u0a1c\u0a1d\u0003"+
		"\u01c8\u00e4\u0000\u0a1d\u0a1f\u0001\u0000\u0000\u0000\u0a1e\u0a0f\u0001"+
		"\u0000\u0000\u0000\u0a1e\u0a13\u0001\u0000\u0000\u0000\u0a1f\u0193\u0001"+
		"\u0000\u0000\u0000\u0a20\u0a21\u0005:\u0000\u0000\u0a21\u0a22\u0003p8"+
		"\u0000\u0a22\u0a23\u0003P(\u0000\u0a23\u0a24\u0003\u01c8\u00e4\u0000\u0a24"+
		"\u0195\u0001\u0000\u0000\u0000\u0a25\u0a26\u0005:\u0000\u0000\u0a26\u0a27"+
		"\u0003b1\u0000\u0a27\u0a28\u0003\u0080@\u0000\u0a28\u0a29\u0005\u0005"+
		"\u0000\u0000\u0a29\u0a2a\u0003p8\u0000\u0a2a\u0a2b\u0003P(\u0000\u0a2b"+
		"\u0a2c\u0005\u0005\u0000\u0000\u0a2c\u0a2d\u0003p8\u0000\u0a2d\u0a2e\u0003"+
		"P(\u0000\u0a2e\u0a2f\u0003\u01c8\u00e4\u0000\u0a2f\u0197\u0001\u0000\u0000"+
		"\u0000\u0a30\u0a31\u0005\u0155\u0000\u0000\u0a31\u0a32\u0003\\.\u0000"+
		"\u0a32\u0a33\u0003\u0080@\u0000\u0a33\u0a34\u0005\u0005\u0000\u0000\u0a34"+
		"\u0a35\u0003p8\u0000\u0a35\u0a36\u0003P(\u0000\u0a36\u0a37\u0005\n\u0000"+
		"\u0000\u0a37\u0a38\u0003\u019a\u00cd\u0000\u0a38\u0a39\u0005\u000b\u0000"+
		"\u0000\u0a39\u0a3a\u0003\u01c8\u00e4\u0000\u0a3a\u0199\u0001\u0000\u0000"+
		"\u0000\u0a3b\u0a3d\u0003\u019c\u00ce\u0000\u0a3c\u0a3b\u0001\u0000\u0000"+
		"\u0000\u0a3c\u0a3d\u0001\u0000\u0000\u0000\u0a3d\u019b\u0001\u0000\u0000"+
		"\u0000\u0a3e\u0a3f\u0006\u00ce\uffff\uffff\u0000\u0a3f\u0a40\u0003\u019e"+
		"\u00cf\u0000\u0a40\u0a45\u0001\u0000\u0000\u0000\u0a41\u0a42\n\u0001\u0000"+
		"\u0000\u0a42\u0a44\u0003\u019e\u00cf\u0000\u0a43\u0a41\u0001\u0000\u0000"+
		"\u0000\u0a44\u0a47\u0001\u0000\u0000\u0000\u0a45\u0a43\u0001\u0000\u0000"+
		"\u0000\u0a45\u0a46\u0001\u0000\u0000\u0000\u0a46\u019d\u0001\u0000\u0000"+
		"\u0000\u0a47\u0a45\u0001\u0000\u0000\u0000\u0a48\u0a49\u0003\\.\u0000"+
		"\u0a49\u0a4a\u0003\u0090H\u0000\u0a4a\u0a4b\u0005\u0005\u0000\u0000\u0a4b"+
		"\u0a4c\u0003p8\u0000\u0a4c\u0a4d\u0003P(\u0000\u0a4d\u019f\u0001\u0000"+
		"\u0000\u0000\u0a4e\u0a4f\u0005\u00bf\u0000\u0000\u0a4f\u0a50\u0003\\."+
		"\u0000\u0a50\u0a51\u0003\u0080@\u0000\u0a51\u0a52\u0005\u0005\u0000\u0000"+
		"\u0a52\u0a53\u0005\n\u0000\u0000\u0a53\u0a54\u0003\u01a2\u00d1\u0000\u0a54"+
		"\u0a55\u0005\u000b\u0000\u0000\u0a55\u0a56\u0003\u01c8\u00e4\u0000\u0a56"+
		"\u01a1\u0001\u0000\u0000\u0000\u0a57\u0a58\u0006\u00d1\uffff\uffff\u0000"+
		"\u0a58\u0a59\u0003\u01a4\u00d2\u0000\u0a59\u0a5f\u0001\u0000\u0000\u0000"+
		"\u0a5a\u0a5b\n\u0001\u0000\u0000\u0a5b\u0a5c\u0005\u0005\u0000\u0000\u0a5c"+
		"\u0a5e\u0003\u01a4\u00d2\u0000\u0a5d\u0a5a\u0001\u0000\u0000\u0000\u0a5e"+
		"\u0a61\u0001\u0000\u0000\u0000\u0a5f\u0a5d\u0001\u0000\u0000\u0000\u0a5f"+
		"\u0a60\u0001\u0000\u0000\u0000\u0a60\u01a3\u0001\u0000\u0000\u0000\u0a61"+
		"\u0a5f\u0001\u0000\u0000\u0000\u0a62\u0a63\u0003p8\u0000\u0a63\u0a64\u0003"+
		"P(\u0000\u0a64\u01a5\u0001\u0000\u0000\u0000\u0a65\u0a66\u0005\u00cb\u0000"+
		"\u0000\u0a66\u0a67\u0003\u02ee\u0177\u0000\u0a67\u0a68\u0003\u0342\u01a1"+
		"\u0000\u0a68\u0a69\u0003\\.\u0000\u0a69\u0a6a\u0003\u0080@\u0000\u0a6a"+
		"\u0a6b\u0005\b\u0000\u0000\u0a6b\u0a6c\u0003\u02e6\u0173\u0000\u0a6c\u0a6d"+
		"\u0005\t\u0000\u0000\u0a6d\u0a6e\u0003\u030e\u0187\u0000\u0a6e\u0a6f\u0003"+
		"\u0326\u0193\u0000\u0a6f\u0a70\u0005\u015e\u0000\u0000\u0a70\u0a71\u0003"+
		"p8\u0000\u0a71\u0a72\u0003P(\u0000\u0a72\u0a73\u0005\u0176\u0000\u0000"+
		"\u0a73\u0a74\u0003p8\u0000\u0a74\u0a75\u0003P(\u0000\u0a75\u0a76\u0003"+
		"\u01c8\u00e4\u0000\u0a76\u01a7\u0001\u0000\u0000\u0000\u0a77\u0a78\u0005"+
		"\u0125\u0000\u0000\u0a78\u0a79\u0003\\.\u0000\u0a79\u0a7a\u0003\u0080"+
		"@\u0000\u0a7a\u0a7b\u0003\u01c8\u00e4\u0000\u0a7b\u01a9\u0001\u0000\u0000"+
		"\u0000\u0a7c\u0a7d\u0005C\u0000\u0000\u0a7d\u0a7e\u0005\u0187\u0000\u0000"+
		"\u0a7e\u0a7f\u0003\u0304\u0182\u0000\u0a7f\u0a80\u0005\n\u0000\u0000\u0a80"+
		"\u0a81\u0003\u01a2\u00d1\u0000\u0a81\u0a82\u0005\u000b\u0000\u0000\u0a82"+
		"\u0a83\u0005\u0176\u0000\u0000\u0a83\u0a84\u0003\u01b2\u00d9\u0000\u0a84"+
		"\u0a85\u0003\u01c8\u00e4\u0000\u0a85\u01ab\u0001\u0000\u0000\u0000\u0a86"+
		"\u0a87\u0005B\u0000\u0000\u0a87\u0a88\u0005\u00a6\u0000\u0000\u0a88\u0a89"+
		"\u0003\u0080@\u0000\u0a89\u0a8a\u0005\u015e\u0000\u0000\u0a8a\u0a8b\u0003"+
		"p8\u0000\u0a8b\u0a8c\u0003P(\u0000\u0a8c\u0a8d\u0003\u01c8\u00e4\u0000"+
		"\u0a8d\u01ad\u0001\u0000\u0000\u0000\u0a8e\u0a8f\u0005K\u0000\u0000\u0a8f"+
		"\u0a90\u0005\u00a6\u0000\u0000\u0a90\u0a91\u0003\u0080@\u0000\u0a91\u0a92"+
		"\u0005\u0176\u0000\u0000\u0a92\u0a93\u0003\u01b2\u00d9\u0000\u0a93\u0a94"+
		"\u0003\u01c8\u00e4\u0000\u0a94\u01af\u0001\u0000\u0000\u0000\u0a95\u0a96"+
		"\u0005\u0175\u0000\u0000\u0a96\u0a97\u0003\u01c8\u00e4\u0000\u0a97\u01b1"+
		"\u0001\u0000\u0000\u0000\u0a98\u0a99\u0005\u015e\u0000\u0000\u0a99\u0a9e"+
		"\u0005?\u0000\u0000\u0a9a\u0a9b\u0003p8\u0000\u0a9b\u0a9c\u0003P(\u0000"+
		"\u0a9c\u0a9e\u0001\u0000\u0000\u0000\u0a9d\u0a98\u0001\u0000\u0000\u0000"+
		"\u0a9d\u0a9a\u0001\u0000\u0000\u0000\u0a9e\u01b3\u0001\u0000\u0000\u0000"+
		"\u0a9f\u0aa0\u0005\u0006\u0000\u0000\u0aa0\u0aa1\u0003\u01b6\u00db\u0000"+
		"\u0aa1\u01b5\u0001\u0000\u0000\u0000\u0aa2\u0aa3\u0005\f\u0000\u0000\u0aa3"+
		"\u0aa9\u0005\r\u0000\u0000\u0aa4\u0aa5\u0005\f\u0000\u0000\u0aa5\u0aa6"+
		"\u0003\u01b8\u00dc\u0000\u0aa6\u0aa7\u0005\r\u0000\u0000\u0aa7\u0aa9\u0001"+
		"\u0000\u0000\u0000\u0aa8\u0aa2\u0001\u0000\u0000\u0000\u0aa8\u0aa4\u0001"+
		"\u0000\u0000\u0000\u0aa9\u01b7\u0001\u0000\u0000\u0000\u0aaa\u0aab\u0006"+
		"\u00dc\uffff\uffff\u0000\u0aab\u0aac\u0003\u01ba\u00dd\u0000\u0aac\u0ab2"+
		"\u0001\u0000\u0000\u0000\u0aad\u0aae\n\u0001\u0000\u0000\u0aae\u0aaf\u0005"+
		"\u0005\u0000\u0000\u0aaf\u0ab1\u0003\u01ba\u00dd\u0000\u0ab0\u0aad\u0001"+
		"\u0000\u0000\u0000\u0ab1\u0ab4\u0001\u0000\u0000\u0000\u0ab2\u0ab0\u0001"+
		"\u0000\u0000\u0000\u0ab2\u0ab3\u0001\u0000\u0000\u0000\u0ab3\u01b9\u0001"+
		"\u0000\u0000\u0000\u0ab4\u0ab2\u0001\u0000\u0000\u0000\u0ab5\u0ab8\u0005"+
		"\u0105\u0000\u0000\u0ab6\u0ab8\u0003\u01bc\u00de\u0000\u0ab7\u0ab5\u0001"+
		"\u0000\u0000\u0000\u0ab7\u0ab6\u0001\u0000\u0000\u0000\u0ab8\u01bb\u0001"+
		"\u0000\u0000\u0000\u0ab9\u0aba\u0003\\.\u0000\u0aba\u0abb\u0003\u0080"+
		"@\u0000\u0abb\u0ac1\u0001\u0000\u0000\u0000\u0abc\u0ac1\u0003\u01be\u00df"+
		"\u0000\u0abd\u0ac1\u0003\u01b4\u00da\u0000\u0abe\u0ac1\u0003Z-\u0000\u0abf"+
		"\u0ac1\u0003\u01cc\u00e6\u0000\u0ac0\u0ab9\u0001\u0000\u0000\u0000\u0ac0"+
		"\u0abc\u0001\u0000\u0000\u0000\u0ac0\u0abd\u0001\u0000\u0000\u0000\u0ac0"+
		"\u0abe\u0001\u0000\u0000\u0000\u0ac0\u0abf\u0001\u0000\u0000\u0000\u0ac1"+
		"\u01bd\u0001\u0000\u0000\u0000\u0ac2\u0ac3\u0005\u0006\u0000\u0000\u0ac3"+
		"\u0ac4\u0003\u00a0P\u0000\u0ac4\u01bf\u0001\u0000\u0000\u0000\u0ac5\u0ac6"+
		"\u0003X,\u0000\u0ac6\u0ac7\u0003\u01c2\u00e1\u0000\u0ac7\u01c1\u0001\u0000"+
		"\u0000\u0000\u0ac8\u0acc\u0003\u01b4\u00da\u0000\u0ac9\u0acc\u0003Z-\u0000"+
		"\u0aca\u0acc\u0003\u01cc\u00e6\u0000\u0acb\u0ac8\u0001\u0000\u0000\u0000"+
		"\u0acb\u0ac9\u0001\u0000\u0000\u0000\u0acb\u0aca\u0001\u0000\u0000\u0000"+
		"\u0acc\u01c3\u0001\u0000\u0000\u0000\u0acd\u0acf\u0003\u01c6\u00e3\u0000"+
		"\u0ace\u0acd\u0001\u0000\u0000\u0000\u0ace\u0acf\u0001\u0000\u0000\u0000"+
		"\u0acf\u01c5\u0001\u0000\u0000\u0000\u0ad0\u0ad1\u0006\u00e3\uffff\uffff"+
		"\u0000\u0ad1\u0ad2\u0003\u01c0\u00e0\u0000\u0ad2\u0ad7\u0001\u0000\u0000"+
		"\u0000\u0ad3\u0ad4\n\u0001\u0000\u0000\u0ad4\u0ad6\u0003\u01c0\u00e0\u0000"+
		"\u0ad5\u0ad3\u0001\u0000\u0000\u0000\u0ad6\u0ad9\u0001\u0000\u0000\u0000"+
		"\u0ad7\u0ad5\u0001\u0000\u0000\u0000\u0ad7\u0ad8\u0001\u0000\u0000\u0000"+
		"\u0ad8\u01c7\u0001\u0000\u0000\u0000\u0ad9\u0ad7\u0001\u0000\u0000\u0000"+
		"\u0ada\u0adb\u0005\u0005\u0000\u0000\u0adb\u0add\u0003\u01ca\u00e5\u0000"+
		"\u0adc\u0ada\u0001\u0000\u0000\u0000\u0adc\u0add\u0001\u0000\u0000\u0000"+
		"\u0add\u01c9\u0001\u0000\u0000\u0000\u0ade\u0adf\u0006\u00e5\uffff\uffff"+
		"\u0000\u0adf\u0ae0\u0003\u01c0\u00e0\u0000\u0ae0\u0ae6\u0001\u0000\u0000"+
		"\u0000\u0ae1\u0ae2\n\u0001\u0000\u0000\u0ae2\u0ae3\u0005\u0005\u0000\u0000"+
		"\u0ae3\u0ae5\u0003\u01c0\u00e0\u0000\u0ae4\u0ae1\u0001\u0000\u0000\u0000"+
		"\u0ae5\u0ae8\u0001\u0000\u0000\u0000\u0ae6\u0ae4\u0001\u0000\u0000\u0000"+
		"\u0ae6\u0ae7\u0001\u0000\u0000\u0000\u0ae7\u01cb\u0001\u0000\u0000\u0000"+
		"\u0ae8\u0ae6\u0001\u0000\u0000\u0000\u0ae9\u0b03\u0003\u01ce\u00e7\u0000"+
		"\u0aea\u0b03\u0003\u01d6\u00eb\u0000\u0aeb\u0b03\u0003\u01de\u00ef\u0000"+
		"\u0aec\u0b03\u0003\u01e6\u00f3\u0000\u0aed\u0b03\u0003\u01ee\u00f7\u0000"+
		"\u0aee\u0b03\u0003\u01f6\u00fb\u0000\u0aef\u0b03\u0003\u01fe\u00ff\u0000"+
		"\u0af0\u0b03\u0003\u0206\u0103\u0000\u0af1\u0b03\u0003\u020e\u0107\u0000"+
		"\u0af2\u0b03\u0003\u0216\u010b\u0000\u0af3\u0b03\u0003\u021e\u010f\u0000"+
		"\u0af4\u0b03\u0003\u0226\u0113\u0000\u0af5\u0b03\u0003\u022e\u0117\u0000"+
		"\u0af6\u0b03\u0003\u0236\u011b\u0000\u0af7\u0b03\u0003\u023e\u011f\u0000"+
		"\u0af8\u0b03\u0003\u0246\u0123\u0000\u0af9\u0b03\u0003\u024e\u0127\u0000"+
		"\u0afa\u0b03\u0003\u0256\u012b\u0000\u0afb\u0b03\u0003\u025e\u012f\u0000"+
		"\u0afc\u0b03\u0003\u0266\u0133\u0000\u0afd\u0b03\u0003\u026e\u0137\u0000"+
		"\u0afe\u0b03\u0003\u0276\u013b\u0000\u0aff\u0b03\u0003\u027e\u013f\u0000"+
		"\u0b00\u0b03\u0003\u0286\u0143\u0000\u0b01\u0b03\u0003\u028e\u0147\u0000"+
		"\u0b02\u0ae9\u0001\u0000\u0000\u0000\u0b02\u0aea\u0001\u0000\u0000\u0000"+
		"\u0b02\u0aeb\u0001\u0000\u0000\u0000\u0b02\u0aec\u0001\u0000\u0000\u0000"+
		"\u0b02\u0aed\u0001\u0000\u0000\u0000\u0b02\u0aee\u0001\u0000\u0000\u0000"+
		"\u0b02\u0aef\u0001\u0000\u0000\u0000\u0b02\u0af0\u0001\u0000\u0000\u0000"+
		"\u0b02\u0af1\u0001\u0000\u0000\u0000\u0b02\u0af2\u0001\u0000\u0000\u0000"+
		"\u0b02\u0af3\u0001\u0000\u0000\u0000\u0b02\u0af4\u0001\u0000\u0000\u0000"+
		"\u0b02\u0af5\u0001\u0000\u0000\u0000\u0b02\u0af6\u0001\u0000\u0000\u0000"+
		"\u0b02\u0af7\u0001\u0000\u0000\u0000\u0b02\u0af8\u0001\u0000\u0000\u0000"+
		"\u0b02\u0af9\u0001\u0000\u0000\u0000\u0b02\u0afa\u0001\u0000\u0000\u0000"+
		"\u0b02\u0afb\u0001\u0000\u0000\u0000\u0b02\u0afc\u0001\u0000\u0000\u0000"+
		"\u0b02\u0afd\u0001\u0000\u0000\u0000\u0b02\u0afe\u0001\u0000\u0000\u0000"+
		"\u0b02\u0aff\u0001\u0000\u0000\u0000\u0b02\u0b00\u0001\u0000\u0000\u0000"+
		"\u0b02\u0b01\u0001\u0000\u0000\u0000\u0b03\u01cd\u0001\u0000\u0000\u0000"+
		"\u0b04\u0b05\u0005b\u0000\u0000\u0b05\u0b06\u0005\b\u0000\u0000\u0b06"+
		"\u0b07\u0003\u01d0\u00e8\u0000\u0b07\u0b08\u0005\t\u0000\u0000\u0b08\u01cf"+
		"\u0001\u0000\u0000\u0000\u0b09\u0b0b\u0003\u01d2\u00e9\u0000\u0b0a\u0b09"+
		"\u0001\u0000\u0000\u0000\u0b0a\u0b0b\u0001\u0000\u0000\u0000\u0b0b\u01d1"+
		"\u0001\u0000\u0000\u0000\u0b0c\u0b0d\u0006\u00e9\uffff\uffff\u0000\u0b0d"+
		"\u0b0e\u0003\u01d4\u00ea\u0000\u0b0e\u0b14\u0001\u0000\u0000\u0000\u0b0f"+
		"\u0b10\n\u0001\u0000\u0000\u0b10\u0b11\u0005\u0005\u0000\u0000\u0b11\u0b13"+
		"\u0003\u01d4\u00ea\u0000\u0b12\u0b0f\u0001\u0000\u0000\u0000\u0b13\u0b16"+
		"\u0001\u0000\u0000\u0000\u0b14\u0b12\u0001\u0000\u0000\u0000\u0b14\u0b15"+
		"\u0001\u0000\u0000\u0000\u0b15\u01d3\u0001\u0000\u0000\u0000\u0b16\u0b14"+
		"\u0001\u0000\u0000\u0000\u0b17\u0b18\u0005\u00d4\u0000\u0000\u0b18\u0b38"+
		"\u0003\u02c8\u0164\u0000\u0b19\u0b38\u0003\u0296\u014b\u0000\u0b1a\u0b1b"+
		"\u0005\u011b\u0000\u0000\u0b1b\u0b38\u0003\u00a0P\u0000\u0b1c\u0b38\u0003"+
		"\u0298\u014c\u0000\u0b1d\u0b1e\u0005\u009d\u0000\u0000\u0b1e\u0b38\u0003"+
		"\u00a0P\u0000\u0b1f\u0b20\u0005\u012b\u0000\u0000\u0b20\u0b38\u0003\u0092"+
		"I\u0000\u0b21\u0b22\u0005\u0148\u0000\u0000\u0b22\u0b38\u0003\u00a0P\u0000"+
		"\u0b23\u0b24\u0005\u0084\u0000\u0000\u0b24\u0b38\u0003\u02d2\u0169\u0000"+
		"\u0b25\u0b26\u0005\u0087\u0000\u0000\u0b26\u0b38\u0003\u01ba\u00dd\u0000"+
		"\u0b27\u0b28\u0005\u0127\u0000\u0000\u0b28\u0b38\u0003\u01ba\u00dd\u0000"+
		"\u0b29\u0b2a\u0005\u00af\u0000\u0000\u0b2a\u0b38\u0003\u01ba\u00dd\u0000"+
		"\u0b2b\u0b2c\u0005\u00b9\u0000\u0000\u0b2c\u0b38\u0003\u01ba\u00dd\u0000"+
		"\u0b2d\u0b2e\u0005\u00e1\u0000\u0000\u0b2e\u0b38\u0003\u01ba\u00dd\u0000"+
		"\u0b2f\u0b30\u0005\u0082\u0000\u0000\u0b30\u0b38\u0003\u0092I\u0000\u0b31"+
		"\u0b32\u0005\u0149\u0000\u0000\u0b32\u0b38\u0003\u008eG\u0000\u0b33\u0b34"+
		"\u0005Z\u0000\u0000\u0b34\u0b38\u0003\u008eG\u0000\u0b35\u0b36\u0005\u00b0"+
		"\u0000\u0000\u0b36\u0b38\u0003\u008eG\u0000\u0b37\u0b17\u0001\u0000\u0000"+
		"\u0000\u0b37\u0b19\u0001\u0000\u0000\u0000\u0b37\u0b1a\u0001\u0000\u0000"+
		"\u0000\u0b37\u0b1c\u0001\u0000\u0000\u0000\u0b37\u0b1d\u0001\u0000\u0000"+
		"\u0000\u0b37\u0b1f\u0001\u0000\u0000\u0000\u0b37\u0b21\u0001\u0000\u0000"+
		"\u0000\u0b37\u0b23\u0001\u0000\u0000\u0000\u0b37\u0b25\u0001\u0000\u0000"+
		"\u0000\u0b37\u0b27\u0001\u0000\u0000\u0000\u0b37\u0b29\u0001\u0000\u0000"+
		"\u0000\u0b37\u0b2b\u0001\u0000\u0000\u0000\u0b37\u0b2d\u0001\u0000\u0000"+
		"\u0000\u0b37\u0b2f\u0001\u0000\u0000\u0000\u0b37\u0b31\u0001\u0000\u0000"+
		"\u0000\u0b37\u0b33\u0001\u0000\u0000\u0000\u0b37\u0b35\u0001\u0000\u0000"+
		"\u0000\u0b38\u01d5\u0001\u0000\u0000\u0000\u0b39\u0b3a\u0005g\u0000\u0000"+
		"\u0b3a\u0b3b\u0005\b\u0000\u0000\u0b3b\u0b3c\u0003\u01d8\u00ec\u0000\u0b3c"+
		"\u0b3d\u0005\t\u0000\u0000\u0b3d\u01d7\u0001\u0000\u0000\u0000\u0b3e\u0b40"+
		"\u0003\u01da\u00ed\u0000\u0b3f\u0b3e\u0001\u0000\u0000\u0000\u0b3f\u0b40"+
		"\u0001\u0000\u0000\u0000\u0b40\u01d9\u0001\u0000\u0000\u0000\u0b41\u0b42"+
		"\u0006\u00ed\uffff\uffff\u0000\u0b42\u0b43\u0003\u01dc\u00ee\u0000\u0b43"+
		"\u0b49\u0001\u0000\u0000\u0000\u0b44\u0b45\n\u0001\u0000\u0000\u0b45\u0b46"+
		"\u0005\u0005\u0000\u0000\u0b46\u0b48\u0003\u01dc\u00ee\u0000\u0b47\u0b44"+
		"\u0001\u0000\u0000\u0000\u0b48\u0b4b\u0001\u0000\u0000\u0000\u0b49\u0b47"+
		"\u0001\u0000\u0000\u0000\u0b49\u0b4a\u0001\u0000\u0000\u0000\u0b4a\u01db"+
		"\u0001\u0000\u0000\u0000\u0b4b\u0b49\u0001\u0000\u0000\u0000\u0b4c\u0b4d"+
		"\u0005\u009b\u0000\u0000\u0b4d\u0b55\u0003\u00a0P\u0000\u0b4e\u0b4f\u0005"+
		"t\u0000\u0000\u0b4f\u0b55\u0003\u00a0P\u0000\u0b50\u0b51\u0005H\u0000"+
		"\u0000\u0b51\u0b55\u0003\u02be\u015f\u0000\u0b52\u0b53\u0005G\u0000\u0000"+
		"\u0b53\u0b55\u0003\u00a0P\u0000\u0b54\u0b4c\u0001\u0000\u0000\u0000\u0b54"+
		"\u0b4e\u0001\u0000\u0000\u0000\u0b54\u0b50\u0001\u0000\u0000\u0000\u0b54"+
		"\u0b52\u0001\u0000\u0000\u0000\u0b55\u01dd\u0001\u0000\u0000\u0000\u0b56"+
		"\u0b57\u0005a\u0000\u0000\u0b57\u0b58\u0005\b\u0000\u0000\u0b58\u0b59"+
		"\u0003\u01e0\u00f0\u0000\u0b59\u0b5a\u0005\t\u0000\u0000\u0b5a\u01df\u0001"+
		"\u0000\u0000\u0000\u0b5b\u0b5d\u0003\u01e2\u00f1\u0000\u0b5c\u0b5b\u0001"+
		"\u0000\u0000\u0000\u0b5c\u0b5d\u0001\u0000\u0000\u0000\u0b5d\u01e1\u0001"+
		"\u0000\u0000\u0000\u0b5e\u0b5f\u0006\u00f1\uffff\uffff\u0000\u0b5f\u0b60"+
		"\u0003\u01e4\u00f2\u0000\u0b60\u0b66\u0001\u0000\u0000\u0000\u0b61\u0b62"+
		"\n\u0001\u0000\u0000\u0b62\u0b63\u0005\u0005\u0000\u0000\u0b63\u0b65\u0003"+
		"\u01e4\u00f2\u0000\u0b64\u0b61\u0001\u0000\u0000\u0000\u0b65\u0b68\u0001"+
		"\u0000\u0000\u0000\u0b66\u0b64\u0001\u0000\u0000\u0000\u0b66\u0b67\u0001"+
		"\u0000\u0000\u0000\u0b67\u01e3\u0001\u0000\u0000\u0000\u0b68\u0b66\u0001"+
		"\u0000\u0000\u0000\u0b69\u0b70\u0003\u029a\u014d\u0000\u0b6a\u0b70\u0003"+
		"\u029c\u014e\u0000\u0b6b\u0b70\u0003\u029e\u014f\u0000\u0b6c\u0b70\u0003"+
		"\u02a0\u0150\u0000\u0b6d\u0b6e\u0005\u0085\u0000\u0000\u0b6e\u0b70\u0003"+
		"\u02c4\u0162\u0000\u0b6f\u0b69\u0001\u0000\u0000\u0000\u0b6f\u0b6a\u0001"+
		"\u0000\u0000\u0000\u0b6f\u0b6b\u0001\u0000\u0000\u0000\u0b6f\u0b6c\u0001"+
		"\u0000\u0000\u0000\u0b6f\u0b6d\u0001\u0000\u0000\u0000\u0b70\u01e5\u0001"+
		"\u0000\u0000\u0000\u0b71\u0b72\u0005y\u0000\u0000\u0b72\u0b73\u0005\b"+
		"\u0000\u0000\u0b73\u0b74\u0003\u01e8\u00f4\u0000\u0b74\u0b75\u0005\t\u0000"+
		"\u0000\u0b75\u01e7\u0001\u0000\u0000\u0000\u0b76\u0b78\u0003\u01ea\u00f5"+
		"\u0000\u0b77\u0b76\u0001\u0000\u0000\u0000\u0b77\u0b78\u0001\u0000\u0000"+
		"\u0000\u0b78\u01e9\u0001\u0000\u0000\u0000\u0b79\u0b7a\u0006\u00f5\uffff"+
		"\uffff\u0000\u0b7a\u0b7b\u0003\u01ec\u00f6\u0000\u0b7b\u0b81\u0001\u0000"+
		"\u0000\u0000\u0b7c\u0b7d\n\u0001\u0000\u0000\u0b7d\u0b7e\u0005\u0005\u0000"+
		"\u0000\u0b7e\u0b80\u0003\u01ec\u00f6\u0000\u0b7f\u0b7c\u0001\u0000\u0000"+
		"\u0000\u0b80\u0b83\u0001\u0000\u0000\u0000\u0b81\u0b7f\u0001\u0000\u0000"+
		"\u0000\u0b81\u0b82\u0001\u0000\u0000\u0000\u0b82\u01eb\u0001\u0000\u0000"+
		"\u0000\u0b83\u0b81\u0001\u0000\u0000\u0000\u0b84\u0b8a\u0003\u02a2\u0151"+
		"\u0000\u0b85\u0b86\u0005D\u0000\u0000\u0b86\u0b8a\u0003\u02c6\u0163\u0000"+
		"\u0b87\u0b88\u0005\u0165\u0000\u0000\u0b88\u0b8a\u0003\u01ba\u00dd\u0000"+
		"\u0b89\u0b84\u0001\u0000\u0000\u0000\u0b89\u0b85\u0001\u0000\u0000\u0000"+
		"\u0b89\u0b87\u0001\u0000\u0000\u0000\u0b8a\u01ed\u0001\u0000\u0000\u0000"+
		"\u0b8b\u0b8c\u0005d\u0000\u0000\u0b8c\u0b8d\u0005\b\u0000\u0000\u0b8d"+
		"\u0b8e\u0003\u01f0\u00f8\u0000\u0b8e\u0b8f\u0005\t\u0000\u0000\u0b8f\u01ef"+
		"\u0001\u0000\u0000\u0000\u0b90\u0b92\u0003\u01f2\u00f9\u0000\u0b91\u0b90"+
		"\u0001\u0000\u0000\u0000\u0b91\u0b92\u0001\u0000\u0000\u0000\u0b92\u01f1"+
		"\u0001\u0000\u0000\u0000\u0b93\u0b94\u0006\u00f9\uffff\uffff\u0000\u0b94"+
		"\u0b95\u0003\u01f4\u00fa\u0000\u0b95\u0b9b\u0001\u0000\u0000\u0000\u0b96"+
		"\u0b97\n\u0001\u0000\u0000\u0b97\u0b98\u0005\u0005\u0000\u0000\u0b98\u0b9a"+
		"\u0003\u01f4\u00fa\u0000\u0b99\u0b96\u0001\u0000\u0000\u0000\u0b9a\u0b9d"+
		"\u0001\u0000\u0000\u0000\u0b9b\u0b99\u0001\u0000\u0000\u0000\u0b9b\u0b9c"+
		"\u0001\u0000\u0000\u0000\u0b9c\u01f3\u0001\u0000\u0000\u0000\u0b9d\u0b9b"+
		"\u0001\u0000\u0000\u0000\u0b9e\u0bad\u0003\u029a\u014d\u0000\u0b9f\u0bad"+
		"\u0003\u029c\u014e\u0000\u0ba0\u0bad\u0003\u02a6\u0153\u0000\u0ba1\u0bad"+
		"\u0003\u0296\u014b\u0000\u0ba2\u0bad\u0003\u02a4\u0152\u0000\u0ba3\u0bad"+
		"\u0003\u02a8\u0154\u0000\u0ba4\u0bad\u0003\u029e\u014f\u0000\u0ba5\u0bad"+
		"\u0003\u02a0\u0150\u0000\u0ba6\u0bad\u0003\u02aa\u0155\u0000\u0ba7\u0bad"+
		"\u0003\u02a2\u0151\u0000\u0ba8\u0ba9\u0005\u0092\u0000\u0000\u0ba9\u0bad"+
		"\u0003\u01ba\u00dd\u0000\u0baa\u0bab\u0005\u0081\u0000\u0000\u0bab\u0bad"+
		"\u0003\u0092I\u0000\u0bac\u0b9e\u0001\u0000\u0000\u0000\u0bac\u0b9f\u0001"+
		"\u0000\u0000\u0000\u0bac\u0ba0\u0001\u0000\u0000\u0000\u0bac\u0ba1\u0001"+
		"\u0000\u0000\u0000\u0bac\u0ba2\u0001\u0000\u0000\u0000\u0bac\u0ba3\u0001"+
		"\u0000\u0000\u0000\u0bac\u0ba4\u0001\u0000\u0000\u0000\u0bac\u0ba5\u0001"+
		"\u0000\u0000\u0000\u0bac\u0ba6\u0001\u0000\u0000\u0000\u0bac\u0ba7\u0001"+
		"\u0000\u0000\u0000\u0bac\u0ba8\u0001\u0000\u0000\u0000\u0bac\u0baa\u0001"+
		"\u0000\u0000\u0000\u0bad\u01f5\u0001\u0000\u0000\u0000\u0bae\u0baf\u0005"+
		"c\u0000\u0000\u0baf\u0bb0\u0005\b\u0000\u0000\u0bb0\u0bb1\u0003\u01f8"+
		"\u00fc\u0000\u0bb1\u0bb2\u0005\t\u0000\u0000\u0bb2\u01f7\u0001\u0000\u0000"+
		"\u0000\u0bb3\u0bb5\u0003\u01fa\u00fd\u0000\u0bb4\u0bb3\u0001\u0000\u0000"+
		"\u0000\u0bb4\u0bb5\u0001\u0000\u0000\u0000\u0bb5\u01f9\u0001\u0000\u0000"+
		"\u0000\u0bb6\u0bb7\u0006\u00fd\uffff\uffff\u0000\u0bb7\u0bb8\u0003\u01fc"+
		"\u00fe\u0000\u0bb8\u0bbe\u0001\u0000\u0000\u0000\u0bb9\u0bba\n\u0001\u0000"+
		"\u0000\u0bba\u0bbb\u0005\u0005\u0000\u0000\u0bbb\u0bbd\u0003\u01fc\u00fe"+
		"\u0000\u0bbc\u0bb9\u0001\u0000\u0000\u0000\u0bbd\u0bc0\u0001\u0000\u0000"+
		"\u0000\u0bbe\u0bbc\u0001\u0000\u0000\u0000\u0bbe\u0bbf\u0001\u0000\u0000"+
		"\u0000\u0bbf\u01fb\u0001\u0000\u0000\u0000\u0bc0\u0bbe\u0001\u0000\u0000"+
		"\u0000\u0bc1\u0bd7\u0003\u029a\u014d\u0000\u0bc2\u0bd7\u0003\u029c\u014e"+
		"\u0000\u0bc3\u0bd7\u0003\u02a6\u0153\u0000\u0bc4\u0bd7\u0003\u0296\u014b"+
		"\u0000\u0bc5\u0bd7\u0003\u02a4\u0152\u0000\u0bc6\u0bd7\u0003\u02a8\u0154"+
		"\u0000\u0bc7\u0bd7\u0003\u029e\u014f\u0000\u0bc8\u0bd7\u0003\u02a0\u0150"+
		"\u0000\u0bc9\u0bd7\u0003\u02aa\u0155\u0000\u0bca\u0bd7\u0003\u02a2\u0151"+
		"\u0000\u0bcb\u0bcc\u0005\u0083\u0000\u0000\u0bcc\u0bd7\u0003\u01ba\u00dd"+
		"\u0000\u0bcd\u0bce\u0005\u012a\u0000\u0000\u0bce\u0bd7\u0003\u02c8\u0164"+
		"\u0000\u0bcf\u0bd0\u0005\u0182\u0000\u0000\u0bd0\u0bd7\u0003\u01ba\u00dd"+
		"\u0000\u0bd1\u0bd7\u0003\u02ac\u0156\u0000\u0bd2\u0bd3\u0005\u00b7\u0000"+
		"\u0000\u0bd3\u0bd7\u0003\u00a0P\u0000\u0bd4\u0bd5\u0005u\u0000\u0000\u0bd5"+
		"\u0bd7\u0003\u01ba\u00dd\u0000\u0bd6\u0bc1\u0001\u0000\u0000\u0000\u0bd6"+
		"\u0bc2\u0001\u0000\u0000\u0000\u0bd6\u0bc3\u0001\u0000\u0000\u0000\u0bd6"+
		"\u0bc4\u0001\u0000\u0000\u0000\u0bd6\u0bc5\u0001\u0000\u0000\u0000\u0bd6"+
		"\u0bc6\u0001\u0000\u0000\u0000\u0bd6\u0bc7\u0001\u0000\u0000\u0000\u0bd6"+
		"\u0bc8\u0001\u0000\u0000\u0000\u0bd6\u0bc9\u0001\u0000\u0000\u0000\u0bd6"+
		"\u0bca\u0001\u0000\u0000\u0000\u0bd6\u0bcb\u0001\u0000\u0000\u0000\u0bd6"+
		"\u0bcd\u0001\u0000\u0000\u0000\u0bd6\u0bcf\u0001\u0000\u0000\u0000\u0bd6"+
		"\u0bd1\u0001\u0000\u0000\u0000\u0bd6\u0bd2\u0001\u0000\u0000\u0000\u0bd6"+
		"\u0bd4\u0001\u0000\u0000\u0000\u0bd7\u01fd\u0001\u0000\u0000\u0000\u0bd8"+
		"\u0bd9\u0005x\u0000\u0000\u0bd9\u0bda\u0005\b\u0000\u0000\u0bda\u0bdb"+
		"\u0003\u0200\u0100\u0000\u0bdb\u0bdc\u0005\t\u0000\u0000\u0bdc\u01ff\u0001"+
		"\u0000\u0000\u0000\u0bdd\u0bdf\u0003\u0202\u0101\u0000\u0bde\u0bdd\u0001"+
		"\u0000\u0000\u0000\u0bde\u0bdf\u0001\u0000\u0000\u0000\u0bdf\u0201\u0001"+
		"\u0000\u0000\u0000\u0be0\u0be1\u0006\u0101\uffff\uffff\u0000\u0be1\u0be2"+
		"\u0003\u0204\u0102\u0000\u0be2\u0be8\u0001\u0000\u0000\u0000\u0be3\u0be4"+
		"\n\u0001\u0000\u0000\u0be4\u0be5\u0005\u0005\u0000\u0000\u0be5\u0be7\u0003"+
		"\u0204\u0102\u0000\u0be6\u0be3\u0001\u0000\u0000\u0000\u0be7\u0bea\u0001"+
		"\u0000\u0000\u0000\u0be8\u0be6\u0001\u0000\u0000\u0000\u0be8\u0be9\u0001"+
		"\u0000\u0000\u0000\u0be9\u0203\u0001\u0000\u0000\u0000\u0bea\u0be8\u0001"+
		"\u0000\u0000\u0000\u0beb\u0bec\u0005W\u0000\u0000\u0bec\u0bf0\u0003\u02ae"+
		"\u0157\u0000\u0bed\u0bee\u0005\u00df\u0000\u0000\u0bee\u0bf0\u0003\u0092"+
		"I\u0000\u0bef\u0beb\u0001\u0000\u0000\u0000\u0bef\u0bed\u0001\u0000\u0000"+
		"\u0000\u0bf0\u0205\u0001\u0000\u0000\u0000\u0bf1\u0bf2\u0005e\u0000\u0000"+
		"\u0bf2\u0bf3\u0005\b\u0000\u0000\u0bf3\u0bf4\u0003\u0208\u0104\u0000\u0bf4"+
		"\u0bf5\u0005\t\u0000\u0000\u0bf5\u0207\u0001\u0000\u0000\u0000\u0bf6\u0bf8"+
		"\u0003\u020a\u0105\u0000\u0bf7\u0bf6\u0001\u0000\u0000\u0000\u0bf7\u0bf8"+
		"\u0001\u0000\u0000\u0000\u0bf8\u0209\u0001\u0000\u0000\u0000\u0bf9\u0bfa"+
		"\u0006\u0105\uffff\uffff\u0000\u0bfa\u0bfb\u0003\u020c\u0106\u0000\u0bfb"+
		"\u0c01\u0001\u0000\u0000\u0000\u0bfc\u0bfd\n\u0001\u0000\u0000\u0bfd\u0bfe"+
		"\u0005\u0005\u0000\u0000\u0bfe\u0c00\u0003\u020c\u0106\u0000\u0bff\u0bfc"+
		"\u0001\u0000\u0000\u0000\u0c00\u0c03\u0001\u0000\u0000\u0000\u0c01\u0bff"+
		"\u0001\u0000\u0000\u0000\u0c01\u0c02\u0001\u0000\u0000\u0000\u0c02\u020b"+
		"\u0001\u0000\u0000\u0000\u0c03\u0c01\u0001\u0000\u0000\u0000\u0c04\u0c0a"+
		"\u0003\u029c\u014e\u0000\u0c05\u0c06\u0005\u017c\u0000\u0000\u0c06\u0c0a"+
		"\u0003\u0092I\u0000\u0c07\u0c08\u0005\u00cf\u0000\u0000\u0c08\u0c0a\u0003"+
		"\u008eG\u0000\u0c09\u0c04\u0001\u0000\u0000\u0000\u0c09\u0c05\u0001\u0000"+
		"\u0000\u0000\u0c09\u0c07\u0001\u0000\u0000\u0000\u0c0a\u020d\u0001\u0000"+
		"\u0000\u0000\u0c0b\u0c0c\u0005z\u0000\u0000\u0c0c\u0c0d\u0005\b\u0000"+
		"\u0000\u0c0d\u0c0e\u0003\u0210\u0108\u0000\u0c0e\u0c0f\u0005\t\u0000\u0000"+
		"\u0c0f\u020f\u0001\u0000\u0000\u0000\u0c10\u0c12\u0003\u0212\u0109\u0000"+
		"\u0c11\u0c10\u0001\u0000\u0000\u0000\u0c11\u0c12\u0001\u0000\u0000\u0000"+
		"\u0c12\u0211\u0001\u0000\u0000\u0000\u0c13\u0c14\u0006\u0109\uffff\uffff"+
		"\u0000\u0c14\u0c15\u0003\u0214\u010a\u0000\u0c15\u0c1b\u0001\u0000\u0000"+
		"\u0000\u0c16\u0c17\n\u0001\u0000\u0000\u0c17\u0c18\u0005\u0005\u0000\u0000"+
		"\u0c18\u0c1a\u0003\u0214\u010a\u0000\u0c19\u0c16\u0001\u0000\u0000\u0000"+
		"\u0c1a\u0c1d\u0001\u0000\u0000\u0000\u0c1b\u0c19\u0001\u0000\u0000\u0000"+
		"\u0c1b\u0c1c\u0001\u0000\u0000\u0000\u0c1c\u0213\u0001\u0000\u0000\u0000"+
		"\u0c1d\u0c1b\u0001\u0000\u0000\u0000\u0c1e\u0c21\u0003\u029c\u014e\u0000"+
		"\u0c1f\u0c21\u0003\u02b0\u0158\u0000\u0c20\u0c1e\u0001\u0000\u0000\u0000"+
		"\u0c20\u0c1f\u0001\u0000\u0000\u0000\u0c21\u0215\u0001\u0000\u0000\u0000"+
		"\u0c22\u0c23\u0005{\u0000\u0000\u0c23\u0c24\u0005\b\u0000\u0000\u0c24"+
		"\u0c25\u0003\u0218\u010c\u0000\u0c25\u0c26\u0005\t\u0000\u0000\u0c26\u0217"+
		"\u0001\u0000\u0000\u0000\u0c27\u0c29\u0003\u021a\u010d\u0000\u0c28\u0c27"+
		"\u0001\u0000\u0000\u0000\u0c28\u0c29\u0001\u0000\u0000\u0000\u0c29\u0219"+
		"\u0001\u0000\u0000\u0000\u0c2a\u0c2b\u0006\u010d\uffff\uffff\u0000\u0c2b"+
		"\u0c2c\u0003\u021c\u010e\u0000\u0c2c\u0c32\u0001\u0000\u0000\u0000\u0c2d"+
		"\u0c2e\n\u0001\u0000\u0000\u0c2e\u0c2f\u0005\u0005\u0000\u0000\u0c2f\u0c31"+
		"\u0003\u021c\u010e\u0000\u0c30\u0c2d\u0001\u0000\u0000\u0000\u0c31\u0c34"+
		"\u0001\u0000\u0000\u0000\u0c32\u0c30\u0001\u0000\u0000\u0000\u0c32\u0c33"+
		"\u0001\u0000\u0000\u0000\u0c33\u021b\u0001\u0000\u0000\u0000\u0c34\u0c32"+
		"\u0001\u0000\u0000\u0000\u0c35\u0c3b\u0003\u029a\u014d\u0000\u0c36\u0c3b"+
		"\u0003\u029c\u014e\u0000\u0c37\u0c3b\u0003\u02b0\u0158\u0000\u0c38\u0c39"+
		"\u0005\u017c\u0000\u0000\u0c39\u0c3b\u0003\u01ba\u00dd\u0000\u0c3a\u0c35"+
		"\u0001\u0000\u0000\u0000\u0c3a\u0c36\u0001\u0000\u0000\u0000\u0c3a\u0c37"+
		"\u0001\u0000\u0000\u0000\u0c3a\u0c38\u0001\u0000\u0000\u0000\u0c3b\u021d"+
		"\u0001\u0000\u0000\u0000\u0c3c\u0c3d\u0005q\u0000\u0000\u0c3d\u0c3e\u0005"+
		"\b\u0000\u0000\u0c3e\u0c3f\u0003\u0220\u0110\u0000\u0c3f\u0c40\u0005\t"+
		"\u0000\u0000\u0c40\u021f\u0001\u0000\u0000\u0000\u0c41\u0c43\u0003\u0222"+
		"\u0111\u0000\u0c42\u0c41\u0001\u0000\u0000\u0000\u0c42\u0c43\u0001\u0000"+
		"\u0000\u0000\u0c43\u0221\u0001\u0000\u0000\u0000\u0c44\u0c45\u0006\u0111"+
		"\uffff\uffff\u0000\u0c45\u0c46\u0003\u0224\u0112\u0000\u0c46\u0c4c\u0001"+
		"\u0000\u0000\u0000\u0c47\u0c48\n\u0001\u0000\u0000\u0c48\u0c49\u0005\u0005"+
		"\u0000\u0000\u0c49\u0c4b\u0003\u0224\u0112\u0000\u0c4a\u0c47\u0001\u0000"+
		"\u0000\u0000\u0c4b\u0c4e\u0001\u0000\u0000\u0000\u0c4c\u0c4a\u0001\u0000"+
		"\u0000\u0000\u0c4c\u0c4d\u0001\u0000\u0000\u0000\u0c4d\u0223\u0001\u0000"+
		"\u0000\u0000\u0c4e\u0c4c\u0001\u0000\u0000\u0000\u0c4f\u0c58\u0003\u02a6"+
		"\u0153\u0000\u0c50\u0c58\u0003\u029c\u014e\u0000\u0c51\u0c52\u0005R\u0000"+
		"\u0000\u0c52\u0c58\u0003\u00a0P\u0000\u0c53\u0c54\u0005\u00be\u0000\u0000"+
		"\u0c54\u0c58\u0003\u00a0P\u0000\u0c55\u0c56\u0005\u00d0\u0000\u0000\u0c56"+
		"\u0c58\u0003\u00a0P\u0000\u0c57\u0c4f\u0001\u0000\u0000\u0000\u0c57\u0c50"+
		"\u0001\u0000\u0000\u0000\u0c57\u0c51\u0001\u0000\u0000\u0000\u0c57\u0c53"+
		"\u0001\u0000\u0000\u0000\u0c57\u0c55\u0001\u0000\u0000\u0000\u0c58\u0225"+
		"\u0001\u0000\u0000\u0000\u0c59\u0c5a\u0005r\u0000\u0000\u0c5a\u0c5b\u0005"+
		"\b\u0000\u0000\u0c5b\u0c5c\u0003\u0228\u0114\u0000\u0c5c\u0c5d\u0005\t"+
		"\u0000\u0000\u0c5d\u0227\u0001\u0000\u0000\u0000\u0c5e\u0c60\u0003\u022a"+
		"\u0115\u0000\u0c5f\u0c5e\u0001\u0000\u0000\u0000\u0c5f\u0c60\u0001\u0000"+
		"\u0000\u0000\u0c60\u0229\u0001\u0000\u0000\u0000\u0c61\u0c62\u0006\u0115"+
		"\uffff\uffff\u0000\u0c62\u0c63\u0003\u022c\u0116\u0000\u0c63\u0c69\u0001"+
		"\u0000\u0000\u0000\u0c64\u0c65\n\u0001\u0000\u0000\u0c65\u0c66\u0005\u0005"+
		"\u0000\u0000\u0c66\u0c68\u0003\u022c\u0116\u0000\u0c67\u0c64\u0001\u0000"+
		"\u0000\u0000\u0c68\u0c6b\u0001\u0000\u0000\u0000\u0c69\u0c67\u0001\u0000"+
		"\u0000\u0000\u0c69\u0c6a\u0001\u0000\u0000\u0000\u0c6a\u022b\u0001\u0000"+
		"\u0000\u0000\u0c6b\u0c69\u0001\u0000\u0000\u0000\u0c6c\u0c71\u0003\u02a6"+
		"\u0153\u0000\u0c6d\u0c71\u0003\u029c\u014e\u0000\u0c6e\u0c6f\u0005\u008b"+
		"\u0000\u0000\u0c6f\u0c71\u0003\u008eG\u0000\u0c70\u0c6c\u0001\u0000\u0000"+
		"\u0000\u0c70\u0c6d\u0001\u0000\u0000\u0000\u0c70\u0c6e\u0001\u0000\u0000"+
		"\u0000\u0c71\u022d\u0001\u0000\u0000\u0000\u0c72\u0c73\u0005h\u0000\u0000"+
		"\u0c73\u0c74\u0005\b\u0000\u0000\u0c74\u0c75\u0003\u0230\u0118\u0000\u0c75"+
		"\u0c76\u0005\t\u0000\u0000\u0c76\u022f\u0001\u0000\u0000\u0000\u0c77\u0c79"+
		"\u0003\u0232\u0119\u0000\u0c78\u0c77\u0001\u0000\u0000\u0000\u0c78\u0c79"+
		"\u0001\u0000\u0000\u0000\u0c79\u0231\u0001\u0000\u0000\u0000\u0c7a\u0c7b"+
		"\u0006\u0119\uffff\uffff\u0000\u0c7b\u0c7c\u0003\u0234\u011a\u0000\u0c7c"+
		"\u0c82\u0001\u0000\u0000\u0000\u0c7d\u0c7e\n\u0001\u0000\u0000\u0c7e\u0c7f"+
		"\u0005\u0005\u0000\u0000\u0c7f\u0c81\u0003\u0234\u011a\u0000\u0c80\u0c7d"+
		"\u0001\u0000\u0000\u0000\u0c81\u0c84\u0001\u0000\u0000\u0000\u0c82\u0c80"+
		"\u0001\u0000\u0000\u0000\u0c82\u0c83\u0001\u0000\u0000\u0000\u0c83\u0233"+
		"\u0001\u0000\u0000\u0000\u0c84\u0c82\u0001\u0000\u0000\u0000\u0c85\u0c90"+
		"\u0003\u029c\u014e\u0000\u0c86\u0c90\u0003\u02a6\u0153\u0000\u0c87\u0c90"+
		"\u0003\u02b2\u0159\u0000\u0c88\u0c90\u0003\u0296\u014b\u0000\u0c89\u0c90"+
		"\u0003\u02a4\u0152\u0000\u0c8a\u0c90\u0003\u02b0\u0158\u0000\u0c8b\u0c90"+
		"\u0003\u02b4\u015a\u0000\u0c8c\u0c90\u0003\u02b6\u015b\u0000\u0c8d\u0c90"+
		"\u0003\u02b8\u015c\u0000\u0c8e\u0c90\u0003\u02a0\u0150\u0000\u0c8f\u0c85"+
		"\u0001\u0000\u0000\u0000\u0c8f\u0c86\u0001\u0000\u0000\u0000\u0c8f\u0c87"+
		"\u0001\u0000\u0000\u0000\u0c8f\u0c88\u0001\u0000\u0000\u0000\u0c8f\u0c89"+
		"\u0001\u0000\u0000\u0000\u0c8f\u0c8a\u0001\u0000\u0000\u0000\u0c8f\u0c8b"+
		"\u0001\u0000\u0000\u0000\u0c8f\u0c8c\u0001\u0000\u0000\u0000\u0c8f\u0c8d"+
		"\u0001\u0000\u0000\u0000\u0c8f\u0c8e\u0001\u0000\u0000\u0000\u0c90\u0235"+
		"\u0001\u0000\u0000\u0000\u0c91\u0c92\u0005w\u0000\u0000\u0c92\u0c93\u0005"+
		"\b\u0000\u0000\u0c93\u0c94\u0003\u0238\u011c\u0000\u0c94\u0c95\u0005\t"+
		"\u0000\u0000\u0c95\u0237\u0001\u0000\u0000\u0000\u0c96\u0c98\u0003\u023a"+
		"\u011d\u0000\u0c97\u0c96\u0001\u0000\u0000\u0000\u0c97\u0c98\u0001\u0000"+
		"\u0000\u0000\u0c98\u0239\u0001\u0000\u0000\u0000\u0c99\u0c9a\u0006\u011d"+
		"\uffff\uffff\u0000\u0c9a\u0c9b\u0003\u023c\u011e\u0000\u0c9b\u0ca1\u0001"+
		"\u0000\u0000\u0000\u0c9c\u0c9d\n\u0001\u0000\u0000\u0c9d\u0c9e\u0005\u0005"+
		"\u0000\u0000\u0c9e\u0ca0\u0003\u023c\u011e\u0000\u0c9f\u0c9c\u0001\u0000"+
		"\u0000\u0000\u0ca0\u0ca3\u0001\u0000\u0000\u0000\u0ca1\u0c9f\u0001\u0000"+
		"\u0000\u0000\u0ca1\u0ca2\u0001\u0000\u0000\u0000\u0ca2\u023b\u0001\u0000"+
		"\u0000\u0000\u0ca3\u0ca1\u0001\u0000\u0000\u0000\u0ca4\u0cc1\u0003\u029c"+
		"\u014e\u0000\u0ca5\u0cc1\u0003\u02a6\u0153\u0000\u0ca6\u0cc1\u0003\u02b2"+
		"\u0159\u0000\u0ca7\u0cc1\u0003\u0296\u014b\u0000\u0ca8\u0cc1\u0003\u02a4"+
		"\u0152\u0000\u0ca9\u0cc1\u0003\u02b0\u0158\u0000\u0caa\u0cc1\u0003\u02b4"+
		"\u015a\u0000\u0cab\u0cc1\u0003\u02b6\u015b\u0000\u0cac\u0cad\u0005\u0133"+
		"\u0000\u0000\u0cad\u0cc1\u0003\u0092I\u0000\u0cae\u0caf\u0005T\u0000\u0000"+
		"\u0caf\u0cc1\u0003\u01ba\u00dd\u0000\u0cb0\u0cb1\u0005\u0180\u0000\u0000"+
		"\u0cb1\u0cc1\u0003\u02d0\u0168\u0000\u0cb2\u0cb3\u0005\u017f\u0000\u0000"+
		"\u0cb3\u0cc1\u0003\u0092I\u0000\u0cb4\u0cb5\u0005\u015b\u0000\u0000\u0cb5"+
		"\u0cc1\u0003\u0092I\u0000\u0cb6\u0cc1\u0003\u02a2\u0151\u0000\u0cb7\u0cc1"+
		"\u0003\u0298\u014c\u0000\u0cb8\u0cb9\u0005\u0171\u0000\u0000\u0cb9\u0cc1"+
		"\u0003\u01ba\u00dd\u0000\u0cba\u0cc1\u0003\u02ac\u0156\u0000\u0cbb\u0cc1"+
		"\u0003\u02b8\u015c\u0000\u0cbc\u0cbd\u0005\u017e\u0000\u0000\u0cbd\u0cc1"+
		"\u0003\u01ba\u00dd\u0000\u0cbe\u0cbf\u0005\u015d\u0000\u0000\u0cbf\u0cc1"+
		"\u0003\u01ba\u00dd\u0000\u0cc0\u0ca4\u0001\u0000\u0000\u0000\u0cc0\u0ca5"+
		"\u0001\u0000\u0000\u0000\u0cc0\u0ca6\u0001\u0000\u0000\u0000\u0cc0\u0ca7"+
		"\u0001\u0000\u0000\u0000\u0cc0\u0ca8\u0001\u0000\u0000\u0000\u0cc0\u0ca9"+
		"\u0001\u0000\u0000\u0000\u0cc0\u0caa\u0001\u0000\u0000\u0000\u0cc0\u0cab"+
		"\u0001\u0000\u0000\u0000\u0cc0\u0cac\u0001\u0000\u0000\u0000\u0cc0\u0cae"+
		"\u0001\u0000\u0000\u0000\u0cc0\u0cb0\u0001\u0000\u0000\u0000\u0cc0\u0cb2"+
		"\u0001\u0000\u0000\u0000\u0cc0\u0cb4\u0001\u0000\u0000\u0000\u0cc0\u0cb6"+
		"\u0001\u0000\u0000\u0000\u0cc0\u0cb7\u0001\u0000\u0000\u0000\u0cc0\u0cb8"+
		"\u0001\u0000\u0000\u0000\u0cc0\u0cba\u0001\u0000\u0000\u0000\u0cc0\u0cbb"+
		"\u0001\u0000\u0000\u0000\u0cc0\u0cbc\u0001\u0000\u0000\u0000\u0cc0\u0cbe"+
		"\u0001\u0000\u0000\u0000\u0cc1\u023d\u0001\u0000\u0000\u0000\u0cc2\u0cc3"+
		"\u0005k\u0000\u0000\u0cc3\u0cc4\u0005\b\u0000\u0000\u0cc4\u0cc5\u0003"+
		"\u0240\u0120\u0000\u0cc5\u0cc6\u0005\t\u0000\u0000\u0cc6\u023f\u0001\u0000"+
		"\u0000\u0000\u0cc7\u0cc9\u0003\u0242\u0121\u0000\u0cc8\u0cc7\u0001\u0000"+
		"\u0000\u0000\u0cc8\u0cc9\u0001\u0000\u0000\u0000\u0cc9\u0241\u0001\u0000"+
		"\u0000\u0000\u0cca\u0ccb\u0006\u0121\uffff\uffff\u0000\u0ccb\u0ccc\u0003"+
		"\u0244\u0122\u0000\u0ccc\u0cd2\u0001\u0000\u0000\u0000\u0ccd\u0cce\n\u0001"+
		"\u0000\u0000\u0cce\u0ccf\u0005\u0005\u0000\u0000\u0ccf\u0cd1\u0003\u0244"+
		"\u0122\u0000\u0cd0\u0ccd\u0001\u0000\u0000\u0000\u0cd1\u0cd4\u0001\u0000"+
		"\u0000\u0000\u0cd2\u0cd0\u0001\u0000\u0000\u0000\u0cd2\u0cd3\u0001\u0000"+
		"\u0000\u0000\u0cd3\u0243\u0001\u0000\u0000\u0000\u0cd4\u0cd2\u0001\u0000"+
		"\u0000\u0000\u0cd5\u0cda\u0003\u02a6\u0153\u0000\u0cd6\u0cda\u0003\u0296"+
		"\u014b\u0000\u0cd7\u0cda\u0003\u02a4\u0152\u0000\u0cd8\u0cda\u0003\u02ba"+
		"\u015d\u0000\u0cd9\u0cd5\u0001\u0000\u0000\u0000\u0cd9\u0cd6\u0001\u0000"+
		"\u0000\u0000\u0cd9\u0cd7\u0001\u0000\u0000\u0000\u0cd9\u0cd8\u0001\u0000"+
		"\u0000\u0000\u0cda\u0245\u0001\u0000\u0000\u0000\u0cdb\u0cdc\u0005l\u0000"+
		"\u0000\u0cdc\u0cdd\u0005\b\u0000\u0000\u0cdd\u0cde\u0003\u0248\u0124\u0000"+
		"\u0cde\u0cdf\u0005\t\u0000\u0000\u0cdf\u0247\u0001\u0000\u0000\u0000\u0ce0"+
		"\u0ce2\u0003\u024a\u0125\u0000\u0ce1\u0ce0\u0001\u0000\u0000\u0000\u0ce1"+
		"\u0ce2\u0001\u0000\u0000\u0000\u0ce2\u0249\u0001\u0000\u0000\u0000\u0ce3"+
		"\u0ce4\u0006\u0125\uffff\uffff\u0000\u0ce4\u0ce5\u0003\u024c\u0126\u0000"+
		"\u0ce5\u0ceb\u0001\u0000\u0000\u0000\u0ce6\u0ce7\n\u0001\u0000\u0000\u0ce7"+
		"\u0ce8\u0005\u0005\u0000\u0000\u0ce8\u0cea\u0003\u024c\u0126\u0000\u0ce9"+
		"\u0ce6\u0001\u0000\u0000\u0000\u0cea\u0ced\u0001\u0000\u0000\u0000\u0ceb"+
		"\u0ce9\u0001\u0000\u0000\u0000\u0ceb\u0cec\u0001\u0000\u0000\u0000\u0cec"+
		"\u024b\u0001\u0000\u0000\u0000\u0ced\u0ceb\u0001\u0000\u0000\u0000\u0cee"+
		"\u0cf3\u0003\u02a6\u0153\u0000\u0cef\u0cf3\u0003\u0296\u014b\u0000\u0cf0"+
		"\u0cf1\u0005u\u0000\u0000\u0cf1\u0cf3\u0003\u0092I\u0000\u0cf2\u0cee\u0001"+
		"\u0000\u0000\u0000\u0cf2\u0cef\u0001\u0000\u0000\u0000\u0cf2\u0cf0\u0001"+
		"\u0000\u0000\u0000\u0cf3\u024d\u0001\u0000\u0000\u0000\u0cf4\u0cf5\u0005"+
		"n\u0000\u0000\u0cf5\u0cf6\u0005\b\u0000\u0000\u0cf6\u0cf7\u0003\u0250"+
		"\u0128\u0000\u0cf7\u0cf8\u0005\t\u0000\u0000\u0cf8\u024f\u0001\u0000\u0000"+
		"\u0000\u0cf9\u0cfb\u0003\u0252\u0129\u0000\u0cfa\u0cf9\u0001\u0000\u0000"+
		"\u0000\u0cfa\u0cfb\u0001\u0000\u0000\u0000\u0cfb\u0251\u0001\u0000\u0000"+
		"\u0000\u0cfc\u0cfd\u0006\u0129\uffff\uffff\u0000\u0cfd\u0cfe\u0003\u0254"+
		"\u012a\u0000\u0cfe\u0d04\u0001\u0000\u0000\u0000\u0cff\u0d00\n\u0001\u0000"+
		"\u0000\u0d00\u0d01\u0005\u0005\u0000\u0000\u0d01\u0d03\u0003\u0254\u012a"+
		"\u0000\u0d02\u0cff\u0001\u0000\u0000\u0000\u0d03\u0d06\u0001\u0000\u0000"+
		"\u0000\u0d04\u0d02\u0001\u0000\u0000\u0000\u0d04\u0d05\u0001\u0000\u0000"+
		"\u0000\u0d05\u0253\u0001\u0000\u0000\u0000\u0d06\u0d04\u0001\u0000\u0000"+
		"\u0000\u0d07\u0d0d\u0003\u02a4\u0152\u0000\u0d08\u0d0d\u0003\u02ba\u015d"+
		"\u0000\u0d09\u0d0d\u0003\u02a6\u0153\u0000\u0d0a\u0d0b\u0005\u00c1\u0000"+
		"\u0000\u0d0b\u0d0d\u0003\u01ba\u00dd\u0000\u0d0c\u0d07\u0001\u0000\u0000"+
		"\u0000\u0d0c\u0d08\u0001\u0000\u0000\u0000\u0d0c\u0d09\u0001\u0000\u0000"+
		"\u0000\u0d0c\u0d0a\u0001\u0000\u0000\u0000\u0d0d\u0255\u0001\u0000\u0000"+
		"\u0000\u0d0e\u0d0f\u0005m\u0000\u0000\u0d0f\u0d10\u0005\b\u0000\u0000"+
		"\u0d10\u0d11\u0003\u0258\u012c\u0000\u0d11\u0d12\u0005\t\u0000\u0000\u0d12"+
		"\u0257\u0001\u0000\u0000\u0000\u0d13\u0d15\u0003\u025a\u012d\u0000\u0d14"+
		"\u0d13\u0001\u0000\u0000\u0000\u0d14\u0d15\u0001\u0000\u0000\u0000\u0d15"+
		"\u0259\u0001\u0000\u0000\u0000\u0d16\u0d17\u0006\u012d\uffff\uffff\u0000"+
		"\u0d17\u0d18\u0003\u025c\u012e\u0000\u0d18\u0d1e\u0001\u0000\u0000\u0000"+
		"\u0d19\u0d1a\n\u0001\u0000\u0000\u0d1a\u0d1b\u0005\u0005\u0000\u0000\u0d1b"+
		"\u0d1d\u0003\u025c\u012e\u0000\u0d1c\u0d19\u0001\u0000\u0000\u0000\u0d1d"+
		"\u0d20\u0001\u0000\u0000\u0000\u0d1e\u0d1c\u0001\u0000\u0000\u0000\u0d1e"+
		"\u0d1f\u0001\u0000\u0000\u0000\u0d1f\u025b\u0001\u0000\u0000\u0000\u0d20"+
		"\u0d1e\u0001\u0000\u0000\u0000\u0d21\u0d2b\u0003\u029c\u014e\u0000\u0d22"+
		"\u0d23\u0005)\u0000\u0000\u0d23\u0d2b\u0003\u0092I\u0000\u0d24\u0d2b\u0003"+
		"\u02a6\u0153\u0000\u0d25\u0d2b\u0003\u0296\u014b\u0000\u0d26\u0d2b\u0003"+
		"\u02a4\u0152\u0000\u0d27\u0d2b\u0003\u02b0\u0158\u0000\u0d28\u0d2b\u0003"+
		"\u02a2\u0151\u0000\u0d29\u0d2b\u0003\u02a0\u0150\u0000\u0d2a\u0d21\u0001"+
		"\u0000\u0000\u0000\u0d2a\u0d22\u0001\u0000\u0000\u0000\u0d2a\u0d24\u0001"+
		"\u0000\u0000\u0000\u0d2a\u0d25\u0001\u0000\u0000\u0000\u0d2a\u0d26\u0001"+
		"\u0000\u0000\u0000\u0d2a\u0d27\u0001\u0000\u0000\u0000\u0d2a\u0d28\u0001"+
		"\u0000\u0000\u0000\u0d2a\u0d29\u0001\u0000\u0000\u0000\u0d2b\u025d\u0001"+
		"\u0000\u0000\u0000\u0d2c\u0d2d\u0005f\u0000\u0000\u0d2d\u0d2e\u0005\b"+
		"\u0000\u0000\u0d2e\u0d2f\u0003\u0260\u0130\u0000\u0d2f\u0d30\u0005\t\u0000"+
		"\u0000\u0d30\u025f\u0001\u0000\u0000\u0000\u0d31\u0d33\u0003\u0262\u0131"+
		"\u0000\u0d32\u0d31\u0001\u0000\u0000\u0000\u0d32\u0d33\u0001\u0000\u0000"+
		"\u0000\u0d33\u0261\u0001\u0000\u0000\u0000\u0d34\u0d35\u0006\u0131\uffff"+
		"\uffff\u0000\u0d35\u0d36\u0003\u0264\u0132\u0000\u0d36\u0d3c\u0001\u0000"+
		"\u0000\u0000\u0d37\u0d38\n\u0001\u0000\u0000\u0d38\u0d39\u0005\u0005\u0000"+
		"\u0000\u0d39\u0d3b\u0003\u0264\u0132\u0000\u0d3a\u0d37\u0001\u0000\u0000"+
		"\u0000\u0d3b\u0d3e\u0001\u0000\u0000\u0000\u0d3c\u0d3a\u0001\u0000\u0000"+
		"\u0000\u0d3c\u0d3d\u0001\u0000\u0000\u0000\u0d3d\u0263\u0001\u0000\u0000"+
		"\u0000\u0d3e\u0d3c\u0001\u0000\u0000\u0000\u0d3f\u0d42\u0005\u01a8\u0000"+
		"\u0000\u0d40\u0d42\u0003\u02cc\u0166\u0000\u0d41\u0d3f\u0001\u0000\u0000"+
		"\u0000\u0d41\u0d40\u0001\u0000\u0000\u0000\u0d42\u0265\u0001\u0000\u0000"+
		"\u0000\u0d43\u0d44\u0005i\u0000\u0000\u0d44\u0d45\u0005\b\u0000\u0000"+
		"\u0d45\u0d46\u0003\u0268\u0134\u0000\u0d46\u0d47\u0005\t\u0000\u0000\u0d47"+
		"\u0267\u0001\u0000\u0000\u0000\u0d48\u0d4a\u0003\u026a\u0135\u0000\u0d49"+
		"\u0d48\u0001\u0000\u0000\u0000\u0d49\u0d4a\u0001\u0000\u0000\u0000\u0d4a"+
		"\u0269\u0001\u0000\u0000\u0000\u0d4b\u0d4c\u0006\u0135\uffff\uffff\u0000"+
		"\u0d4c\u0d4d\u0003\u026c\u0136\u0000\u0d4d\u0d53\u0001\u0000\u0000\u0000"+
		"\u0d4e\u0d4f\n\u0001\u0000\u0000\u0d4f\u0d50\u0005\u0005\u0000\u0000\u0d50"+
		"\u0d52\u0003\u026c\u0136\u0000\u0d51\u0d4e\u0001\u0000\u0000\u0000\u0d52"+
		"\u0d55\u0001\u0000\u0000\u0000\u0d53\u0d51\u0001\u0000\u0000\u0000\u0d53"+
		"\u0d54\u0001\u0000\u0000\u0000\u0d54\u026b\u0001\u0000\u0000\u0000\u0d55"+
		"\u0d53\u0001\u0000\u0000\u0000\u0d56\u0d57\u0005\u017d\u0000\u0000\u0d57"+
		"\u0d5b\u0003\u01ba\u00dd\u0000\u0d58\u0d59\u0005\u008c\u0000\u0000\u0d59"+
		"\u0d5b\u0003\u01ba\u00dd\u0000\u0d5a\u0d56\u0001\u0000\u0000\u0000\u0d5a"+
		"\u0d58\u0001\u0000\u0000\u0000\u0d5b\u026d\u0001\u0000\u0000\u0000\u0d5c"+
		"\u0d5d\u0005s\u0000\u0000\u0d5d\u0d5e\u0005\b\u0000\u0000\u0d5e\u0d5f"+
		"\u0003\u0270\u0138\u0000\u0d5f\u0d60\u0005\t\u0000\u0000\u0d60\u026f\u0001"+
		"\u0000\u0000\u0000\u0d61\u0d63\u0003\u0272\u0139\u0000\u0d62\u0d61\u0001"+
		"\u0000\u0000\u0000\u0d62\u0d63\u0001\u0000\u0000\u0000\u0d63\u0271\u0001"+
		"\u0000\u0000\u0000\u0d64\u0d65\u0006\u0139\uffff\uffff\u0000\u0d65\u0d66"+
		"\u0003\u0274\u013a\u0000\u0d66\u0d6c\u0001\u0000\u0000\u0000\u0d67\u0d68"+
		"\n\u0001\u0000\u0000\u0d68\u0d69\u0005\u0005\u0000\u0000\u0d69\u0d6b\u0003"+
		"\u0274\u013a\u0000\u0d6a\u0d67\u0001\u0000\u0000\u0000\u0d6b\u0d6e\u0001"+
		"\u0000\u0000\u0000\u0d6c\u0d6a\u0001\u0000\u0000\u0000\u0d6c\u0d6d\u0001"+
		"\u0000\u0000\u0000\u0d6d\u0273\u0001\u0000\u0000\u0000\u0d6e\u0d6c\u0001"+
		"\u0000\u0000\u0000\u0d6f\u0d7a\u0003\u029c\u014e\u0000\u0d70\u0d7a\u0003"+
		"\u0296\u014b\u0000\u0d71\u0d7a\u0003\u02a4\u0152\u0000\u0d72\u0d73\u0005"+
		"\u0138\u0000\u0000\u0d73\u0d7a\u0003\u00a0P\u0000\u0d74\u0d75\u0005\u00ac"+
		"\u0000\u0000\u0d75\u0d7a\u0003\u00a0P\u0000\u0d76\u0d77\u00052\u0000\u0000"+
		"\u0d77\u0d7a\u0003\u0092I\u0000\u0d78\u0d7a\u0003\u02b0\u0158\u0000\u0d79"+
		"\u0d6f\u0001\u0000\u0000\u0000\u0d79\u0d70\u0001\u0000\u0000\u0000\u0d79"+
		"\u0d71\u0001\u0000\u0000\u0000\u0d79\u0d72\u0001\u0000\u0000\u0000\u0d79"+
		"\u0d74\u0001\u0000\u0000\u0000\u0d79\u0d76\u0001\u0000\u0000\u0000\u0d79"+
		"\u0d78\u0001\u0000\u0000\u0000\u0d7a\u0275\u0001\u0000\u0000\u0000\u0d7b"+
		"\u0d7c\u0005j\u0000\u0000\u0d7c\u0d7d\u0005\b\u0000\u0000\u0d7d\u0d7e"+
		"\u0003\u0278\u013c\u0000\u0d7e\u0d7f\u0005\t\u0000\u0000\u0d7f\u0277\u0001"+
		"\u0000\u0000\u0000\u0d80\u0d82\u0003\u027a\u013d\u0000\u0d81\u0d80\u0001"+
		"\u0000\u0000\u0000\u0d81\u0d82\u0001\u0000\u0000\u0000\u0d82\u0279\u0001"+
		"\u0000\u0000\u0000\u0d83\u0d84\u0006\u013d\uffff\uffff\u0000\u0d84\u0d85"+
		"\u0003\u027c\u013e\u0000\u0d85\u0d8b\u0001\u0000\u0000\u0000\u0d86\u0d87"+
		"\n\u0001\u0000\u0000\u0d87\u0d88\u0005\u0005\u0000\u0000\u0d88\u0d8a\u0003"+
		"\u027c\u013e\u0000\u0d89\u0d86\u0001\u0000\u0000\u0000\u0d8a\u0d8d\u0001"+
		"\u0000\u0000\u0000\u0d8b\u0d89\u0001\u0000\u0000\u0000\u0d8b\u0d8c\u0001"+
		"\u0000\u0000\u0000\u0d8c\u027b\u0001\u0000\u0000\u0000\u0d8d\u0d8b\u0001"+
		"\u0000\u0000\u0000\u0d8e\u0d96\u0003\u029a\u014d\u0000\u0d8f\u0d96\u0003"+
		"\u02a6\u0153\u0000\u0d90\u0d91\u0005\u0086\u0000\u0000\u0d91\u0d96\u0003"+
		"\u01ba\u00dd\u0000\u0d92\u0d96\u0003\u0296\u014b\u0000\u0d93\u0d96\u0003"+
		"\u02a4\u0152\u0000\u0d94\u0d96\u0003\u029c\u014e\u0000\u0d95\u0d8e\u0001"+
		"\u0000\u0000\u0000\u0d95\u0d8f\u0001\u0000\u0000\u0000\u0d95\u0d90\u0001"+
		"\u0000\u0000\u0000\u0d95\u0d92\u0001\u0000\u0000\u0000\u0d95\u0d93\u0001"+
		"\u0000\u0000\u0000\u0d95\u0d94\u0001\u0000\u0000\u0000\u0d96\u027d\u0001"+
		"\u0000\u0000\u0000\u0d97\u0d98\u0005o\u0000\u0000\u0d98\u0d99\u0005\b"+
		"\u0000\u0000\u0d99\u0d9a\u0003\u0280\u0140\u0000\u0d9a\u0d9b\u0005\t\u0000"+
		"\u0000\u0d9b\u027f\u0001\u0000\u0000\u0000\u0d9c\u0d9e\u0003\u0282\u0141"+
		"\u0000\u0d9d\u0d9c\u0001\u0000\u0000\u0000\u0d9d\u0d9e\u0001\u0000\u0000"+
		"\u0000\u0d9e\u0281\u0001\u0000\u0000\u0000\u0d9f\u0da0\u0006\u0141\uffff"+
		"\uffff\u0000\u0da0\u0da1\u0003\u0284\u0142\u0000\u0da1\u0da7\u0001\u0000"+
		"\u0000\u0000\u0da2\u0da3\n\u0001\u0000\u0000\u0da3\u0da4\u0005\u0005\u0000"+
		"\u0000\u0da4\u0da6\u0003\u0284\u0142\u0000\u0da5\u0da2\u0001\u0000\u0000"+
		"\u0000\u0da6\u0da9\u0001\u0000\u0000\u0000\u0da7\u0da5\u0001\u0000\u0000"+
		"\u0000\u0da7\u0da8\u0001\u0000\u0000\u0000\u0da8\u0283\u0001\u0000\u0000"+
		"\u0000\u0da9\u0da7\u0001\u0000\u0000\u0000\u0daa\u0db0\u0003\u02bc\u015e"+
		"\u0000\u0dab\u0db0\u0003\u02a4\u0152\u0000\u0dac\u0db0\u0003\u029c\u014e"+
		"\u0000\u0dad\u0dae\u0005\u017c\u0000\u0000\u0dae\u0db0\u0003\u00a0P\u0000"+
		"\u0daf\u0daa\u0001\u0000\u0000\u0000\u0daf\u0dab\u0001\u0000\u0000\u0000"+
		"\u0daf\u0dac\u0001\u0000\u0000\u0000\u0daf\u0dad\u0001\u0000\u0000\u0000"+
		"\u0db0\u0285\u0001\u0000\u0000\u0000\u0db1\u0db2\u0005p\u0000\u0000\u0db2"+
		"\u0db3\u0005\b\u0000\u0000\u0db3\u0db4\u0003\u0288\u0144\u0000\u0db4\u0db5"+
		"\u0005\t\u0000\u0000\u0db5\u0287\u0001\u0000\u0000\u0000\u0db6\u0db8\u0003"+
		"\u028a\u0145\u0000\u0db7\u0db6\u0001\u0000\u0000\u0000\u0db7\u0db8\u0001"+
		"\u0000\u0000\u0000\u0db8\u0289\u0001\u0000\u0000\u0000\u0db9\u0dba\u0006"+
		"\u0145\uffff\uffff\u0000\u0dba\u0dbb\u0003\u028c\u0146\u0000\u0dbb\u0dc1"+
		"\u0001\u0000\u0000\u0000\u0dbc\u0dbd\n\u0001\u0000\u0000\u0dbd\u0dbe\u0005"+
		"\u0005\u0000\u0000\u0dbe\u0dc0\u0003\u028c\u0146\u0000\u0dbf\u0dbc\u0001"+
		"\u0000\u0000\u0000\u0dc0\u0dc3\u0001\u0000\u0000\u0000\u0dc1\u0dbf\u0001"+
		"\u0000\u0000\u0000\u0dc1\u0dc2\u0001\u0000\u0000\u0000\u0dc2\u028b\u0001"+
		"\u0000\u0000\u0000\u0dc3\u0dc1\u0001\u0000\u0000\u0000\u0dc4\u0dca\u0003"+
		"\u02bc\u015e\u0000\u0dc5\u0dca\u0003\u02a4\u0152\u0000\u0dc6\u0dca\u0003"+
		"\u0296\u014b\u0000\u0dc7\u0dc8\u0005\u00f6\u0000\u0000\u0dc8\u0dca\u0003"+
		"\u01ba\u00dd\u0000\u0dc9\u0dc4\u0001\u0000\u0000\u0000\u0dc9\u0dc5\u0001"+
		"\u0000\u0000\u0000\u0dc9\u0dc6\u0001\u0000\u0000\u0000\u0dc9\u0dc7\u0001"+
		"\u0000\u0000\u0000\u0dca\u028d\u0001\u0000\u0000\u0000\u0dcb\u0dcc\u0005"+
		"\u00aa\u0000\u0000\u0dcc\u0dcd\u0005\b\u0000\u0000\u0dcd\u0dce\u0003\u0290"+
		"\u0148\u0000\u0dce\u0dcf\u0005\t\u0000\u0000\u0dcf\u028f\u0001\u0000\u0000"+
		"\u0000\u0dd0\u0dd2\u0003\u0292\u0149\u0000\u0dd1\u0dd0\u0001\u0000\u0000"+
		"\u0000\u0dd1\u0dd2\u0001\u0000\u0000\u0000\u0dd2\u0291\u0001\u0000\u0000"+
		"\u0000\u0dd3\u0dd4\u0006\u0149\uffff\uffff\u0000\u0dd4\u0dd5\u0003\u0294"+
		"\u014a\u0000\u0dd5\u0ddb\u0001\u0000\u0000\u0000\u0dd6\u0dd7\n\u0001\u0000"+
		"\u0000\u0dd7\u0dd8\u0005\u0005\u0000\u0000\u0dd8\u0dda\u0003\u0294\u014a"+
		"\u0000\u0dd9\u0dd6\u0001\u0000\u0000\u0000\u0dda\u0ddd\u0001\u0000\u0000"+
		"\u0000\u0ddb\u0dd9\u0001\u0000\u0000\u0000\u0ddb\u0ddc\u0001\u0000\u0000"+
		"\u0000\u0ddc\u0293\u0001\u0000\u0000\u0000\u0ddd\u0ddb\u0001\u0000\u0000"+
		"\u0000\u0dde\u0de4\u0003\u029a\u014d\u0000\u0ddf\u0de0\u0005\u00b2\u0000"+
		"\u0000\u0de0\u0de4\u0003\u00a0P\u0000\u0de1\u0de2\u0005\u010f\u0000\u0000"+
		"\u0de2\u0de4\u0003\u01b6\u00db\u0000\u0de3\u0dde\u0001\u0000\u0000\u0000"+
		"\u0de3\u0ddf\u0001\u0000\u0000\u0000\u0de3\u0de1\u0001\u0000\u0000\u0000"+
		"\u0de4\u0295\u0001\u0000\u0000\u0000\u0de5\u0de6\u0005\u009a\u0000\u0000"+
		"\u0de6\u0de7\u0003\u01ba\u00dd\u0000\u0de7\u0297\u0001\u0000\u0000\u0000"+
		"\u0de8\u0de9\u0005\u00ce\u0000\u0000\u0de9\u0dea\u0003\u008eG\u0000\u0dea"+
		"\u0299\u0001\u0000\u0000\u0000\u0deb\u0dec\u0005\u0157\u0000\u0000\u0dec"+
		"\u0ded\u0003\u02ce\u0167\u0000\u0ded\u029b\u0001\u0000\u0000\u0000\u0dee"+
		"\u0def\u0005\u00ec\u0000\u0000\u0def\u0df0\u0003\u00a0P\u0000\u0df0\u029d"+
		"\u0001\u0000\u0000\u0000\u0df1\u0df2\u0005\u0141\u0000\u0000\u0df2\u0df3"+
		"\u0003\u0092I\u0000\u0df3\u029f\u0001\u0000\u0000\u0000\u0df4\u0df5\u0005"+
		"\u0016\u0000\u0000\u0df5\u0df6\u0003\u0092I\u0000\u0df6\u02a1\u0001\u0000"+
		"\u0000\u0000\u0df7\u0df8\u0005\u009d\u0000\u0000\u0df8\u0df9\u0003\u02c0"+
		"\u0160\u0000\u0df9\u02a3\u0001\u0000\u0000\u0000\u0dfa\u0dfb\u0005\u00d6"+
		"\u0000\u0000\u0dfb\u0dfc\u0003\u0092I\u0000\u0dfc\u02a5\u0001\u0000\u0000"+
		"\u0000\u0dfd\u0dfe\u0005\u0132\u0000\u0000\u0dfe\u0dff\u0003\u01ba\u00dd"+
		"\u0000\u0dff\u02a7\u0001\u0000\u0000\u0000\u0e00\u0e01\u00057\u0000\u0000"+
		"\u0e01\u0e02\u0003\u01ba\u00dd\u0000\u0e02\u02a9\u0001\u0000\u0000\u0000"+
		"\u0e03\u0e04\u0005\u0108\u0000\u0000\u0e04\u0e05\u0003\u0092I\u0000\u0e05"+
		"\u02ab\u0001\u0000\u0000\u0000\u0e06\u0e07\u0005\u015a\u0000\u0000\u0e07"+
		"\u0e08\u0003\u01ba\u00dd\u0000\u0e08\u02ad\u0001\u0000\u0000\u0000\u0e09"+
		"\u0e0c\u0005\u01a8\u0000\u0000\u0e0a\u0e0c\u0003\u01ba\u00dd\u0000\u0e0b"+
		"\u0e09\u0001\u0000\u0000\u0000\u0e0b\u0e0a\u0001\u0000\u0000\u0000\u0e0c"+
		"\u02af\u0001\u0000\u0000\u0000\u0e0d\u0e0e\u0005\u0163\u0000\u0000\u0e0e"+
		"\u0e0f\u0003\u01ba\u00dd\u0000\u0e0f\u02b1\u0001\u0000\u0000\u0000\u0e10"+
		"\u0e11\u0005\u00d8\u0000\u0000\u0e11\u0e12\u0003\u00a0P\u0000\u0e12\u02b3"+
		"\u0001\u0000\u0000\u0000\u0e13\u0e14\u0005\u00cd\u0000\u0000\u0e14\u0e15"+
		"\u0003\u008eG\u0000\u0e15\u02b5\u0001\u0000\u0000\u0000\u0e16\u0e17\u0005"+
		"\u00cc\u0000\u0000\u0e17\u0e18\u0003\u008eG\u0000\u0e18\u02b7\u0001\u0000"+
		"\u0000\u0000\u0e19\u0e1a\u0005[\u0000\u0000\u0e1a\u0e1b\u0003\u01ba\u00dd"+
		"\u0000\u0e1b\u02b9\u0001\u0000\u0000\u0000\u0e1c\u0e1d\u0005O\u0000\u0000"+
		"\u0e1d\u0e1e\u0003\u0092I\u0000\u0e1e\u02bb\u0001\u0000\u0000\u0000\u0e1f"+
		"\u0e20\u0005\u0163\u0000\u0000\u0e20\u0e21\u0003\u02ca\u0165\u0000\u0e21"+
		"\u02bd\u0001\u0000\u0000\u0000\u0e22\u0e23\u0005\u01a4\u0000\u0000\u0e23"+
		"\u02bf\u0001\u0000\u0000\u0000\u0e24\u0e25\u0006\u0160\uffff\uffff\u0000"+
		"\u0e25\u0e26\u0003\u02c2\u0161\u0000\u0e26\u0e2c\u0001\u0000\u0000\u0000"+
		"\u0e27\u0e28\n\u0001\u0000\u0000\u0e28\u0e29\u0005\u0004\u0000\u0000\u0e29"+
		"\u0e2b\u0003\u02c2\u0161\u0000\u0e2a\u0e27\u0001\u0000\u0000\u0000\u0e2b"+
		"\u0e2e\u0001\u0000\u0000\u0000\u0e2c\u0e2a\u0001\u0000\u0000\u0000\u0e2c"+
		"\u0e2d\u0001\u0000\u0000\u0000\u0e2d\u02c1\u0001\u0000\u0000\u0000\u0e2e"+
		"\u0e2c\u0001\u0000\u0000\u0000\u0e2f\u0e32\u0003\u0092I\u0000\u0e30\u0e32"+
		"\u0005\u01a1\u0000\u0000\u0e31\u0e2f\u0001\u0000\u0000\u0000\u0e31\u0e30"+
		"\u0001\u0000\u0000\u0000\u0e32\u02c3\u0001\u0000\u0000\u0000\u0e33\u0e36"+
		"\u0003\u0092I\u0000\u0e34\u0e36\u0005\u01a0\u0000\u0000\u0e35\u0e33\u0001"+
		"\u0000\u0000\u0000\u0e35\u0e34\u0001\u0000\u0000\u0000\u0e36\u02c5\u0001"+
		"\u0000\u0000\u0000\u0e37\u0e3a\u0003\u0092I\u0000\u0e38\u0e3a\u0005\u01a3"+
		"\u0000\u0000\u0e39\u0e37\u0001\u0000\u0000\u0000\u0e39\u0e38\u0001\u0000"+
		"\u0000\u0000\u0e3a\u02c7\u0001\u0000\u0000\u0000\u0e3b\u0e3e\u0003\u0092"+
		"I\u0000\u0e3c\u0e3e\u0005\u01a2\u0000\u0000\u0e3d\u0e3b\u0001\u0000\u0000"+
		"\u0000\u0e3d\u0e3c\u0001\u0000\u0000\u0000\u0e3e\u02c9\u0001\u0000\u0000"+
		"\u0000\u0e3f\u0e42\u0003\u0092I\u0000\u0e40\u0e42\u0005\u01a6\u0000\u0000"+
		"\u0e41\u0e3f\u0001\u0000\u0000\u0000\u0e41\u0e40\u0001\u0000\u0000\u0000"+
		"\u0e42\u02cb\u0001\u0000\u0000\u0000\u0e43\u0e44\u0005\u01a7\u0000\u0000"+
		"\u0e44\u02cd\u0001\u0000\u0000\u0000\u0e45\u0e48\u0003\u0092I\u0000\u0e46"+
		"\u0e48\u0005\u019f\u0000\u0000\u0e47\u0e45\u0001\u0000\u0000\u0000\u0e47"+
		"\u0e46\u0001\u0000\u0000\u0000\u0e48\u02cf\u0001\u0000\u0000\u0000\u0e49"+
		"\u0e4c\u0003\u0092I\u0000\u0e4a\u0e4c\u0005\u01a5\u0000\u0000\u0e4b\u0e49"+
		"\u0001\u0000\u0000\u0000\u0e4b\u0e4a\u0001\u0000\u0000\u0000\u0e4c\u02d1"+
		"\u0001\u0000\u0000\u0000\u0e4d\u0e52\u0003\u0092I\u0000\u0e4e\u0e52\u0005"+
		"\u00a8\u0000\u0000\u0e4f\u0e52\u0005\u00d7\u0000\u0000\u0e50\u0e52\u0005"+
		"\u00f5\u0000\u0000\u0e51\u0e4d\u0001\u0000\u0000\u0000\u0e51\u0e4e\u0001"+
		"\u0000\u0000\u0000\u0e51\u0e4f\u0001\u0000\u0000\u0000\u0e51\u0e50\u0001"+
		"\u0000\u0000\u0000\u0e52\u02d3\u0001\u0000\u0000\u0000\u0e53\u0e55\u0003"+
		"\u02d6\u016b\u0000\u0e54\u0e53\u0001\u0000\u0000\u0000\u0e54\u0e55\u0001"+
		"\u0000\u0000\u0000\u0e55\u02d5\u0001\u0000\u0000\u0000\u0e56\u0e57\u0006"+
		"\u016b\uffff\uffff\u0000\u0e57\u0e58\u0003\u02da\u016d\u0000\u0e58\u0e5d"+
		"\u0001\u0000\u0000\u0000\u0e59\u0e5a\n\u0001\u0000\u0000\u0e5a\u0e5c\u0003"+
		"\u02da\u016d\u0000\u0e5b\u0e59\u0001\u0000\u0000\u0000\u0e5c\u0e5f\u0001"+
		"\u0000\u0000\u0000\u0e5d\u0e5b\u0001\u0000\u0000\u0000\u0e5d\u0e5e\u0001"+
		"\u0000\u0000\u0000\u0e5e\u02d7\u0001\u0000\u0000\u0000\u0e5f\u0e5d\u0001"+
		"\u0000\u0000\u0000\u0e60\u0e61\u0006\u016c\uffff\uffff\u0000\u0e61\u0e62"+
		"\u0003\u02da\u016d\u0000\u0e62\u0e68\u0001\u0000\u0000\u0000\u0e63\u0e64"+
		"\n\u0001\u0000\u0000\u0e64\u0e65\u0005\u0005\u0000\u0000\u0e65\u0e67\u0003"+
		"\u02da\u016d\u0000\u0e66\u0e63\u0001\u0000\u0000\u0000\u0e67\u0e6a\u0001"+
		"\u0000\u0000\u0000\u0e68\u0e66\u0001\u0000\u0000\u0000\u0e68\u0e69\u0001"+
		"\u0000\u0000\u0000\u0e69\u02d9\u0001\u0000\u0000\u0000\u0e6a\u0e68\u0001"+
		"\u0000\u0000\u0000\u0e6b\u0e6c\u0003\\.\u0000\u0e6c\u0e6d\u0003\u0080"+
		"@\u0000\u0e6d\u02db\u0001\u0000\u0000\u0000\u0e6e\u0e70\u0003\u02de\u016f"+
		"\u0000\u0e6f\u0e6e\u0001\u0000\u0000\u0000\u0e6f\u0e70\u0001\u0000\u0000"+
		"\u0000\u0e70\u02dd\u0001\u0000\u0000\u0000\u0e71\u0e72\u0006\u016f\uffff"+
		"\uffff\u0000\u0e72\u0e73\u0003\u02e0\u0170\u0000\u0e73\u0e79\u0001\u0000"+
		"\u0000\u0000\u0e74\u0e75\n\u0001\u0000\u0000\u0e75\u0e76\u0005\u0005\u0000"+
		"\u0000\u0e76\u0e78\u0003\u02e0\u0170\u0000\u0e77\u0e74\u0001\u0000\u0000"+
		"\u0000\u0e78\u0e7b\u0001\u0000\u0000\u0000\u0e79\u0e77\u0001\u0000\u0000"+
		"\u0000\u0e79\u0e7a\u0001\u0000\u0000\u0000\u0e7a\u02df\u0001\u0000\u0000"+
		"\u0000\u0e7b\u0e79\u0001\u0000\u0000\u0000\u0e7c\u0e7d\u0003\\.\u0000"+
		"\u0e7d\u0e7e\u0003\u008aE\u0000\u0e7e\u02e1\u0001\u0000\u0000\u0000\u0e7f"+
		"\u0e80\u0005\u0017\u0000\u0000\u0e80\u0e81\u0005\u01a8\u0000\u0000\u0e81"+
		"\u02e3\u0001\u0000\u0000\u0000\u0e82\u0e83\u0005\u001a\u0000\u0000\u0e83"+
		"\u0e84\u0005\b\u0000\u0000\u0e84\u0e85\u0005\u01a8\u0000\u0000\u0e85\u0e8d"+
		"\u0005\t\u0000\u0000\u0e86\u0e87\u0005\u001a\u0000\u0000\u0e87\u0e88\u0005"+
		"\b\u0000\u0000\u0e88\u0e89\u0005\u01a8\u0000\u0000\u0e89\u0e8a\u0005\u0005"+
		"\u0000\u0000\u0e8a\u0e8b\u0005\u01a8\u0000\u0000\u0e8b\u0e8d\u0005\t\u0000"+
		"\u0000\u0e8c\u0e82\u0001\u0000\u0000\u0000\u0e8c\u0e86\u0001\u0000\u0000"+
		"\u0000\u0e8d\u02e5\u0001\u0000\u0000\u0000\u0e8e\u0e95\u0005\u0007\u0000"+
		"\u0000\u0e8f\u0e95\u0003\u02e8\u0174\u0000\u0e90\u0e91\u0003\u02e8\u0174"+
		"\u0000\u0e91\u0e92\u0005\u0005\u0000\u0000\u0e92\u0e93\u0005\u0007\u0000"+
		"\u0000\u0e93\u0e95\u0001\u0000\u0000\u0000\u0e94\u0e8e\u0001\u0000\u0000"+
		"\u0000\u0e94\u0e8f\u0001\u0000\u0000\u0000\u0e94\u0e90\u0001\u0000\u0000"+
		"\u0000\u0e94\u0e95\u0001\u0000\u0000\u0000\u0e95\u02e7\u0001\u0000\u0000"+
		"\u0000\u0e96\u0e97\u0006\u0174\uffff\uffff\u0000\u0e97\u0e98\u0003\u02ea"+
		"\u0175\u0000\u0e98\u0e9e\u0001\u0000\u0000\u0000\u0e99\u0e9a\n\u0001\u0000"+
		"\u0000\u0e9a\u0e9b\u0005\u0005\u0000\u0000\u0e9b\u0e9d\u0003\u02ea\u0175"+
		"\u0000\u0e9c\u0e99\u0001\u0000\u0000\u0000\u0e9d\u0ea0\u0001\u0000\u0000"+
		"\u0000\u0e9e\u0e9c\u0001\u0000\u0000\u0000\u0e9e\u0e9f\u0001\u0000\u0000"+
		"\u0000\u0e9f\u02e9\u0001\u0000\u0000\u0000\u0ea0\u0e9e\u0001\u0000\u0000"+
		"\u0000\u0ea1\u0ea2\u0003\\.\u0000\u0ea2\u0ea3\u0003j5\u0000\u0ea3\u0ea4"+
		"\u0005\u000e\u0000\u0000\u0ea4\u0ea7\u0001\u0000\u0000\u0000\u0ea5\u0ea7"+
		"\u0003^/\u0000\u0ea6\u0ea1\u0001\u0000\u0000\u0000\u0ea6\u0ea5\u0001\u0000"+
		"\u0000\u0000\u0ea7\u0ea8\u0001\u0000\u0000\u0000\u0ea8\u0ea9\u0003\u0332"+
		"\u0199\u0000\u0ea9\u0eaa\u0003\u0080@\u0000\u0eaa\u0eaf\u0001\u0000\u0000"+
		"\u0000\u0eab\u0eac\u0003t:\u0000\u0eac\u0ead\u0003\u01bc\u00de\u0000\u0ead"+
		"\u0eaf\u0001\u0000\u0000\u0000\u0eae\u0ea6\u0001\u0000\u0000\u0000\u0eae"+
		"\u0eab\u0001\u0000\u0000\u0000\u0eaf\u02eb\u0001\u0000\u0000\u0000\u0eb0"+
		"\u0eb1\u0007\u0007\u0000\u0000\u0eb1\u02ed\u0001\u0000\u0000\u0000\u0eb2"+
		"\u0eb4\u0003\u02f0\u0178\u0000\u0eb3\u0eb2\u0001\u0000\u0000\u0000\u0eb3"+
		"\u0eb4\u0001\u0000\u0000\u0000\u0eb4\u02ef\u0001\u0000\u0000\u0000\u0eb5"+
		"\u0edf\u0005\u001c\u0000\u0000\u0eb6\u0edf\u0005\u001d\u0000\u0000\u0eb7"+
		"\u0edf\u0005\u001e\u0000\u0000\u0eb8\u0edf\u0005\u001f\u0000\u0000\u0eb9"+
		"\u0edf\u0005 \u0000\u0000\u0eba\u0edf\u0005!\u0000\u0000\u0ebb\u0edf\u0005"+
		"\"\u0000\u0000\u0ebc\u0edf\u0005#\u0000\u0000\u0ebd\u0edf\u0005&\u0000"+
		"\u0000\u0ebe\u0edf\u0005,\u0000\u0000\u0ebf\u0edf\u0005+\u0000\u0000\u0ec0"+
		"\u0edf\u0005-\u0000\u0000\u0ec1\u0edf\u00055\u0000\u0000\u0ec2\u0edf\u0005"+
		"6\u0000\u0000\u0ec3\u0edf\u0005F\u0000\u0000\u0ec4\u0edf\u0005N\u0000"+
		"\u0000\u0ec5\u0edf\u0005X\u0000\u0000\u0ec6\u0edf\u0005\u0096\u0000\u0000"+
		"\u0ec7\u0edf\u0005\u00ad\u0000\u0000\u0ec8\u0edf\u0005\u00b4\u0000\u0000"+
		"\u0ec9\u0edf\u0005\u00b3\u0000\u0000\u0eca\u0edf\u0005\u00c8\u0000\u0000"+
		"\u0ecb\u0edf\u0005\u00e8\u0000\u0000\u0ecc\u0edf\u0005\u0118\u0000\u0000"+
		"\u0ecd\u0edf\u0005\u0119\u0000\u0000\u0ece\u0edf\u0005\u011f\u0000\u0000"+
		"\u0ecf\u0edf\u0005\u0120\u0000\u0000\u0ed0\u0edf\u0005\u0146\u0000\u0000"+
		"\u0ed1\u0edf\u0005\u0147\u0000\u0000\u0ed2\u0edf\u0005\u0152\u0000\u0000"+
		"\u0ed3\u0edf\u0005\u0185\u0000\u0000\u0ed4\u0edf\u0005\u0186\u0000\u0000"+
		"\u0ed5\u0edf\u0005\u018a\u0000\u0000\u0ed6\u0edf\u0005\u018b\u0000\u0000"+
		"\u0ed7\u0edf\u0005\u018d\u0000\u0000\u0ed8\u0edf\u0005\u018f\u0000\u0000"+
		"\u0ed9\u0edf\u0005\u0190\u0000\u0000\u0eda\u0edf\u0005\u0191\u0000\u0000"+
		"\u0edb\u0edf\u0005\u0192\u0000\u0000\u0edc\u0edd\u0005E\u0000\u0000\u0edd"+
		"\u0edf\u0005\u01a8\u0000\u0000\u0ede\u0eb5\u0001\u0000\u0000\u0000\u0ede"+
		"\u0eb6\u0001\u0000\u0000\u0000\u0ede\u0eb7\u0001\u0000\u0000\u0000\u0ede"+
		"\u0eb8\u0001\u0000\u0000\u0000\u0ede\u0eb9\u0001\u0000\u0000\u0000\u0ede"+
		"\u0eba\u0001\u0000\u0000\u0000\u0ede\u0ebb\u0001\u0000\u0000\u0000\u0ede"+
		"\u0ebc\u0001\u0000\u0000\u0000\u0ede\u0ebd\u0001\u0000\u0000\u0000\u0ede"+
		"\u0ebe\u0001\u0000\u0000\u0000\u0ede\u0ebf\u0001\u0000\u0000\u0000\u0ede"+
		"\u0ec0\u0001\u0000\u0000\u0000\u0ede\u0ec1\u0001\u0000\u0000\u0000\u0ede"+
		"\u0ec2\u0001\u0000\u0000\u0000\u0ede\u0ec3\u0001\u0000\u0000\u0000\u0ede"+
		"\u0ec4\u0001\u0000\u0000\u0000\u0ede\u0ec5\u0001\u0000\u0000\u0000\u0ede"+
		"\u0ec6\u0001\u0000\u0000\u0000\u0ede\u0ec7\u0001\u0000\u0000\u0000\u0ede"+
		"\u0ec8\u0001\u0000\u0000\u0000\u0ede\u0ec9\u0001\u0000\u0000\u0000\u0ede"+
		"\u0eca\u0001\u0000\u0000\u0000\u0ede\u0ecb\u0001\u0000\u0000\u0000\u0ede"+
		"\u0ecc\u0001\u0000\u0000\u0000\u0ede\u0ecd\u0001\u0000\u0000\u0000\u0ede"+
		"\u0ece\u0001\u0000\u0000\u0000\u0ede\u0ecf\u0001\u0000\u0000\u0000\u0ede"+
		"\u0ed0\u0001\u0000\u0000\u0000\u0ede\u0ed1\u0001\u0000\u0000\u0000\u0ede"+
		"\u0ed2\u0001\u0000\u0000\u0000\u0ede\u0ed3\u0001\u0000\u0000\u0000\u0ede"+
		"\u0ed4\u0001\u0000\u0000\u0000\u0ede\u0ed5\u0001\u0000\u0000\u0000\u0ede"+
		"\u0ed6\u0001\u0000\u0000\u0000\u0ede\u0ed7\u0001\u0000\u0000\u0000\u0ede"+
		"\u0ed8\u0001\u0000\u0000\u0000\u0ede\u0ed9\u0001\u0000\u0000\u0000\u0ede"+
		"\u0eda\u0001\u0000\u0000\u0000\u0ede\u0edb\u0001\u0000\u0000\u0000\u0ede"+
		"\u0edc\u0001\u0000\u0000\u0000\u0edf\u02f1\u0001\u0000\u0000\u0000\u0ee0"+
		"\u0ee2\u0003\u02f4\u017a\u0000\u0ee1\u0ee0\u0001\u0000\u0000\u0000\u0ee1"+
		"\u0ee2\u0001\u0000\u0000\u0000\u0ee2\u02f3\u0001\u0000\u0000\u0000\u0ee3"+
		"\u0eea\u0005P\u0000\u0000\u0ee4\u0ee5\u0005P\u0000\u0000\u0ee5\u0ee6\u0005"+
		"\b\u0000\u0000\u0ee6\u0ee7\u0003V+\u0000\u0ee7\u0ee8\u0005\t\u0000\u0000"+
		"\u0ee8\u0eea\u0001\u0000\u0000\u0000\u0ee9\u0ee3\u0001\u0000\u0000\u0000"+
		"\u0ee9\u0ee4\u0001\u0000\u0000\u0000\u0eea\u02f5\u0001\u0000\u0000\u0000"+
		"\u0eeb\u0eec\u0005_\u0000\u0000\u0eec\u0eed\u0005\b\u0000\u0000\u0eed"+
		"\u0eee\u0005\u01a8\u0000\u0000\u0eee\u0ef4\u0005\t\u0000\u0000\u0eef\u0ef0"+
		"\u0005`\u0000\u0000\u0ef0\u0ef1\u0005\b\u0000\u0000\u0ef1\u0ef2\u0005"+
		"\u01a8\u0000\u0000\u0ef2\u0ef4\u0005\t\u0000\u0000\u0ef3\u0eeb\u0001\u0000"+
		"\u0000\u0000\u0ef3\u0eef\u0001\u0000\u0000\u0000\u0ef4\u02f7\u0001\u0000"+
		"\u0000\u0000\u0ef5\u0ef7\u0003\u02fa\u017d\u0000\u0ef6\u0ef5\u0001\u0000"+
		"\u0000\u0000\u0ef6\u0ef7\u0001\u0000\u0000\u0000\u0ef7\u02f9\u0001\u0000"+
		"\u0000\u0000\u0ef8\u0ef9\u0007\b\u0000\u0000\u0ef9\u02fb\u0001\u0000\u0000"+
		"\u0000\u0efa\u0efc\u0005\u0089\u0000\u0000\u0efb\u0efa\u0001\u0000\u0000"+
		"\u0000\u0efb\u0efc\u0001\u0000\u0000\u0000\u0efc\u02fd\u0001\u0000\u0000"+
		"\u0000\u0efd\u0eff\u0003\u0300\u0180\u0000\u0efe\u0efd\u0001\u0000\u0000"+
		"\u0000\u0efe\u0eff\u0001\u0000\u0000\u0000\u0eff\u02ff\u0001\u0000\u0000"+
		"\u0000\u0f00\u0f01\u0006\u0180\uffff\uffff\u0000\u0f01\u0f02\u0003\u0302"+
		"\u0181\u0000\u0f02\u0f08\u0001\u0000\u0000\u0000\u0f03\u0f04\n\u0001\u0000"+
		"\u0000\u0f04\u0f05\u0005\u0005\u0000\u0000\u0f05\u0f07\u0003\u0302\u0181"+
		"\u0000\u0f06\u0f03\u0001\u0000\u0000\u0000\u0f07\u0f0a\u0001\u0000\u0000"+
		"\u0000\u0f08\u0f06\u0001\u0000\u0000\u0000\u0f08\u0f09\u0001\u0000\u0000"+
		"\u0000\u0f09\u0301\u0001\u0000\u0000\u0000\u0f0a\u0f08\u0001\u0000\u0000"+
		"\u0000\u0f0b\u0f0c\u0003\\.\u0000\u0f0c\u0f0d\u0003j5\u0000\u0f0d\u0f0e"+
		"\u0005\u000e\u0000\u0000\u0f0e\u0f11\u0001\u0000\u0000\u0000\u0f0f\u0f11"+
		"\u0003^/\u0000\u0f10\u0f0b\u0001\u0000\u0000\u0000\u0f10\u0f0f\u0001\u0000"+
		"\u0000\u0000\u0f11\u0f12\u0001\u0000\u0000\u0000\u0f12\u0f13\u0003\u0080"+
		"@\u0000\u0f13\u0f18\u0001\u0000\u0000\u0000\u0f14\u0f15\u0003t:\u0000"+
		"\u0f15\u0f16\u0003\u01bc\u00de\u0000\u0f16\u0f18\u0001\u0000\u0000\u0000"+
		"\u0f17\u0f10\u0001\u0000\u0000\u0000\u0f17\u0f14\u0001\u0000\u0000\u0000"+
		"\u0f18\u0303\u0001\u0000\u0000\u0000\u0f19\u0f1c\u0003\u0098L\u0000\u0f1a"+
		"\u0f1c\u0003P(\u0000\u0f1b\u0f19\u0001\u0000\u0000\u0000\u0f1b\u0f1a\u0001"+
		"\u0000\u0000\u0000\u0f1c\u0305\u0001\u0000\u0000\u0000\u0f1d\u0f1f\u0003"+
		"\u0308\u0184\u0000\u0f1e\u0f1d\u0001\u0000\u0000\u0000\u0f1e\u0f1f\u0001"+
		"\u0000\u0000\u0000\u0f1f\u0307\u0001\u0000\u0000\u0000\u0f20\u0f21\u0006"+
		"\u0184\uffff\uffff\u0000\u0f21\u0f22\u0003\u030a\u0185\u0000\u0f22\u0f27"+
		"\u0001\u0000\u0000\u0000\u0f23\u0f24\n\u0001\u0000\u0000\u0f24\u0f26\u0003"+
		"\u030a\u0185\u0000\u0f25\u0f23\u0001\u0000\u0000\u0000\u0f26\u0f29\u0001"+
		"\u0000\u0000\u0000\u0f27\u0f25\u0001\u0000\u0000\u0000\u0f27\u0f28\u0001"+
		"\u0000\u0000\u0000\u0f28\u0309\u0001\u0000\u0000\u0000\u0f29\u0f27\u0001"+
		"\u0000\u0000\u0000\u0f2a\u0f2b\u0007\t\u0000\u0000\u0f2b\u030b\u0001\u0000"+
		"\u0000\u0000\u0f2c\u0f2d\u0007\n\u0000\u0000\u0f2d\u030d\u0001\u0000\u0000"+
		"\u0000\u0f2e\u0f30\u0003\u0310\u0188\u0000\u0f2f\u0f2e\u0001\u0000\u0000"+
		"\u0000\u0f2f\u0f30\u0001\u0000\u0000\u0000\u0f30\u030f\u0001\u0000\u0000"+
		"\u0000\u0f31\u0f32\u0006\u0188\uffff\uffff\u0000\u0f32\u0f33\u0003\u0312"+
		"\u0189\u0000\u0f33\u0f38\u0001\u0000\u0000\u0000\u0f34\u0f35\n\u0001\u0000"+
		"\u0000\u0f35\u0f37\u0003\u0312\u0189\u0000\u0f36\u0f34\u0001\u0000\u0000"+
		"\u0000\u0f37\u0f3a\u0001\u0000\u0000\u0000\u0f38\u0f36\u0001\u0000\u0000"+
		"\u0000\u0f38\u0f39\u0001\u0000\u0000\u0000\u0f39\u0311\u0001\u0000\u0000"+
		"\u0000\u0f3a\u0f38\u0001\u0000\u0000\u0000\u0f3b\u0f70\u0003T*\u0000\u0f3c"+
		"\u0f3d\u0005\u0017\u0000\u0000\u0f3d\u0f3e\u0005\u0002\u0000\u0000\u0f3e"+
		"\u0f70\u0005\u01a8\u0000\u0000\u0f3f\u0f40\u0005\u0018\u0000\u0000\u0f40"+
		"\u0f41\u0005\u0002\u0000\u0000\u0f41\u0f70\u0005\u01a8\u0000\u0000\u0f42"+
		"\u0f70\u0003\u02e2\u0171\u0000\u0f43\u0f70\u0003\u02e4\u0172\u0000\u0f44"+
		"\u0f70\u0003\u034a\u01a5\u0000\u0f45\u0f70\u0003\u00a0P\u0000\u0f46\u0f47"+
		"\u0003\u00a0P\u0000\u0f47\u0f48\u0005\u0002\u0000\u0000\u0f48\u0f49\u0003"+
		"\u00a0P\u0000\u0f49\u0f70\u0001\u0000\u0000\u0000\u0f4a\u0f70\u0005\u001b"+
		"\u0000\u0000\u0f4b\u0f70\u0005*\u0000\u0000\u0f4c\u0f70\u0005;\u0000\u0000"+
		"\u0f4d\u0f70\u0005M\u0000\u0000\u0f4e\u0f70\u0005V\u0000\u0000\u0f4f\u0f70"+
		"\u0005\u00bb\u0000\u0000\u0f50\u0f70\u0005\u00ba\u0000\u0000\u0f51\u0f70"+
		"\u0005\u00c2\u0000\u0000\u0f52\u0f70\u0005\u00d1\u0000\u0000\u0f53\u0f70"+
		"\u0005\u00e5\u0000\u0000\u0f54\u0f70\u0005\u00eb\u0000\u0000\u0f55\u0f70"+
		"\u0005\u00f3\u0000\u0000\u0f56\u0f70\u0005\u00f7\u0000\u0000\u0f57\u0f70"+
		"\u0005\u00f9\u0000\u0000\u0f58\u0f70\u0005\u00fa\u0000\u0000\u0f59\u0f70"+
		"\u0005\u00fc\u0000\u0000\u0f5a\u0f70\u0005\u00fe\u0000\u0000\u0f5b\u0f70"+
		"\u0005\u00ff\u0000\u0000\u0f5c\u0f70\u0005\u0100\u0000\u0000\u0f5d\u0f70"+
		"\u0005\u0102\u0000\u0000\u0f5e\u0f70\u0005\u0110\u0000\u0000\u0f5f\u0f70"+
		"\u0005\u0111\u0000\u0000\u0f60\u0f70\u0005\u0121\u0000\u0000\u0f61\u0f70"+
		"\u0005\u0122\u0000\u0000\u0f62\u0f70\u0005\u0129\u0000\u0000\u0f63\u0f70"+
		"\u0005\u012c\u0000\u0000\u0f64\u0f70\u0005\u012e\u0000\u0000\u0f65\u0f70"+
		"\u0005\u012f\u0000\u0000\u0f66\u0f70\u0005\u0130\u0000\u0000\u0f67\u0f70"+
		"\u0005\u0131\u0000\u0000\u0f68\u0f70\u0005\u0145\u0000\u0000\u0f69\u0f70"+
		"\u0005\u014c\u0000\u0000\u0f6a\u0f70\u0005\u014d\u0000\u0000\u0f6b\u0f70"+
		"\u0005\u014e\u0000\u0000\u0f6c\u0f70\u0005\u0150\u0000\u0000\u0f6d\u0f70"+
		"\u0005\u017a\u0000\u0000\u0f6e\u0f70\u0005\u0188\u0000\u0000\u0f6f\u0f3b"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f3c\u0001\u0000\u0000\u0000\u0f6f\u0f3f"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f42\u0001\u0000\u0000\u0000\u0f6f\u0f43"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f44\u0001\u0000\u0000\u0000\u0f6f\u0f45"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f46\u0001\u0000\u0000\u0000\u0f6f\u0f4a"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f4b\u0001\u0000\u0000\u0000\u0f6f\u0f4c"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f4d\u0001\u0000\u0000\u0000\u0f6f\u0f4e"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f4f\u0001\u0000\u0000\u0000\u0f6f\u0f50"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f51\u0001\u0000\u0000\u0000\u0f6f\u0f52"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f53\u0001\u0000\u0000\u0000\u0f6f\u0f54"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f55\u0001\u0000\u0000\u0000\u0f6f\u0f56"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f57\u0001\u0000\u0000\u0000\u0f6f\u0f58"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f59\u0001\u0000\u0000\u0000\u0f6f\u0f5a"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f5b\u0001\u0000\u0000\u0000\u0f6f\u0f5c"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f5d\u0001\u0000\u0000\u0000\u0f6f\u0f5e"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f5f\u0001\u0000\u0000\u0000\u0f6f\u0f60"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f61\u0001\u0000\u0000\u0000\u0f6f\u0f62"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f63\u0001\u0000\u0000\u0000\u0f6f\u0f64"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f65\u0001\u0000\u0000\u0000\u0f6f\u0f66"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f67\u0001\u0000\u0000\u0000\u0f6f\u0f68"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f69\u0001\u0000\u0000\u0000\u0f6f\u0f6a"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f6b\u0001\u0000\u0000\u0000\u0f6f\u0f6c"+
		"\u0001\u0000\u0000\u0000\u0f6f\u0f6d\u0001\u0000\u0000\u0000\u0f6f\u0f6e"+
		"\u0001\u0000\u0000\u0000\u0f70\u0313\u0001\u0000\u0000\u0000\u0f71\u0f73"+
		"\u0005\u00bd\u0000\u0000\u0f72\u0f71\u0001\u0000\u0000\u0000\u0f72\u0f73"+
		"\u0001\u0000\u0000\u0000\u0f73\u0315\u0001\u0000\u0000\u0000\u0f74\u0f75"+
		"\u0005\u0005\u0000\u0000\u0f75\u0f77\u0003\u0318\u018c\u0000\u0f76\u0f74"+
		"\u0001\u0000\u0000\u0000\u0f76\u0f77\u0001\u0000\u0000\u0000\u0f77\u0317"+
		"\u0001\u0000\u0000\u0000\u0f78\u0f79\u0006\u018c\uffff\uffff\u0000\u0f79"+
		"\u0f7a\u0003\u031a\u018d\u0000\u0f7a\u0f80\u0001\u0000\u0000\u0000\u0f7b"+
		"\u0f7c\n\u0001\u0000\u0000\u0f7c\u0f7d\u0005\u0005\u0000\u0000\u0f7d\u0f7f"+
		"\u0003\u031a\u018d\u0000\u0f7e\u0f7b\u0001\u0000\u0000\u0000\u0f7f\u0f82"+
		"\u0001\u0000\u0000\u0000\u0f80\u0f7e\u0001\u0000\u0000\u0000\u0f80\u0f81"+
		"\u0001\u0000\u0000\u0000\u0f81\u0319\u0001\u0000\u0000\u0000\u0f82\u0f80"+
		"\u0001\u0000\u0000\u0000\u0f83\u0f84\u0005\u01a8\u0000\u0000\u0f84\u031b"+
		"\u0001\u0000\u0000\u0000\u0f85\u0f86\u0007\u000b\u0000\u0000\u0f86\u031d"+
		"\u0001\u0000\u0000\u0000\u0f87\u0f89\u0003\u0320\u0190\u0000\u0f88\u0f87"+
		"\u0001\u0000\u0000\u0000\u0f88\u0f89\u0001\u0000\u0000\u0000\u0f89\u031f"+
		"\u0001\u0000\u0000\u0000\u0f8a\u0f8b\u0007\f\u0000\u0000\u0f8b\u0321\u0001"+
		"\u0000\u0000\u0000\u0f8c\u0f8e\u0003\u0324\u0192\u0000\u0f8d\u0f8c\u0001"+
		"\u0000\u0000\u0000\u0f8d\u0f8e\u0001\u0000\u0000\u0000\u0f8e\u0323\u0001"+
		"\u0000\u0000\u0000\u0f8f\u0f90\u0007\r\u0000\u0000\u0f90\u0325\u0001\u0000"+
		"\u0000\u0000\u0f91\u0f92\u0005\n\u0000\u0000\u0f92\u0f93\u0003\u0328\u0194"+
		"\u0000\u0f93\u0f94\u0005\u000b\u0000\u0000\u0f94\u0f96\u0001\u0000\u0000"+
		"\u0000\u0f95\u0f91\u0001\u0000\u0000\u0000\u0f95\u0f96\u0001\u0000\u0000"+
		"\u0000\u0f96\u0327\u0001\u0000\u0000\u0000\u0f97\u0f98\u0006\u0194\uffff"+
		"\uffff\u0000\u0f98\u0f99\u0003\u032a\u0195\u0000\u0f99\u0f9e\u0001\u0000"+
		"\u0000\u0000\u0f9a\u0f9b\n\u0001\u0000\u0000\u0f9b\u0f9d\u0003\u032a\u0195"+
		"\u0000\u0f9c\u0f9a\u0001\u0000\u0000\u0000\u0f9d\u0fa0\u0001\u0000\u0000"+
		"\u0000\u0f9e\u0f9c\u0001\u0000\u0000\u0000\u0f9e\u0f9f\u0001\u0000\u0000"+
		"\u0000\u0f9f\u0329\u0001\u0000\u0000\u0000\u0fa0\u0f9e\u0001\u0000\u0000"+
		"\u0000\u0fa1\u0fa2\u0003\u00a0P\u0000\u0fa2\u0fa3\u0005\b\u0000\u0000"+
		"\u0fa3\u0fa4\u0003\u02d4\u016a\u0000\u0fa4\u0fa5\u0005\t\u0000\u0000\u0fa5"+
		"\u032b\u0001\u0000\u0000\u0000\u0fa6\u0fa8\u0003\u032e\u0197\u0000\u0fa7"+
		"\u0fa6\u0001\u0000\u0000\u0000\u0fa7\u0fa8\u0001\u0000\u0000\u0000\u0fa8"+
		"\u032d\u0001\u0000\u0000\u0000\u0fa9\u0faa\u0006\u0197\uffff\uffff\u0000"+
		"\u0faa\u0fab\u0003\u0330\u0198\u0000\u0fab\u0fb0\u0001\u0000\u0000\u0000"+
		"\u0fac\u0fad\n\u0001\u0000\u0000\u0fad\u0faf\u0003\u0330\u0198\u0000\u0fae"+
		"\u0fac\u0001\u0000\u0000\u0000\u0faf\u0fb2\u0001\u0000\u0000\u0000\u0fb0"+
		"\u0fae\u0001\u0000\u0000\u0000\u0fb0\u0fb1\u0001\u0000\u0000\u0000\u0fb1"+
		"\u032f\u0001\u0000\u0000\u0000\u0fb2\u0fb0\u0001\u0000\u0000\u0000\u0fb3"+
		"\u0fb4\u0007\u000e\u0000\u0000\u0fb4\u0331\u0001\u0000\u0000\u0000\u0fb5"+
		"\u0fb7\u0003\u0334\u019a\u0000\u0fb6\u0fb5\u0001\u0000\u0000\u0000\u0fb6"+
		"\u0fb7\u0001\u0000\u0000\u0000\u0fb7\u0333\u0001\u0000\u0000\u0000\u0fb8"+
		"\u0fb9\u0006\u019a\uffff\uffff\u0000\u0fb9\u0fba\u0003\u0336\u019b\u0000"+
		"\u0fba\u0fbf\u0001\u0000\u0000\u0000\u0fbb\u0fbc\n\u0001\u0000\u0000\u0fbc"+
		"\u0fbe\u0003\u0336\u019b\u0000\u0fbd\u0fbb\u0001\u0000\u0000\u0000\u0fbe"+
		"\u0fc1\u0001\u0000\u0000\u0000\u0fbf\u0fbd\u0001\u0000\u0000\u0000\u0fbf"+
		"\u0fc0\u0001\u0000\u0000\u0000\u0fc0\u0335\u0001\u0000\u0000\u0000\u0fc1"+
		"\u0fbf\u0001\u0000\u0000\u0000\u0fc2\u0fd6\u0003\u02e2\u0171\u0000\u0fc3"+
		"\u0fd6\u0003\u02f6\u017b\u0000\u0fc4\u0fd6\u0003\u00a0P\u0000\u0fc5\u0fd6"+
		"\u0005<\u0000\u0000\u0fc6\u0fd6\u0005\u00bc\u0000\u0000\u0fc7\u0fd6\u0005"+
		"\u00c4\u0000\u0000\u0fc8\u0fd6\u0005\u00ef\u0000\u0000\u0fc9\u0fd6\u0005"+
		"\u00f2\u0000\u0000\u0fca\u0fd6\u0005\u00f4\u0000\u0000\u0fcb\u0fd6\u0005"+
		"\u00fd\u0000\u0000\u0fcc\u0fd6\u0005\u0121\u0000\u0000\u0fcd\u0fd6\u0005"+
		"\u0122\u0000\u0000\u0fce\u0fd6\u0005\u0128\u0000\u0000\u0fcf\u0fd6\u0005"+
		"\u013f\u0000\u0000\u0fd0\u0fd6\u0005\u014b\u0000\u0000\u0fd1\u0fd6\u0005"+
		"\u0153\u0000\u0000\u0fd2\u0fd6\u0005\u0154\u0000\u0000\u0fd3\u0fd6\u0005"+
		"\u0188\u0000\u0000\u0fd4\u0fd6\u0005\u0195\u0000\u0000\u0fd5\u0fc2\u0001"+
		"\u0000\u0000\u0000\u0fd5\u0fc3\u0001\u0000\u0000\u0000\u0fd5\u0fc4\u0001"+
		"\u0000\u0000\u0000\u0fd5\u0fc5\u0001\u0000\u0000\u0000\u0fd5\u0fc6\u0001"+
		"\u0000\u0000\u0000\u0fd5\u0fc7\u0001\u0000\u0000\u0000\u0fd5\u0fc8\u0001"+
		"\u0000\u0000\u0000\u0fd5\u0fc9\u0001\u0000\u0000\u0000\u0fd5\u0fca\u0001"+
		"\u0000\u0000\u0000\u0fd5\u0fcb\u0001\u0000\u0000\u0000\u0fd5\u0fcc\u0001"+
		"\u0000\u0000\u0000\u0fd5\u0fcd\u0001\u0000\u0000\u0000\u0fd5\u0fce\u0001"+
		"\u0000\u0000\u0000\u0fd5\u0fcf\u0001\u0000\u0000\u0000\u0fd5\u0fd0\u0001"+
		"\u0000\u0000\u0000\u0fd5\u0fd1\u0001\u0000\u0000\u0000\u0fd5\u0fd2\u0001"+
		"\u0000\u0000\u0000\u0fd5\u0fd3\u0001\u0000\u0000\u0000\u0fd5\u0fd4\u0001"+
		"\u0000\u0000\u0000\u0fd6\u0337\u0001\u0000\u0000\u0000\u0fd7\u0fde\u0005"+
		"\u0007\u0000\u0000\u0fd8\u0fde\u0003\u033a\u019d\u0000\u0fd9\u0fda\u0003"+
		"\u033a\u019d\u0000\u0fda\u0fdb\u0005\u0005\u0000\u0000\u0fdb\u0fdc\u0005"+
		"\u0007\u0000\u0000\u0fdc\u0fde\u0001\u0000\u0000\u0000\u0fdd\u0fd7\u0001"+
		"\u0000\u0000\u0000\u0fdd\u0fd8\u0001\u0000\u0000\u0000\u0fdd\u0fd9\u0001"+
		"\u0000\u0000\u0000\u0fdd\u0fde\u0001\u0000\u0000\u0000\u0fde\u0339\u0001"+
		"\u0000\u0000\u0000\u0fdf\u0fe0\u0006\u019d\uffff\uffff\u0000\u0fe0\u0fe1"+
		"\u0003\u033c\u019e\u0000\u0fe1\u0fe7\u0001\u0000\u0000\u0000\u0fe2\u0fe3"+
		"\n\u0001\u0000\u0000\u0fe3\u0fe4\u0005\u0005\u0000\u0000\u0fe4\u0fe6\u0003"+
		"\u033c\u019e\u0000\u0fe5\u0fe2\u0001\u0000\u0000\u0000\u0fe6\u0fe9\u0001"+
		"\u0000\u0000\u0000\u0fe7\u0fe5\u0001\u0000\u0000\u0000\u0fe7\u0fe8\u0001"+
		"\u0000\u0000\u0000\u0fe8\u033b\u0001\u0000\u0000\u0000\u0fe9\u0fe7\u0001"+
		"\u0000\u0000\u0000\u0fea\u0feb\u0003\\.\u0000\u0feb\u0fec\u0003\u0332"+
		"\u0199\u0000\u0fec\u0ff2\u0001\u0000\u0000\u0000\u0fed\u0fee\u0003\\."+
		"\u0000\u0fee\u0fef\u0003\u0332\u0199\u0000\u0fef\u0ff0\u0003P(\u0000\u0ff0"+
		"\u0ff2\u0001\u0000\u0000\u0000\u0ff1\u0fea\u0001\u0000\u0000\u0000\u0ff1"+
		"\u0fed\u0001\u0000\u0000\u0000\u0ff2\u033d\u0001\u0000\u0000\u0000\u0ff3"+
		"\u0ff5\u0003\u0340\u01a0\u0000\u0ff4\u0ff3\u0001\u0000\u0000\u0000\u0ff4"+
		"\u0ff5\u0001\u0000\u0000\u0000\u0ff5\u033f\u0001\u0000\u0000\u0000\u0ff6"+
		"\u0ff7\u0007\u000f\u0000\u0000\u0ff7\u0341\u0001\u0000\u0000\u0000\u0ff8"+
		"\u0ffa\u0003\u0344\u01a2\u0000\u0ff9\u0ff8\u0001\u0000\u0000\u0000\u0ff9"+
		"\u0ffa\u0001\u0000\u0000\u0000\u0ffa\u0343\u0001\u0000\u0000\u0000\u0ffb"+
		"\u0ffc\u0006\u01a2\uffff\uffff\u0000\u0ffc\u0ffd\u0003\u0346\u01a3\u0000"+
		"\u0ffd\u1002\u0001\u0000\u0000\u0000\u0ffe\u0fff\n\u0001\u0000\u0000\u0fff"+
		"\u1001\u0003\u0346\u01a3\u0000\u1000\u0ffe\u0001\u0000\u0000\u0000\u1001"+
		"\u1004\u0001\u0000\u0000\u0000\u1002\u1000\u0001\u0000\u0000\u0000\u1002"+
		"\u1003\u0001\u0000\u0000\u0000\u1003\u0345\u0001\u0000\u0000\u0000\u1004"+
		"\u1002\u0001\u0000\u0000\u0000\u1005\u100e\u0003\u02e2\u0171\u0000\u1006"+
		"\u100e\u0003\u02f6\u017b\u0000\u1007\u100e\u0003\u00a0P\u0000\u1008\u100e"+
		"\u0005\u00c4\u0000\u0000\u1009\u100e\u0005\u00f2\u0000\u0000\u100a\u100e"+
		"\u0005\u00fd\u0000\u0000\u100b\u100e\u0005\u013f\u0000\u0000\u100c\u100e"+
		"\u0005\u0195\u0000\u0000\u100d\u1005\u0001\u0000\u0000\u0000\u100d\u1006"+
		"\u0001\u0000\u0000\u0000\u100d\u1007\u0001\u0000\u0000\u0000\u100d\u1008"+
		"\u0001\u0000\u0000\u0000\u100d\u1009\u0001\u0000\u0000\u0000\u100d\u100a"+
		"\u0001\u0000\u0000\u0000\u100d\u100b\u0001\u0000\u0000\u0000\u100d\u100c"+
		"\u0001\u0000\u0000\u0000\u100e\u0347\u0001\u0000\u0000\u0000\u100f\u1010"+
		"\u0005\u0135\u0000\u0000\u1010\u1011\u0005\u01b0\u0000\u0000\u1011\u0349"+
		"\u0001\u0000\u0000\u0000\u1012\u1013\u0005\u0018\u0000\u0000\u1013\u1014"+
		"\u0005\b\u0000\u0000\u1014\u1015\u0005\u01a8\u0000\u0000\u1015\u1016\u0005"+
		"\t\u0000\u0000\u1016\u034b\u0001\u0000\u0000\u0000\u1017\u1018\u0005\u0156"+
		"\u0000\u0000\u1018\u1019\u0005\b\u0000\u0000\u1019\u101a\u0005\u01b0\u0000"+
		"\u0000\u101a\u101c\u0005\t\u0000\u0000\u101b\u1017\u0001\u0000\u0000\u0000"+
		"\u101b\u101c\u0001\u0000\u0000\u0000\u101c\u034d\u0001\u0000\u0000\u0000"+
		"\u101d\u1024\u0005\u015c\u0000\u0000\u101e\u101f\u0005\u015c\u0000\u0000"+
		"\u101f\u1020\u0005\b\u0000\u0000\u1020\u1021\u0003\u0350\u01a8\u0000\u1021"+
		"\u1022\u0005\t\u0000\u0000\u1022\u1024\u0001\u0000\u0000\u0000\u1023\u101d"+
		"\u0001\u0000\u0000\u0000\u1023\u101e\u0001\u0000\u0000\u0000\u1024\u034f"+
		"\u0001\u0000\u0000\u0000\u1025\u1026\u0007\u0010\u0000\u0000\u1026\u0351"+
		"\u0001\u0000\u0000\u0000\u1027\u1028\u0007\u0011\u0000\u0000\u1028\u0353"+
		"\u0001\u0000\u0000\u0000\u1029\u102a\u0007\u0012\u0000\u0000\u102a\u0355"+
		"\u0001\u0000\u0000\u0000\u00e9\u0358\u035d\u0366\u0378\u0386\u0396\u03a4"+
		"\u03a8\u03ab\u03b9\u03bd\u03c0\u03cb\u03d1\u03db\u03e2\u03e9\u03ed\u03f0"+
		"\u03fd\u0401\u0404\u040c\u041d\u0428\u042c\u0436\u043c\u0442\u0448\u045e"+
		"\u0468\u046d\u0479\u047c\u047f\u0488\u04ae\u04b9\u04bb\u04c7\u04d4\u04fd"+
		"\u0507\u0511\u051c\u051f\u0522\u0532\u0552\u0594\u067e\u0688\u0690\u0721"+
		"\u0729\u072c\u0735\u0741\u0773\u087b\u087e\u0881\u0885\u088f\u089c\u08a9"+
		"\u08b5\u08b9\u08c4\u08d2\u08e0\u08ed\u08f7\u0907\u090b\u092b\u09a6\u09c9"+
		"\u09d9\u09dc\u09e5\u09f0\u0a0d\u0a19\u0a1e\u0a3c\u0a45\u0a5f\u0a9d\u0aa8"+
		"\u0ab2\u0ab7\u0ac0\u0acb\u0ace\u0ad7\u0adc\u0ae6\u0b02\u0b0a\u0b14\u0b37"+
		"\u0b3f\u0b49\u0b54\u0b5c\u0b66\u0b6f\u0b77\u0b81\u0b89\u0b91\u0b9b\u0bac"+
		"\u0bb4\u0bbe\u0bd6\u0bde\u0be8\u0bef\u0bf7\u0c01\u0c09\u0c11\u0c1b\u0c20"+
		"\u0c28\u0c32\u0c3a\u0c42\u0c4c\u0c57\u0c5f\u0c69\u0c70\u0c78\u0c82\u0c8f"+
		"\u0c97\u0ca1\u0cc0\u0cc8\u0cd2\u0cd9\u0ce1\u0ceb\u0cf2\u0cfa\u0d04\u0d0c"+
		"\u0d14\u0d1e\u0d2a\u0d32\u0d3c\u0d41\u0d49\u0d53\u0d5a\u0d62\u0d6c\u0d79"+
		"\u0d81\u0d8b\u0d95\u0d9d\u0da7\u0daf\u0db7\u0dc1\u0dc9\u0dd1\u0ddb\u0de3"+
		"\u0e0b\u0e2c\u0e31\u0e35\u0e39\u0e3d\u0e41\u0e47\u0e4b\u0e51\u0e54\u0e5d"+
		"\u0e68\u0e6f\u0e79\u0e8c\u0e94\u0e9e\u0ea6\u0eae\u0eb3\u0ede\u0ee1\u0ee9"+
		"\u0ef3\u0ef6\u0efb\u0efe\u0f08\u0f10\u0f17\u0f1b\u0f1e\u0f27\u0f2f\u0f38"+
		"\u0f6f\u0f72\u0f76\u0f80\u0f88\u0f8d\u0f95\u0f9e\u0fa7\u0fb0\u0fb6\u0fbf"+
		"\u0fd5\u0fdd\u0fe7\u0ff1\u0ff4\u0ff9\u1002\u100d\u101b\u1023";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}