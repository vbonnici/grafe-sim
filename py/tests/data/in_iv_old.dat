%retval = alloca i32, align 4
%A = alloca [5 x i32], align 16
%n = alloca i32, align 4
store i32 0, i32* %retval, align 4
%0 = bitcast [5 x i32]* %A to i8*
call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([5 x i32]* @main.A to i8*), i64 20, i1 false)
store i32 5, i32* %n, align 4
%call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0))
%arraydecay = getelementptr inbounds [5 x i32], [5 x i32]* %A, i32 0, i32 0
%1 = load i32, i32* %n, align 4
call void @print_array(i32* %arraydecay, i32 %1)
%call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0))
%arraydecay2 = getelementptr inbounds [5 x i32], [5 x i32]* %A, i32 0, i32 0
%2 = load i32, i32* %n, align 4
call void @bubble_sort(i32* %arraydecay2, i32 %2)
%arraydecay3 = getelementptr inbounds [5 x i32], [5 x i32]* %A, i32 0, i32 0
%3 = load i32, i32* %n, align 4
call void @print_array(i32* %arraydecay3, i32 %3)
ret i32 0
%A.addr = alloca i32*, align 8
%n.addr = alloca i32, align 4
%i = alloca i32, align 4
store i32* %A, i32** %A.addr, align 8
store i32 %n, i32* %n.addr, align 4
store i32 0, i32* %i, align 4
%call = call i32 @putchar(i32 91)
br label %while.cond
%0 = load i32, i32* %i, align 4
%1 = load i32, i32* %n.addr, align 4
%cmp = icmp slt i32 %0, %1
br i1 %cmp, label %while.body, label %while.end
%2 = load i32, i32* %i, align 4
%cmp1 = icmp sgt i32 %2, 0
br i1 %cmp1, label %if.then, label %if.end
%call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
br label %if.end
%3 = load i32*, i32** %A.addr, align 8
%4 = load i32, i32* %i, align 4
%inc = add nsw i32 %4, 1
store i32 %inc, i32* %i, align 4
%idxprom = sext i32 %4 to i64
%arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom
%5 = load i32, i32* %arrayidx, align 4
%call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 %5)
br label %while.cond
%call4 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
ret void
%A.addr = alloca i32*, align 8
%n.addr = alloca i32, align 4
%i = alloca i32, align 4
%j = alloca i32, align 4
%sorted = alloca i32, align 4
%z = alloca i32, align 4
store i32* %A, i32** %A.addr, align 8
store i32 %n, i32* %n.addr, align 4
store i32 0, i32* %i, align 4
br label %for.cond
%0 = load i32, i32* %i, align 4
%1 = load i32, i32* %n.addr, align 4
%cmp = icmp slt i32 %0, %1
br i1 %cmp, label %for.body, label %for.end21
store i32 1, i32* %sorted, align 4
store i32 0, i32* %j, align 4
br label %for.cond1
%2 = load i32, i32* %j, align 4
%3 = load i32, i32* %n.addr, align 4
%sub = sub nsw i32 %3, 1
%cmp2 = icmp slt i32 %2, %sub
br i1 %cmp2, label %for.body3, label %for.end
%4 = load i32*, i32** %A.addr, align 8
%5 = load i32, i32* %j, align 4
%idxprom = sext i32 %5 to i64
%arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
%6 = load i32, i32* %arrayidx, align 4
%7 = load i32*, i32** %A.addr, align 8
%8 = load i32, i32* %j, align 4
%add = add nsw i32 %8, 1
%idxprom4 = sext i32 %add to i64
%arrayidx5 = getelementptr inbounds i32, i32* %7, i64 %idxprom4
%9 = load i32, i32* %arrayidx5, align 4
%cmp6 = icmp sgt i32 %6, %9
br i1 %cmp6, label %if.then, label %if.end
%10 = load i32*, i32** %A.addr, align 8
%11 = load i32, i32* %j, align 4
%idxprom7 = sext i32 %11 to i64
%arrayidx8 = getelementptr inbounds i32, i32* %10, i64 %idxprom7
%12 = load i32, i32* %arrayidx8, align 4
store i32 %12, i32* %z, align 4
%13 = load i32*, i32** %A.addr, align 8
%14 = load i32, i32* %j, align 4
%add9 = add nsw i32 %14, 1
%idxprom10 = sext i32 %add9 to i64
%arrayidx11 = getelementptr inbounds i32, i32* %13, i64 %idxprom10
%15 = load i32, i32* %arrayidx11, align 4
%16 = load i32*, i32** %A.addr, align 8
%17 = load i32, i32* %j, align 4
%idxprom12 = sext i32 %17 to i64
%arrayidx13 = getelementptr inbounds i32, i32* %16, i64 %idxprom12
store i32 %15, i32* %arrayidx13, align 4
%18 = load i32, i32* %z, align 4
%19 = load i32*, i32** %A.addr, align 8
%20 = load i32, i32* %j, align 4
%add14 = add nsw i32 %20, 1
%idxprom15 = sext i32 %add14 to i64
%arrayidx16 = getelementptr inbounds i32, i32* %19, i64 %idxprom15
store i32 %18, i32* %arrayidx16, align 4
store i32 0, i32* %sorted, align 4
br label %if.end
br label %for.inc
%21 = load i32, i32* %j, align 4
%inc = add nsw i32 %21, 1
store i32 %inc, i32* %j, align 4
br label %for.cond1
%22 = load i32, i32* %sorted, align 4
%tobool = icmp ne i32 %22, 0
br i1 %tobool, label %if.then17, label %if.end18
br label %for.end21
br label %for.inc19
%23 = load i32, i32* %i, align 4
%inc20 = add nsw i32 %23, 1
store i32 %inc20, i32* %i, align 4
br label %for.cond
ret void
%retval = alloca i32, align 4
%a = alloca [10 x double], align 16
%length = alloca i32, align 4
store i32 0, i32* %retval, align 4
%call = call i32 @puts(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0))
%0 = bitcast [10 x double]* %a to i8*
call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([10 x double]* @main.a to i8*), i64 80, i1 false)
store i32 10, i32* %length, align 4
%call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0))
%arraydecay = getelementptr inbounds [10 x double], [10 x double]* %a, i32 0, i32 0
%1 = load i32, i32* %length, align 4
call void @print_array(double* %arraydecay, i32 %1)
%arraydecay2 = getelementptr inbounds [10 x double], [10 x double]* %a, i32 0, i32 0
%2 = load i32, i32* %length, align 4
call void @bucket_sort(double* %arraydecay2, i32 %2)
%call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0))
%arraydecay4 = getelementptr inbounds [10 x double], [10 x double]* %a, i32 0, i32 0
%3 = load i32, i32* %length, align 4
call void @print_array(double* %arraydecay4, i32 %3)
ret i32 0
%a.addr = alloca double*, align 8
%length.addr = alloca i32, align 4
%i = alloca i32, align 4
store double* %a, double** %a.addr, align 8
store i32 %length, i32* %length.addr, align 4
store i32 0, i32* %i, align 4
%call = call i32 @putchar(i32 91)
br label %do.body
%0 = load i32, i32* %i, align 4
%cmp = icmp sgt i32 %0, 0
br i1 %cmp, label %if.then, label %if.end
%call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
br label %if.end
%1 = load double*, double** %a.addr, align 8
%2 = load i32, i32* %i, align 4
%idxprom = sext i32 %2 to i64
%arrayidx = getelementptr inbounds double, double* %1, i64 %idxprom
%3 = load double, double* %arrayidx, align 8
%call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), double %3)
br label %do.cond
%4 = load i32, i32* %i, align 4
%inc = add nsw i32 %4, 1
store i32 %inc, i32* %i, align 4
%5 = load i32, i32* %length.addr, align 4
%cmp3 = icmp slt i32 %inc, %5
br i1 %cmp3, label %do.body, label %do.end
%call4 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
ret void
%a.addr = alloca double*, align 8
%length.addr = alloca i32, align 4
%i = alloca i32, align 4
%j = alloca i32, align 4
%buckets = alloca [10 x %struct.queue_st], align 16
%saved_stack = alloca i8*, align 8
%__vla_expr = alloca i64, align 8
%n = alloca i32, align 4
%k = alloca i32, align 4
store double* %a, double** %a.addr, align 8
store i32 %length, i32* %length.addr, align 4
store i32 0, i32* %i, align 4
br label %for.cond
%0 = load i32, i32* %i, align 4
%cmp = icmp slt i32 %0, 10
br i1 %cmp, label %for.body, label %for.end
%1 = load i32, i32* %i, align 4
%idxprom = sext i32 %1 to i64
%arrayidx = getelementptr inbounds [10 x %struct.queue_st], [10 x %struct.queue_st]* %buckets, i64 0, i64 %idxprom
call void @init_queue(%struct.queue_st* %arrayidx)
br label %for.inc
%2 = load i32, i32* %i, align 4
%inc = add nsw i32 %2, 1
store i32 %inc, i32* %i, align 4
br label %for.cond
store i32 0, i32* %i, align 4
br label %for.cond1
%3 = load i32, i32* %i, align 4
%4 = load i32, i32* %length.addr, align 4
%cmp2 = icmp slt i32 %3, %4
br i1 %cmp2, label %for.body3, label %for.end12
%5 = load double*, double** %a.addr, align 8
%6 = load i32, i32* %i, align 4
%idxprom4 = sext i32 %6 to i64
%arrayidx5 = getelementptr inbounds double, double* %5, i64 %idxprom4
%7 = load double, double* %arrayidx5, align 8
%mul = fmul double %7, 1.000000e+01
%conv = fptosi double %mul to i32
%idxprom6 = sext i32 %conv to i64
%arrayidx7 = getelementptr inbounds [10 x %struct.queue_st], [10 x %struct.queue_st]* %buckets, i64 0, i64 %idxprom6
%8 = load double*, double** %a.addr, align 8
%9 = load i32, i32* %i, align 4
%idxprom8 = sext i32 %9 to i64
%arrayidx9 = getelementptr inbounds double, double* %8, i64 %idxprom8
%10 = load double, double* %arrayidx9, align 8
call void @inqueue(%struct.queue_st* %arrayidx7, double %10)
br label %for.inc10
%11 = load i32, i32* %i, align 4
%inc11 = add nsw i32 %11, 1
store i32 %inc11, i32* %i, align 4
br label %for.cond1
%12 = load i32, i32* %length.addr, align 4
%13 = zext i32 %12 to i64
%14 = call i8* @llvm.stacksave()
store i8* %14, i8** %saved_stack, align 8
%vla = alloca double, i64 %13, align 16
store i64 %13, i64* %__vla_expr, align 8
store i32 0, i32* %i, align 4
store i32 0, i32* %j, align 4
br label %for.cond13
%15 = load i32, i32* %i, align 4
%cmp14 = icmp slt i32 %15, 10
br i1 %cmp14, label %for.body16, label %for.end41
store i32 0, i32* %n, align 4
br label %while.cond
%16 = load i32, i32* %i, align 4
%idxprom17 = sext i32 %16 to i64
%arrayidx18 = getelementptr inbounds [10 x %struct.queue_st], [10 x %struct.queue_st]* %buckets, i64 0, i64 %idxprom17
%17 = bitcast %struct.queue_st* %arrayidx18 to { %struct.node_st*, %struct.node_st* }*
%18 = getelementptr inbounds { %struct.node_st*, %struct.node_st* }, { %struct.node_st*, %struct.node_st* }* %17, i32 0, i32 0
%19 = load %struct.node_st*, %struct.node_st** %18, align 16
%20 = getelementptr inbounds { %struct.node_st*, %struct.node_st* }, { %struct.node_st*, %struct.node_st* }* %17, i32 0, i32 1
%21 = load %struct.node_st*, %struct.node_st** %20, align 8
%call = call i32 @is_empty(%struct.node_st* %19, %struct.node_st* %21)
%tobool = icmp ne i32 %call, 0
%lnot = xor i1 %tobool, true
br i1 %lnot, label %while.body, label %while.end
%22 = load i32, i32* %i, align 4
%idxprom19 = sext i32 %22 to i64
%arrayidx20 = getelementptr inbounds [10 x %struct.queue_st], [10 x %struct.queue_st]* %buckets, i64 0, i64 %idxprom19
%call21 = call double @dequeue(%struct.queue_st* %arrayidx20)
%23 = load i32, i32* %n, align 4
%inc22 = add nsw i32 %23, 1
store i32 %inc22, i32* %n, align 4
%idxprom23 = sext i32 %23 to i64
%arrayidx24 = getelementptr inbounds double, double* %vla, i64 %idxprom23
store double %call21, double* %arrayidx24, align 8
br label %while.cond
%24 = load i32, i32* %n, align 4
call void @insertion_sort(double* %vla, i32 %24)
store i32 0, i32* %k, align 4
br label %for.cond25
%25 = load i32, i32* %k, align 4
%26 = load i32, i32* %n, align 4
%cmp26 = icmp slt i32 %25, %26
br i1 %cmp26, label %land.rhs, label %land.end
%27 = load i32, i32* %j, align 4
%28 = load i32, i32* %length.addr, align 4
%cmp28 = icmp slt i32 %27, %28
br label %land.end
%29 = phi i1 [ false, %for.cond25 ], [ %cmp28, %land.rhs ]
br i1 %29, label %for.body30, label %for.end38
%30 = load i32, i32* %k, align 4
%idxprom31 = sext i32 %30 to i64
%arrayidx32 = getelementptr inbounds double, double* %vla, i64 %idxprom31
%31 = load double, double* %arrayidx32, align 8
%32 = load double*, double** %a.addr, align 8
%33 = load i32, i32* %j, align 4
%inc33 = add nsw i32 %33, 1
store i32 %inc33, i32* %j, align 4
%idxprom34 = sext i32 %33 to i64
%arrayidx35 = getelementptr inbounds double, double* %32, i64 %idxprom34
store double %31, double* %arrayidx35, align 8
br label %for.inc36
%34 = load i32, i32* %k, align 4
%inc37 = add nsw i32 %34, 1
store i32 %inc37, i32* %k, align 4
br label %for.cond25
br label %for.inc39
%35 = load i32, i32* %i, align 4
%inc40 = add nsw i32 %35, 1
store i32 %inc40, i32* %i, align 4
br label %for.cond13
%36 = load i8*, i8** %saved_stack, align 8
call void @llvm.stackrestore(i8* %36)
ret void
%pque.addr = alloca %struct.queue_st*, align 8
store %struct.queue_st* %pque, %struct.queue_st** %pque.addr, align 8
%0 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pend = getelementptr inbounds %struct.queue_st, %struct.queue_st* %0, i32 0, i32 1
store %struct.node_st* null, %struct.node_st** %pend, align 8
%1 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pbegin = getelementptr inbounds %struct.queue_st, %struct.queue_st* %1, i32 0, i32 0
store %struct.node_st* null, %struct.node_st** %pbegin, align 8
ret void
%pque.addr = alloca %struct.queue_st*, align 8
%inf.addr = alloca double, align 8
%pnew = alloca %struct.node_st*, align 8
store %struct.queue_st* %pque, %struct.queue_st** %pque.addr, align 8
store double %inf, double* %inf.addr, align 8
%0 = load double, double* %inf.addr, align 8
%call = call %struct.node_st* @make_node(double %0)
store %struct.node_st* %call, %struct.node_st** %pnew, align 8
%1 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pbegin = getelementptr inbounds %struct.queue_st, %struct.queue_st* %1, i32 0, i32 0
%2 = load %struct.node_st*, %struct.node_st** %pbegin, align 8
%cmp = icmp eq %struct.node_st* %2, null
br i1 %cmp, label %if.then, label %if.else
%3 = load %struct.node_st*, %struct.node_st** %pnew, align 8
%4 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pend = getelementptr inbounds %struct.queue_st, %struct.queue_st* %4, i32 0, i32 1
store %struct.node_st* %3, %struct.node_st** %pend, align 8
%5 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pbegin1 = getelementptr inbounds %struct.queue_st, %struct.queue_st* %5, i32 0, i32 0
store %struct.node_st* %3, %struct.node_st** %pbegin1, align 8
br label %if.end
%6 = load %struct.node_st*, %struct.node_st** %pnew, align 8
%7 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pend2 = getelementptr inbounds %struct.queue_st, %struct.queue_st* %7, i32 0, i32 1
%8 = load %struct.node_st*, %struct.node_st** %pend2, align 8
%pnext = getelementptr inbounds %struct.node_st, %struct.node_st* %8, i32 0, i32 1
store %struct.node_st* %6, %struct.node_st** %pnext, align 8
%9 = load %struct.node_st*, %struct.node_st** %pnew, align 8
%10 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pend3 = getelementptr inbounds %struct.queue_st, %struct.queue_st* %10, i32 0, i32 1
store %struct.node_st* %9, %struct.node_st** %pend3, align 8
br label %if.end
ret void
%retval = alloca i32, align 4
%pque = alloca %struct.queue_st, align 8
%0 = bitcast %struct.queue_st* %pque to { %struct.node_st*, %struct.node_st* }*
%1 = getelementptr inbounds { %struct.node_st*, %struct.node_st* }, { %struct.node_st*, %struct.node_st* }* %0, i32 0, i32 0
store %struct.node_st* %pque.coerce0, %struct.node_st** %1, align 8
%2 = getelementptr inbounds { %struct.node_st*, %struct.node_st* }, { %struct.node_st*, %struct.node_st* }* %0, i32 0, i32 1
store %struct.node_st* %pque.coerce1, %struct.node_st** %2, align 8
%pbegin = getelementptr inbounds %struct.queue_st, %struct.queue_st* %pque, i32 0, i32 0
%3 = load %struct.node_st*, %struct.node_st** %pbegin, align 8
%cmp = icmp eq %struct.node_st* %3, null
br i1 %cmp, label %if.then, label %if.else
store i32 1, i32* %retval, align 4
br label %return
store i32 0, i32* %retval, align 4
br label %return
%4 = load i32, i32* %retval, align 4
ret i32 %4
%pque.addr = alloca %struct.queue_st*, align 8
%ptemp = alloca %struct.node_st*, align 8
%x = alloca double, align 8
store %struct.queue_st* %pque, %struct.queue_st** %pque.addr, align 8
%0 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pbegin = getelementptr inbounds %struct.queue_st, %struct.queue_st* %0, i32 0, i32 0
%1 = load %struct.node_st*, %struct.node_st** %pbegin, align 8
store %struct.node_st* %1, %struct.node_st** %ptemp, align 8
%2 = load %struct.node_st*, %struct.node_st** %ptemp, align 8
%cmp = icmp eq %struct.node_st* %2, null
br i1 %cmp, label %if.then, label %if.end
%call = call i32 @puts(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i32 0, i32 0))
call void @exit(i32 5) #6
unreachable
%3 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pbegin1 = getelementptr inbounds %struct.queue_st, %struct.queue_st* %3, i32 0, i32 0
%4 = load %struct.node_st*, %struct.node_st** %pbegin1, align 8
%5 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pend = getelementptr inbounds %struct.queue_st, %struct.queue_st* %5, i32 0, i32 1
%6 = load %struct.node_st*, %struct.node_st** %pend, align 8
%cmp2 = icmp eq %struct.node_st* %4, %6
br i1 %cmp2, label %if.then3, label %if.else
%7 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pbegin4 = getelementptr inbounds %struct.queue_st, %struct.queue_st* %7, i32 0, i32 0
store %struct.node_st* null, %struct.node_st** %pbegin4, align 8
%8 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pend5 = getelementptr inbounds %struct.queue_st, %struct.queue_st* %8, i32 0, i32 1
store %struct.node_st* null, %struct.node_st** %pend5, align 8
br label %if.end7
%9 = load %struct.node_st*, %struct.node_st** %ptemp, align 8
%pnext = getelementptr inbounds %struct.node_st, %struct.node_st* %9, i32 0, i32 1
%10 = load %struct.node_st*, %struct.node_st** %pnext, align 8
%11 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pbegin6 = getelementptr inbounds %struct.queue_st, %struct.queue_st* %11, i32 0, i32 0
store %struct.node_st* %10, %struct.node_st** %pbegin6, align 8
br label %if.end7
%12 = load %struct.node_st*, %struct.node_st** %ptemp, align 8
%inf = getelementptr inbounds %struct.node_st, %struct.node_st* %12, i32 0, i32 0
%13 = load double, double* %inf, align 8
store double %13, double* %x, align 8
%14 = load %struct.node_st*, %struct.node_st** %ptemp, align 8
%15 = bitcast %struct.node_st* %14 to i8*
call void @free(i8* %15) #3
%16 = load double, double* %x, align 8
ret double %16
%a.addr = alloca double*, align 8
%length.addr = alloca i32, align 4
%i = alloca i32, align 4
%j = alloca i32, align 4
%temp = alloca double, align 8
store double* %a, double** %a.addr, align 8
store i32 %length, i32* %length.addr, align 4
store i32 1, i32* %i, align 4
br label %for.cond
%0 = load i32, i32* %i, align 4
%1 = load i32, i32* %length.addr, align 4
%cmp = icmp slt i32 %0, %1
br i1 %cmp, label %for.body, label %for.end
%2 = load double*, double** %a.addr, align 8
%3 = load i32, i32* %i, align 4
%idxprom = sext i32 %3 to i64
%arrayidx = getelementptr inbounds double, double* %2, i64 %idxprom
%4 = load double, double* %arrayidx, align 8
store double %4, double* %temp, align 8
%5 = load i32, i32* %i, align 4
store i32 %5, i32* %j, align 4
br label %while.cond
%6 = load i32, i32* %j, align 4
%cmp1 = icmp sgt i32 %6, 0
br i1 %cmp1, label %land.rhs, label %land.end
%7 = load double*, double** %a.addr, align 8
%8 = load i32, i32* %j, align 4
%sub = sub nsw i32 %8, 1
%idxprom2 = sext i32 %sub to i64
%arrayidx3 = getelementptr inbounds double, double* %7, i64 %idxprom2
%9 = load double, double* %arrayidx3, align 8
%10 = load double, double* %temp, align 8
%cmp4 = fcmp ogt double %9, %10
br label %land.end
%11 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
br i1 %11, label %while.body, label %while.end
%12 = load double*, double** %a.addr, align 8
%13 = load i32, i32* %j, align 4
%sub5 = sub nsw i32 %13, 1
%idxprom6 = sext i32 %sub5 to i64
%arrayidx7 = getelementptr inbounds double, double* %12, i64 %idxprom6
%14 = load double, double* %arrayidx7, align 8
%15 = load double*, double** %a.addr, align 8
%16 = load i32, i32* %j, align 4
%idxprom8 = sext i32 %16 to i64
%arrayidx9 = getelementptr inbounds double, double* %15, i64 %idxprom8
store double %14, double* %arrayidx9, align 8
%17 = load i32, i32* %j, align 4
%dec = add nsw i32 %17, -1
store i32 %dec, i32* %j, align 4
br label %while.cond
%18 = load double, double* %temp, align 8
%19 = load double*, double** %a.addr, align 8
%20 = load i32, i32* %j, align 4
%idxprom10 = sext i32 %20 to i64
%arrayidx11 = getelementptr inbounds double, double* %19, i64 %idxprom10
store double %18, double* %arrayidx11, align 8
br label %for.inc
%21 = load i32, i32* %i, align 4
%inc = add nsw i32 %21, 1
store i32 %inc, i32* %i, align 4
br label %for.cond
ret void
%inf.addr = alloca double, align 8
%pnew = alloca %struct.node_st*, align 8
store double %inf, double* %inf.addr, align 8
%call = call noalias i8* @malloc(i64 16) #3
%0 = bitcast i8* %call to %struct.node_st*
store %struct.node_st* %0, %struct.node_st** %pnew, align 8
%1 = load %struct.node_st*, %struct.node_st** %pnew, align 8
%cmp = icmp eq %struct.node_st* %1, null
br i1 %cmp, label %if.then, label %if.end
%call1 = call i32 @puts(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
call void @exit(i32 4) #6
unreachable
%2 = load double, double* %inf.addr, align 8
%3 = load %struct.node_st*, %struct.node_st** %pnew, align 8
%inf2 = getelementptr inbounds %struct.node_st, %struct.node_st* %3, i32 0, i32 0
store double %2, double* %inf2, align 8
%4 = load %struct.node_st*, %struct.node_st** %pnew, align 8
%pnext = getelementptr inbounds %struct.node_st, %struct.node_st* %4, i32 0, i32 1
store %struct.node_st* null, %struct.node_st** %pnext, align 8
%5 = load %struct.node_st*, %struct.node_st** %pnew, align 8
ret %struct.node_st* %5
%retval = alloca i32, align 4
%a = alloca [9 x i32], align 16
%length = alloca i32, align 4
store i32 0, i32* %retval, align 4
%call = call i32 @puts(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0))
%0 = bitcast [9 x i32]* %a to i8*
call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([9 x i32]* @main.a to i8*), i64 36, i1 false)
store i32 9, i32* %length, align 4
%call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0))
%arraydecay = getelementptr inbounds [9 x i32], [9 x i32]* %a, i32 0, i32 0
%1 = load i32, i32* %length, align 4
call void @print_array(i32* %arraydecay, i32 %1)
%arraydecay2 = getelementptr inbounds [9 x i32], [9 x i32]* %a, i32 0, i32 0
%2 = load i32, i32* %length, align 4
call void @counting_sort(i32* %arraydecay2, i32 %2)
%call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0))
%arraydecay4 = getelementptr inbounds [9 x i32], [9 x i32]* %a, i32 0, i32 0
%3 = load i32, i32* %length, align 4
call void @print_array(i32* %arraydecay4, i32 %3)
ret i32 0
%a.addr = alloca i32*, align 8
%length.addr = alloca i32, align 4
%i = alloca i32, align 4
store i32* %a, i32** %a.addr, align 8
store i32 %length, i32* %length.addr, align 4
store i32 0, i32* %i, align 4
%call = call i32 @putchar(i32 91)
br label %do.body
%0 = load i32, i32* %i, align 4
%cmp = icmp sgt i32 %0, 0
br i1 %cmp, label %if.then, label %if.end
%call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
br label %if.end
%1 = load i32*, i32** %a.addr, align 8
%2 = load i32, i32* %i, align 4
%idxprom = sext i32 %2 to i64
%arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom
%3 = load i32, i32* %arrayidx, align 4
%call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i32 %3)
br label %do.cond
%4 = load i32, i32* %i, align 4
%inc = add nsw i32 %4, 1
store i32 %inc, i32* %i, align 4
%5 = load i32, i32* %length.addr, align 4
%cmp3 = icmp slt i32 %inc, %5
br i1 %cmp3, label %do.body, label %do.end
%call4 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
ret void
%a.addr = alloca i32*, align 8
%length.addr = alloca i32, align 4
%i = alloca i32, align 4
%max = alloca i32, align 4
%saved_stack = alloca i8*, align 8
%__vla_expr = alloca i64, align 8
%__vla_expr28 = alloca i64, align 8
%j = alloca i32, align 4
store i32* %a, i32** %a.addr, align 8
store i32 %length, i32* %length.addr, align 4
%0 = load i32*, i32** %a.addr, align 8
%1 = load i32, i32* %length.addr, align 4
%call = call i32 @find_max(i32* %0, i32 %1)
store i32 %call, i32* %max, align 4
%2 = load i32, i32* %max, align 4
%add = add nsw i32 %2, 1
%3 = zext i32 %add to i64
%4 = call i8* @llvm.stacksave()
store i8* %4, i8** %saved_stack, align 8
%vla = alloca i32, i64 %3, align 16
store i64 %3, i64* %__vla_expr, align 8
store i32 0, i32* %i, align 4
br label %for.cond
%5 = load i32, i32* %i, align 4
%6 = load i32, i32* %max, align 4
%add1 = add nsw i32 %6, 1
%cmp = icmp slt i32 %5, %add1
br i1 %cmp, label %for.body, label %for.end
br label %for.inc
%7 = load i32, i32* %i, align 4
%inc = add nsw i32 %7, 1
store i32 %inc, i32* %i, align 4
%idxprom = sext i32 %7 to i64
%arrayidx = getelementptr inbounds i32, i32* %vla, i64 %idxprom
store i32 0, i32* %arrayidx, align 4
br label %for.cond
store i32 0, i32* %i, align 4
br label %for.cond2
%8 = load i32, i32* %i, align 4
%9 = load i32, i32* %length.addr, align 4
%cmp3 = icmp slt i32 %8, %9
br i1 %cmp3, label %for.body4, label %for.end12
%10 = load i32*, i32** %a.addr, align 8
%11 = load i32, i32* %i, align 4
%idxprom5 = sext i32 %11 to i64
%arrayidx6 = getelementptr inbounds i32, i32* %10, i64 %idxprom5
%12 = load i32, i32* %arrayidx6, align 4
%idxprom7 = sext i32 %12 to i64
%arrayidx8 = getelementptr inbounds i32, i32* %vla, i64 %idxprom7
%13 = load i32, i32* %arrayidx8, align 4
%inc9 = add nsw i32 %13, 1
store i32 %inc9, i32* %arrayidx8, align 4
br label %for.inc10
%14 = load i32, i32* %i, align 4
%inc11 = add nsw i32 %14, 1
store i32 %inc11, i32* %i, align 4
br label %for.cond2
store i32 1, i32* %i, align 4
br label %for.cond13
%15 = load i32, i32* %i, align 4
%16 = load i32, i32* %max, align 4
%add14 = add nsw i32 %16, 1
%cmp15 = icmp slt i32 %15, %add14
br i1 %cmp15, label %for.body16, label %for.end26
%17 = load i32, i32* %i, align 4
%sub = sub nsw i32 %17, 1
%idxprom17 = sext i32 %sub to i64
%arrayidx18 = getelementptr inbounds i32, i32* %vla, i64 %idxprom17
%18 = load i32, i32* %arrayidx18, align 4
%19 = load i32, i32* %i, align 4
%idxprom19 = sext i32 %19 to i64
%arrayidx20 = getelementptr inbounds i32, i32* %vla, i64 %idxprom19
%20 = load i32, i32* %arrayidx20, align 4
%add21 = add nsw i32 %18, %20
%21 = load i32, i32* %i, align 4
%idxprom22 = sext i32 %21 to i64
%arrayidx23 = getelementptr inbounds i32, i32* %vla, i64 %idxprom22
store i32 %add21, i32* %arrayidx23, align 4
br label %for.inc24
%22 = load i32, i32* %i, align 4
%inc25 = add nsw i32 %22, 1
store i32 %inc25, i32* %i, align 4
br label %for.cond13
%23 = load i32, i32* %length.addr, align 4
%24 = zext i32 %23 to i64
%vla27 = alloca i32, i64 %24, align 16
store i64 %24, i64* %__vla_expr28, align 8
%25 = load i32, i32* %length.addr, align 4
%sub29 = sub nsw i32 %25, 1
store i32 %sub29, i32* %j, align 4
store i32 0, i32* %i, align 4
br label %for.cond30
%26 = load i32, i32* %i, align 4
%27 = load i32, i32* %length.addr, align 4
%cmp31 = icmp slt i32 %26, %27
br i1 %cmp31, label %for.body32, label %for.end44
%28 = load i32*, i32** %a.addr, align 8
%29 = load i32, i32* %j, align 4
%idxprom33 = sext i32 %29 to i64
%arrayidx34 = getelementptr inbounds i32, i32* %28, i64 %idxprom33
%30 = load i32, i32* %arrayidx34, align 4
%31 = load i32*, i32** %a.addr, align 8
%32 = load i32, i32* %j, align 4
%idxprom35 = sext i32 %32 to i64
%arrayidx36 = getelementptr inbounds i32, i32* %31, i64 %idxprom35
%33 = load i32, i32* %arrayidx36, align 4
%idxprom37 = sext i32 %33 to i64
%arrayidx38 = getelementptr inbounds i32, i32* %vla, i64 %idxprom37
%34 = load i32, i32* %arrayidx38, align 4
%dec = add nsw i32 %34, -1
store i32 %dec, i32* %arrayidx38, align 4
%idxprom39 = sext i32 %dec to i64
%arrayidx40 = getelementptr inbounds i32, i32* %vla27, i64 %idxprom39
store i32 %30, i32* %arrayidx40, align 4
%35 = load i32, i32* %j, align 4
%dec41 = add nsw i32 %35, -1
store i32 %dec41, i32* %j, align 4
br label %for.inc42
%36 = load i32, i32* %i, align 4
%inc43 = add nsw i32 %36, 1
store i32 %inc43, i32* %i, align 4
br label %for.cond30
store i32 0, i32* %i, align 4
br label %for.cond45
%37 = load i32, i32* %i, align 4
%38 = load i32, i32* %length.addr, align 4
%cmp46 = icmp slt i32 %37, %38
br i1 %cmp46, label %for.body47, label %for.end54
%39 = load i32, i32* %i, align 4
%idxprom48 = sext i32 %39 to i64
%arrayidx49 = getelementptr inbounds i32, i32* %vla27, i64 %idxprom48
%40 = load i32, i32* %arrayidx49, align 4
%41 = load i32*, i32** %a.addr, align 8
%42 = load i32, i32* %i, align 4
%idxprom50 = sext i32 %42 to i64
%arrayidx51 = getelementptr inbounds i32, i32* %41, i64 %idxprom50
store i32 %40, i32* %arrayidx51, align 4
br label %for.inc52
%43 = load i32, i32* %i, align 4
%inc53 = add nsw i32 %43, 1
store i32 %inc53, i32* %i, align 4
br label %for.cond45
%44 = load i8*, i8** %saved_stack, align 8
call void @llvm.stackrestore(i8* %44)
ret void
%a.addr = alloca i32*, align 8
%length.addr = alloca i32, align 4
%i = alloca i32, align 4
%max = alloca i32, align 4
store i32* %a, i32** %a.addr, align 8
store i32 %length, i32* %length.addr, align 4
%0 = load i32*, i32** %a.addr, align 8
%arrayidx = getelementptr inbounds i32, i32* %0, i64 0
%1 = load i32, i32* %arrayidx, align 4
store i32 %1, i32* %max, align 4
store i32 1, i32* %i, align 4
br label %for.cond
%2 = load i32, i32* %i, align 4
%3 = load i32, i32* %length.addr, align 4
%cmp = icmp slt i32 %2, %3
br i1 %cmp, label %for.body, label %for.end
%4 = load i32, i32* %max, align 4
%5 = load i32*, i32** %a.addr, align 8
%6 = load i32, i32* %i, align 4
%idxprom = sext i32 %6 to i64
%arrayidx1 = getelementptr inbounds i32, i32* %5, i64 %idxprom
%7 = load i32, i32* %arrayidx1, align 4
%cmp2 = icmp slt i32 %4, %7
br i1 %cmp2, label %if.then, label %if.end
%8 = load i32*, i32** %a.addr, align 8
%9 = load i32, i32* %i, align 4
%idxprom3 = sext i32 %9 to i64
%arrayidx4 = getelementptr inbounds i32, i32* %8, i64 %idxprom3
%10 = load i32, i32* %arrayidx4, align 4
store i32 %10, i32* %max, align 4
br label %if.end
br label %for.inc
%11 = load i32, i32* %i, align 4
%inc = add nsw i32 %11, 1
store i32 %inc, i32* %i, align 4
br label %for.cond
%12 = load i32, i32* %max, align 4
ret i32 %12
%retval = alloca i32, align 4
%a = alloca [5 x i32], align 16
%length = alloca i32, align 4
store i32 0, i32* %retval, align 4
%call = call i32 @puts(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0))
%0 = bitcast [5 x i32]* %a to i8*
call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([5 x i32]* @main.a to i8*), i64 20, i1 false)
store i32 5, i32* %length, align 4
%call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0))
%arraydecay = getelementptr inbounds [5 x i32], [5 x i32]* %a, i32 0, i32 0
%1 = load i32, i32* %length, align 4
call void @print_array(i32* %arraydecay, i32 %1)
%arraydecay2 = getelementptr inbounds [5 x i32], [5 x i32]* %a, i32 0, i32 0
%2 = load i32, i32* %length, align 4
call void @heap_sort(i32* %arraydecay2, i32 %2)
%call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0))
%arraydecay4 = getelementptr inbounds [5 x i32], [5 x i32]* %a, i32 0, i32 0
%3 = load i32, i32* %length, align 4
call void @print_array(i32* %arraydecay4, i32 %3)
ret i32 0
%a.addr = alloca i32*, align 8
%length.addr = alloca i32, align 4
%i = alloca i32, align 4
store i32* %a, i32** %a.addr, align 8
store i32 %length, i32* %length.addr, align 4
store i32 0, i32* %i, align 4
%call = call i32 @putchar(i32 91)
br label %while.cond
%0 = load i32, i32* %i, align 4
%1 = load i32, i32* %length.addr, align 4
%cmp = icmp slt i32 %0, %1
br i1 %cmp, label %while.body, label %while.end
%2 = load i32, i32* %i, align 4
%cmp1 = icmp sgt i32 %2, 0
br i1 %cmp1, label %if.then, label %if.end
%call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
br label %if.end
%3 = load i32*, i32** %a.addr, align 8
%4 = load i32, i32* %i, align 4
%inc = add nsw i32 %4, 1
store i32 %inc, i32* %i, align 4
%idxprom = sext i32 %4 to i64
%arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom
%5 = load i32, i32* %arrayidx, align 4
%call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i32 %5)
br label %while.cond
%call4 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
ret void
%a.addr = alloca i32*, align 8
%length.addr = alloca i32, align 4
%i = alloca i32, align 4
%temp = alloca i32, align 4
store i32* %a, i32** %a.addr, align 8
store i32 %length, i32* %length.addr, align 4
%0 = load i32*, i32** %a.addr, align 8
%1 = load i32, i32* %length.addr, align 4
call void @build_max_heap(i32* %0, i32 %1)
%2 = load i32, i32* %length.addr, align 4
%sub = sub nsw i32 %2, 1
store i32 %sub, i32* %i, align 4
br label %do.body
%3 = load i32*, i32** %a.addr, align 8
%arrayidx = getelementptr inbounds i32, i32* %3, i64 0
%4 = load i32, i32* %arrayidx, align 4
store i32 %4, i32* %temp, align 4
%5 = load i32*, i32** %a.addr, align 8
%6 = load i32, i32* %i, align 4
%idxprom = sext i32 %6 to i64
%arrayidx1 = getelementptr inbounds i32, i32* %5, i64 %idxprom
%7 = load i32, i32* %arrayidx1, align 4
%8 = load i32*, i32** %a.addr, align 8
%arrayidx2 = getelementptr inbounds i32, i32* %8, i64 0
store i32 %7, i32* %arrayidx2, align 4
%9 = load i32, i32* %temp, align 4
%10 = load i32*, i32** %a.addr, align 8
%11 = load i32, i32* %i, align 4
%idxprom3 = sext i32 %11 to i64
%arrayidx4 = getelementptr inbounds i32, i32* %10, i64 %idxprom3
store i32 %9, i32* %arrayidx4, align 4
%12 = load i32*, i32** %a.addr, align 8
%13 = load i32, i32* %length.addr, align 4
%dec = add nsw i32 %13, -1
store i32 %dec, i32* %length.addr, align 4
call void @max_heapify(i32* %12, i32 0, i32 %dec)
br label %do.cond
%14 = load i32, i32* %i, align 4
%dec5 = add nsw i32 %14, -1
store i32 %dec5, i32* %i, align 4
%cmp = icmp sge i32 %dec5, 0
br i1 %cmp, label %do.body, label %do.end
ret void
%a.addr = alloca i32*, align 8
%length.addr = alloca i32, align 4
%i = alloca i32, align 4
store i32* %a, i32** %a.addr, align 8
store i32 %length, i32* %length.addr, align 4
%0 = load i32, i32* %length.addr, align 4
%div = sdiv i32 %0, 2
store i32 %div, i32* %i, align 4
br label %do.body
%1 = load i32*, i32** %a.addr, align 8
%2 = load i32, i32* %i, align 4
%3 = load i32, i32* %length.addr, align 4
call void @max_heapify(i32* %1, i32 %2, i32 %3)
br label %do.cond
%4 = load i32, i32* %i, align 4
%dec = add nsw i32 %4, -1
store i32 %dec, i32* %i, align 4
%cmp = icmp sge i32 %dec, 0
br i1 %cmp, label %do.body, label %do.end
ret void
%a.addr = alloca i32*, align 8
%i.addr = alloca i32, align 4
%length.addr = alloca i32, align 4
%r = alloca i32, align 4
%l = alloca i32, align 4
%max = alloca i32, align 4
%temp = alloca i32, align 4
store i32* %a, i32** %a.addr, align 8
store i32 %i, i32* %i.addr, align 4
store i32 %length, i32* %length.addr, align 4
%0 = load i32, i32* %i.addr, align 4
%call = call i32 @right(i32 %0)
store i32 %call, i32* %r, align 4
%1 = load i32, i32* %i.addr, align 4
%call1 = call i32 @left(i32 %1)
store i32 %call1, i32* %l, align 4
%2 = load i32, i32* %i.addr, align 4
store i32 %2, i32* %max, align 4
%3 = load i32, i32* %l, align 4
%4 = load i32, i32* %length.addr, align 4
%cmp = icmp slt i32 %3, %4
br i1 %cmp, label %land.lhs.true, label %if.end
%5 = load i32*, i32** %a.addr, align 8
%6 = load i32, i32* %max, align 4
%idxprom = sext i32 %6 to i64
%arrayidx = getelementptr inbounds i32, i32* %5, i64 %idxprom
%7 = load i32, i32* %arrayidx, align 4
%8 = load i32*, i32** %a.addr, align 8
%9 = load i32, i32* %l, align 4
%idxprom2 = sext i32 %9 to i64
%arrayidx3 = getelementptr inbounds i32, i32* %8, i64 %idxprom2
%10 = load i32, i32* %arrayidx3, align 4
%cmp4 = icmp slt i32 %7, %10
br i1 %cmp4, label %if.then, label %if.end
%11 = load i32, i32* %l, align 4
store i32 %11, i32* %max, align 4
br label %if.end
%12 = load i32, i32* %r, align 4
%13 = load i32, i32* %length.addr, align 4
%cmp5 = icmp slt i32 %12, %13
br i1 %cmp5, label %land.lhs.true6, label %if.end13
%14 = load i32*, i32** %a.addr, align 8
%15 = load i32, i32* %max, align 4
%idxprom7 = sext i32 %15 to i64
%arrayidx8 = getelementptr inbounds i32, i32* %14, i64 %idxprom7
%16 = load i32, i32* %arrayidx8, align 4
%17 = load i32*, i32** %a.addr, align 8
%18 = load i32, i32* %r, align 4
%idxprom9 = sext i32 %18 to i64
%arrayidx10 = getelementptr inbounds i32, i32* %17, i64 %idxprom9
%19 = load i32, i32* %arrayidx10, align 4
%cmp11 = icmp slt i32 %16, %19
br i1 %cmp11, label %if.then12, label %if.end13
%20 = load i32, i32* %r, align 4
store i32 %20, i32* %max, align 4
br label %if.end13
%21 = load i32, i32* %max, align 4
%22 = load i32, i32* %i.addr, align 4
%cmp14 = icmp ne i32 %21, %22
br i1 %cmp14, label %if.then15, label %if.end24
%23 = load i32*, i32** %a.addr, align 8
%24 = load i32, i32* %i.addr, align 4
%idxprom16 = sext i32 %24 to i64
%arrayidx17 = getelementptr inbounds i32, i32* %23, i64 %idxprom16
%25 = load i32, i32* %arrayidx17, align 4
store i32 %25, i32* %temp, align 4
%26 = load i32*, i32** %a.addr, align 8
%27 = load i32, i32* %max, align 4
%idxprom18 = sext i32 %27 to i64
%arrayidx19 = getelementptr inbounds i32, i32* %26, i64 %idxprom18
%28 = load i32, i32* %arrayidx19, align 4
%29 = load i32*, i32** %a.addr, align 8
%30 = load i32, i32* %i.addr, align 4
%idxprom20 = sext i32 %30 to i64
%arrayidx21 = getelementptr inbounds i32, i32* %29, i64 %idxprom20
store i32 %28, i32* %arrayidx21, align 4
%31 = load i32, i32* %temp, align 4
%32 = load i32*, i32** %a.addr, align 8
%33 = load i32, i32* %max, align 4
%idxprom22 = sext i32 %33 to i64
%arrayidx23 = getelementptr inbounds i32, i32* %32, i64 %idxprom22
store i32 %31, i32* %arrayidx23, align 4
%34 = load i32*, i32** %a.addr, align 8
%35 = load i32, i32* %max, align 4
%36 = load i32, i32* %length.addr, align 4
call void @max_heapify(i32* %34, i32 %35, i32 %36)
br label %if.end24
ret void
%i.addr = alloca i32, align 4
store i32 %i, i32* %i.addr, align 4
%0 = load i32, i32* %i.addr, align 4
%mul = mul nsw i32 2, %0
%add = add nsw i32 %mul, 2
ret i32 %add
%i.addr = alloca i32, align 4
store i32 %i, i32* %i.addr, align 4
%0 = load i32, i32* %i.addr, align 4
%mul = mul nsw i32 2, %0
%add = add nsw i32 %mul, 1
ret i32 %add
%i.addr = alloca i32, align 4
store i32 %i, i32* %i.addr, align 4
%0 = load i32, i32* %i.addr, align 4
%sub = sub nsw i32 %0, 1
%div = sdiv i32 %sub, 2
ret i32 %div
%retval = alloca i32, align 4
%A = alloca [5 x i32], align 16
%n = alloca i32, align 4
store i32 0, i32* %retval, align 4
%0 = bitcast [5 x i32]* %A to i8*
call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([5 x i32]* @main.A to i8*), i64 20, i1 false)
store i32 5, i32* %n, align 4
%call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0))
%arraydecay = getelementptr inbounds [5 x i32], [5 x i32]* %A, i32 0, i32 0
%1 = load i32, i32* %n, align 4
call void @print_array(i32* %arraydecay, i32 %1)
%call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0))
%arraydecay2 = getelementptr inbounds [5 x i32], [5 x i32]* %A, i32 0, i32 0
%2 = load i32, i32* %n, align 4
call void @insertion_sort(i32* %arraydecay2, i32 %2)
%arraydecay3 = getelementptr inbounds [5 x i32], [5 x i32]* %A, i32 0, i32 0
%3 = load i32, i32* %n, align 4
call void @print_array(i32* %arraydecay3, i32 %3)
ret i32 0
%A.addr = alloca i32*, align 8
%n.addr = alloca i32, align 4
%i = alloca i32, align 4
store i32* %A, i32** %A.addr, align 8
store i32 %n, i32* %n.addr, align 4
store i32 0, i32* %i, align 4
%call = call i32 @putchar(i32 91)
br label %while.cond
%0 = load i32, i32* %i, align 4
%1 = load i32, i32* %n.addr, align 4
%cmp = icmp slt i32 %0, %1
br i1 %cmp, label %while.body, label %while.end
%2 = load i32, i32* %i, align 4
%cmp1 = icmp sgt i32 %2, 0
br i1 %cmp1, label %if.then, label %if.end
%call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
br label %if.end
%3 = load i32*, i32** %A.addr, align 8
%4 = load i32, i32* %i, align 4
%inc = add nsw i32 %4, 1
store i32 %inc, i32* %i, align 4
%idxprom = sext i32 %4 to i64
%arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom
%5 = load i32, i32* %arrayidx, align 4
%call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 %5)
br label %while.cond
%call4 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
ret void
%A.addr = alloca i32*, align 8
%n.addr = alloca i32, align 4
%i = alloca i32, align 4
%j = alloca i32, align 4
%temp = alloca i32, align 4
store i32* %A, i32** %A.addr, align 8
store i32 %n, i32* %n.addr, align 4
store i32 1, i32* %i, align 4
br label %for.cond
%0 = load i32, i32* %i, align 4
%1 = load i32, i32* %n.addr, align 4
%cmp = icmp slt i32 %0, %1
br i1 %cmp, label %for.body, label %for.end
%2 = load i32*, i32** %A.addr, align 8
%3 = load i32, i32* %i, align 4
%idxprom = sext i32 %3 to i64
%arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom
%4 = load i32, i32* %arrayidx, align 4
store i32 %4, i32* %temp, align 4
%5 = load i32, i32* %i, align 4
store i32 %5, i32* %j, align 4
br label %while.cond
%6 = load i32, i32* %j, align 4
%cmp1 = icmp sgt i32 %6, 0
br i1 %cmp1, label %land.rhs, label %land.end
%7 = load i32*, i32** %A.addr, align 8
%8 = load i32, i32* %j, align 4
%sub = sub nsw i32 %8, 1
%idxprom2 = sext i32 %sub to i64
%arrayidx3 = getelementptr inbounds i32, i32* %7, i64 %idxprom2
%9 = load i32, i32* %arrayidx3, align 4
%10 = load i32, i32* %temp, align 4
%cmp4 = icmp sgt i32 %9, %10
br label %land.end
%11 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
br i1 %11, label %while.body, label %while.end
%12 = load i32*, i32** %A.addr, align 8
%13 = load i32, i32* %j, align 4
%sub5 = sub nsw i32 %13, 1
%idxprom6 = sext i32 %sub5 to i64
%arrayidx7 = getelementptr inbounds i32, i32* %12, i64 %idxprom6
%14 = load i32, i32* %arrayidx7, align 4
%15 = load i32*, i32** %A.addr, align 8
%16 = load i32, i32* %j, align 4
%idxprom8 = sext i32 %16 to i64
%arrayidx9 = getelementptr inbounds i32, i32* %15, i64 %idxprom8
store i32 %14, i32* %arrayidx9, align 4
%17 = load i32, i32* %j, align 4
%dec = add nsw i32 %17, -1
store i32 %dec, i32* %j, align 4
br label %while.cond
%18 = load i32, i32* %temp, align 4
%19 = load i32*, i32** %A.addr, align 8
%20 = load i32, i32* %j, align 4
%idxprom10 = sext i32 %20 to i64
%arrayidx11 = getelementptr inbounds i32, i32* %19, i64 %idxprom10
store i32 %18, i32* %arrayidx11, align 4
br label %for.inc
%21 = load i32, i32* %i, align 4
%inc = add nsw i32 %21, 1
store i32 %inc, i32* %i, align 4
br label %for.cond
ret void
%retval = alloca i32, align 4
%A = alloca [8 x i32], align 16
%n = alloca i32, align 4
store i32 0, i32* %retval, align 4
%call = call i32 @puts(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0))
%0 = bitcast [8 x i32]* %A to i8*
call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([8 x i32]* @main.A to i8*), i64 32, i1 false)
store i32 8, i32* %n, align 4
%call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0))
%arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %A, i32 0, i32 0
%1 = load i32, i32* %n, align 4
call void @print_array(i32* %arraydecay, i32 %1)
%call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0))
%arraydecay3 = getelementptr inbounds [8 x i32], [8 x i32]* %A, i32 0, i32 0
%2 = load i32, i32* %n, align 4
%sub = sub nsw i32 %2, 1
call void @merge_sort(i32* %arraydecay3, i32 0, i32 %sub)
%arraydecay4 = getelementptr inbounds [8 x i32], [8 x i32]* %A, i32 0, i32 0
%3 = load i32, i32* %n, align 4
call void @print_array(i32* %arraydecay4, i32 %3)
ret i32 0
%A.addr = alloca i32*, align 8
%n.addr = alloca i32, align 4
%i = alloca i32, align 4
store i32* %A, i32** %A.addr, align 8
store i32 %n, i32* %n.addr, align 4
store i32 0, i32* %i, align 4
%call = call i32 @putchar(i32 91)
br label %while.cond
%0 = load i32, i32* %i, align 4
%1 = load i32, i32* %n.addr, align 4
%cmp = icmp slt i32 %0, %1
br i1 %cmp, label %while.body, label %while.end
%2 = load i32, i32* %i, align 4
%cmp1 = icmp sgt i32 %2, 0
br i1 %cmp1, label %if.then, label %if.end
%call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
br label %if.end
%3 = load i32*, i32** %A.addr, align 8
%4 = load i32, i32* %i, align 4
%inc = add nsw i32 %4, 1
store i32 %inc, i32* %i, align 4
%idxprom = sext i32 %4 to i64
%arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom
%5 = load i32, i32* %arrayidx, align 4
%call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i32 %5)
br label %while.cond
%call4 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
ret void
%A.addr = alloca i32*, align 8
%p.addr = alloca i32, align 4
%r.addr = alloca i32, align 4
%q = alloca i32, align 4
store i32* %A, i32** %A.addr, align 8
store i32 %p, i32* %p.addr, align 4
store i32 %r, i32* %r.addr, align 4
%0 = load i32, i32* %p.addr, align 4
%1 = load i32, i32* %r.addr, align 4
%cmp = icmp slt i32 %0, %1
br i1 %cmp, label %if.then, label %if.end
%2 = load i32, i32* %p.addr, align 4
%3 = load i32, i32* %r.addr, align 4
%add = add nsw i32 %2, %3
%div = sdiv i32 %add, 2
store i32 %div, i32* %q, align 4
%4 = load i32*, i32** %A.addr, align 8
%5 = load i32, i32* %p.addr, align 4
%6 = load i32, i32* %q, align 4
call void @merge_sort(i32* %4, i32 %5, i32 %6)
%7 = load i32*, i32** %A.addr, align 8
%8 = load i32, i32* %q, align 4
%add1 = add nsw i32 %8, 1
%9 = load i32, i32* %r.addr, align 4
call void @merge_sort(i32* %7, i32 %add1, i32 %9)
%10 = load i32*, i32** %A.addr, align 8
%11 = load i32, i32* %p.addr, align 4
%12 = load i32, i32* %q, align 4
%13 = load i32, i32* %r.addr, align 4
call void @merge(i32* %10, i32 %11, i32 %12, i32 %13)
br label %if.end
ret void
%A.addr = alloca i32*, align 8
%p.addr = alloca i32, align 4
%q.addr = alloca i32, align 4
%r.addr = alloca i32, align 4
%i = alloca i32, align 4
%j = alloca i32, align 4
%k = alloca i32, align 4
%nL = alloca i32, align 4
%nR = alloca i32, align 4
%L = alloca i32*, align 8
%R = alloca i32*, align 8
store i32* %A, i32** %A.addr, align 8
store i32 %p, i32* %p.addr, align 4
store i32 %q, i32* %q.addr, align 4
store i32 %r, i32* %r.addr, align 4
%0 = load i32, i32* %q.addr, align 4
%1 = load i32, i32* %p.addr, align 4
%sub = sub nsw i32 %0, %1
%add = add nsw i32 %sub, 1
store i32 %add, i32* %nL, align 4
%2 = load i32, i32* %r.addr, align 4
%3 = load i32, i32* %q.addr, align 4
%sub1 = sub nsw i32 %2, %3
store i32 %sub1, i32* %nR, align 4
%4 = load i32, i32* %nL, align 4
%conv = sext i32 %4 to i64
%mul = mul i64 4, %conv
%call = call noalias i8* @malloc(i64 %mul) #4
%5 = bitcast i8* %call to i32*
store i32* %5, i32** %L, align 8
%6 = load i32, i32* %nR, align 4
%conv2 = sext i32 %6 to i64
%mul3 = mul i64 4, %conv2
%call4 = call noalias i8* @malloc(i64 %mul3) #4
%7 = bitcast i8* %call4 to i32*
store i32* %7, i32** %R, align 8
store i32 0, i32* %i, align 4
br label %for.cond
%8 = load i32, i32* %i, align 4
%9 = load i32, i32* %nL, align 4
%cmp = icmp slt i32 %8, %9
br i1 %cmp, label %for.body, label %for.end
%10 = load i32*, i32** %A.addr, align 8
%11 = load i32, i32* %p.addr, align 4
%12 = load i32, i32* %i, align 4
%add6 = add nsw i32 %11, %12
%idxprom = sext i32 %add6 to i64
%arrayidx = getelementptr inbounds i32, i32* %10, i64 %idxprom
%13 = load i32, i32* %arrayidx, align 4
%14 = load i32*, i32** %L, align 8
%15 = load i32, i32* %i, align 4
%idxprom7 = sext i32 %15 to i64
%arrayidx8 = getelementptr inbounds i32, i32* %14, i64 %idxprom7
store i32 %13, i32* %arrayidx8, align 4
br label %for.inc
%16 = load i32, i32* %i, align 4
%inc = add nsw i32 %16, 1
store i32 %inc, i32* %i, align 4
br label %for.cond
store i32 0, i32* %j, align 4
br label %for.cond9
%17 = load i32, i32* %j, align 4
%18 = load i32, i32* %nR, align 4
%cmp10 = icmp slt i32 %17, %18
br i1 %cmp10, label %for.body12, label %for.end21
%19 = load i32*, i32** %A.addr, align 8
%20 = load i32, i32* %q.addr, align 4
%add13 = add nsw i32 %20, 1
%21 = load i32, i32* %j, align 4
%add14 = add nsw i32 %add13, %21
%idxprom15 = sext i32 %add14 to i64
%arrayidx16 = getelementptr inbounds i32, i32* %19, i64 %idxprom15
%22 = load i32, i32* %arrayidx16, align 4
%23 = load i32*, i32** %R, align 8
%24 = load i32, i32* %j, align 4
%idxprom17 = sext i32 %24 to i64
%arrayidx18 = getelementptr inbounds i32, i32* %23, i64 %idxprom17
store i32 %22, i32* %arrayidx18, align 4
br label %for.inc19
%25 = load i32, i32* %j, align 4
%inc20 = add nsw i32 %25, 1
store i32 %inc20, i32* %j, align 4
br label %for.cond9
store i32 0, i32* %j, align 4
store i32 0, i32* %i, align 4
%26 = load i32, i32* %p.addr, align 4
store i32 %26, i32* %k, align 4
br label %while.cond
%27 = load i32, i32* %i, align 4
%28 = load i32, i32* %nL, align 4
%cmp22 = icmp slt i32 %27, %28
br i1 %cmp22, label %land.rhs, label %land.end
%29 = load i32, i32* %j, align 4
%30 = load i32, i32* %nR, align 4
%cmp24 = icmp slt i32 %29, %30
br label %land.end
%31 = phi i1 [ false, %while.cond ], [ %cmp24, %land.rhs ]
br i1 %31, label %while.body, label %while.end
%32 = load i32*, i32** %L, align 8
%33 = load i32, i32* %i, align 4
%idxprom26 = sext i32 %33 to i64
%arrayidx27 = getelementptr inbounds i32, i32* %32, i64 %idxprom26
%34 = load i32, i32* %arrayidx27, align 4
%35 = load i32*, i32** %R, align 8
%36 = load i32, i32* %j, align 4
%idxprom28 = sext i32 %36 to i64
%arrayidx29 = getelementptr inbounds i32, i32* %35, i64 %idxprom28
%37 = load i32, i32* %arrayidx29, align 4
%cmp30 = icmp sle i32 %34, %37
br i1 %cmp30, label %if.then, label %if.else
%38 = load i32*, i32** %L, align 8
%39 = load i32, i32* %i, align 4
%inc32 = add nsw i32 %39, 1
store i32 %inc32, i32* %i, align 4
%idxprom33 = sext i32 %39 to i64
%arrayidx34 = getelementptr inbounds i32, i32* %38, i64 %idxprom33
%40 = load i32, i32* %arrayidx34, align 4
%41 = load i32*, i32** %A.addr, align 8
%42 = load i32, i32* %k, align 4
%inc35 = add nsw i32 %42, 1
store i32 %inc35, i32* %k, align 4
%idxprom36 = sext i32 %42 to i64
%arrayidx37 = getelementptr inbounds i32, i32* %41, i64 %idxprom36
store i32 %40, i32* %arrayidx37, align 4
br label %if.end
%43 = load i32*, i32** %R, align 8
%44 = load i32, i32* %j, align 4
%inc38 = add nsw i32 %44, 1
store i32 %inc38, i32* %j, align 4
%idxprom39 = sext i32 %44 to i64
%arrayidx40 = getelementptr inbounds i32, i32* %43, i64 %idxprom39
%45 = load i32, i32* %arrayidx40, align 4
%46 = load i32*, i32** %A.addr, align 8
%47 = load i32, i32* %k, align 4
%inc41 = add nsw i32 %47, 1
store i32 %inc41, i32* %k, align 4
%idxprom42 = sext i32 %47 to i64
%arrayidx43 = getelementptr inbounds i32, i32* %46, i64 %idxprom42
store i32 %45, i32* %arrayidx43, align 4
br label %if.end
br label %while.cond
br label %while.cond44
%48 = load i32, i32* %i, align 4
%49 = load i32, i32* %nL, align 4
%cmp45 = icmp slt i32 %48, %49
br i1 %cmp45, label %while.body47, label %while.end54
%50 = load i32*, i32** %L, align 8
%51 = load i32, i32* %i, align 4
%inc48 = add nsw i32 %51, 1
store i32 %inc48, i32* %i, align 4
%idxprom49 = sext i32 %51 to i64
%arrayidx50 = getelementptr inbounds i32, i32* %50, i64 %idxprom49
%52 = load i32, i32* %arrayidx50, align 4
%53 = load i32*, i32** %A.addr, align 8
%54 = load i32, i32* %k, align 4
%inc51 = add nsw i32 %54, 1
store i32 %inc51, i32* %k, align 4
%idxprom52 = sext i32 %54 to i64
%arrayidx53 = getelementptr inbounds i32, i32* %53, i64 %idxprom52
store i32 %52, i32* %arrayidx53, align 4
br label %while.cond44
br label %while.cond55
%55 = load i32, i32* %j, align 4
%56 = load i32, i32* %nR, align 4
%cmp56 = icmp slt i32 %55, %56
br i1 %cmp56, label %while.body58, label %while.end65
%57 = load i32*, i32** %R, align 8
%58 = load i32, i32* %j, align 4
%inc59 = add nsw i32 %58, 1
store i32 %inc59, i32* %j, align 4
%idxprom60 = sext i32 %58 to i64
%arrayidx61 = getelementptr inbounds i32, i32* %57, i64 %idxprom60
%59 = load i32, i32* %arrayidx61, align 4
%60 = load i32*, i32** %A.addr, align 8
%61 = load i32, i32* %k, align 4
%inc62 = add nsw i32 %61, 1
store i32 %inc62, i32* %k, align 4
%idxprom63 = sext i32 %61 to i64
%arrayidx64 = getelementptr inbounds i32, i32* %60, i64 %idxprom63
store i32 %59, i32* %arrayidx64, align 4
br label %while.cond55
%62 = load i32*, i32** %L, align 8
%63 = bitcast i32* %62 to i8*
call void @free(i8* %63) #4
%64 = load i32*, i32** %R, align 8
%65 = bitcast i32* %64 to i8*
call void @free(i8* %65) #4
ret void
%retval = alloca i32, align 4
%A = alloca [11 x i32], align 16
%n = alloca i32, align 4
store i32 0, i32* %retval, align 4
%call = call i32 @puts(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0))
%0 = bitcast [11 x i32]* %A to i8*
call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([11 x i32]* @main.A to i8*), i64 44, i1 false)
store i32 11, i32* %n, align 4
%call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0))
%arraydecay = getelementptr inbounds [11 x i32], [11 x i32]* %A, i32 0, i32 0
%1 = load i32, i32* %n, align 4
call void @print_array(i32* %arraydecay, i32 %1)
%call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0))
%arraydecay3 = getelementptr inbounds [11 x i32], [11 x i32]* %A, i32 0, i32 0
%2 = load i32, i32* %n, align 4
%sub = sub nsw i32 %2, 1
call void @quick_sort(i32* %arraydecay3, i32 0, i32 %sub)
%arraydecay4 = getelementptr inbounds [11 x i32], [11 x i32]* %A, i32 0, i32 0
%3 = load i32, i32* %n, align 4
call void @print_array(i32* %arraydecay4, i32 %3)
ret i32 0
%A.addr = alloca i32*, align 8
%n.addr = alloca i32, align 4
%i = alloca i32, align 4
store i32* %A, i32** %A.addr, align 8
store i32 %n, i32* %n.addr, align 4
store i32 0, i32* %i, align 4
%call = call i32 @putchar(i32 91)
br label %while.cond
%0 = load i32, i32* %i, align 4
%1 = load i32, i32* %n.addr, align 4
%cmp = icmp slt i32 %0, %1
br i1 %cmp, label %while.body, label %while.end
%2 = load i32, i32* %i, align 4
%cmp1 = icmp sgt i32 %2, 0
br i1 %cmp1, label %if.then, label %if.end
%call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
br label %if.end
%3 = load i32*, i32** %A.addr, align 8
%4 = load i32, i32* %i, align 4
%inc = add nsw i32 %4, 1
store i32 %inc, i32* %i, align 4
%idxprom = sext i32 %4 to i64
%arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom
%5 = load i32, i32* %arrayidx, align 4
%call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i32 %5)
br label %while.cond
%call4 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
ret void
%A.addr = alloca i32*, align 8
%p.addr = alloca i32, align 4
%r.addr = alloca i32, align 4
%t = alloca i32, align 4
%z = alloca i32, align 4
%q = alloca i32, align 4
store i32* %A, i32** %A.addr, align 8
store i32 %p, i32* %p.addr, align 4
store i32 %r, i32* %r.addr, align 4
%0 = load i32, i32* %p.addr, align 4
%1 = load i32, i32* %r.addr, align 4
%cmp = icmp slt i32 %0, %1
br i1 %cmp, label %if.then, label %if.end
%call = call i32 @rand() #4
%2 = load i32, i32* %r.addr, align 4
%3 = load i32, i32* %p.addr, align 4
%sub = sub nsw i32 %2, %3
%add = add nsw i32 %sub, 1
%rem = srem i32 %call, %add
%4 = load i32, i32* %p.addr, align 4
%add1 = add nsw i32 %rem, %4
store i32 %add1, i32* %t, align 4
%5 = load i32*, i32** %A.addr, align 8
%6 = load i32, i32* %t, align 4
%idxprom = sext i32 %6 to i64
%arrayidx = getelementptr inbounds i32, i32* %5, i64 %idxprom
%7 = load i32, i32* %arrayidx, align 4
store i32 %7, i32* %z, align 4
%8 = load i32*, i32** %A.addr, align 8
%9 = load i32, i32* %r.addr, align 4
%idxprom2 = sext i32 %9 to i64
%arrayidx3 = getelementptr inbounds i32, i32* %8, i64 %idxprom2
%10 = load i32, i32* %arrayidx3, align 4
%11 = load i32*, i32** %A.addr, align 8
%12 = load i32, i32* %t, align 4
%idxprom4 = sext i32 %12 to i64
%arrayidx5 = getelementptr inbounds i32, i32* %11, i64 %idxprom4
store i32 %10, i32* %arrayidx5, align 4
%13 = load i32, i32* %z, align 4
%14 = load i32*, i32** %A.addr, align 8
%15 = load i32, i32* %r.addr, align 4
%idxprom6 = sext i32 %15 to i64
%arrayidx7 = getelementptr inbounds i32, i32* %14, i64 %idxprom6
store i32 %13, i32* %arrayidx7, align 4
%16 = load i32*, i32** %A.addr, align 8
%17 = load i32, i32* %p.addr, align 4
%18 = load i32, i32* %r.addr, align 4
%call8 = call i32 @partition(i32* %16, i32 %17, i32 %18)
store i32 %call8, i32* %q, align 4
%19 = load i32*, i32** %A.addr, align 8
%20 = load i32, i32* %p.addr, align 4
%21 = load i32, i32* %q, align 4
%sub9 = sub nsw i32 %21, 1
call void @quick_sort(i32* %19, i32 %20, i32 %sub9)
%22 = load i32*, i32** %A.addr, align 8
%23 = load i32, i32* %q, align 4
%add10 = add nsw i32 %23, 1
%24 = load i32, i32* %r.addr, align 4
call void @quick_sort(i32* %22, i32 %add10, i32 %24)
br label %if.end
ret void
%A.addr = alloca i32*, align 8
%p.addr = alloca i32, align 4
%r.addr = alloca i32, align 4
%x = alloca i32, align 4
%i = alloca i32, align 4
%j = alloca i32, align 4
%z = alloca i32, align 4
%z13 = alloca i32, align 4
store i32* %A, i32** %A.addr, align 8
store i32 %p, i32* %p.addr, align 4
store i32 %r, i32* %r.addr, align 4
%0 = load i32*, i32** %A.addr, align 8
%1 = load i32, i32* %r.addr, align 4
%idxprom = sext i32 %1 to i64
%arrayidx = getelementptr inbounds i32, i32* %0, i64 %idxprom
%2 = load i32, i32* %arrayidx, align 4
store i32 %2, i32* %x, align 4
%3 = load i32, i32* %p.addr, align 4
%sub = sub nsw i32 %3, 1
store i32 %sub, i32* %i, align 4
%4 = load i32, i32* %p.addr, align 4
store i32 %4, i32* %j, align 4
br label %for.cond
%5 = load i32, i32* %j, align 4
%6 = load i32, i32* %r.addr, align 4
%cmp = icmp slt i32 %5, %6
br i1 %cmp, label %for.body, label %for.end
%7 = load i32*, i32** %A.addr, align 8
%8 = load i32, i32* %j, align 4
%idxprom1 = sext i32 %8 to i64
%arrayidx2 = getelementptr inbounds i32, i32* %7, i64 %idxprom1
%9 = load i32, i32* %arrayidx2, align 4
%10 = load i32, i32* %x, align 4
%cmp3 = icmp sle i32 %9, %10
br i1 %cmp3, label %if.then, label %if.end
%11 = load i32, i32* %i, align 4
%add = add nsw i32 %11, 1
store i32 %add, i32* %i, align 4
%12 = load i32*, i32** %A.addr, align 8
%13 = load i32, i32* %i, align 4
%idxprom4 = sext i32 %13 to i64
%arrayidx5 = getelementptr inbounds i32, i32* %12, i64 %idxprom4
%14 = load i32, i32* %arrayidx5, align 4
store i32 %14, i32* %z, align 4
%15 = load i32*, i32** %A.addr, align 8
%16 = load i32, i32* %j, align 4
%idxprom6 = sext i32 %16 to i64
%arrayidx7 = getelementptr inbounds i32, i32* %15, i64 %idxprom6
%17 = load i32, i32* %arrayidx7, align 4
%18 = load i32*, i32** %A.addr, align 8
%19 = load i32, i32* %i, align 4
%idxprom8 = sext i32 %19 to i64
%arrayidx9 = getelementptr inbounds i32, i32* %18, i64 %idxprom8
store i32 %17, i32* %arrayidx9, align 4
%20 = load i32, i32* %z, align 4
%21 = load i32*, i32** %A.addr, align 8
%22 = load i32, i32* %j, align 4
%idxprom10 = sext i32 %22 to i64
%arrayidx11 = getelementptr inbounds i32, i32* %21, i64 %idxprom10
store i32 %20, i32* %arrayidx11, align 4
br label %if.end
br label %for.inc
%23 = load i32, i32* %j, align 4
%inc = add nsw i32 %23, 1
store i32 %inc, i32* %j, align 4
br label %for.cond
%24 = load i32, i32* %i, align 4
%add12 = add nsw i32 %24, 1
store i32 %add12, i32* %i, align 4
%25 = load i32*, i32** %A.addr, align 8
%26 = load i32, i32* %i, align 4
%idxprom14 = sext i32 %26 to i64
%arrayidx15 = getelementptr inbounds i32, i32* %25, i64 %idxprom14
%27 = load i32, i32* %arrayidx15, align 4
store i32 %27, i32* %z13, align 4
%28 = load i32*, i32** %A.addr, align 8
%29 = load i32, i32* %r.addr, align 4
%idxprom16 = sext i32 %29 to i64
%arrayidx17 = getelementptr inbounds i32, i32* %28, i64 %idxprom16
%30 = load i32, i32* %arrayidx17, align 4
%31 = load i32*, i32** %A.addr, align 8
%32 = load i32, i32* %i, align 4
%idxprom18 = sext i32 %32 to i64
%arrayidx19 = getelementptr inbounds i32, i32* %31, i64 %idxprom18
store i32 %30, i32* %arrayidx19, align 4
%33 = load i32, i32* %z13, align 4
%34 = load i32*, i32** %A.addr, align 8
%35 = load i32, i32* %r.addr, align 4
%idxprom20 = sext i32 %35 to i64
%arrayidx21 = getelementptr inbounds i32, i32* %34, i64 %idxprom20
store i32 %33, i32* %arrayidx21, align 4
%36 = load i32, i32* %i, align 4
ret i32 %36
%retval = alloca i32, align 4
%a = alloca [7 x i32], align 16
%length = alloca i32, align 4
store i32 0, i32* %retval, align 4
%call = call i32 @puts(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0))
%0 = bitcast [7 x i32]* %a to i8*
call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([7 x i32]* @main.a to i8*), i64 28, i1 false)
store i32 7, i32* %length, align 4
%call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0))
%arraydecay = getelementptr inbounds [7 x i32], [7 x i32]* %a, i32 0, i32 0
%1 = load i32, i32* %length, align 4
call void @print_array(i32* %arraydecay, i32 %1)
%arraydecay2 = getelementptr inbounds [7 x i32], [7 x i32]* %a, i32 0, i32 0
%2 = load i32, i32* %length, align 4
call void @radix_sort(i32* %arraydecay2, i32 %2)
%call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0))
%arraydecay4 = getelementptr inbounds [7 x i32], [7 x i32]* %a, i32 0, i32 0
%3 = load i32, i32* %length, align 4
call void @print_array(i32* %arraydecay4, i32 %3)
ret i32 0
%a.addr = alloca i32*, align 8
%length.addr = alloca i32, align 4
%i = alloca i32, align 4
store i32* %a, i32** %a.addr, align 8
store i32 %length, i32* %length.addr, align 4
store i32 0, i32* %i, align 4
%call = call i32 @putchar(i32 91)
br label %do.body
%0 = load i32, i32* %i, align 4
%cmp = icmp sgt i32 %0, 0
br i1 %cmp, label %if.then, label %if.end
%call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
br label %if.end
%1 = load i32*, i32** %a.addr, align 8
%2 = load i32, i32* %i, align 4
%idxprom = sext i32 %2 to i64
%arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom
%3 = load i32, i32* %arrayidx, align 4
%call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i32 %3)
br label %do.cond
%4 = load i32, i32* %i, align 4
%inc = add nsw i32 %4, 1
store i32 %inc, i32* %i, align 4
%5 = load i32, i32* %length.addr, align 4
%cmp3 = icmp slt i32 %inc, %5
br i1 %cmp3, label %do.body, label %do.end
%call4 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
ret void
%a.addr = alloca i32*, align 8
%length.addr = alloca i32, align 4
%buckets = alloca [10 x %struct.queue_st], align 16
%i = alloca i32, align 4
%j = alloca i32, align 4
%k = alloca i32, align 4
%m = alloca i32, align 4
%n = alloca i32, align 4
%p = alloca i32, align 4
store i32* %a, i32** %a.addr, align 8
store i32 %length, i32* %length.addr, align 4
store i32 0, i32* %i, align 4
br label %for.cond
%0 = load i32, i32* %i, align 4
%cmp = icmp slt i32 %0, 10
br i1 %cmp, label %for.body, label %for.end
%1 = load i32, i32* %i, align 4
%idxprom = sext i32 %1 to i64
%arrayidx = getelementptr inbounds [10 x %struct.queue_st], [10 x %struct.queue_st]* %buckets, i64 0, i64 %idxprom
call void @init_queue(%struct.queue_st* %arrayidx)
br label %for.inc
%2 = load i32, i32* %i, align 4
%inc = add nsw i32 %2, 1
store i32 %inc, i32* %i, align 4
br label %for.cond
%3 = load i32*, i32** %a.addr, align 8
%4 = load i32, i32* %length.addr, align 4
%call = call i32 @find_max_significant(i32* %3, i32 %4)
store i32 %call, i32* %k, align 4
store i32 10, i32* %m, align 4
store i32 1, i32* %n, align 4
store i32 0, i32* %i, align 4
br label %for.cond1
%5 = load i32, i32* %i, align 4
%6 = load i32, i32* %k, align 4
%cmp2 = icmp slt i32 %5, %6
br i1 %cmp2, label %for.body3, label %for.end34
store i32 0, i32* %j, align 4
br label %for.cond4
%7 = load i32, i32* %j, align 4
%8 = load i32, i32* %length.addr, align 4
%cmp5 = icmp slt i32 %7, %8
br i1 %cmp5, label %for.body6, label %for.end15
%9 = load i32*, i32** %a.addr, align 8
%10 = load i32, i32* %j, align 4
%idxprom7 = sext i32 %10 to i64
%arrayidx8 = getelementptr inbounds i32, i32* %9, i64 %idxprom7
%11 = load i32, i32* %arrayidx8, align 4
%12 = load i32, i32* %m, align 4
%rem = srem i32 %11, %12
%13 = load i32, i32* %n, align 4
%div = sdiv i32 %rem, %13
%idxprom9 = sext i32 %div to i64
%arrayidx10 = getelementptr inbounds [10 x %struct.queue_st], [10 x %struct.queue_st]* %buckets, i64 0, i64 %idxprom9
%14 = load i32*, i32** %a.addr, align 8
%15 = load i32, i32* %j, align 4
%idxprom11 = sext i32 %15 to i64
%arrayidx12 = getelementptr inbounds i32, i32* %14, i64 %idxprom11
%16 = load i32, i32* %arrayidx12, align 4
call void @inqueue(%struct.queue_st* %arrayidx10, i32 %16)
br label %for.inc13
%17 = load i32, i32* %j, align 4
%inc14 = add nsw i32 %17, 1
store i32 %inc14, i32* %j, align 4
br label %for.cond4
store i32 0, i32* %p, align 4
store i32 0, i32* %j, align 4
br label %for.cond16
%18 = load i32, i32* %j, align 4
%cmp17 = icmp slt i32 %18, 10
br i1 %cmp17, label %for.body18, label %for.end30
br label %while.cond
%19 = load i32, i32* %j, align 4
%idxprom19 = sext i32 %19 to i64
%arrayidx20 = getelementptr inbounds [10 x %struct.queue_st], [10 x %struct.queue_st]* %buckets, i64 0, i64 %idxprom19
%20 = bitcast %struct.queue_st* %arrayidx20 to { %struct.node_st*, %struct.node_st* }*
%21 = getelementptr inbounds { %struct.node_st*, %struct.node_st* }, { %struct.node_st*, %struct.node_st* }* %20, i32 0, i32 0
%22 = load %struct.node_st*, %struct.node_st** %21, align 16
%23 = getelementptr inbounds { %struct.node_st*, %struct.node_st* }, { %struct.node_st*, %struct.node_st* }* %20, i32 0, i32 1
%24 = load %struct.node_st*, %struct.node_st** %23, align 8
%call21 = call i32 @is_empty(%struct.node_st* %22, %struct.node_st* %24)
%tobool = icmp ne i32 %call21, 0
%lnot = xor i1 %tobool, true
br i1 %lnot, label %while.body, label %while.end
%25 = load i32, i32* %j, align 4
%idxprom22 = sext i32 %25 to i64
%arrayidx23 = getelementptr inbounds [10 x %struct.queue_st], [10 x %struct.queue_st]* %buckets, i64 0, i64 %idxprom22
%call24 = call i32 @dequeue(%struct.queue_st* %arrayidx23)
%26 = load i32*, i32** %a.addr, align 8
%27 = load i32, i32* %p, align 4
%inc25 = add nsw i32 %27, 1
store i32 %inc25, i32* %p, align 4
%idxprom26 = sext i32 %27 to i64
%arrayidx27 = getelementptr inbounds i32, i32* %26, i64 %idxprom26
store i32 %call24, i32* %arrayidx27, align 4
br label %while.cond
br label %for.inc28
%28 = load i32, i32* %j, align 4
%inc29 = add nsw i32 %28, 1
store i32 %inc29, i32* %j, align 4
br label %for.cond16
%29 = load i32, i32* %n, align 4
%mul = mul nsw i32 %29, 10
store i32 %mul, i32* %n, align 4
%30 = load i32, i32* %m, align 4
%mul31 = mul nsw i32 %30, 10
store i32 %mul31, i32* %m, align 4
br label %for.inc32
%31 = load i32, i32* %i, align 4
%inc33 = add nsw i32 %31, 1
store i32 %inc33, i32* %i, align 4
br label %for.cond1
ret void
%pque.addr = alloca %struct.queue_st*, align 8
store %struct.queue_st* %pque, %struct.queue_st** %pque.addr, align 8
%0 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pend = getelementptr inbounds %struct.queue_st, %struct.queue_st* %0, i32 0, i32 1
store %struct.node_st* null, %struct.node_st** %pend, align 8
%1 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pbegin = getelementptr inbounds %struct.queue_st, %struct.queue_st* %1, i32 0, i32 0
store %struct.node_st* null, %struct.node_st** %pbegin, align 8
ret void
%a.addr = alloca i32*, align 8
%length.addr = alloca i32, align 4
%i = alloca i32, align 4
%max = alloca i32, align 4
%nb_digits = alloca i32, align 4
store i32* %a, i32** %a.addr, align 8
store i32 %length, i32* %length.addr, align 4
store i32 0, i32* %i, align 4
%0 = load i32*, i32** %a.addr, align 8
%arrayidx = getelementptr inbounds i32, i32* %0, i64 0
%1 = load i32, i32* %arrayidx, align 4
store i32 %1, i32* %max, align 4
br label %while.cond
%2 = load i32, i32* %i, align 4
%inc = add nsw i32 %2, 1
store i32 %inc, i32* %i, align 4
%3 = load i32, i32* %length.addr, align 4
%cmp = icmp slt i32 %inc, %3
br i1 %cmp, label %while.body, label %while.end
%4 = load i32*, i32** %a.addr, align 8
%5 = load i32, i32* %i, align 4
%idxprom = sext i32 %5 to i64
%arrayidx1 = getelementptr inbounds i32, i32* %4, i64 %idxprom
%6 = load i32, i32* %arrayidx1, align 4
%7 = load i32, i32* %max, align 4
%cmp2 = icmp sgt i32 %6, %7
br i1 %cmp2, label %if.then, label %if.end
%8 = load i32*, i32** %a.addr, align 8
%9 = load i32, i32* %i, align 4
%idxprom3 = sext i32 %9 to i64
%arrayidx4 = getelementptr inbounds i32, i32* %8, i64 %idxprom3
%10 = load i32, i32* %arrayidx4, align 4
store i32 %10, i32* %max, align 4
br label %if.end
br label %while.cond
store i32 0, i32* %nb_digits, align 4
br label %while.cond5
%11 = load i32, i32* %max, align 4
%cmp6 = icmp ne i32 %11, 0
br i1 %cmp6, label %while.body7, label %while.end9
%12 = load i32, i32* %nb_digits, align 4
%inc8 = add nsw i32 %12, 1
store i32 %inc8, i32* %nb_digits, align 4
%13 = load i32, i32* %max, align 4
%div = sdiv i32 %13, 10
store i32 %div, i32* %max, align 4
br label %while.cond5
%14 = load i32, i32* %nb_digits, align 4
ret i32 %14
%pque.addr = alloca %struct.queue_st*, align 8
%inf.addr = alloca i32, align 4
%pnew = alloca %struct.node_st*, align 8
store %struct.queue_st* %pque, %struct.queue_st** %pque.addr, align 8
store i32 %inf, i32* %inf.addr, align 4
%0 = load i32, i32* %inf.addr, align 4
%call = call %struct.node_st* @make_node(i32 %0)
store %struct.node_st* %call, %struct.node_st** %pnew, align 8
%1 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pbegin = getelementptr inbounds %struct.queue_st, %struct.queue_st* %1, i32 0, i32 0
%2 = load %struct.node_st*, %struct.node_st** %pbegin, align 8
%cmp = icmp eq %struct.node_st* %2, null
br i1 %cmp, label %if.then, label %if.else
%3 = load %struct.node_st*, %struct.node_st** %pnew, align 8
%4 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pend = getelementptr inbounds %struct.queue_st, %struct.queue_st* %4, i32 0, i32 1
store %struct.node_st* %3, %struct.node_st** %pend, align 8
%5 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pbegin1 = getelementptr inbounds %struct.queue_st, %struct.queue_st* %5, i32 0, i32 0
store %struct.node_st* %3, %struct.node_st** %pbegin1, align 8
br label %if.end
%6 = load %struct.node_st*, %struct.node_st** %pnew, align 8
%7 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pend2 = getelementptr inbounds %struct.queue_st, %struct.queue_st* %7, i32 0, i32 1
%8 = load %struct.node_st*, %struct.node_st** %pend2, align 8
%pnext = getelementptr inbounds %struct.node_st, %struct.node_st* %8, i32 0, i32 1
store %struct.node_st* %6, %struct.node_st** %pnext, align 8
%9 = load %struct.node_st*, %struct.node_st** %pnew, align 8
%10 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pend3 = getelementptr inbounds %struct.queue_st, %struct.queue_st* %10, i32 0, i32 1
store %struct.node_st* %9, %struct.node_st** %pend3, align 8
br label %if.end
ret void
%retval = alloca i32, align 4
%pque = alloca %struct.queue_st, align 8
%0 = bitcast %struct.queue_st* %pque to { %struct.node_st*, %struct.node_st* }*
%1 = getelementptr inbounds { %struct.node_st*, %struct.node_st* }, { %struct.node_st*, %struct.node_st* }* %0, i32 0, i32 0
store %struct.node_st* %pque.coerce0, %struct.node_st** %1, align 8
%2 = getelementptr inbounds { %struct.node_st*, %struct.node_st* }, { %struct.node_st*, %struct.node_st* }* %0, i32 0, i32 1
store %struct.node_st* %pque.coerce1, %struct.node_st** %2, align 8
%pbegin = getelementptr inbounds %struct.queue_st, %struct.queue_st* %pque, i32 0, i32 0
%3 = load %struct.node_st*, %struct.node_st** %pbegin, align 8
%cmp = icmp eq %struct.node_st* %3, null
br i1 %cmp, label %if.then, label %if.else
store i32 1, i32* %retval, align 4
br label %return
store i32 0, i32* %retval, align 4
br label %return
%4 = load i32, i32* %retval, align 4
ret i32 %4
%pque.addr = alloca %struct.queue_st*, align 8
%ptemp = alloca %struct.node_st*, align 8
%x = alloca i32, align 4
store %struct.queue_st* %pque, %struct.queue_st** %pque.addr, align 8
%0 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pbegin = getelementptr inbounds %struct.queue_st, %struct.queue_st* %0, i32 0, i32 0
%1 = load %struct.node_st*, %struct.node_st** %pbegin, align 8
store %struct.node_st* %1, %struct.node_st** %ptemp, align 8
%2 = load %struct.node_st*, %struct.node_st** %ptemp, align 8
%cmp = icmp eq %struct.node_st* %2, null
br i1 %cmp, label %if.then, label %if.end
%call = call i32 @puts(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i32 0, i32 0))
call void @exit(i32 5) #5
unreachable
%3 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pbegin1 = getelementptr inbounds %struct.queue_st, %struct.queue_st* %3, i32 0, i32 0
%4 = load %struct.node_st*, %struct.node_st** %pbegin1, align 8
%5 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pend = getelementptr inbounds %struct.queue_st, %struct.queue_st* %5, i32 0, i32 1
%6 = load %struct.node_st*, %struct.node_st** %pend, align 8
%cmp2 = icmp eq %struct.node_st* %4, %6
br i1 %cmp2, label %if.then3, label %if.else
%7 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pbegin4 = getelementptr inbounds %struct.queue_st, %struct.queue_st* %7, i32 0, i32 0
store %struct.node_st* null, %struct.node_st** %pbegin4, align 8
%8 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pend5 = getelementptr inbounds %struct.queue_st, %struct.queue_st* %8, i32 0, i32 1
store %struct.node_st* null, %struct.node_st** %pend5, align 8
br label %if.end7
%9 = load %struct.node_st*, %struct.node_st** %ptemp, align 8
%pnext = getelementptr inbounds %struct.node_st, %struct.node_st* %9, i32 0, i32 1
%10 = load %struct.node_st*, %struct.node_st** %pnext, align 8
%11 = load %struct.queue_st*, %struct.queue_st** %pque.addr, align 8
%pbegin6 = getelementptr inbounds %struct.queue_st, %struct.queue_st* %11, i32 0, i32 0
store %struct.node_st* %10, %struct.node_st** %pbegin6, align 8
br label %if.end7
%12 = load %struct.node_st*, %struct.node_st** %ptemp, align 8
%inf = getelementptr inbounds %struct.node_st, %struct.node_st* %12, i32 0, i32 0
%13 = load i32, i32* %inf, align 8
store i32 %13, i32* %x, align 4
%14 = load %struct.node_st*, %struct.node_st** %ptemp, align 8
%15 = bitcast %struct.node_st* %14 to i8*
call void @free(i8* %15) #6
%16 = load i32, i32* %x, align 4
ret i32 %16
%inf.addr = alloca i32, align 4
%pnew = alloca %struct.node_st*, align 8
store i32 %inf, i32* %inf.addr, align 4
%call = call noalias i8* @malloc(i64 16) #6
%0 = bitcast i8* %call to %struct.node_st*
store %struct.node_st* %0, %struct.node_st** %pnew, align 8
%1 = load %struct.node_st*, %struct.node_st** %pnew, align 8
%cmp = icmp eq %struct.node_st* %1, null
br i1 %cmp, label %if.then, label %if.end
%call1 = call i32 @puts(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
call void @exit(i32 4) #5
unreachable
%2 = load i32, i32* %inf.addr, align 4
%3 = load %struct.node_st*, %struct.node_st** %pnew, align 8
%inf2 = getelementptr inbounds %struct.node_st, %struct.node_st* %3, i32 0, i32 0
store i32 %2, i32* %inf2, align 8
%4 = load %struct.node_st*, %struct.node_st** %pnew, align 8
%pnext = getelementptr inbounds %struct.node_st, %struct.node_st* %4, i32 0, i32 1
store %struct.node_st* null, %struct.node_st** %pnext, align 8
%5 = load %struct.node_st*, %struct.node_st** %pnew, align 8
ret %struct.node_st* %5
%retval = alloca i32, align 4
%A = alloca [5 x i32], align 16
%n = alloca i32, align 4
store i32 0, i32* %retval, align 4
%0 = bitcast [5 x i32]* %A to i8*
call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([5 x i32]* @main.A to i8*), i64 20, i1 false)
store i32 5, i32* %n, align 4
%call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0))
%arraydecay = getelementptr inbounds [5 x i32], [5 x i32]* %A, i32 0, i32 0
%1 = load i32, i32* %n, align 4
call void @print_array(i32* %arraydecay, i32 %1)
%call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0))
%arraydecay2 = getelementptr inbounds [5 x i32], [5 x i32]* %A, i32 0, i32 0
%2 = load i32, i32* %n, align 4
call void @selection_sort(i32* %arraydecay2, i32 %2)
%arraydecay3 = getelementptr inbounds [5 x i32], [5 x i32]* %A, i32 0, i32 0
%3 = load i32, i32* %n, align 4
call void @print_array(i32* %arraydecay3, i32 %3)
ret i32 0
%A.addr = alloca i32*, align 8
%n.addr = alloca i32, align 4
%i = alloca i32, align 4
store i32* %A, i32** %A.addr, align 8
store i32 %n, i32* %n.addr, align 4
store i32 0, i32* %i, align 4
%call = call i32 @putchar(i32 91)
br label %while.cond
%0 = load i32, i32* %i, align 4
%1 = load i32, i32* %n.addr, align 4
%cmp = icmp slt i32 %0, %1
br i1 %cmp, label %while.body, label %while.end
%2 = load i32, i32* %i, align 4
%cmp1 = icmp sgt i32 %2, 0
br i1 %cmp1, label %if.then, label %if.end
%call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
br label %if.end
%3 = load i32*, i32** %A.addr, align 8
%4 = load i32, i32* %i, align 4
%inc = add nsw i32 %4, 1
store i32 %inc, i32* %i, align 4
%idxprom = sext i32 %4 to i64
%arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom
%5 = load i32, i32* %arrayidx, align 4
%call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 %5)
br label %while.cond
%call4 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
ret void
%A.addr = alloca i32*, align 8
%n.addr = alloca i32, align 4
%i = alloca i32, align 4
%j = alloca i32, align 4
%max = alloca i32, align 4
%z = alloca i32, align 4
store i32* %A, i32** %A.addr, align 8
store i32 %n, i32* %n.addr, align 4
store i32 0, i32* %i, align 4
br label %for.cond
%0 = load i32, i32* %i, align 4
%1 = load i32, i32* %n.addr, align 4
%sub = sub nsw i32 %1, 1
%cmp = icmp slt i32 %0, %sub
br i1 %cmp, label %for.body, label %for.end20
%2 = load i32, i32* %i, align 4
store i32 %2, i32* %max, align 4
%3 = load i32, i32* %i, align 4
%add = add nsw i32 %3, 1
store i32 %add, i32* %j, align 4
br label %for.cond1
%4 = load i32, i32* %j, align 4
%5 = load i32, i32* %n.addr, align 4
%cmp2 = icmp slt i32 %4, %5
br i1 %cmp2, label %for.body3, label %for.end
%6 = load i32*, i32** %A.addr, align 8
%7 = load i32, i32* %max, align 4
%idxprom = sext i32 %7 to i64
%arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom
%8 = load i32, i32* %arrayidx, align 4
%9 = load i32*, i32** %A.addr, align 8
%10 = load i32, i32* %j, align 4
%idxprom4 = sext i32 %10 to i64
%arrayidx5 = getelementptr inbounds i32, i32* %9, i64 %idxprom4
%11 = load i32, i32* %arrayidx5, align 4
%cmp6 = icmp slt i32 %8, %11
br i1 %cmp6, label %if.then, label %if.end
%12 = load i32, i32* %j, align 4
store i32 %12, i32* %max, align 4
br label %if.end
br label %for.inc
%13 = load i32, i32* %j, align 4
%inc = add nsw i32 %13, 1
store i32 %inc, i32* %j, align 4
br label %for.cond1
%14 = load i32, i32* %max, align 4
%15 = load i32, i32* %i, align 4
%cmp7 = icmp ne i32 %14, %15
br i1 %cmp7, label %if.then8, label %if.end17
%16 = load i32*, i32** %A.addr, align 8
%17 = load i32, i32* %i, align 4
%idxprom9 = sext i32 %17 to i64
%arrayidx10 = getelementptr inbounds i32, i32* %16, i64 %idxprom9
%18 = load i32, i32* %arrayidx10, align 4
store i32 %18, i32* %z, align 4
%19 = load i32*, i32** %A.addr, align 8
%20 = load i32, i32* %max, align 4
%idxprom11 = sext i32 %20 to i64
%arrayidx12 = getelementptr inbounds i32, i32* %19, i64 %idxprom11
%21 = load i32, i32* %arrayidx12, align 4
%22 = load i32*, i32** %A.addr, align 8
%23 = load i32, i32* %i, align 4
%idxprom13 = sext i32 %23 to i64
%arrayidx14 = getelementptr inbounds i32, i32* %22, i64 %idxprom13
store i32 %21, i32* %arrayidx14, align 4
%24 = load i32, i32* %z, align 4
%25 = load i32*, i32** %A.addr, align 8
%26 = load i32, i32* %max, align 4
%idxprom15 = sext i32 %26 to i64
%arrayidx16 = getelementptr inbounds i32, i32* %25, i64 %idxprom15
store i32 %24, i32* %arrayidx16, align 4
br label %if.end17
br label %for.inc18
%27 = load i32, i32* %i, align 4
%inc19 = add nsw i32 %27, 1
store i32 %inc19, i32* %i, align 4
br label %for.cond
ret void
