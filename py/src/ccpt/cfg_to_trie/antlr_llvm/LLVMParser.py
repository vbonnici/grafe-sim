# Generated from LLVMParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,445,4140,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,1,0,1,0,3,0,857,
        8,0,1,1,1,1,1,2,3,2,862,8,2,1,3,1,3,1,3,1,3,1,3,5,3,869,8,3,10,3,
        12,3,872,9,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,3,4,889,8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,3,6,903,8,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,3,8,919,8,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,3,11,933,8,11,1,11,1,11,3,11,937,8,11,1,11,3,11,940,8,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,3,
        12,954,8,12,1,12,1,12,3,12,958,8,12,1,12,3,12,961,8,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,13,3,13,972,8,13,1,14,1,14,1,15,
        1,15,3,15,978,8,15,1,16,1,16,1,16,1,16,1,16,1,16,5,16,986,8,16,10,
        16,12,16,989,9,16,1,17,1,17,1,17,1,17,3,17,995,8,17,1,18,1,18,1,
        18,1,18,1,18,3,18,1002,8,18,1,18,1,18,3,18,1006,8,18,1,18,3,18,1009,
        8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,
        1022,8,18,1,18,1,18,3,18,1026,8,18,1,18,3,18,1029,8,18,1,18,1,18,
        1,18,1,18,1,18,1,18,3,18,1037,8,18,1,19,1,19,1,20,1,20,1,20,1,20,
        1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,3,22,1054,8,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,1065,8,22,1,22,1,22,
        3,22,1069,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,3,23,1079,
        8,23,1,24,1,24,1,24,1,24,3,24,1085,8,24,1,25,1,25,1,25,1,25,3,25,
        1091,8,25,1,26,1,26,1,26,1,26,3,26,1097,8,26,1,27,1,27,1,27,1,27,
        1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,30,3,30,1119,8,30,1,31,1,31,1,31,1,31,1,31,1,31,5,31,
        1127,8,31,10,31,12,31,1130,9,31,1,32,1,32,3,32,1134,8,32,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,1146,8,33,1,34,3,
        34,1149,8,34,1,35,3,35,1152,8,35,1,36,1,36,1,36,1,36,1,36,5,36,1159,
        8,36,10,36,12,36,1162,9,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,40,1,
        40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,
        46,1,46,3,46,1199,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
        46,5,46,1210,8,46,10,46,12,46,1213,9,46,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,3,47,1224,8,47,1,48,1,48,1,49,1,49,1,50,1,50,
        1,51,1,51,1,52,1,52,1,53,3,53,1237,8,53,1,54,1,54,1,54,1,54,1,54,
        1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,
        1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,1278,8,60,1,61,1,61,
        1,61,1,61,1,61,1,61,5,61,1286,8,61,10,61,12,61,1289,9,61,1,62,1,
        62,1,63,1,63,1,64,1,64,1,64,3,64,1298,8,64,1,65,1,65,1,65,1,65,1,
        65,1,65,1,65,1,65,1,66,3,66,1309,8,66,1,67,3,67,1312,8,67,1,68,3,
        68,1315,8,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,
        69,1,69,1,69,1,69,3,69,1331,8,69,1,70,1,70,1,71,1,71,1,72,1,72,1,
        73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,
        77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1363,8,
        77,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,80,1,80,1,81,1,81,1,81,1,
        81,1,82,1,82,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,85,1,
        85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,
        85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,
        85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,
        85,1429,8,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
        87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,
        88,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,
        89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,91,1,
        91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,
        92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,
        93,1,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,
        95,1,95,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,96,1,
        96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,98,1,
        98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,
        99,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,100,
        1,100,1,100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,106,1,106,1,106,
        1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,107,1,107,
        1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,1,108,1,108,1,108,
        1,108,1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,110,3,110,1663,8,110,1,111,1,111,1,111,
        1,111,1,111,1,111,5,111,1671,8,111,10,111,12,111,1674,9,111,1,112,
        1,112,1,112,1,112,1,113,3,113,1681,8,113,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
        1,115,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,117,1,117,
        1,117,1,117,1,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
        1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,121,1,121,1,121,
        1,121,1,121,1,121,1,121,1,121,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,125,1,125,1,125,1,125,
        1,125,1,125,1,125,1,125,1,126,1,126,1,126,1,126,1,126,1,126,1,126,
        1,126,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
        1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,129,
        1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,
        1,130,1,130,1,130,1,130,1,130,5,130,1824,8,130,10,130,12,130,1827,
        9,130,1,131,1,131,1,131,1,131,1,132,3,132,1834,8,132,1,133,3,133,
        1837,8,133,1,134,1,134,1,134,1,134,1,134,5,134,1844,8,134,10,134,
        12,134,1847,9,134,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
        1,135,3,135,1858,8,135,1,136,1,136,1,136,1,136,1,136,1,136,1,136,
        1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,
        1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,
        1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,
        1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,3,136,1908,8,136,
        1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,138,1,138,1,138,
        1,138,1,138,1,138,1,138,1,138,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,142,1,142,1,142,1,142,
        1,142,1,142,1,142,1,142,1,143,1,143,1,143,1,143,1,143,1,143,1,143,
        1,143,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,145,1,145,
        1,145,1,145,1,145,1,145,1,145,1,145,1,146,1,146,1,146,1,146,1,146,
        1,146,1,146,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,148,1,148,
        1,148,1,148,1,148,1,148,1,148,1,148,1,149,1,149,1,149,1,149,1,149,
        1,149,1,149,1,149,1,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,
        1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,152,1,152,1,152,
        1,152,1,152,1,152,1,152,1,153,1,153,1,153,1,153,1,153,1,153,1,153,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,155,1,155,1,155,1,155,
        1,155,1,155,1,155,1,155,1,156,1,156,1,156,1,156,1,156,1,156,1,156,
        1,156,1,156,1,156,1,156,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
        1,157,1,157,1,157,1,157,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
        1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,160,
        1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,
        1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,
        1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,
        1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,
        1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,
        1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,
        1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,3,160,2172,
        8,160,1,161,3,161,2175,8,161,1,162,3,162,2178,8,162,1,163,1,163,
        3,163,2182,8,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,
        3,163,2192,8,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,
        1,163,1,163,1,163,3,163,2205,8,163,1,163,1,163,1,163,1,163,1,163,
        1,163,1,163,1,163,1,163,1,163,1,163,3,163,2218,8,163,1,163,1,163,
        1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,3,163,2230,8,163,
        1,164,1,164,3,164,2234,8,164,1,164,1,164,1,164,1,164,1,164,1,164,
        1,164,1,164,1,164,3,164,2245,8,164,1,164,1,164,1,164,1,164,1,164,
        1,164,1,164,1,164,1,164,1,164,1,164,1,164,3,164,2259,8,164,1,164,
        1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
        3,164,2273,8,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
        1,164,1,164,1,164,3,164,2286,8,164,1,165,1,165,1,165,1,165,1,165,
        1,166,1,166,1,166,3,166,2296,8,166,1,166,1,166,1,166,1,166,1,166,
        1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,167,3,167,2312,
        8,167,1,168,1,168,3,168,2316,8,168,1,168,1,168,1,168,1,168,1,168,
        1,168,1,168,1,168,1,168,1,168,1,169,1,169,1,170,1,170,1,170,1,170,
        1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,
        1,170,1,170,1,170,3,170,2348,8,170,1,171,1,171,1,171,1,171,1,171,
        1,171,1,171,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,174,1,174,1,174,1,174,1,174,1,174,
        1,174,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,177,1,177,1,177,1,177,1,177,1,177,1,177,
        1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,179,1,179,1,179,1,179,
        1,179,1,179,1,179,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,181,
        1,181,1,181,1,181,1,181,1,181,1,181,1,182,1,182,1,182,1,182,1,182,
        1,182,1,182,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,184,1,184,
        1,184,1,184,1,184,1,184,1,184,1,184,1,185,1,185,1,185,1,185,1,185,
        1,185,1,185,1,185,1,185,1,186,1,186,1,186,1,186,1,186,1,187,1,187,
        1,187,1,187,1,187,1,187,5,187,2469,8,187,10,187,12,187,2472,9,187,
        1,188,1,188,1,188,1,188,1,188,1,188,1,189,1,189,1,189,1,189,1,189,
        1,189,1,189,1,189,1,189,1,189,1,189,1,190,1,190,1,190,1,190,1,190,
        1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,191,3,191,
        2506,8,191,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,193,1,193,
        1,193,1,193,1,193,1,193,1,194,3,194,2522,8,194,1,195,3,195,2525,
        8,195,1,196,1,196,1,196,1,196,1,196,5,196,2532,8,196,10,196,12,196,
        2535,9,196,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,3,197,
        2545,8,197,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,199,
        1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,200,1,200,1,200,1,200,
        1,200,1,200,1,200,1,200,1,200,1,200,1,200,3,200,2574,8,200,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,3,201,2586,
        8,201,1,201,1,201,1,201,3,201,2591,8,201,1,202,1,202,1,202,1,202,
        1,202,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,
        1,203,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,
        1,204,1,205,3,205,2621,8,205,1,206,1,206,1,206,1,206,1,206,5,206,
        2628,8,206,10,206,12,206,2631,9,206,1,207,1,207,1,207,1,207,1,207,
        1,207,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,209,
        1,209,1,209,1,209,1,209,1,209,5,209,2654,8,209,10,209,12,209,2657,
        9,209,1,210,1,210,1,210,1,211,1,211,1,211,1,211,1,211,1,211,1,211,
        1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,
        1,212,1,212,1,212,1,212,1,212,1,213,1,213,1,213,1,213,1,213,1,213,
        1,213,1,213,1,213,1,213,1,214,1,214,1,214,1,214,1,214,1,214,1,214,
        1,214,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,216,1,216,1,216,
        1,217,1,217,1,217,1,217,1,217,3,217,2718,8,217,1,218,1,218,1,218,
        1,219,1,219,1,219,1,219,1,219,1,219,3,219,2729,8,219,1,220,1,220,
        1,220,1,220,1,220,1,220,5,220,2737,8,220,10,220,12,220,2740,9,220,
        1,221,1,221,3,221,2744,8,221,1,222,1,222,1,222,1,222,1,222,1,222,
        1,222,3,222,2753,8,222,1,223,1,223,1,223,1,224,1,224,1,224,1,225,
        1,225,1,225,3,225,2764,8,225,1,226,3,226,2767,8,226,1,227,1,227,
        1,227,1,227,1,227,5,227,2774,8,227,10,227,12,227,2777,9,227,1,228,
        1,228,3,228,2781,8,228,1,229,1,229,1,229,1,229,1,229,1,229,5,229,
        2789,8,229,10,229,12,229,2792,9,229,1,230,1,230,1,230,1,230,1,230,
        1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
        1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,3,230,2819,
        8,230,1,231,1,231,1,231,1,231,1,231,1,232,3,232,2827,8,232,1,233,
        1,233,1,233,1,233,1,233,1,233,5,233,2835,8,233,10,233,12,233,2838,
        9,233,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,
        1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,
        1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,
        3,234,2872,8,234,1,235,1,235,1,235,1,235,1,235,1,236,3,236,2880,
        8,236,1,237,1,237,1,237,1,237,1,237,1,237,5,237,2888,8,237,10,237,
        12,237,2891,9,237,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,
        3,238,2901,8,238,1,239,1,239,1,239,1,239,1,239,1,240,3,240,2909,
        8,240,1,241,1,241,1,241,1,241,1,241,1,241,5,241,2917,8,241,10,241,
        12,241,2920,9,241,1,242,1,242,1,242,1,242,1,242,1,242,3,242,2928,
        8,242,1,243,1,243,1,243,1,243,1,243,1,244,3,244,2936,8,244,1,245,
        1,245,1,245,1,245,1,245,1,245,5,245,2944,8,245,10,245,12,245,2947,
        9,245,1,246,1,246,1,246,1,246,1,246,3,246,2954,8,246,1,247,1,247,
        1,247,1,247,1,247,1,248,3,248,2962,8,248,1,249,1,249,1,249,1,249,
        1,249,1,249,5,249,2970,8,249,10,249,12,249,2973,9,249,1,250,1,250,
        1,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,
        1,250,3,250,2989,8,250,1,251,1,251,1,251,1,251,1,251,1,252,3,252,
        2997,8,252,1,253,1,253,1,253,1,253,1,253,1,253,5,253,3005,8,253,
        10,253,12,253,3008,9,253,1,254,1,254,1,254,1,254,1,254,1,254,1,254,
        1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,
        1,254,1,254,1,254,3,254,3031,8,254,1,255,1,255,1,255,1,255,1,255,
        1,256,3,256,3039,8,256,1,257,1,257,1,257,1,257,1,257,1,257,5,257,
        3047,8,257,10,257,12,257,3050,9,257,1,258,1,258,1,258,1,258,3,258,
        3056,8,258,1,259,1,259,1,259,1,259,1,259,1,260,3,260,3064,8,260,
        1,261,1,261,1,261,1,261,1,261,1,261,5,261,3072,8,261,10,261,12,261,
        3075,9,261,1,262,1,262,1,262,1,262,1,262,3,262,3082,8,262,1,263,
        1,263,1,263,1,263,1,263,1,264,3,264,3090,8,264,1,265,1,265,1,265,
        1,265,1,265,1,265,5,265,3098,8,265,10,265,12,265,3101,9,265,1,266,
        1,266,3,266,3105,8,266,1,267,1,267,1,267,1,267,1,267,1,268,3,268,
        3113,8,268,1,269,1,269,1,269,1,269,1,269,1,269,5,269,3121,8,269,
        10,269,12,269,3124,9,269,1,270,1,270,1,270,1,270,1,270,3,270,3131,
        8,270,1,271,1,271,1,271,1,271,1,271,1,272,3,272,3139,8,272,1,273,
        1,273,1,273,1,273,1,273,1,273,5,273,3147,8,273,10,273,12,273,3150,
        9,273,1,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,3,274,3160,
        8,274,1,275,1,275,1,275,1,275,1,275,1,276,3,276,3168,8,276,1,277,
        1,277,1,277,1,277,1,277,1,277,5,277,3176,8,277,10,277,12,277,3179,
        9,277,1,278,1,278,1,278,1,278,3,278,3185,8,278,1,279,1,279,1,279,
        1,279,1,279,1,280,3,280,3193,8,280,1,281,1,281,1,281,1,281,1,281,
        1,281,5,281,3201,8,281,10,281,12,281,3204,9,281,1,282,1,282,1,282,
        1,282,1,282,1,282,1,282,1,282,1,282,1,282,3,282,3216,8,282,1,283,
        1,283,1,283,1,283,1,283,1,284,3,284,3224,8,284,1,285,1,285,1,285,
        1,285,1,285,1,285,5,285,3232,8,285,10,285,12,285,3235,9,285,1,286,
        1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,
        1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,
        1,286,1,286,1,286,1,286,1,286,3,286,3265,8,286,1,287,1,287,1,287,
        1,287,1,287,1,288,3,288,3273,8,288,1,289,1,289,1,289,1,289,1,289,
        1,289,5,289,3281,8,289,10,289,12,289,3284,9,289,1,290,1,290,1,290,
        1,290,3,290,3290,8,290,1,291,1,291,1,291,1,291,1,291,1,292,3,292,
        3298,8,292,1,293,1,293,1,293,1,293,1,293,1,293,5,293,3306,8,293,
        10,293,12,293,3309,9,293,1,294,1,294,1,294,1,294,3,294,3315,8,294,
        1,295,1,295,1,295,1,295,1,295,1,296,3,296,3323,8,296,1,297,1,297,
        1,297,1,297,1,297,1,297,5,297,3331,8,297,10,297,12,297,3334,9,297,
        1,298,1,298,1,298,1,298,1,298,3,298,3341,8,298,1,299,1,299,1,299,
        1,299,1,299,1,300,3,300,3349,8,300,1,301,1,301,1,301,1,301,1,301,
        1,301,5,301,3357,8,301,10,301,12,301,3360,9,301,1,302,1,302,1,302,
        1,302,1,302,1,302,1,302,1,302,1,302,3,302,3371,8,302,1,303,1,303,
        1,303,1,303,1,303,1,304,3,304,3379,8,304,1,305,1,305,1,305,1,305,
        1,305,1,305,5,305,3387,8,305,10,305,12,305,3390,9,305,1,306,1,306,
        3,306,3394,8,306,1,307,1,307,1,307,1,307,1,307,1,308,3,308,3402,
        8,308,1,309,1,309,1,309,1,309,1,309,1,309,5,309,3410,8,309,10,309,
        12,309,3413,9,309,1,310,1,310,1,310,1,310,3,310,3419,8,310,1,311,
        1,311,1,311,1,311,1,311,1,312,3,312,3427,8,312,1,313,1,313,1,313,
        1,313,1,313,1,313,5,313,3435,8,313,10,313,12,313,3438,9,313,1,314,
        1,314,1,314,1,314,1,314,1,314,1,314,1,314,1,314,1,314,3,314,3450,
        8,314,1,315,1,315,1,315,1,315,1,315,1,316,3,316,3458,8,316,1,317,
        1,317,1,317,1,317,1,317,1,317,5,317,3466,8,317,10,317,12,317,3469,
        9,317,1,318,1,318,1,318,1,318,1,318,1,318,1,318,3,318,3478,8,318,
        1,319,1,319,1,319,1,319,1,319,1,320,3,320,3486,8,320,1,321,1,321,
        1,321,1,321,1,321,1,321,5,321,3494,8,321,10,321,12,321,3497,9,321,
        1,322,1,322,1,322,1,322,1,322,3,322,3504,8,322,1,323,1,323,1,323,
        1,323,1,323,1,324,3,324,3512,8,324,1,325,1,325,1,325,1,325,1,325,
        1,325,5,325,3520,8,325,10,325,12,325,3523,9,325,1,326,1,326,1,326,
        1,326,1,326,3,326,3530,8,326,1,327,1,327,1,327,1,327,1,327,1,328,
        3,328,3538,8,328,1,329,1,329,1,329,1,329,1,329,1,329,5,329,3546,
        8,329,10,329,12,329,3549,9,329,1,330,1,330,1,330,1,330,1,330,3,330,
        3556,8,330,1,331,1,331,1,331,1,332,1,332,1,332,1,333,1,333,1,333,
        1,334,1,334,1,334,1,335,1,335,1,335,1,336,1,336,1,336,1,337,1,337,
        1,337,1,338,1,338,1,338,1,339,1,339,1,339,1,340,1,340,1,340,1,341,
        1,341,1,341,1,342,1,342,1,342,1,343,1,343,3,343,3596,8,343,1,344,
        1,344,1,344,1,345,1,345,1,345,1,346,1,346,1,346,1,347,1,347,1,347,
        1,348,1,348,1,348,1,349,1,349,1,349,1,350,1,350,1,350,1,351,1,351,
        1,352,1,352,1,352,1,352,1,352,1,352,5,352,3627,8,352,10,352,12,352,
        3630,9,352,1,353,1,353,3,353,3634,8,353,1,354,1,354,3,354,3638,8,
        354,1,355,1,355,3,355,3642,8,355,1,356,1,356,3,356,3646,8,356,1,
        357,1,357,3,357,3650,8,357,1,358,1,358,1,359,1,359,3,359,3656,8,
        359,1,360,1,360,3,360,3660,8,360,1,361,1,361,1,361,1,361,3,361,3666,
        8,361,1,362,3,362,3669,8,362,1,363,1,363,1,363,1,363,1,363,5,363,
        3676,8,363,10,363,12,363,3679,9,363,1,364,1,364,1,364,1,364,1,364,
        1,364,5,364,3687,8,364,10,364,12,364,3690,9,364,1,365,1,365,1,365,
        1,366,3,366,3696,8,366,1,367,1,367,1,367,1,367,1,367,1,367,5,367,
        3704,8,367,10,367,12,367,3707,9,367,1,368,1,368,1,368,1,369,1,369,
        1,369,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        3,370,3725,8,370,1,371,1,371,1,371,1,371,1,371,1,371,3,371,3733,
        8,371,1,372,1,372,1,372,1,372,1,372,1,372,5,372,3741,8,372,10,372,
        12,372,3744,9,372,1,373,1,373,1,373,1,373,1,373,3,373,3751,8,373,
        1,373,1,373,1,373,1,373,1,373,1,373,3,373,3759,8,373,1,374,1,374,
        1,375,3,375,3764,8,375,1,376,1,376,1,376,1,376,1,376,1,376,1,376,
        1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,
        1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,
        1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,
        1,376,3,376,3807,8,376,1,377,3,377,3810,8,377,1,378,1,378,1,378,
        1,378,1,378,1,378,3,378,3818,8,378,1,379,1,379,1,379,1,379,1,379,
        1,379,1,379,1,379,3,379,3828,8,379,1,380,3,380,3831,8,380,1,381,
        1,381,1,382,3,382,3836,8,382,1,383,3,383,3839,8,383,1,384,1,384,
        1,384,1,384,1,384,1,384,5,384,3847,8,384,10,384,12,384,3850,9,384,
        1,385,1,385,1,385,1,385,1,385,3,385,3857,8,385,1,385,1,385,1,385,
        1,385,1,385,3,385,3864,8,385,1,386,1,386,3,386,3868,8,386,1,387,
        3,387,3871,8,387,1,388,1,388,1,388,1,388,1,388,5,388,3878,8,388,
        10,388,12,388,3881,9,388,1,389,1,389,1,390,1,390,1,391,3,391,3888,
        8,391,1,392,1,392,1,392,1,392,1,392,5,392,3895,8,392,10,392,12,392,
        3898,9,392,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,
        1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,
        1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,
        1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,
        1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,3,393,
        3952,8,393,1,394,3,394,3955,8,394,1,395,1,395,3,395,3959,8,395,1,
        396,1,396,1,396,1,396,1,396,1,396,5,396,3967,8,396,10,396,12,396,
        3970,9,396,1,397,1,397,1,398,1,398,1,399,3,399,3977,8,399,1,400,
        1,400,1,401,3,401,3982,8,401,1,402,1,402,1,403,1,403,1,403,1,403,
        3,403,3990,8,403,1,404,1,404,1,404,1,404,1,404,5,404,3997,8,404,
        10,404,12,404,4000,9,404,1,405,1,405,1,405,1,405,1,405,1,406,3,406,
        4008,8,406,1,407,1,407,1,407,1,407,1,407,5,407,4015,8,407,10,407,
        12,407,4018,9,407,1,408,1,408,1,409,3,409,4023,8,409,1,410,1,410,
        1,410,1,410,1,410,5,410,4030,8,410,10,410,12,410,4033,9,410,1,411,
        1,411,1,411,1,411,1,411,1,411,1,411,1,411,1,411,1,411,1,411,1,411,
        1,411,1,411,1,411,1,411,1,411,1,411,1,411,3,411,4054,8,411,1,412,
        1,412,1,412,1,412,1,412,1,412,3,412,4062,8,412,1,413,1,413,1,413,
        1,413,1,413,1,413,5,413,4070,8,413,10,413,12,413,4073,9,413,1,414,
        1,414,1,414,1,414,1,414,1,414,1,414,3,414,4082,8,414,1,415,3,415,
        4085,8,415,1,416,1,416,1,417,3,417,4090,8,417,1,418,1,418,1,418,
        1,418,1,418,5,418,4097,8,418,10,418,12,418,4100,9,418,1,419,1,419,
        1,419,1,419,1,419,1,419,1,419,1,419,3,419,4110,8,419,1,420,1,420,
        1,420,1,421,1,421,1,421,1,421,1,421,1,422,1,422,1,422,1,422,3,422,
        4124,8,422,1,423,1,423,1,423,1,423,1,423,1,423,3,423,4132,8,423,
        1,424,1,424,1,425,1,425,1,426,1,426,1,426,0,55,6,32,62,72,92,122,
        222,260,268,374,392,412,418,440,454,458,466,474,482,490,498,506,
        514,522,530,538,546,554,562,570,578,586,594,602,610,618,626,634,
        642,650,658,704,726,728,734,744,768,776,784,792,808,814,820,826,
        836,427,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
        218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,
        250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
        282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,
        314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,
        346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,
        378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,
        410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,
        442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,
        474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,
        506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,
        538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,
        570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,
        602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,
        634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,
        666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,
        698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,
        730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,760,
        762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,
        794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,
        826,828,830,832,834,836,838,840,842,844,846,848,850,852,0,19,5,0,
        37,37,138,138,213,213,248,248,301,301,2,0,83,83,174,174,2,0,21,21,
        184,184,6,0,126,126,158,158,160,160,177,177,278,278,396,396,2,0,
        148,148,353,353,9,0,17,17,36,36,226,226,228,228,237,237,274,274,
        337,337,365,366,403,404,3,0,234,234,257,257,344,344,5,0,15,16,231,
        231,292,292,311,311,372,372,1,0,124,125,7,0,20,20,40,40,85,85,149,
        149,240,241,260,260,291,291,9,0,148,148,263,263,265,269,275,275,
        353,353,359,361,363,364,368,368,371,371,6,0,136,136,238,238,314,
        315,322,323,360,361,363,364,7,0,39,39,52,52,81,81,201,201,217,218,
        282,282,387,388,2,0,141,141,143,143,2,0,259,259,262,262,1,0,127,
        128,2,0,192,192,220,221,2,0,222,222,370,370,3,0,93,93,181,181,285,
        285,4332,0,856,1,0,0,0,2,858,1,0,0,0,4,861,1,0,0,0,6,863,1,0,0,0,
        8,888,1,0,0,0,10,890,1,0,0,0,12,902,1,0,0,0,14,904,1,0,0,0,16,918,
        1,0,0,0,18,920,1,0,0,0,20,925,1,0,0,0,22,927,1,0,0,0,24,948,1,0,
        0,0,26,971,1,0,0,0,28,973,1,0,0,0,30,977,1,0,0,0,32,979,1,0,0,0,
        34,994,1,0,0,0,36,1036,1,0,0,0,38,1038,1,0,0,0,40,1040,1,0,0,0,42,
        1045,1,0,0,0,44,1051,1,0,0,0,46,1078,1,0,0,0,48,1084,1,0,0,0,50,
        1090,1,0,0,0,52,1096,1,0,0,0,54,1098,1,0,0,0,56,1103,1,0,0,0,58,
        1110,1,0,0,0,60,1118,1,0,0,0,62,1120,1,0,0,0,64,1133,1,0,0,0,66,
        1145,1,0,0,0,68,1148,1,0,0,0,70,1151,1,0,0,0,72,1153,1,0,0,0,74,
        1163,1,0,0,0,76,1171,1,0,0,0,78,1180,1,0,0,0,80,1182,1,0,0,0,82,
        1184,1,0,0,0,84,1186,1,0,0,0,86,1188,1,0,0,0,88,1190,1,0,0,0,90,
        1192,1,0,0,0,92,1198,1,0,0,0,94,1223,1,0,0,0,96,1225,1,0,0,0,98,
        1227,1,0,0,0,100,1229,1,0,0,0,102,1231,1,0,0,0,104,1233,1,0,0,0,
        106,1236,1,0,0,0,108,1238,1,0,0,0,110,1243,1,0,0,0,112,1249,1,0,
        0,0,114,1251,1,0,0,0,116,1253,1,0,0,0,118,1255,1,0,0,0,120,1277,
        1,0,0,0,122,1279,1,0,0,0,124,1290,1,0,0,0,126,1292,1,0,0,0,128,1297,
        1,0,0,0,130,1299,1,0,0,0,132,1308,1,0,0,0,134,1311,1,0,0,0,136,1314,
        1,0,0,0,138,1330,1,0,0,0,140,1332,1,0,0,0,142,1334,1,0,0,0,144,1336,
        1,0,0,0,146,1338,1,0,0,0,148,1340,1,0,0,0,150,1342,1,0,0,0,152,1344,
        1,0,0,0,154,1362,1,0,0,0,156,1364,1,0,0,0,158,1368,1,0,0,0,160,1371,
        1,0,0,0,162,1373,1,0,0,0,164,1377,1,0,0,0,166,1379,1,0,0,0,168,1381,
        1,0,0,0,170,1428,1,0,0,0,172,1430,1,0,0,0,174,1440,1,0,0,0,176,1449,
        1,0,0,0,178,1459,1,0,0,0,180,1468,1,0,0,0,182,1478,1,0,0,0,184,1487,
        1,0,0,0,186,1497,1,0,0,0,188,1507,1,0,0,0,190,1516,1,0,0,0,192,1525,
        1,0,0,0,194,1534,1,0,0,0,196,1543,1,0,0,0,198,1553,1,0,0,0,200,1563,
        1,0,0,0,202,1573,1,0,0,0,204,1582,1,0,0,0,206,1591,1,0,0,0,208,1600,
        1,0,0,0,210,1609,1,0,0,0,212,1621,1,0,0,0,214,1633,1,0,0,0,216,1640,
        1,0,0,0,218,1650,1,0,0,0,220,1662,1,0,0,0,222,1664,1,0,0,0,224,1675,
        1,0,0,0,226,1680,1,0,0,0,228,1682,1,0,0,0,230,1690,1,0,0,0,232,1698,
        1,0,0,0,234,1706,1,0,0,0,236,1714,1,0,0,0,238,1722,1,0,0,0,240,1730,
        1,0,0,0,242,1738,1,0,0,0,244,1746,1,0,0,0,246,1754,1,0,0,0,248,1762,
        1,0,0,0,250,1770,1,0,0,0,252,1778,1,0,0,0,254,1786,1,0,0,0,256,1796,
        1,0,0,0,258,1806,1,0,0,0,260,1818,1,0,0,0,262,1828,1,0,0,0,264,1833,
        1,0,0,0,266,1836,1,0,0,0,268,1838,1,0,0,0,270,1857,1,0,0,0,272,1907,
        1,0,0,0,274,1909,1,0,0,0,276,1917,1,0,0,0,278,1925,1,0,0,0,280,1933,
        1,0,0,0,282,1941,1,0,0,0,284,1949,1,0,0,0,286,1957,1,0,0,0,288,1965,
        1,0,0,0,290,1973,1,0,0,0,292,1981,1,0,0,0,294,1988,1,0,0,0,296,1995,
        1,0,0,0,298,2003,1,0,0,0,300,2011,1,0,0,0,302,2019,1,0,0,0,304,2027,
        1,0,0,0,306,2034,1,0,0,0,308,2041,1,0,0,0,310,2048,1,0,0,0,312,2056,
        1,0,0,0,314,2067,1,0,0,0,316,2078,1,0,0,0,318,2085,1,0,0,0,320,2171,
        1,0,0,0,322,2174,1,0,0,0,324,2177,1,0,0,0,326,2229,1,0,0,0,328,2285,
        1,0,0,0,330,2287,1,0,0,0,332,2292,1,0,0,0,334,2311,1,0,0,0,336,2313,
        1,0,0,0,338,2327,1,0,0,0,340,2347,1,0,0,0,342,2349,1,0,0,0,344,2356,
        1,0,0,0,346,2363,1,0,0,0,348,2370,1,0,0,0,350,2377,1,0,0,0,352,2384,
        1,0,0,0,354,2391,1,0,0,0,356,2398,1,0,0,0,358,2405,1,0,0,0,360,2412,
        1,0,0,0,362,2419,1,0,0,0,364,2426,1,0,0,0,366,2433,1,0,0,0,368,2440,
        1,0,0,0,370,2448,1,0,0,0,372,2457,1,0,0,0,374,2462,1,0,0,0,376,2473,
        1,0,0,0,378,2479,1,0,0,0,380,2490,1,0,0,0,382,2505,1,0,0,0,384,2507,
        1,0,0,0,386,2514,1,0,0,0,388,2521,1,0,0,0,390,2524,1,0,0,0,392,2526,
        1,0,0,0,394,2544,1,0,0,0,396,2546,1,0,0,0,398,2554,1,0,0,0,400,2573,
        1,0,0,0,402,2590,1,0,0,0,404,2592,1,0,0,0,406,2597,1,0,0,0,408,2608,
        1,0,0,0,410,2620,1,0,0,0,412,2622,1,0,0,0,414,2632,1,0,0,0,416,2638,
        1,0,0,0,418,2647,1,0,0,0,420,2658,1,0,0,0,422,2661,1,0,0,0,424,2679,
        1,0,0,0,426,2684,1,0,0,0,428,2694,1,0,0,0,430,2702,1,0,0,0,432,2709,
        1,0,0,0,434,2717,1,0,0,0,436,2719,1,0,0,0,438,2728,1,0,0,0,440,2730,
        1,0,0,0,442,2743,1,0,0,0,444,2752,1,0,0,0,446,2754,1,0,0,0,448,2757,
        1,0,0,0,450,2763,1,0,0,0,452,2766,1,0,0,0,454,2768,1,0,0,0,456,2780,
        1,0,0,0,458,2782,1,0,0,0,460,2818,1,0,0,0,462,2820,1,0,0,0,464,2826,
        1,0,0,0,466,2828,1,0,0,0,468,2871,1,0,0,0,470,2873,1,0,0,0,472,2879,
        1,0,0,0,474,2881,1,0,0,0,476,2900,1,0,0,0,478,2902,1,0,0,0,480,2908,
        1,0,0,0,482,2910,1,0,0,0,484,2927,1,0,0,0,486,2929,1,0,0,0,488,2935,
        1,0,0,0,490,2937,1,0,0,0,492,2953,1,0,0,0,494,2955,1,0,0,0,496,2961,
        1,0,0,0,498,2963,1,0,0,0,500,2988,1,0,0,0,502,2990,1,0,0,0,504,2996,
        1,0,0,0,506,2998,1,0,0,0,508,3030,1,0,0,0,510,3032,1,0,0,0,512,3038,
        1,0,0,0,514,3040,1,0,0,0,516,3055,1,0,0,0,518,3057,1,0,0,0,520,3063,
        1,0,0,0,522,3065,1,0,0,0,524,3081,1,0,0,0,526,3083,1,0,0,0,528,3089,
        1,0,0,0,530,3091,1,0,0,0,532,3104,1,0,0,0,534,3106,1,0,0,0,536,3112,
        1,0,0,0,538,3114,1,0,0,0,540,3130,1,0,0,0,542,3132,1,0,0,0,544,3138,
        1,0,0,0,546,3140,1,0,0,0,548,3159,1,0,0,0,550,3161,1,0,0,0,552,3167,
        1,0,0,0,554,3169,1,0,0,0,556,3184,1,0,0,0,558,3186,1,0,0,0,560,3192,
        1,0,0,0,562,3194,1,0,0,0,564,3215,1,0,0,0,566,3217,1,0,0,0,568,3223,
        1,0,0,0,570,3225,1,0,0,0,572,3264,1,0,0,0,574,3266,1,0,0,0,576,3272,
        1,0,0,0,578,3274,1,0,0,0,580,3289,1,0,0,0,582,3291,1,0,0,0,584,3297,
        1,0,0,0,586,3299,1,0,0,0,588,3314,1,0,0,0,590,3316,1,0,0,0,592,3322,
        1,0,0,0,594,3324,1,0,0,0,596,3340,1,0,0,0,598,3342,1,0,0,0,600,3348,
        1,0,0,0,602,3350,1,0,0,0,604,3370,1,0,0,0,606,3372,1,0,0,0,608,3378,
        1,0,0,0,610,3380,1,0,0,0,612,3393,1,0,0,0,614,3395,1,0,0,0,616,3401,
        1,0,0,0,618,3403,1,0,0,0,620,3418,1,0,0,0,622,3420,1,0,0,0,624,3426,
        1,0,0,0,626,3428,1,0,0,0,628,3449,1,0,0,0,630,3451,1,0,0,0,632,3457,
        1,0,0,0,634,3459,1,0,0,0,636,3477,1,0,0,0,638,3479,1,0,0,0,640,3485,
        1,0,0,0,642,3487,1,0,0,0,644,3503,1,0,0,0,646,3505,1,0,0,0,648,3511,
        1,0,0,0,650,3513,1,0,0,0,652,3529,1,0,0,0,654,3531,1,0,0,0,656,3537,
        1,0,0,0,658,3539,1,0,0,0,660,3555,1,0,0,0,662,3557,1,0,0,0,664,3560,
        1,0,0,0,666,3563,1,0,0,0,668,3566,1,0,0,0,670,3569,1,0,0,0,672,3572,
        1,0,0,0,674,3575,1,0,0,0,676,3578,1,0,0,0,678,3581,1,0,0,0,680,3584,
        1,0,0,0,682,3587,1,0,0,0,684,3590,1,0,0,0,686,3595,1,0,0,0,688,3597,
        1,0,0,0,690,3600,1,0,0,0,692,3603,1,0,0,0,694,3606,1,0,0,0,696,3609,
        1,0,0,0,698,3612,1,0,0,0,700,3615,1,0,0,0,702,3618,1,0,0,0,704,3620,
        1,0,0,0,706,3633,1,0,0,0,708,3637,1,0,0,0,710,3641,1,0,0,0,712,3645,
        1,0,0,0,714,3649,1,0,0,0,716,3651,1,0,0,0,718,3655,1,0,0,0,720,3659,
        1,0,0,0,722,3665,1,0,0,0,724,3668,1,0,0,0,726,3670,1,0,0,0,728,3680,
        1,0,0,0,730,3691,1,0,0,0,732,3695,1,0,0,0,734,3697,1,0,0,0,736,3708,
        1,0,0,0,738,3711,1,0,0,0,740,3724,1,0,0,0,742,3732,1,0,0,0,744,3734,
        1,0,0,0,746,3758,1,0,0,0,748,3760,1,0,0,0,750,3763,1,0,0,0,752,3806,
        1,0,0,0,754,3809,1,0,0,0,756,3817,1,0,0,0,758,3827,1,0,0,0,760,3830,
        1,0,0,0,762,3832,1,0,0,0,764,3835,1,0,0,0,766,3838,1,0,0,0,768,3840,
        1,0,0,0,770,3863,1,0,0,0,772,3867,1,0,0,0,774,3870,1,0,0,0,776,3872,
        1,0,0,0,778,3882,1,0,0,0,780,3884,1,0,0,0,782,3887,1,0,0,0,784,3889,
        1,0,0,0,786,3951,1,0,0,0,788,3954,1,0,0,0,790,3958,1,0,0,0,792,3960,
        1,0,0,0,794,3971,1,0,0,0,796,3973,1,0,0,0,798,3976,1,0,0,0,800,3978,
        1,0,0,0,802,3981,1,0,0,0,804,3983,1,0,0,0,806,3989,1,0,0,0,808,3991,
        1,0,0,0,810,4001,1,0,0,0,812,4007,1,0,0,0,814,4009,1,0,0,0,816,4019,
        1,0,0,0,818,4022,1,0,0,0,820,4024,1,0,0,0,822,4053,1,0,0,0,824,4061,
        1,0,0,0,826,4063,1,0,0,0,828,4081,1,0,0,0,830,4084,1,0,0,0,832,4086,
        1,0,0,0,834,4089,1,0,0,0,836,4091,1,0,0,0,838,4109,1,0,0,0,840,4111,
        1,0,0,0,842,4114,1,0,0,0,844,4123,1,0,0,0,846,4131,1,0,0,0,848,4133,
        1,0,0,0,850,4135,1,0,0,0,852,4137,1,0,0,0,854,857,3,270,135,0,855,
        857,3,400,200,0,856,854,1,0,0,0,856,855,1,0,0,0,857,1,1,0,0,0,858,
        859,3,4,2,0,859,3,1,0,0,0,860,862,3,6,3,0,861,860,1,0,0,0,861,862,
        1,0,0,0,862,5,1,0,0,0,863,864,6,3,-1,0,864,865,3,8,4,0,865,870,1,
        0,0,0,866,867,10,1,0,0,867,869,3,8,4,0,868,866,1,0,0,0,869,872,1,
        0,0,0,870,868,1,0,0,0,870,871,1,0,0,0,871,7,1,0,0,0,872,870,1,0,
        0,0,873,889,3,10,5,0,874,889,3,12,6,0,875,889,3,14,7,0,876,889,3,
        16,8,0,877,889,3,18,9,0,878,889,3,22,11,0,879,889,3,24,12,0,880,
        889,3,36,18,0,881,889,3,40,20,0,882,889,3,42,21,0,883,889,3,56,28,
        0,884,889,3,58,29,0,885,889,3,66,33,0,886,889,3,74,37,0,887,889,
        3,76,38,0,888,873,1,0,0,0,888,874,1,0,0,0,888,875,1,0,0,0,888,876,
        1,0,0,0,888,877,1,0,0,0,888,878,1,0,0,0,888,879,1,0,0,0,888,880,
        1,0,0,0,888,881,1,0,0,0,888,882,1,0,0,0,888,883,1,0,0,0,888,884,
        1,0,0,0,888,885,1,0,0,0,888,886,1,0,0,0,888,887,1,0,0,0,889,9,1,
        0,0,0,890,891,5,324,0,0,891,892,5,2,0,0,892,893,3,160,80,0,893,11,
        1,0,0,0,894,895,5,345,0,0,895,896,5,89,0,0,896,897,5,2,0,0,897,903,
        3,160,80,0,898,899,5,345,0,0,899,900,5,352,0,0,900,901,5,2,0,0,901,
        903,3,160,80,0,902,894,1,0,0,0,902,898,1,0,0,0,903,13,1,0,0,0,904,
        905,5,230,0,0,905,906,5,47,0,0,906,907,3,160,80,0,907,15,1,0,0,0,
        908,909,3,80,40,0,909,910,5,2,0,0,910,911,5,356,0,0,911,912,3,124,
        62,0,912,919,1,0,0,0,913,914,3,80,40,0,914,915,5,2,0,0,915,916,5,
        356,0,0,916,917,3,92,46,0,917,919,1,0,0,0,918,908,1,0,0,0,918,913,
        1,0,0,0,919,17,1,0,0,0,920,921,3,86,43,0,921,922,5,2,0,0,922,923,
        5,80,0,0,923,924,3,20,10,0,924,19,1,0,0,0,925,926,7,0,0,0,926,21,
        1,0,0,0,927,928,3,78,39,0,928,929,5,2,0,0,929,930,3,804,402,0,930,
        932,3,830,415,0,931,933,3,852,426,0,932,931,1,0,0,0,932,933,1,0,
        0,0,933,934,1,0,0,0,934,936,3,760,380,0,935,937,3,846,423,0,936,
        935,1,0,0,0,936,937,1,0,0,0,937,939,1,0,0,0,938,940,3,850,425,0,
        939,938,1,0,0,0,939,940,1,0,0,0,940,941,1,0,0,0,941,942,3,106,53,
        0,942,943,3,26,13,0,943,944,3,28,14,0,944,945,3,92,46,0,945,946,
        3,30,15,0,946,947,3,782,391,0,947,23,1,0,0,0,948,949,3,78,39,0,949,
        950,5,2,0,0,950,951,3,798,399,0,951,953,3,830,415,0,952,954,3,852,
        426,0,953,952,1,0,0,0,953,954,1,0,0,0,954,955,1,0,0,0,955,957,3,
        760,380,0,956,958,3,846,423,0,957,956,1,0,0,0,957,958,1,0,0,0,958,
        960,1,0,0,0,959,961,3,850,425,0,960,959,1,0,0,0,960,961,1,0,0,0,
        961,962,1,0,0,0,962,963,3,106,53,0,963,964,3,26,13,0,964,965,3,28,
        14,0,965,966,3,92,46,0,966,967,3,138,69,0,967,968,3,30,15,0,968,
        969,3,782,391,0,969,25,1,0,0,0,970,972,5,142,0,0,971,970,1,0,0,0,
        971,972,1,0,0,0,972,27,1,0,0,0,973,974,7,1,0,0,974,29,1,0,0,0,975,
        976,5,5,0,0,976,978,3,32,16,0,977,975,1,0,0,0,977,978,1,0,0,0,978,
        31,1,0,0,0,979,980,6,16,-1,0,980,981,3,34,17,0,981,987,1,0,0,0,982,
        983,10,1,0,0,983,984,5,5,0,0,984,986,3,34,17,0,985,982,1,0,0,0,986,
        989,1,0,0,0,987,985,1,0,0,0,987,988,1,0,0,0,988,33,1,0,0,0,989,987,
        1,0,0,0,990,995,3,840,420,0,991,995,3,756,378,0,992,995,3,738,369,
        0,993,995,3,448,224,0,994,990,1,0,0,0,994,991,1,0,0,0,994,992,1,
        0,0,0,994,993,1,0,0,0,995,35,1,0,0,0,996,997,3,78,39,0,997,998,5,
        2,0,0,998,999,3,804,402,0,999,1001,3,830,415,0,1000,1002,3,852,426,
        0,1001,1000,1,0,0,0,1001,1002,1,0,0,0,1002,1003,1,0,0,0,1003,1005,
        3,760,380,0,1004,1006,3,846,423,0,1005,1004,1,0,0,0,1005,1006,1,
        0,0,0,1006,1008,1,0,0,0,1007,1009,3,850,425,0,1008,1007,1,0,0,0,
        1008,1009,1,0,0,0,1009,1010,1,0,0,0,1010,1011,3,38,19,0,1011,1012,
        3,92,46,0,1012,1013,5,5,0,0,1013,1014,3,92,46,0,1014,1015,3,138,
        69,0,1015,1037,1,0,0,0,1016,1017,3,78,39,0,1017,1018,5,2,0,0,1018,
        1019,3,798,399,0,1019,1021,3,830,415,0,1020,1022,3,852,426,0,1021,
        1020,1,0,0,0,1021,1022,1,0,0,0,1022,1023,1,0,0,0,1023,1025,3,760,
        380,0,1024,1026,3,846,423,0,1025,1024,1,0,0,0,1025,1026,1,0,0,0,
        1026,1028,1,0,0,0,1027,1029,3,850,425,0,1028,1027,1,0,0,0,1028,1029,
        1,0,0,0,1029,1030,1,0,0,0,1030,1031,3,38,19,0,1031,1032,3,92,46,
        0,1032,1033,5,5,0,0,1033,1034,3,92,46,0,1034,1035,3,138,69,0,1035,
        1037,1,0,0,0,1036,996,1,0,0,0,1036,1016,1,0,0,0,1037,37,1,0,0,0,
        1038,1039,7,2,0,0,1039,39,1,0,0,0,1040,1041,5,92,0,0,1041,1042,3,
        452,226,0,1042,1043,3,802,401,0,1043,1044,3,44,22,0,1044,41,1,0,
        0,0,1045,1046,5,94,0,0,1046,1047,3,798,399,0,1047,1048,3,44,22,0,
        1048,1049,3,452,226,0,1049,1050,3,54,27,0,1050,43,1,0,0,0,1051,1053,
        3,830,415,0,1052,1054,3,852,426,0,1053,1052,1,0,0,0,1053,1054,1,
        0,0,0,1054,1055,1,0,0,0,1055,1056,3,760,380,0,1056,1057,3,750,375,
        0,1057,1058,3,834,417,0,1058,1059,3,92,46,0,1059,1060,3,78,39,0,
        1060,1061,5,8,0,0,1061,1062,3,824,412,0,1062,1064,5,9,0,0,1063,1065,
        3,850,425,0,1064,1063,1,0,0,0,1064,1065,1,0,0,0,1065,1066,1,0,0,
        0,1066,1068,3,782,391,0,1067,1069,3,840,420,0,1068,1067,1,0,0,0,
        1068,1069,1,0,0,0,1069,1070,1,0,0,0,1070,1071,3,754,377,0,1071,1072,
        3,46,23,0,1072,1073,3,48,24,0,1073,1074,3,50,25,0,1074,1075,3,52,
        26,0,1075,45,1,0,0,0,1076,1077,5,169,0,0,1077,1079,3,160,80,0,1078,
        1076,1,0,0,0,1078,1079,1,0,0,0,1079,47,1,0,0,0,1080,1081,5,279,0,
        0,1081,1082,3,92,46,0,1082,1083,3,138,69,0,1083,1085,1,0,0,0,1084,
        1080,1,0,0,0,1084,1085,1,0,0,0,1085,49,1,0,0,0,1086,1087,5,284,0,
        0,1087,1088,3,92,46,0,1088,1089,3,138,69,0,1089,1091,1,0,0,0,1090,
        1086,1,0,0,0,1090,1091,1,0,0,0,1091,51,1,0,0,0,1092,1093,5,276,0,
        0,1093,1094,3,92,46,0,1094,1095,3,138,69,0,1095,1097,1,0,0,0,1096,
        1092,1,0,0,0,1096,1097,1,0,0,0,1097,53,1,0,0,0,1098,1099,5,12,0,
        0,1099,1100,3,260,130,0,1100,1101,3,70,35,0,1101,1102,5,13,0,0,1102,
        55,1,0,0,0,1103,1104,5,51,0,0,1104,1105,3,84,42,0,1105,1106,5,2,
        0,0,1106,1107,5,12,0,0,1107,1108,3,782,391,0,1108,1109,5,13,0,0,
        1109,57,1,0,0,0,1110,1111,3,88,44,0,1111,1112,5,2,0,0,1112,1113,
        5,6,0,0,1113,1114,5,12,0,0,1114,1115,3,60,30,0,1115,1116,5,13,0,
        0,1116,59,1,0,0,0,1117,1119,3,62,31,0,1118,1117,1,0,0,0,1118,1119,
        1,0,0,0,1119,61,1,0,0,0,1120,1121,6,31,-1,0,1121,1122,3,64,32,0,
        1122,1128,1,0,0,0,1123,1124,10,1,0,0,1124,1125,5,5,0,0,1125,1127,
        3,64,32,0,1126,1123,1,0,0,0,1127,1130,1,0,0,0,1128,1126,1,0,0,0,
        1128,1129,1,0,0,0,1129,63,1,0,0,0,1130,1128,1,0,0,0,1131,1134,3,
        90,45,0,1132,1134,3,606,303,0,1133,1131,1,0,0,0,1133,1132,1,0,0,
        0,1134,65,1,0,0,0,1135,1136,3,90,45,0,1136,1137,5,2,0,0,1137,1138,
        3,68,34,0,1138,1139,3,436,218,0,1139,1146,1,0,0,0,1140,1141,3,90,
        45,0,1141,1142,5,2,0,0,1142,1143,3,68,34,0,1143,1144,3,460,230,0,
        1144,1146,1,0,0,0,1145,1135,1,0,0,0,1145,1140,1,0,0,0,1146,67,1,
        0,0,0,1147,1149,5,118,0,0,1148,1147,1,0,0,0,1148,1149,1,0,0,0,1149,
        69,1,0,0,0,1150,1152,3,72,36,0,1151,1150,1,0,0,0,1151,1152,1,0,0,
        0,1152,71,1,0,0,0,1153,1154,6,36,-1,0,1154,1155,3,74,37,0,1155,1160,
        1,0,0,0,1156,1157,10,1,0,0,1157,1159,3,74,37,0,1158,1156,1,0,0,0,
        1159,1162,1,0,0,0,1160,1158,1,0,0,0,1160,1161,1,0,0,0,1161,73,1,
        0,0,0,1162,1160,1,0,0,0,1163,1164,5,376,0,0,1164,1165,3,92,46,0,
        1165,1166,3,128,64,0,1166,1167,5,5,0,0,1167,1168,5,12,0,0,1168,1169,
        3,792,396,0,1169,1170,5,13,0,0,1170,75,1,0,0,0,1171,1172,5,377,0,
        0,1172,1173,3,78,39,0,1173,1174,5,5,0,0,1174,1175,3,80,40,0,1175,
        1176,5,5,0,0,1176,1177,5,12,0,0,1177,1178,3,792,396,0,1178,1179,
        5,13,0,0,1179,77,1,0,0,0,1180,1181,5,439,0,0,1181,79,1,0,0,0,1182,
        1183,5,442,0,0,1183,81,1,0,0,0,1184,1185,5,445,0,0,1185,83,1,0,0,
        0,1186,1187,5,411,0,0,1187,85,1,0,0,0,1188,1189,5,412,0,0,1189,87,
        1,0,0,0,1190,1191,5,413,0,0,1191,89,1,0,0,0,1192,1193,5,414,0,0,
        1193,91,1,0,0,0,1194,1195,6,46,-1,0,1195,1199,3,96,48,0,1196,1199,
        3,94,47,0,1197,1199,3,116,58,0,1198,1194,1,0,0,0,1198,1196,1,0,0,
        0,1198,1197,1,0,0,0,1199,1211,1,0,0,0,1200,1201,10,3,0,0,1201,1202,
        5,8,0,0,1202,1203,3,824,412,0,1203,1204,5,9,0,0,1204,1210,1,0,0,
        0,1205,1206,10,1,0,0,1206,1207,3,106,53,0,1207,1208,5,14,0,0,1208,
        1210,1,0,0,0,1209,1200,1,0,0,0,1209,1205,1,0,0,0,1210,1213,1,0,0,
        0,1211,1209,1,0,0,0,1211,1212,1,0,0,0,1212,93,1,0,0,0,1213,1211,
        1,0,0,0,1214,1224,3,98,49,0,1215,1224,3,100,50,0,1216,1224,3,110,
        55,0,1217,1224,3,112,56,0,1218,1224,3,118,59,0,1219,1224,3,120,60,
        0,1220,1224,3,126,63,0,1221,1224,3,104,52,0,1222,1224,3,114,57,0,
        1223,1214,1,0,0,0,1223,1215,1,0,0,0,1223,1216,1,0,0,0,1223,1217,
        1,0,0,0,1223,1218,1,0,0,0,1223,1219,1,0,0,0,1223,1220,1,0,0,0,1223,
        1221,1,0,0,0,1223,1222,1,0,0,0,1224,95,1,0,0,0,1225,1226,5,385,0,
        0,1226,97,1,0,0,0,1227,1228,5,434,0,0,1228,99,1,0,0,0,1229,1230,
        3,102,51,0,1230,101,1,0,0,0,1231,1232,7,3,0,0,1232,103,1,0,0,0,1233,
        1234,5,398,0,0,1234,105,1,0,0,0,1235,1237,3,108,54,0,1236,1235,1,
        0,0,0,1236,1237,1,0,0,0,1237,107,1,0,0,0,1238,1239,5,18,0,0,1239,
        1240,5,8,0,0,1240,1241,5,424,0,0,1241,1242,5,9,0,0,1242,109,1,0,
        0,0,1243,1244,5,1,0,0,1244,1245,5,424,0,0,1245,1246,5,393,0,0,1246,
        1247,3,92,46,0,1247,1248,5,3,0,0,1248,111,1,0,0,0,1249,1250,5,210,
        0,0,1250,113,1,0,0,0,1251,1252,5,351,0,0,1252,115,1,0,0,0,1253,1254,
        5,227,0,0,1254,117,1,0,0,0,1255,1256,5,10,0,0,1256,1257,5,424,0,
        0,1257,1258,5,393,0,0,1258,1259,3,92,46,0,1259,1260,5,11,0,0,1260,
        119,1,0,0,0,1261,1262,5,12,0,0,1262,1278,5,13,0,0,1263,1264,5,12,
        0,0,1264,1265,3,122,61,0,1265,1266,5,13,0,0,1266,1278,1,0,0,0,1267,
        1268,5,1,0,0,1268,1269,5,12,0,0,1269,1270,5,13,0,0,1270,1278,5,3,
        0,0,1271,1272,5,1,0,0,1272,1273,5,12,0,0,1273,1274,3,122,61,0,1274,
        1275,5,13,0,0,1275,1276,5,3,0,0,1276,1278,1,0,0,0,1277,1261,1,0,
        0,0,1277,1263,1,0,0,0,1277,1267,1,0,0,0,1277,1271,1,0,0,0,1278,121,
        1,0,0,0,1279,1280,6,61,-1,0,1280,1281,3,92,46,0,1281,1287,1,0,0,
        0,1282,1283,10,1,0,0,1283,1284,5,5,0,0,1284,1286,3,92,46,0,1285,
        1282,1,0,0,0,1286,1289,1,0,0,0,1287,1285,1,0,0,0,1287,1288,1,0,0,
        0,1288,123,1,0,0,0,1289,1287,1,0,0,0,1290,1291,5,270,0,0,1291,125,
        1,0,0,0,1292,1293,3,80,40,0,1293,127,1,0,0,0,1294,1298,3,138,69,
        0,1295,1298,3,80,40,0,1296,1298,3,130,65,0,1297,1294,1,0,0,0,1297,
        1295,1,0,0,0,1297,1296,1,0,0,0,1298,129,1,0,0,0,1299,1300,5,47,0,
        0,1300,1301,3,132,66,0,1301,1302,3,134,67,0,1302,1303,3,136,68,0,
        1303,1304,3,160,80,0,1304,1305,5,5,0,0,1305,1306,3,160,80,0,1306,
        131,1,0,0,0,1307,1309,5,318,0,0,1308,1307,1,0,0,0,1308,1309,1,0,
        0,0,1309,133,1,0,0,0,1310,1312,5,24,0,0,1311,1310,1,0,0,0,1311,1312,
        1,0,0,0,1312,135,1,0,0,0,1313,1315,5,199,0,0,1314,1313,1,0,0,0,1314,
        1315,1,0,0,0,1315,137,1,0,0,0,1316,1331,3,140,70,0,1317,1331,3,144,
        72,0,1318,1331,3,148,74,0,1319,1331,3,150,75,0,1320,1331,3,152,76,
        0,1321,1331,3,154,77,0,1322,1331,3,156,78,0,1323,1331,3,158,79,0,
        1324,1331,3,162,81,0,1325,1331,3,164,82,0,1326,1331,3,78,39,0,1327,
        1331,3,166,83,0,1328,1331,3,168,84,0,1329,1331,3,170,85,0,1330,1316,
        1,0,0,0,1330,1317,1,0,0,0,1330,1318,1,0,0,0,1330,1319,1,0,0,0,1330,
        1320,1,0,0,0,1330,1321,1,0,0,0,1330,1322,1,0,0,0,1330,1323,1,0,0,
        0,1330,1324,1,0,0,0,1330,1325,1,0,0,0,1330,1326,1,0,0,0,1330,1327,
        1,0,0,0,1330,1328,1,0,0,0,1330,1329,1,0,0,0,1331,139,1,0,0,0,1332,
        1333,3,142,71,0,1333,141,1,0,0,0,1334,1335,7,4,0,0,1335,143,1,0,
        0,0,1336,1337,5,424,0,0,1337,145,1,0,0,0,1338,1339,5,424,0,0,1339,
        147,1,0,0,0,1340,1341,5,427,0,0,1341,149,1,0,0,0,1342,1343,5,261,
        0,0,1343,151,1,0,0,0,1344,1345,5,251,0,0,1345,153,1,0,0,0,1346,1347,
        5,12,0,0,1347,1363,5,13,0,0,1348,1349,5,12,0,0,1349,1350,3,734,367,
        0,1350,1351,5,13,0,0,1351,1363,1,0,0,0,1352,1353,5,1,0,0,1353,1354,
        5,12,0,0,1354,1355,5,13,0,0,1355,1363,5,3,0,0,1356,1357,5,1,0,0,
        1357,1358,5,12,0,0,1358,1359,3,734,367,0,1359,1360,5,13,0,0,1360,
        1361,5,3,0,0,1361,1363,1,0,0,0,1362,1346,1,0,0,0,1362,1348,1,0,0,
        0,1362,1352,1,0,0,0,1362,1356,1,0,0,0,1363,155,1,0,0,0,1364,1365,
        5,10,0,0,1365,1366,3,732,366,0,1366,1367,5,11,0,0,1367,157,1,0,0,
        0,1368,1369,5,61,0,0,1369,1370,3,160,80,0,1370,159,1,0,0,0,1371,
        1372,5,432,0,0,1372,161,1,0,0,0,1373,1374,5,1,0,0,1374,1375,3,732,
        366,0,1375,1376,5,3,0,0,1376,163,1,0,0,0,1377,1378,5,406,0,0,1378,
        165,1,0,0,0,1379,1380,5,367,0,0,1380,167,1,0,0,0,1381,1382,5,57,
        0,0,1382,1383,5,8,0,0,1383,1384,3,78,39,0,1384,1385,5,5,0,0,1385,
        1386,3,80,40,0,1386,1387,5,9,0,0,1387,169,1,0,0,0,1388,1429,3,172,
        86,0,1389,1429,3,174,87,0,1390,1429,3,176,88,0,1391,1429,3,178,89,
        0,1392,1429,3,180,90,0,1393,1429,3,182,91,0,1394,1429,3,184,92,0,
        1395,1429,3,186,93,0,1396,1429,3,188,94,0,1397,1429,3,190,95,0,1398,
        1429,3,192,96,0,1399,1429,3,194,97,0,1400,1429,3,196,98,0,1401,1429,
        3,198,99,0,1402,1429,3,200,100,0,1403,1429,3,202,101,0,1404,1429,
        3,204,102,0,1405,1429,3,206,103,0,1406,1429,3,208,104,0,1407,1429,
        3,210,105,0,1408,1429,3,212,106,0,1409,1429,3,214,107,0,1410,1429,
        3,216,108,0,1411,1429,3,218,109,0,1412,1429,3,228,114,0,1413,1429,
        3,230,115,0,1414,1429,3,232,116,0,1415,1429,3,234,117,0,1416,1429,
        3,236,118,0,1417,1429,3,238,119,0,1418,1429,3,240,120,0,1419,1429,
        3,242,121,0,1420,1429,3,244,122,0,1421,1429,3,246,123,0,1422,1429,
        3,248,124,0,1423,1429,3,250,125,0,1424,1429,3,252,126,0,1425,1429,
        3,254,127,0,1426,1429,3,256,128,0,1427,1429,3,258,129,0,1428,1388,
        1,0,0,0,1428,1389,1,0,0,0,1428,1390,1,0,0,0,1428,1391,1,0,0,0,1428,
        1392,1,0,0,0,1428,1393,1,0,0,0,1428,1394,1,0,0,0,1428,1395,1,0,0,
        0,1428,1396,1,0,0,0,1428,1397,1,0,0,0,1428,1398,1,0,0,0,1428,1399,
        1,0,0,0,1428,1400,1,0,0,0,1428,1401,1,0,0,0,1428,1402,1,0,0,0,1428,
        1403,1,0,0,0,1428,1404,1,0,0,0,1428,1405,1,0,0,0,1428,1406,1,0,0,
        0,1428,1407,1,0,0,0,1428,1408,1,0,0,0,1428,1409,1,0,0,0,1428,1410,
        1,0,0,0,1428,1411,1,0,0,0,1428,1412,1,0,0,0,1428,1413,1,0,0,0,1428,
        1414,1,0,0,0,1428,1415,1,0,0,0,1428,1416,1,0,0,0,1428,1417,1,0,0,
        0,1428,1418,1,0,0,0,1428,1419,1,0,0,0,1428,1420,1,0,0,0,1428,1421,
        1,0,0,0,1428,1422,1,0,0,0,1428,1423,1,0,0,0,1428,1424,1,0,0,0,1428,
        1425,1,0,0,0,1428,1426,1,0,0,0,1428,1427,1,0,0,0,1429,171,1,0,0,
        0,1430,1431,5,17,0,0,1431,1432,3,812,406,0,1432,1433,5,8,0,0,1433,
        1434,3,92,46,0,1434,1435,3,138,69,0,1435,1436,5,5,0,0,1436,1437,
        3,92,46,0,1437,1438,3,138,69,0,1438,1439,5,9,0,0,1439,173,1,0,0,
        0,1440,1441,5,147,0,0,1441,1442,5,8,0,0,1442,1443,3,92,46,0,1443,
        1444,3,138,69,0,1444,1445,5,5,0,0,1445,1446,3,92,46,0,1446,1447,
        3,138,69,0,1447,1448,5,9,0,0,1448,175,1,0,0,0,1449,1450,5,337,0,
        0,1450,1451,3,812,406,0,1451,1452,5,8,0,0,1452,1453,3,92,46,0,1453,
        1454,3,138,69,0,1454,1455,5,5,0,0,1455,1456,3,92,46,0,1456,1457,
        3,138,69,0,1457,1458,5,9,0,0,1458,177,1,0,0,0,1459,1460,5,167,0,
        0,1460,1461,5,8,0,0,1461,1462,3,92,46,0,1462,1463,3,138,69,0,1463,
        1464,5,5,0,0,1464,1465,3,92,46,0,1465,1466,3,138,69,0,1466,1467,
        5,9,0,0,1467,179,1,0,0,0,1468,1469,5,233,0,0,1469,1470,3,812,406,
        0,1470,1471,5,8,0,0,1471,1472,3,92,46,0,1472,1473,3,138,69,0,1473,
        1474,5,5,0,0,1474,1475,3,92,46,0,1475,1476,3,138,69,0,1476,1477,
        5,9,0,0,1477,181,1,0,0,0,1478,1479,5,159,0,0,1479,1480,5,8,0,0,1480,
        1481,3,92,46,0,1481,1482,3,138,69,0,1482,1483,5,5,0,0,1483,1484,
        3,92,46,0,1484,1485,3,138,69,0,1485,1486,5,9,0,0,1486,183,1,0,0,
        0,1487,1488,5,358,0,0,1488,1489,3,764,382,0,1489,1490,5,8,0,0,1490,
        1491,3,92,46,0,1491,1492,3,138,69,0,1492,1493,5,5,0,0,1493,1494,
        3,92,46,0,1494,1495,3,138,69,0,1495,1496,5,9,0,0,1496,185,1,0,0,
        0,1497,1498,5,308,0,0,1498,1499,3,764,382,0,1499,1500,5,8,0,0,1500,
        1501,3,92,46,0,1501,1502,3,138,69,0,1502,1503,5,5,0,0,1503,1504,
        3,92,46,0,1504,1505,3,138,69,0,1505,1506,5,9,0,0,1506,187,1,0,0,
        0,1507,1508,5,152,0,0,1508,1509,5,8,0,0,1509,1510,3,92,46,0,1510,
        1511,3,138,69,0,1511,1512,5,5,0,0,1512,1513,3,92,46,0,1513,1514,
        3,138,69,0,1514,1515,5,9,0,0,1515,189,1,0,0,0,1516,1517,5,375,0,
        0,1517,1518,5,8,0,0,1518,1519,3,92,46,0,1519,1520,3,138,69,0,1520,
        1521,5,5,0,0,1521,1522,3,92,46,0,1522,1523,3,138,69,0,1523,1524,
        5,9,0,0,1524,191,1,0,0,0,1525,1526,5,330,0,0,1526,1527,5,8,0,0,1527,
        1528,3,92,46,0,1528,1529,3,138,69,0,1529,1530,5,5,0,0,1530,1531,
        3,92,46,0,1531,1532,3,138,69,0,1532,1533,5,9,0,0,1533,193,1,0,0,
        0,1534,1535,5,165,0,0,1535,1536,5,8,0,0,1536,1537,3,92,46,0,1537,
        1538,3,138,69,0,1538,1539,5,5,0,0,1539,1540,3,92,46,0,1540,1541,
        3,138,69,0,1541,1542,5,9,0,0,1542,195,1,0,0,0,1543,1544,5,316,0,
        0,1544,1545,3,812,406,0,1545,1546,5,8,0,0,1546,1547,3,92,46,0,1547,
        1548,3,138,69,0,1548,1549,5,5,0,0,1549,1550,3,92,46,0,1550,1551,
        3,138,69,0,1551,1552,5,9,0,0,1552,197,1,0,0,0,1553,1554,5,224,0,
        0,1554,1555,3,764,382,0,1555,1556,5,8,0,0,1556,1557,3,92,46,0,1557,
        1558,3,138,69,0,1558,1559,5,5,0,0,1559,1560,3,92,46,0,1560,1561,
        3,138,69,0,1561,1562,5,9,0,0,1562,199,1,0,0,0,1563,1564,5,46,0,0,
        1564,1565,3,764,382,0,1565,1566,5,8,0,0,1566,1567,3,92,46,0,1567,
        1568,3,138,69,0,1568,1569,5,5,0,0,1569,1570,3,92,46,0,1570,1571,
        3,138,69,0,1571,1572,5,9,0,0,1572,201,1,0,0,0,1573,1574,5,36,0,0,
        1574,1575,5,8,0,0,1575,1576,3,92,46,0,1576,1577,3,138,69,0,1577,
        1578,5,5,0,0,1578,1579,3,92,46,0,1579,1580,3,138,69,0,1580,1581,
        5,9,0,0,1581,203,1,0,0,0,1582,1583,5,274,0,0,1583,1584,5,8,0,0,1584,
        1585,3,92,46,0,1585,1586,3,138,69,0,1586,1587,5,5,0,0,1587,1588,
        3,92,46,0,1588,1589,3,138,69,0,1589,1590,5,9,0,0,1590,205,1,0,0,
        0,1591,1592,5,404,0,0,1592,1593,5,8,0,0,1593,1594,3,92,46,0,1594,
        1595,3,138,69,0,1595,1596,5,5,0,0,1596,1597,3,92,46,0,1597,1598,
        3,138,69,0,1598,1599,5,9,0,0,1599,207,1,0,0,0,1600,1601,5,144,0,
        0,1601,1602,5,8,0,0,1602,1603,3,92,46,0,1603,1604,3,138,69,0,1604,
        1605,5,5,0,0,1605,1606,3,92,46,0,1606,1607,3,138,69,0,1607,1608,
        5,9,0,0,1608,209,1,0,0,0,1609,1610,5,197,0,0,1610,1611,5,8,0,0,1611,
        1612,3,92,46,0,1612,1613,3,138,69,0,1613,1614,5,5,0,0,1614,1615,
        3,92,46,0,1615,1616,3,138,69,0,1616,1617,5,5,0,0,1617,1618,3,92,
        46,0,1618,1619,3,138,69,0,1619,1620,5,9,0,0,1620,211,1,0,0,0,1621,
        1622,5,317,0,0,1622,1623,5,8,0,0,1623,1624,3,92,46,0,1624,1625,3,
        138,69,0,1625,1626,5,5,0,0,1626,1627,3,92,46,0,1627,1628,3,138,69,
        0,1628,1629,5,5,0,0,1629,1630,3,92,46,0,1630,1631,3,138,69,0,1631,
        1632,5,9,0,0,1632,213,1,0,0,0,1633,1634,5,145,0,0,1634,1635,5,8,
        0,0,1635,1636,3,92,46,0,1636,1637,3,138,69,0,1637,1638,3,790,395,
        0,1638,1639,5,9,0,0,1639,215,1,0,0,0,1640,1641,5,198,0,0,1641,1642,
        5,8,0,0,1642,1643,3,92,46,0,1643,1644,3,138,69,0,1644,1645,5,5,0,
        0,1645,1646,3,92,46,0,1646,1647,3,138,69,0,1647,1648,3,790,395,0,
        1648,1649,5,9,0,0,1649,217,1,0,0,0,1650,1651,5,171,0,0,1651,1652,
        3,788,394,0,1652,1653,5,8,0,0,1653,1654,3,92,46,0,1654,1655,5,5,
        0,0,1655,1656,3,92,46,0,1656,1657,3,138,69,0,1657,1658,5,5,0,0,1658,
        1659,3,220,110,0,1659,1660,5,9,0,0,1660,219,1,0,0,0,1661,1663,3,
        222,111,0,1662,1661,1,0,0,0,1662,1663,1,0,0,0,1663,221,1,0,0,0,1664,
        1665,6,111,-1,0,1665,1666,3,224,112,0,1666,1672,1,0,0,0,1667,1668,
        10,1,0,0,1668,1669,5,5,0,0,1669,1671,3,224,112,0,1670,1667,1,0,0,
        0,1671,1674,1,0,0,0,1672,1670,1,0,0,0,1672,1673,1,0,0,0,1673,223,
        1,0,0,0,1674,1672,1,0,0,0,1675,1676,3,226,113,0,1676,1677,3,92,46,
        0,1677,1678,3,138,69,0,1678,225,1,0,0,0,1679,1681,5,195,0,0,1680,
        1679,1,0,0,0,1680,1681,1,0,0,0,1681,227,1,0,0,0,1682,1683,5,354,
        0,0,1683,1684,5,8,0,0,1684,1685,3,92,46,0,1685,1686,3,138,69,0,1686,
        1687,5,350,0,0,1687,1688,3,92,46,0,1688,1689,5,9,0,0,1689,229,1,
        0,0,0,1690,1691,5,407,0,0,1691,1692,5,8,0,0,1692,1693,3,92,46,0,
        1693,1694,3,138,69,0,1694,1695,5,350,0,0,1695,1696,3,92,46,0,1696,
        1697,5,9,0,0,1697,231,1,0,0,0,1698,1699,5,313,0,0,1699,1700,5,8,
        0,0,1700,1701,3,92,46,0,1701,1702,3,138,69,0,1702,1703,5,350,0,0,
        1703,1704,3,92,46,0,1704,1705,5,9,0,0,1705,233,1,0,0,0,1706,1707,
        5,164,0,0,1707,1708,5,8,0,0,1708,1709,3,92,46,0,1709,1710,3,138,
        69,0,1710,1711,5,350,0,0,1711,1712,3,92,46,0,1712,1713,5,9,0,0,1713,
        235,1,0,0,0,1714,1715,5,161,0,0,1715,1716,5,8,0,0,1716,1717,3,92,
        46,0,1717,1718,3,138,69,0,1718,1719,5,350,0,0,1719,1720,3,92,46,
        0,1720,1721,5,9,0,0,1721,237,1,0,0,0,1722,1723,5,163,0,0,1723,1724,
        5,8,0,0,1724,1725,3,92,46,0,1725,1726,3,138,69,0,1726,1727,5,350,
        0,0,1727,1728,3,92,46,0,1728,1729,5,9,0,0,1729,239,1,0,0,0,1730,
        1731,5,162,0,0,1731,1732,5,8,0,0,1732,1733,3,92,46,0,1733,1734,3,
        138,69,0,1734,1735,5,350,0,0,1735,1736,3,92,46,0,1736,1737,5,9,0,
        0,1737,241,1,0,0,0,1738,1739,5,362,0,0,1739,1740,5,8,0,0,1740,1741,
        3,92,46,0,1741,1742,3,138,69,0,1742,1743,5,350,0,0,1743,1744,3,92,
        46,0,1744,1745,5,9,0,0,1745,243,1,0,0,0,1746,1747,5,320,0,0,1747,
        1748,5,8,0,0,1748,1749,3,92,46,0,1749,1750,3,138,69,0,1750,1751,
        5,350,0,0,1751,1752,3,92,46,0,1752,1753,5,9,0,0,1753,245,1,0,0,0,
        1754,1755,5,286,0,0,1755,1756,5,8,0,0,1756,1757,3,92,46,0,1757,1758,
        3,138,69,0,1758,1759,5,350,0,0,1759,1760,3,92,46,0,1760,1761,5,9,
        0,0,1761,247,1,0,0,0,1762,1763,5,202,0,0,1763,1764,5,8,0,0,1764,
        1765,3,92,46,0,1765,1766,3,138,69,0,1766,1767,5,350,0,0,1767,1768,
        3,92,46,0,1768,1769,5,9,0,0,1769,249,1,0,0,0,1770,1771,5,56,0,0,
        1771,1772,5,8,0,0,1772,1773,3,92,46,0,1773,1774,3,138,69,0,1774,
        1775,5,350,0,0,1775,1776,3,92,46,0,1776,1777,5,9,0,0,1777,251,1,
        0,0,0,1778,1779,5,19,0,0,1779,1780,5,8,0,0,1780,1781,3,92,46,0,1781,
        1782,3,138,69,0,1782,1783,5,350,0,0,1783,1784,3,92,46,0,1784,1785,
        5,9,0,0,1785,253,1,0,0,0,1786,1787,5,182,0,0,1787,1788,3,796,398,
        0,1788,1789,5,8,0,0,1789,1790,3,92,46,0,1790,1791,3,138,69,0,1791,
        1792,5,5,0,0,1792,1793,3,92,46,0,1793,1794,3,138,69,0,1794,1795,
        5,9,0,0,1795,255,1,0,0,0,1796,1797,5,151,0,0,1797,1798,3,780,390,
        0,1798,1799,5,8,0,0,1799,1800,3,92,46,0,1800,1801,3,138,69,0,1801,
        1802,5,5,0,0,1802,1803,3,92,46,0,1803,1804,3,138,69,0,1804,1805,
        5,9,0,0,1805,257,1,0,0,0,1806,1807,5,310,0,0,1807,1808,5,8,0,0,1808,
        1809,3,92,46,0,1809,1810,3,138,69,0,1810,1811,5,5,0,0,1811,1812,
        3,92,46,0,1812,1813,3,138,69,0,1813,1814,5,5,0,0,1814,1815,3,92,
        46,0,1815,1816,3,138,69,0,1816,1817,5,9,0,0,1817,259,1,0,0,0,1818,
        1819,6,130,-1,0,1819,1820,3,262,131,0,1820,1825,1,0,0,0,1821,1822,
        10,1,0,0,1822,1824,3,262,131,0,1823,1821,1,0,0,0,1824,1827,1,0,0,
        0,1825,1823,1,0,0,0,1825,1826,1,0,0,0,1826,261,1,0,0,0,1827,1825,
        1,0,0,0,1828,1829,3,264,132,0,1829,1830,3,266,133,0,1830,1831,3,
        400,200,0,1831,263,1,0,0,0,1832,1834,3,82,41,0,1833,1832,1,0,0,0,
        1833,1834,1,0,0,0,1834,265,1,0,0,0,1835,1837,3,268,134,0,1836,1835,
        1,0,0,0,1836,1837,1,0,0,0,1837,267,1,0,0,0,1838,1839,6,134,-1,0,
        1839,1840,3,270,135,0,1840,1845,1,0,0,0,1841,1842,10,1,0,0,1842,
        1844,3,270,135,0,1843,1841,1,0,0,0,1844,1847,1,0,0,0,1845,1843,1,
        0,0,0,1845,1846,1,0,0,0,1846,269,1,0,0,0,1847,1845,1,0,0,0,1848,
        1858,3,328,164,0,1849,1858,3,330,165,0,1850,1858,3,332,166,0,1851,
        1858,3,336,168,0,1852,1853,3,80,40,0,1853,1854,5,2,0,0,1854,1855,
        3,272,136,0,1855,1858,1,0,0,0,1856,1858,3,272,136,0,1857,1848,1,
        0,0,0,1857,1849,1,0,0,0,1857,1850,1,0,0,0,1857,1851,1,0,0,0,1857,
        1852,1,0,0,0,1857,1856,1,0,0,0,1858,271,1,0,0,0,1859,1908,3,274,
        137,0,1860,1908,3,276,138,0,1861,1908,3,278,139,0,1862,1908,3,280,
        140,0,1863,1908,3,282,141,0,1864,1908,3,284,142,0,1865,1908,3,286,
        143,0,1866,1908,3,288,144,0,1867,1908,3,290,145,0,1868,1908,3,292,
        146,0,1869,1908,3,294,147,0,1870,1908,3,296,148,0,1871,1908,3,298,
        149,0,1872,1908,3,300,150,0,1873,1908,3,302,151,0,1874,1908,3,304,
        152,0,1875,1908,3,306,153,0,1876,1908,3,308,154,0,1877,1908,3,310,
        155,0,1878,1908,3,312,156,0,1879,1908,3,314,157,0,1880,1908,3,316,
        158,0,1881,1908,3,318,159,0,1882,1908,3,320,160,0,1883,1908,3,326,
        163,0,1884,1908,3,340,170,0,1885,1908,3,342,171,0,1886,1908,3,344,
        172,0,1887,1908,3,346,173,0,1888,1908,3,348,174,0,1889,1908,3,350,
        175,0,1890,1908,3,352,176,0,1891,1908,3,354,177,0,1892,1908,3,356,
        178,0,1893,1908,3,358,179,0,1894,1908,3,360,180,0,1895,1908,3,362,
        181,0,1896,1908,3,364,182,0,1897,1908,3,366,183,0,1898,1908,3,368,
        184,0,1899,1908,3,370,185,0,1900,1908,3,372,186,0,1901,1908,3,378,
        189,0,1902,1908,3,380,190,0,1903,1908,3,384,192,0,1904,1908,3,386,
        193,0,1905,1908,3,396,198,0,1906,1908,3,398,199,0,1907,1859,1,0,
        0,0,1907,1860,1,0,0,0,1907,1861,1,0,0,0,1907,1862,1,0,0,0,1907,1863,
        1,0,0,0,1907,1864,1,0,0,0,1907,1865,1,0,0,0,1907,1866,1,0,0,0,1907,
        1867,1,0,0,0,1907,1868,1,0,0,0,1907,1869,1,0,0,0,1907,1870,1,0,0,
        0,1907,1871,1,0,0,0,1907,1872,1,0,0,0,1907,1873,1,0,0,0,1907,1874,
        1,0,0,0,1907,1875,1,0,0,0,1907,1876,1,0,0,0,1907,1877,1,0,0,0,1907,
        1878,1,0,0,0,1907,1879,1,0,0,0,1907,1880,1,0,0,0,1907,1881,1,0,0,
        0,1907,1882,1,0,0,0,1907,1883,1,0,0,0,1907,1884,1,0,0,0,1907,1885,
        1,0,0,0,1907,1886,1,0,0,0,1907,1887,1,0,0,0,1907,1888,1,0,0,0,1907,
        1889,1,0,0,0,1907,1890,1,0,0,0,1907,1891,1,0,0,0,1907,1892,1,0,0,
        0,1907,1893,1,0,0,0,1907,1894,1,0,0,0,1907,1895,1,0,0,0,1907,1896,
        1,0,0,0,1907,1897,1,0,0,0,1907,1898,1,0,0,0,1907,1899,1,0,0,0,1907,
        1900,1,0,0,0,1907,1901,1,0,0,0,1907,1902,1,0,0,0,1907,1903,1,0,0,
        0,1907,1904,1,0,0,0,1907,1905,1,0,0,0,1907,1906,1,0,0,0,1908,273,
        1,0,0,0,1909,1910,5,17,0,0,1910,1911,3,812,406,0,1911,1912,3,92,
        46,0,1912,1913,3,128,64,0,1913,1914,5,5,0,0,1914,1915,3,128,64,0,
        1915,1916,3,456,228,0,1916,275,1,0,0,0,1917,1918,5,147,0,0,1918,
        1919,3,774,387,0,1919,1920,3,92,46,0,1920,1921,3,128,64,0,1921,1922,
        5,5,0,0,1922,1923,3,128,64,0,1923,1924,3,456,228,0,1924,277,1,0,
        0,0,1925,1926,5,337,0,0,1926,1927,3,812,406,0,1927,1928,3,92,46,
        0,1928,1929,3,128,64,0,1929,1930,5,5,0,0,1930,1931,3,128,64,0,1931,
        1932,3,456,228,0,1932,279,1,0,0,0,1933,1934,5,167,0,0,1934,1935,
        3,774,387,0,1935,1936,3,92,46,0,1936,1937,3,128,64,0,1937,1938,5,
        5,0,0,1938,1939,3,128,64,0,1939,1940,3,456,228,0,1940,281,1,0,0,
        0,1941,1942,5,233,0,0,1942,1943,3,812,406,0,1943,1944,3,92,46,0,
        1944,1945,3,128,64,0,1945,1946,5,5,0,0,1946,1947,3,128,64,0,1947,
        1948,3,456,228,0,1948,283,1,0,0,0,1949,1950,5,159,0,0,1950,1951,
        3,774,387,0,1951,1952,3,92,46,0,1952,1953,3,128,64,0,1953,1954,5,
        5,0,0,1954,1955,3,128,64,0,1955,1956,3,456,228,0,1956,285,1,0,0,
        0,1957,1958,5,358,0,0,1958,1959,3,764,382,0,1959,1960,3,92,46,0,
        1960,1961,3,128,64,0,1961,1962,5,5,0,0,1962,1963,3,128,64,0,1963,
        1964,3,456,228,0,1964,287,1,0,0,0,1965,1966,5,308,0,0,1966,1967,
        3,764,382,0,1967,1968,3,92,46,0,1968,1969,3,128,64,0,1969,1970,5,
        5,0,0,1970,1971,3,128,64,0,1971,1972,3,456,228,0,1972,289,1,0,0,
        0,1973,1974,5,152,0,0,1974,1975,3,774,387,0,1975,1976,3,92,46,0,
        1976,1977,3,128,64,0,1977,1978,5,5,0,0,1978,1979,3,128,64,0,1979,
        1980,3,456,228,0,1980,291,1,0,0,0,1981,1982,5,375,0,0,1982,1983,
        3,92,46,0,1983,1984,3,128,64,0,1984,1985,5,5,0,0,1985,1986,3,128,
        64,0,1986,1987,3,456,228,0,1987,293,1,0,0,0,1988,1989,5,330,0,0,
        1989,1990,3,92,46,0,1990,1991,3,128,64,0,1991,1992,5,5,0,0,1992,
        1993,3,128,64,0,1993,1994,3,456,228,0,1994,295,1,0,0,0,1995,1996,
        5,165,0,0,1996,1997,3,774,387,0,1997,1998,3,92,46,0,1998,1999,3,
        128,64,0,1999,2000,5,5,0,0,2000,2001,3,128,64,0,2001,2002,3,456,
        228,0,2002,297,1,0,0,0,2003,2004,5,316,0,0,2004,2005,3,812,406,0,
        2005,2006,3,92,46,0,2006,2007,3,128,64,0,2007,2008,5,5,0,0,2008,
        2009,3,128,64,0,2009,2010,3,456,228,0,2010,299,1,0,0,0,2011,2012,
        5,224,0,0,2012,2013,3,764,382,0,2013,2014,3,92,46,0,2014,2015,3,
        128,64,0,2015,2016,5,5,0,0,2016,2017,3,128,64,0,2017,2018,3,456,
        228,0,2018,301,1,0,0,0,2019,2020,5,46,0,0,2020,2021,3,764,382,0,
        2021,2022,3,92,46,0,2022,2023,3,128,64,0,2023,2024,5,5,0,0,2024,
        2025,3,128,64,0,2025,2026,3,456,228,0,2026,303,1,0,0,0,2027,2028,
        5,36,0,0,2028,2029,3,92,46,0,2029,2030,3,128,64,0,2030,2031,5,5,
        0,0,2031,2032,3,128,64,0,2032,2033,3,456,228,0,2033,305,1,0,0,0,
        2034,2035,5,274,0,0,2035,2036,3,92,46,0,2036,2037,3,128,64,0,2037,
        2038,5,5,0,0,2038,2039,3,128,64,0,2039,2040,3,456,228,0,2040,307,
        1,0,0,0,2041,2042,5,404,0,0,2042,2043,3,92,46,0,2043,2044,3,128,
        64,0,2044,2045,5,5,0,0,2045,2046,3,128,64,0,2046,2047,3,456,228,
        0,2047,309,1,0,0,0,2048,2049,5,144,0,0,2049,2050,3,92,46,0,2050,
        2051,3,128,64,0,2051,2052,5,5,0,0,2052,2053,3,92,46,0,2053,2054,
        3,128,64,0,2054,2055,3,456,228,0,2055,311,1,0,0,0,2056,2057,5,197,
        0,0,2057,2058,3,92,46,0,2058,2059,3,128,64,0,2059,2060,5,5,0,0,2060,
        2061,3,92,46,0,2061,2062,3,128,64,0,2062,2063,5,5,0,0,2063,2064,
        3,92,46,0,2064,2065,3,128,64,0,2065,2066,3,456,228,0,2066,313,1,
        0,0,0,2067,2068,5,317,0,0,2068,2069,3,92,46,0,2069,2070,3,128,64,
        0,2070,2071,5,5,0,0,2071,2072,3,92,46,0,2072,2073,3,128,64,0,2073,
        2074,5,5,0,0,2074,2075,3,92,46,0,2075,2076,3,128,64,0,2076,2077,
        3,456,228,0,2077,315,1,0,0,0,2078,2079,5,145,0,0,2079,2080,3,92,
        46,0,2080,2081,3,128,64,0,2081,2082,5,5,0,0,2082,2083,3,792,396,
        0,2083,2084,3,456,228,0,2084,317,1,0,0,0,2085,2086,5,198,0,0,2086,
        2087,3,92,46,0,2087,2088,3,128,64,0,2088,2089,5,5,0,0,2089,2090,
        3,92,46,0,2090,2091,3,128,64,0,2091,2092,5,5,0,0,2092,2093,3,792,
        396,0,2093,2094,3,456,228,0,2094,319,1,0,0,0,2095,2096,5,25,0,0,
        2096,2097,3,322,161,0,2097,2098,3,324,162,0,2098,2099,3,92,46,0,
        2099,2100,3,456,228,0,2100,2172,1,0,0,0,2101,2102,5,25,0,0,2102,
        2103,3,322,161,0,2103,2104,3,324,162,0,2104,2105,3,92,46,0,2105,
        2106,5,5,0,0,2106,2107,3,738,369,0,2107,2108,3,456,228,0,2108,2172,
        1,0,0,0,2109,2110,5,25,0,0,2110,2111,3,322,161,0,2111,2112,3,324,
        162,0,2112,2113,3,92,46,0,2113,2114,5,5,0,0,2114,2115,3,92,46,0,
        2115,2116,3,128,64,0,2116,2117,3,456,228,0,2117,2172,1,0,0,0,2118,
        2119,5,25,0,0,2119,2120,3,322,161,0,2120,2121,3,324,162,0,2121,2122,
        3,92,46,0,2122,2123,5,5,0,0,2123,2124,3,92,46,0,2124,2125,3,128,
        64,0,2125,2126,5,5,0,0,2126,2127,3,738,369,0,2127,2128,3,456,228,
        0,2128,2172,1,0,0,0,2129,2130,5,25,0,0,2130,2131,3,322,161,0,2131,
        2132,3,324,162,0,2132,2133,3,92,46,0,2133,2134,5,5,0,0,2134,2135,
        3,108,54,0,2135,2136,3,456,228,0,2136,2172,1,0,0,0,2137,2138,5,25,
        0,0,2138,2139,3,322,161,0,2139,2140,3,324,162,0,2140,2141,3,92,46,
        0,2141,2142,5,5,0,0,2142,2143,3,738,369,0,2143,2144,5,5,0,0,2144,
        2145,3,108,54,0,2145,2146,3,456,228,0,2146,2172,1,0,0,0,2147,2148,
        5,25,0,0,2148,2149,3,322,161,0,2149,2150,3,324,162,0,2150,2151,3,
        92,46,0,2151,2152,5,5,0,0,2152,2153,3,92,46,0,2153,2154,3,128,64,
        0,2154,2155,5,5,0,0,2155,2156,3,108,54,0,2156,2157,3,456,228,0,2157,
        2172,1,0,0,0,2158,2159,5,25,0,0,2159,2160,3,322,161,0,2160,2161,
        3,324,162,0,2161,2162,3,92,46,0,2162,2163,5,5,0,0,2163,2164,3,92,
        46,0,2164,2165,3,128,64,0,2165,2166,5,5,0,0,2166,2167,3,738,369,
        0,2167,2168,5,5,0,0,2168,2169,3,108,54,0,2169,2170,3,456,228,0,2170,
        2172,1,0,0,0,2171,2095,1,0,0,0,2171,2101,1,0,0,0,2171,2109,1,0,0,
        0,2171,2118,1,0,0,0,2171,2129,1,0,0,0,2171,2137,1,0,0,0,2171,2147,
        1,0,0,0,2171,2158,1,0,0,0,2172,321,1,0,0,0,2173,2175,5,188,0,0,2174,
        2173,1,0,0,0,2174,2175,1,0,0,0,2175,323,1,0,0,0,2176,2178,5,339,
        0,0,2177,2176,1,0,0,0,2177,2178,1,0,0,0,2178,325,1,0,0,0,2179,2181,
        5,219,0,0,2180,2182,5,408,0,0,2181,2180,1,0,0,0,2181,2182,1,0,0,
        0,2182,2183,1,0,0,0,2183,2184,3,92,46,0,2184,2185,5,5,0,0,2185,2186,
        3,92,46,0,2186,2187,3,128,64,0,2187,2188,3,456,228,0,2188,2230,1,
        0,0,0,2189,2191,5,219,0,0,2190,2192,5,408,0,0,2191,2190,1,0,0,0,
        2191,2192,1,0,0,0,2192,2193,1,0,0,0,2193,2194,3,92,46,0,2194,2195,
        5,5,0,0,2195,2196,3,92,46,0,2196,2197,3,128,64,0,2197,2198,5,5,0,
        0,2198,2199,3,738,369,0,2199,2200,3,456,228,0,2200,2230,1,0,0,0,
        2201,2202,5,219,0,0,2202,2204,5,48,0,0,2203,2205,5,408,0,0,2204,
        2203,1,0,0,0,2204,2205,1,0,0,0,2205,2206,1,0,0,0,2206,2207,3,92,
        46,0,2207,2208,5,5,0,0,2208,2209,3,92,46,0,2209,2210,3,128,64,0,
        2210,2211,3,844,422,0,2211,2212,3,748,374,0,2212,2213,3,456,228,
        0,2213,2230,1,0,0,0,2214,2215,5,219,0,0,2215,2217,5,48,0,0,2216,
        2218,5,408,0,0,2217,2216,1,0,0,0,2217,2218,1,0,0,0,2218,2219,1,0,
        0,0,2219,2220,3,92,46,0,2220,2221,5,5,0,0,2221,2222,3,92,46,0,2222,
        2223,3,128,64,0,2223,2224,3,844,422,0,2224,2225,3,748,374,0,2225,
        2226,5,5,0,0,2226,2227,3,738,369,0,2227,2228,3,456,228,0,2228,2230,
        1,0,0,0,2229,2179,1,0,0,0,2229,2189,1,0,0,0,2229,2201,1,0,0,0,2229,
        2214,1,0,0,0,2230,327,1,0,0,0,2231,2233,5,335,0,0,2232,2234,5,408,
        0,0,2233,2232,1,0,0,0,2233,2234,1,0,0,0,2234,2235,1,0,0,0,2235,2236,
        3,92,46,0,2236,2237,3,128,64,0,2237,2238,5,5,0,0,2238,2239,3,92,
        46,0,2239,2240,3,128,64,0,2240,2241,3,456,228,0,2241,2286,1,0,0,
        0,2242,2244,5,335,0,0,2243,2245,5,408,0,0,2244,2243,1,0,0,0,2244,
        2245,1,0,0,0,2245,2246,1,0,0,0,2246,2247,3,92,46,0,2247,2248,3,128,
        64,0,2248,2249,5,5,0,0,2249,2250,3,92,46,0,2250,2251,3,128,64,0,
        2251,2252,5,5,0,0,2252,2253,3,738,369,0,2253,2254,3,456,228,0,2254,
        2286,1,0,0,0,2255,2256,5,335,0,0,2256,2258,5,48,0,0,2257,2259,5,
        408,0,0,2258,2257,1,0,0,0,2258,2259,1,0,0,0,2259,2260,1,0,0,0,2260,
        2261,3,92,46,0,2261,2262,3,128,64,0,2262,2263,5,5,0,0,2263,2264,
        3,92,46,0,2264,2265,3,128,64,0,2265,2266,3,844,422,0,2266,2267,3,
        748,374,0,2267,2268,3,456,228,0,2268,2286,1,0,0,0,2269,2270,5,335,
        0,0,2270,2272,5,48,0,0,2271,2273,5,408,0,0,2272,2271,1,0,0,0,2272,
        2273,1,0,0,0,2273,2274,1,0,0,0,2274,2275,3,92,46,0,2275,2276,3,128,
        64,0,2276,2277,5,5,0,0,2277,2278,3,92,46,0,2278,2279,3,128,64,0,
        2279,2280,3,844,422,0,2280,2281,3,748,374,0,2281,2282,5,5,0,0,2282,
        2283,3,738,369,0,2283,2284,3,456,228,0,2284,2286,1,0,0,0,2285,2231,
        1,0,0,0,2285,2242,1,0,0,0,2285,2255,1,0,0,0,2285,2269,1,0,0,0,2286,
        329,1,0,0,0,2287,2288,5,153,0,0,2288,2289,3,844,422,0,2289,2290,
        3,748,374,0,2290,2291,3,456,228,0,2291,331,1,0,0,0,2292,2293,5,76,
        0,0,2293,2295,3,334,167,0,2294,2296,5,408,0,0,2295,2294,1,0,0,0,
        2295,2296,1,0,0,0,2296,2297,1,0,0,0,2297,2298,3,92,46,0,2298,2299,
        3,128,64,0,2299,2300,5,5,0,0,2300,2301,3,92,46,0,2301,2302,3,128,
        64,0,2302,2303,5,5,0,0,2303,2304,3,92,46,0,2304,2305,3,128,64,0,
        2305,2306,3,844,422,0,2306,2307,3,748,374,0,2307,2308,3,748,374,
        0,2308,2309,3,456,228,0,2309,333,1,0,0,0,2310,2312,5,387,0,0,2311,
        2310,1,0,0,0,2311,2312,1,0,0,0,2312,335,1,0,0,0,2313,2315,5,49,0,
        0,2314,2316,5,408,0,0,2315,2314,1,0,0,0,2315,2316,1,0,0,0,2316,2317,
        1,0,0,0,2317,2318,3,338,169,0,2318,2319,3,92,46,0,2319,2320,3,128,
        64,0,2320,2321,5,5,0,0,2321,2322,3,92,46,0,2322,2323,3,128,64,0,
        2323,2324,3,844,422,0,2324,2325,3,748,374,0,2325,2326,3,456,228,
        0,2326,337,1,0,0,0,2327,2328,7,5,0,0,2328,339,1,0,0,0,2329,2330,
        5,171,0,0,2330,2331,3,788,394,0,2331,2332,3,92,46,0,2332,2333,5,
        5,0,0,2333,2334,3,92,46,0,2334,2335,3,128,64,0,2335,2336,3,456,228,
        0,2336,2348,1,0,0,0,2337,2338,5,171,0,0,2338,2339,3,788,394,0,2339,
        2340,3,92,46,0,2340,2341,5,5,0,0,2341,2342,3,92,46,0,2342,2343,3,
        128,64,0,2343,2344,5,5,0,0,2344,2345,3,728,364,0,2345,2346,3,456,
        228,0,2346,2348,1,0,0,0,2347,2329,1,0,0,0,2347,2337,1,0,0,0,2348,
        341,1,0,0,0,2349,2350,5,354,0,0,2350,2351,3,92,46,0,2351,2352,3,
        128,64,0,2352,2353,5,350,0,0,2353,2354,3,92,46,0,2354,2355,3,456,
        228,0,2355,343,1,0,0,0,2356,2357,5,407,0,0,2357,2358,3,92,46,0,2358,
        2359,3,128,64,0,2359,2360,5,350,0,0,2360,2361,3,92,46,0,2361,2362,
        3,456,228,0,2362,345,1,0,0,0,2363,2364,5,313,0,0,2364,2365,3,92,
        46,0,2365,2366,3,128,64,0,2366,2367,5,350,0,0,2367,2368,3,92,46,
        0,2368,2369,3,456,228,0,2369,347,1,0,0,0,2370,2371,5,164,0,0,2371,
        2372,3,92,46,0,2372,2373,3,128,64,0,2373,2374,5,350,0,0,2374,2375,
        3,92,46,0,2375,2376,3,456,228,0,2376,349,1,0,0,0,2377,2378,5,161,
        0,0,2378,2379,3,92,46,0,2379,2380,3,128,64,0,2380,2381,5,350,0,0,
        2381,2382,3,92,46,0,2382,2383,3,456,228,0,2383,351,1,0,0,0,2384,
        2385,5,163,0,0,2385,2386,3,92,46,0,2386,2387,3,128,64,0,2387,2388,
        5,350,0,0,2388,2389,3,92,46,0,2389,2390,3,456,228,0,2390,353,1,0,
        0,0,2391,2392,5,162,0,0,2392,2393,3,92,46,0,2393,2394,3,128,64,0,
        2394,2395,5,350,0,0,2395,2396,3,92,46,0,2396,2397,3,456,228,0,2397,
        355,1,0,0,0,2398,2399,5,362,0,0,2399,2400,3,92,46,0,2400,2401,3,
        128,64,0,2401,2402,5,350,0,0,2402,2403,3,92,46,0,2403,2404,3,456,
        228,0,2404,357,1,0,0,0,2405,2406,5,320,0,0,2406,2407,3,92,46,0,2407,
        2408,3,128,64,0,2408,2409,5,350,0,0,2409,2410,3,92,46,0,2410,2411,
        3,456,228,0,2411,359,1,0,0,0,2412,2413,5,286,0,0,2413,2414,3,92,
        46,0,2414,2415,3,128,64,0,2415,2416,5,350,0,0,2416,2417,3,92,46,
        0,2417,2418,3,456,228,0,2418,361,1,0,0,0,2419,2420,5,202,0,0,2420,
        2421,3,92,46,0,2421,2422,3,128,64,0,2422,2423,5,350,0,0,2423,2424,
        3,92,46,0,2424,2425,3,456,228,0,2425,363,1,0,0,0,2426,2427,5,56,
        0,0,2427,2428,3,92,46,0,2428,2429,3,128,64,0,2429,2430,5,350,0,0,
        2430,2431,3,92,46,0,2431,2432,3,456,228,0,2432,365,1,0,0,0,2433,
        2434,5,19,0,0,2434,2435,3,92,46,0,2435,2436,3,128,64,0,2436,2437,
        5,350,0,0,2437,2438,3,92,46,0,2438,2439,3,456,228,0,2439,367,1,0,
        0,0,2440,2441,5,182,0,0,2441,2442,3,796,398,0,2442,2443,3,92,46,
        0,2443,2444,3,128,64,0,2444,2445,5,5,0,0,2445,2446,3,128,64,0,2446,
        2447,3,456,228,0,2447,369,1,0,0,0,2448,2449,5,151,0,0,2449,2450,
        3,774,387,0,2450,2451,3,780,390,0,2451,2452,3,92,46,0,2452,2453,
        3,128,64,0,2453,2454,5,5,0,0,2454,2455,3,128,64,0,2455,2456,3,456,
        228,0,2456,371,1,0,0,0,2457,2458,5,277,0,0,2458,2459,3,92,46,0,2459,
        2460,3,374,187,0,2460,2461,3,456,228,0,2461,373,1,0,0,0,2462,2463,
        6,187,-1,0,2463,2464,3,376,188,0,2464,2470,1,0,0,0,2465,2466,10,
        1,0,0,2466,2467,5,5,0,0,2467,2469,3,376,188,0,2468,2465,1,0,0,0,
        2469,2472,1,0,0,0,2470,2468,1,0,0,0,2470,2471,1,0,0,0,2471,375,1,
        0,0,0,2472,2470,1,0,0,0,2473,2474,5,10,0,0,2474,2475,3,128,64,0,
        2475,2476,5,5,0,0,2476,2477,3,80,40,0,2477,2478,5,11,0,0,2478,377,
        1,0,0,0,2479,2480,5,310,0,0,2480,2481,3,92,46,0,2481,2482,3,128,
        64,0,2482,2483,5,5,0,0,2483,2484,3,92,46,0,2484,2485,3,128,64,0,
        2485,2486,5,5,0,0,2486,2487,3,92,46,0,2487,2488,3,128,64,0,2488,
        2489,3,456,228,0,2489,379,1,0,0,0,2490,2491,3,382,191,0,2491,2492,
        5,62,0,0,2492,2493,3,774,387,0,2493,2494,3,750,375,0,2494,2495,3,
        834,417,0,2495,2496,3,92,46,0,2496,2497,3,128,64,0,2497,2498,5,8,
        0,0,2498,2499,3,742,371,0,2499,2500,5,9,0,0,2500,2501,3,782,391,
        0,2501,2502,3,806,403,0,2502,2503,3,456,228,0,2503,381,1,0,0,0,2504,
        2506,7,6,0,0,2505,2504,1,0,0,0,2505,2506,1,0,0,0,2506,383,1,0,0,
        0,2507,2508,5,379,0,0,2508,2509,3,92,46,0,2509,2510,3,128,64,0,2510,
        2511,5,5,0,0,2511,2512,3,92,46,0,2512,2513,3,456,228,0,2513,385,
        1,0,0,0,2514,2515,5,211,0,0,2515,2516,3,92,46,0,2516,2517,3,388,
        194,0,2517,2518,3,390,195,0,2518,2519,3,456,228,0,2519,387,1,0,0,
        0,2520,2522,5,73,0,0,2521,2520,1,0,0,0,2521,2522,1,0,0,0,2522,389,
        1,0,0,0,2523,2525,3,392,196,0,2524,2523,1,0,0,0,2524,2525,1,0,0,
        0,2525,391,1,0,0,0,2526,2527,6,196,-1,0,2527,2528,3,394,197,0,2528,
        2533,1,0,0,0,2529,2530,10,1,0,0,2530,2532,3,394,197,0,2531,2529,
        1,0,0,0,2532,2535,1,0,0,0,2533,2531,1,0,0,0,2533,2534,1,0,0,0,2534,
        393,1,0,0,0,2535,2533,1,0,0,0,2536,2537,5,64,0,0,2537,2538,3,92,
        46,0,2538,2539,3,128,64,0,2539,2545,1,0,0,0,2540,2541,5,156,0,0,
        2541,2542,3,92,46,0,2542,2543,3,156,78,0,2543,2545,1,0,0,0,2544,
        2536,1,0,0,0,2544,2540,1,0,0,0,2545,395,1,0,0,0,2546,2547,5,65,0,
        0,2547,2548,5,391,0,0,2548,2549,3,80,40,0,2549,2550,5,10,0,0,2550,
        2551,3,766,383,0,2551,2552,5,11,0,0,2552,2553,3,456,228,0,2553,397,
        1,0,0,0,2554,2555,5,74,0,0,2555,2556,5,391,0,0,2556,2557,3,772,386,
        0,2557,2558,5,10,0,0,2558,2559,3,766,383,0,2559,2560,5,11,0,0,2560,
        2561,3,456,228,0,2561,399,1,0,0,0,2562,2574,3,402,201,0,2563,2574,
        3,404,202,0,2564,2574,3,406,203,0,2565,2574,3,408,204,0,2566,2574,
        3,416,208,0,2567,2574,3,422,211,0,2568,2574,3,424,212,0,2569,2574,
        3,426,213,0,2570,2574,3,428,214,0,2571,2574,3,430,215,0,2572,2574,
        3,432,216,0,2573,2562,1,0,0,0,2573,2563,1,0,0,0,2573,2564,1,0,0,
        0,2573,2565,1,0,0,0,2573,2566,1,0,0,0,2573,2567,1,0,0,0,2573,2568,
        1,0,0,0,2573,2569,1,0,0,0,2573,2570,1,0,0,0,2573,2571,1,0,0,0,2573,
        2572,1,0,0,0,2574,401,1,0,0,0,2575,2576,5,294,0,0,2576,2577,3,96,
        48,0,2577,2578,3,456,228,0,2578,2591,1,0,0,0,2579,2585,5,294,0,0,
        2580,2581,3,92,46,0,2581,2582,3,106,53,0,2582,2583,5,14,0,0,2583,
        2586,1,0,0,0,2584,2586,3,94,47,0,2585,2580,1,0,0,0,2585,2584,1,0,
        0,0,2586,2587,1,0,0,0,2587,2588,3,128,64,0,2588,2589,3,456,228,0,
        2589,2591,1,0,0,0,2590,2575,1,0,0,0,2590,2579,1,0,0,0,2591,403,1,
        0,0,0,2592,2593,5,58,0,0,2593,2594,3,112,56,0,2594,2595,3,80,40,
        0,2595,2596,3,456,228,0,2596,405,1,0,0,0,2597,2598,5,58,0,0,2598,
        2599,3,98,49,0,2599,2600,3,128,64,0,2600,2601,5,5,0,0,2601,2602,
        3,112,56,0,2602,2603,3,80,40,0,2603,2604,5,5,0,0,2604,2605,3,112,
        56,0,2605,2606,3,80,40,0,2606,2607,3,456,228,0,2607,407,1,0,0,0,
        2608,2609,5,341,0,0,2609,2610,3,92,46,0,2610,2611,3,128,64,0,2611,
        2612,5,5,0,0,2612,2613,3,112,56,0,2613,2614,3,80,40,0,2614,2615,
        5,10,0,0,2615,2616,3,410,205,0,2616,2617,5,11,0,0,2617,2618,3,456,
        228,0,2618,409,1,0,0,0,2619,2621,3,412,206,0,2620,2619,1,0,0,0,2620,
        2621,1,0,0,0,2621,411,1,0,0,0,2622,2623,6,206,-1,0,2623,2624,3,414,
        207,0,2624,2629,1,0,0,0,2625,2626,10,1,0,0,2626,2628,3,414,207,0,
        2627,2625,1,0,0,0,2628,2631,1,0,0,0,2629,2627,1,0,0,0,2629,2630,
        1,0,0,0,2630,413,1,0,0,0,2631,2629,1,0,0,0,2632,2633,3,92,46,0,2633,
        2634,3,144,72,0,2634,2635,5,5,0,0,2635,2636,3,112,56,0,2636,2637,
        3,80,40,0,2637,415,1,0,0,0,2638,2639,5,191,0,0,2639,2640,3,92,46,
        0,2640,2641,3,128,64,0,2641,2642,5,5,0,0,2642,2643,5,10,0,0,2643,
        2644,3,418,209,0,2644,2645,5,11,0,0,2645,2646,3,456,228,0,2646,417,
        1,0,0,0,2647,2648,6,209,-1,0,2648,2649,3,420,210,0,2649,2655,1,0,
        0,0,2650,2651,10,1,0,0,2651,2652,5,5,0,0,2652,2654,3,420,210,0,2653,
        2650,1,0,0,0,2654,2657,1,0,0,0,2655,2653,1,0,0,0,2655,2656,1,0,0,
        0,2656,419,1,0,0,0,2657,2655,1,0,0,0,2658,2659,3,112,56,0,2659,2660,
        3,80,40,0,2660,421,1,0,0,0,2661,2662,5,203,0,0,2662,2663,3,750,375,
        0,2663,2664,3,834,417,0,2664,2665,3,92,46,0,2665,2666,3,128,64,0,
        2666,2667,5,8,0,0,2667,2668,3,742,371,0,2668,2669,5,9,0,0,2669,2670,
        3,782,391,0,2670,2671,3,806,403,0,2671,2672,5,350,0,0,2672,2673,
        3,112,56,0,2673,2674,3,80,40,0,2674,2675,5,374,0,0,2675,2676,3,112,
        56,0,2676,2677,3,80,40,0,2677,2678,3,456,228,0,2678,423,1,0,0,0,
        2679,2680,5,293,0,0,2680,2681,3,92,46,0,2681,2682,3,128,64,0,2682,
        2683,3,456,228,0,2683,425,1,0,0,0,2684,2685,5,67,0,0,2685,2686,5,
        391,0,0,2686,2687,3,772,386,0,2687,2688,5,10,0,0,2688,2689,3,418,
        209,0,2689,2690,5,11,0,0,2690,2691,5,374,0,0,2691,2692,3,434,217,
        0,2692,2693,3,456,228,0,2693,427,1,0,0,0,2694,2695,5,66,0,0,2695,
        2696,5,166,0,0,2696,2697,3,128,64,0,2697,2698,5,350,0,0,2698,2699,
        3,112,56,0,2699,2700,3,80,40,0,2700,2701,3,456,228,0,2701,429,1,
        0,0,0,2702,2703,5,75,0,0,2703,2704,5,166,0,0,2704,2705,3,128,64,
        0,2705,2706,5,374,0,0,2706,2707,3,434,217,0,2707,2708,3,456,228,
        0,2708,431,1,0,0,0,2709,2710,5,373,0,0,2710,2711,3,456,228,0,2711,
        433,1,0,0,0,2712,2713,5,350,0,0,2713,2718,5,63,0,0,2714,2715,3,112,
        56,0,2715,2716,3,80,40,0,2716,2718,1,0,0,0,2717,2712,1,0,0,0,2717,
        2714,1,0,0,0,2718,435,1,0,0,0,2719,2720,5,6,0,0,2720,2721,3,438,
        219,0,2721,437,1,0,0,0,2722,2723,5,12,0,0,2723,2729,5,13,0,0,2724,
        2725,5,12,0,0,2725,2726,3,440,220,0,2726,2727,5,13,0,0,2727,2729,
        1,0,0,0,2728,2722,1,0,0,0,2728,2724,1,0,0,0,2729,439,1,0,0,0,2730,
        2731,6,220,-1,0,2731,2732,3,442,221,0,2732,2738,1,0,0,0,2733,2734,
        10,1,0,0,2734,2735,5,5,0,0,2735,2737,3,442,221,0,2736,2733,1,0,0,
        0,2737,2740,1,0,0,0,2738,2736,1,0,0,0,2738,2739,1,0,0,0,2739,441,
        1,0,0,0,2740,2738,1,0,0,0,2741,2744,5,261,0,0,2742,2744,3,444,222,
        0,2743,2741,1,0,0,0,2743,2742,1,0,0,0,2744,443,1,0,0,0,2745,2746,
        3,92,46,0,2746,2747,3,128,64,0,2747,2753,1,0,0,0,2748,2753,3,446,
        223,0,2749,2753,3,436,218,0,2750,2753,3,90,45,0,2751,2753,3,460,
        230,0,2752,2745,1,0,0,0,2752,2748,1,0,0,0,2752,2749,1,0,0,0,2752,
        2750,1,0,0,0,2752,2751,1,0,0,0,2753,445,1,0,0,0,2754,2755,5,6,0,
        0,2755,2756,3,160,80,0,2756,447,1,0,0,0,2757,2758,3,88,44,0,2758,
        2759,3,450,225,0,2759,449,1,0,0,0,2760,2764,3,436,218,0,2761,2764,
        3,90,45,0,2762,2764,3,460,230,0,2763,2760,1,0,0,0,2763,2761,1,0,
        0,0,2763,2762,1,0,0,0,2764,451,1,0,0,0,2765,2767,3,454,227,0,2766,
        2765,1,0,0,0,2766,2767,1,0,0,0,2767,453,1,0,0,0,2768,2769,6,227,
        -1,0,2769,2770,3,448,224,0,2770,2775,1,0,0,0,2771,2772,10,1,0,0,
        2772,2774,3,448,224,0,2773,2771,1,0,0,0,2774,2777,1,0,0,0,2775,2773,
        1,0,0,0,2775,2776,1,0,0,0,2776,455,1,0,0,0,2777,2775,1,0,0,0,2778,
        2779,5,5,0,0,2779,2781,3,458,229,0,2780,2778,1,0,0,0,2780,2781,1,
        0,0,0,2781,457,1,0,0,0,2782,2783,6,229,-1,0,2783,2784,3,448,224,
        0,2784,2790,1,0,0,0,2785,2786,10,1,0,0,2786,2787,5,5,0,0,2787,2789,
        3,448,224,0,2788,2785,1,0,0,0,2789,2792,1,0,0,0,2790,2788,1,0,0,
        0,2790,2791,1,0,0,0,2791,459,1,0,0,0,2792,2790,1,0,0,0,2793,2819,
        3,462,231,0,2794,2819,3,470,235,0,2795,2819,3,478,239,0,2796,2819,
        3,486,243,0,2797,2819,3,494,247,0,2798,2819,3,502,251,0,2799,2819,
        3,510,255,0,2800,2819,3,518,259,0,2801,2819,3,526,263,0,2802,2819,
        3,534,267,0,2803,2819,3,542,271,0,2804,2819,3,550,275,0,2805,2819,
        3,558,279,0,2806,2819,3,566,283,0,2807,2819,3,574,287,0,2808,2819,
        3,582,291,0,2809,2819,3,590,295,0,2810,2819,3,598,299,0,2811,2819,
        3,606,303,0,2812,2819,3,614,307,0,2813,2819,3,622,311,0,2814,2819,
        3,630,315,0,2815,2819,3,638,319,0,2816,2819,3,646,323,0,2817,2819,
        3,654,327,0,2818,2793,1,0,0,0,2818,2794,1,0,0,0,2818,2795,1,0,0,
        0,2818,2796,1,0,0,0,2818,2797,1,0,0,0,2818,2798,1,0,0,0,2818,2799,
        1,0,0,0,2818,2800,1,0,0,0,2818,2801,1,0,0,0,2818,2802,1,0,0,0,2818,
        2803,1,0,0,0,2818,2804,1,0,0,0,2818,2805,1,0,0,0,2818,2806,1,0,0,
        0,2818,2807,1,0,0,0,2818,2808,1,0,0,0,2818,2809,1,0,0,0,2818,2810,
        1,0,0,0,2818,2811,1,0,0,0,2818,2812,1,0,0,0,2818,2813,1,0,0,0,2818,
        2814,1,0,0,0,2818,2815,1,0,0,0,2818,2816,1,0,0,0,2818,2817,1,0,0,
        0,2819,461,1,0,0,0,2820,2821,5,98,0,0,2821,2822,5,8,0,0,2822,2823,
        3,464,232,0,2823,2824,5,9,0,0,2824,463,1,0,0,0,2825,2827,3,466,233,
        0,2826,2825,1,0,0,0,2826,2827,1,0,0,0,2827,465,1,0,0,0,2828,2829,
        6,233,-1,0,2829,2830,3,468,234,0,2830,2836,1,0,0,0,2831,2832,10,
        1,0,0,2832,2833,5,5,0,0,2833,2835,3,468,234,0,2834,2831,1,0,0,0,
        2835,2838,1,0,0,0,2836,2834,1,0,0,0,2836,2837,1,0,0,0,2837,467,1,
        0,0,0,2838,2836,1,0,0,0,2839,2840,5,212,0,0,2840,2872,3,712,356,
        0,2841,2872,3,662,331,0,2842,2843,5,283,0,0,2843,2872,3,160,80,0,
        2844,2872,3,664,332,0,2845,2846,5,157,0,0,2846,2872,3,160,80,0,2847,
        2848,5,299,0,0,2848,2872,3,146,73,0,2849,2850,5,328,0,0,2850,2872,
        3,160,80,0,2851,2852,5,132,0,0,2852,2872,3,722,361,0,2853,2854,5,
        135,0,0,2854,2872,3,442,221,0,2855,2856,5,295,0,0,2856,2872,3,442,
        221,0,2857,2858,5,175,0,0,2858,2872,3,442,221,0,2859,2860,5,185,
        0,0,2860,2872,3,442,221,0,2861,2862,5,225,0,0,2862,2872,3,442,221,
        0,2863,2864,5,130,0,0,2864,2872,3,146,73,0,2865,2866,5,329,0,0,2866,
        2872,3,142,71,0,2867,2868,5,90,0,0,2868,2872,3,142,71,0,2869,2870,
        5,176,0,0,2870,2872,3,142,71,0,2871,2839,1,0,0,0,2871,2841,1,0,0,
        0,2871,2842,1,0,0,0,2871,2844,1,0,0,0,2871,2845,1,0,0,0,2871,2847,
        1,0,0,0,2871,2849,1,0,0,0,2871,2851,1,0,0,0,2871,2853,1,0,0,0,2871,
        2855,1,0,0,0,2871,2857,1,0,0,0,2871,2859,1,0,0,0,2871,2861,1,0,0,
        0,2871,2863,1,0,0,0,2871,2865,1,0,0,0,2871,2867,1,0,0,0,2871,2869,
        1,0,0,0,2872,469,1,0,0,0,2873,2874,5,103,0,0,2874,2875,5,8,0,0,2875,
        2876,3,472,236,0,2876,2877,5,9,0,0,2877,471,1,0,0,0,2878,2880,3,
        474,237,0,2879,2878,1,0,0,0,2879,2880,1,0,0,0,2880,473,1,0,0,0,2881,
        2882,6,237,-1,0,2882,2883,3,476,238,0,2883,2889,1,0,0,0,2884,2885,
        10,1,0,0,2885,2886,5,5,0,0,2886,2888,3,476,238,0,2887,2884,1,0,0,
        0,2888,2891,1,0,0,0,2889,2887,1,0,0,0,2889,2890,1,0,0,0,2890,475,
        1,0,0,0,2891,2889,1,0,0,0,2892,2893,5,155,0,0,2893,2901,3,160,80,
        0,2894,2895,5,116,0,0,2895,2901,3,160,80,0,2896,2897,5,72,0,0,2897,
        2901,3,702,351,0,2898,2899,5,71,0,0,2899,2901,3,160,80,0,2900,2892,
        1,0,0,0,2900,2894,1,0,0,0,2900,2896,1,0,0,0,2900,2898,1,0,0,0,2901,
        477,1,0,0,0,2902,2903,5,97,0,0,2903,2904,5,8,0,0,2904,2905,3,480,
        240,0,2905,2906,5,9,0,0,2906,479,1,0,0,0,2907,2909,3,482,241,0,2908,
        2907,1,0,0,0,2908,2909,1,0,0,0,2909,481,1,0,0,0,2910,2911,6,241,
        -1,0,2911,2912,3,484,242,0,2912,2918,1,0,0,0,2913,2914,10,1,0,0,
        2914,2915,5,5,0,0,2915,2917,3,484,242,0,2916,2913,1,0,0,0,2917,2920,
        1,0,0,0,2918,2916,1,0,0,0,2918,2919,1,0,0,0,2919,483,1,0,0,0,2920,
        2918,1,0,0,0,2921,2928,3,666,333,0,2922,2928,3,668,334,0,2923,2928,
        3,670,335,0,2924,2928,3,672,336,0,2925,2926,5,133,0,0,2926,2928,
        3,708,354,0,2927,2921,1,0,0,0,2927,2922,1,0,0,0,2927,2923,1,0,0,
        0,2927,2924,1,0,0,0,2927,2925,1,0,0,0,2928,485,1,0,0,0,2929,2930,
        5,121,0,0,2930,2931,5,8,0,0,2931,2932,3,488,244,0,2932,2933,5,9,
        0,0,2933,487,1,0,0,0,2934,2936,3,490,245,0,2935,2934,1,0,0,0,2935,
        2936,1,0,0,0,2936,489,1,0,0,0,2937,2938,6,245,-1,0,2938,2939,3,492,
        246,0,2939,2945,1,0,0,0,2940,2941,10,1,0,0,2941,2942,5,5,0,0,2942,
        2944,3,492,246,0,2943,2940,1,0,0,0,2944,2947,1,0,0,0,2945,2943,1,
        0,0,0,2945,2946,1,0,0,0,2946,491,1,0,0,0,2947,2945,1,0,0,0,2948,
        2954,3,674,337,0,2949,2950,5,68,0,0,2950,2954,3,710,355,0,2951,2952,
        5,357,0,0,2952,2954,3,442,221,0,2953,2948,1,0,0,0,2953,2949,1,0,
        0,0,2953,2951,1,0,0,0,2954,493,1,0,0,0,2955,2956,5,100,0,0,2956,
        2957,5,8,0,0,2957,2958,3,496,248,0,2958,2959,5,9,0,0,2959,495,1,
        0,0,0,2960,2962,3,498,249,0,2961,2960,1,0,0,0,2961,2962,1,0,0,0,
        2962,497,1,0,0,0,2963,2964,6,249,-1,0,2964,2965,3,500,250,0,2965,
        2971,1,0,0,0,2966,2967,10,1,0,0,2967,2968,5,5,0,0,2968,2970,3,500,
        250,0,2969,2966,1,0,0,0,2970,2973,1,0,0,0,2971,2969,1,0,0,0,2971,
        2972,1,0,0,0,2972,499,1,0,0,0,2973,2971,1,0,0,0,2974,2989,3,666,
        333,0,2975,2989,3,668,334,0,2976,2989,3,678,339,0,2977,2989,3,662,
        331,0,2978,2989,3,676,338,0,2979,2989,3,680,340,0,2980,2989,3,670,
        335,0,2981,2989,3,672,336,0,2982,2989,3,682,341,0,2983,2989,3,674,
        337,0,2984,2985,5,146,0,0,2985,2989,3,442,221,0,2986,2987,5,129,
        0,0,2987,2989,3,146,73,0,2988,2974,1,0,0,0,2988,2975,1,0,0,0,2988,
        2976,1,0,0,0,2988,2977,1,0,0,0,2988,2978,1,0,0,0,2988,2979,1,0,0,
        0,2988,2980,1,0,0,0,2988,2981,1,0,0,0,2988,2982,1,0,0,0,2988,2983,
        1,0,0,0,2988,2984,1,0,0,0,2988,2986,1,0,0,0,2989,501,1,0,0,0,2990,
        2991,5,99,0,0,2991,2992,5,8,0,0,2992,2993,3,504,252,0,2993,2994,
        5,9,0,0,2994,503,1,0,0,0,2995,2997,3,506,253,0,2996,2995,1,0,0,0,
        2996,2997,1,0,0,0,2997,505,1,0,0,0,2998,2999,6,253,-1,0,2999,3000,
        3,508,254,0,3000,3006,1,0,0,0,3001,3002,10,1,0,0,3002,3003,5,5,0,
        0,3003,3005,3,508,254,0,3004,3001,1,0,0,0,3005,3008,1,0,0,0,3006,
        3004,1,0,0,0,3006,3007,1,0,0,0,3007,507,1,0,0,0,3008,3006,1,0,0,
        0,3009,3031,3,666,333,0,3010,3031,3,668,334,0,3011,3031,3,678,339,
        0,3012,3031,3,662,331,0,3013,3031,3,676,338,0,3014,3031,3,680,340,
        0,3015,3031,3,670,335,0,3016,3031,3,672,336,0,3017,3031,3,682,341,
        0,3018,3031,3,674,337,0,3019,3020,5,131,0,0,3020,3031,3,442,221,
        0,3021,3022,5,298,0,0,3022,3031,3,712,356,0,3023,3024,5,386,0,0,
        3024,3031,3,442,221,0,3025,3031,3,684,342,0,3026,3027,5,183,0,0,
        3027,3031,3,160,80,0,3028,3029,5,117,0,0,3029,3031,3,442,221,0,3030,
        3009,1,0,0,0,3030,3010,1,0,0,0,3030,3011,1,0,0,0,3030,3012,1,0,0,
        0,3030,3013,1,0,0,0,3030,3014,1,0,0,0,3030,3015,1,0,0,0,3030,3016,
        1,0,0,0,3030,3017,1,0,0,0,3030,3018,1,0,0,0,3030,3019,1,0,0,0,3030,
        3021,1,0,0,0,3030,3023,1,0,0,0,3030,3025,1,0,0,0,3030,3026,1,0,0,
        0,3030,3028,1,0,0,0,3031,509,1,0,0,0,3032,3033,5,120,0,0,3033,3034,
        5,8,0,0,3034,3035,3,512,256,0,3035,3036,5,9,0,0,3036,511,1,0,0,0,
        3037,3039,3,514,257,0,3038,3037,1,0,0,0,3038,3039,1,0,0,0,3039,513,
        1,0,0,0,3040,3041,6,257,-1,0,3041,3042,3,516,258,0,3042,3048,1,0,
        0,0,3043,3044,10,1,0,0,3044,3045,5,5,0,0,3045,3047,3,516,258,0,3046,
        3043,1,0,0,0,3047,3050,1,0,0,0,3048,3046,1,0,0,0,3048,3049,1,0,0,
        0,3049,515,1,0,0,0,3050,3048,1,0,0,0,3051,3052,5,87,0,0,3052,3056,
        3,686,343,0,3053,3054,5,223,0,0,3054,3056,3,146,73,0,3055,3051,1,
        0,0,0,3055,3053,1,0,0,0,3056,517,1,0,0,0,3057,3058,5,101,0,0,3058,
        3059,5,8,0,0,3059,3060,3,520,260,0,3060,3061,5,9,0,0,3061,519,1,
        0,0,0,3062,3064,3,522,261,0,3063,3062,1,0,0,0,3063,3064,1,0,0,0,
        3064,521,1,0,0,0,3065,3066,6,261,-1,0,3066,3067,3,524,262,0,3067,
        3073,1,0,0,0,3068,3069,10,1,0,0,3069,3070,5,5,0,0,3070,3072,3,524,
        262,0,3071,3068,1,0,0,0,3072,3075,1,0,0,0,3073,3071,1,0,0,0,3073,
        3074,1,0,0,0,3074,523,1,0,0,0,3075,3073,1,0,0,0,3076,3082,3,668,
        334,0,3077,3078,5,380,0,0,3078,3082,3,146,73,0,3079,3080,5,207,0,
        0,3080,3082,3,142,71,0,3081,3076,1,0,0,0,3081,3077,1,0,0,0,3081,
        3079,1,0,0,0,3082,525,1,0,0,0,3083,3084,5,122,0,0,3084,3085,5,8,
        0,0,3085,3086,3,528,264,0,3086,3087,5,9,0,0,3087,527,1,0,0,0,3088,
        3090,3,530,265,0,3089,3088,1,0,0,0,3089,3090,1,0,0,0,3090,529,1,
        0,0,0,3091,3092,6,265,-1,0,3092,3093,3,532,266,0,3093,3099,1,0,0,
        0,3094,3095,10,1,0,0,3095,3096,5,5,0,0,3096,3098,3,532,266,0,3097,
        3094,1,0,0,0,3098,3101,1,0,0,0,3099,3097,1,0,0,0,3099,3100,1,0,0,
        0,3100,531,1,0,0,0,3101,3099,1,0,0,0,3102,3105,3,668,334,0,3103,
        3105,3,688,344,0,3104,3102,1,0,0,0,3104,3103,1,0,0,0,3105,533,1,
        0,0,0,3106,3107,5,123,0,0,3107,3108,5,8,0,0,3108,3109,3,536,268,
        0,3109,3110,5,9,0,0,3110,535,1,0,0,0,3111,3113,3,538,269,0,3112,
        3111,1,0,0,0,3112,3113,1,0,0,0,3113,537,1,0,0,0,3114,3115,6,269,
        -1,0,3115,3116,3,540,270,0,3116,3122,1,0,0,0,3117,3118,10,1,0,0,
        3118,3119,5,5,0,0,3119,3121,3,540,270,0,3120,3117,1,0,0,0,3121,3124,
        1,0,0,0,3122,3120,1,0,0,0,3122,3123,1,0,0,0,3123,539,1,0,0,0,3124,
        3122,1,0,0,0,3125,3131,3,666,333,0,3126,3131,3,668,334,0,3127,3131,
        3,688,344,0,3128,3129,5,380,0,0,3129,3131,3,442,221,0,3130,3125,
        1,0,0,0,3130,3126,1,0,0,0,3130,3127,1,0,0,0,3130,3128,1,0,0,0,3131,
        541,1,0,0,0,3132,3133,5,113,0,0,3133,3134,5,8,0,0,3134,3135,3,544,
        272,0,3135,3136,5,9,0,0,3136,543,1,0,0,0,3137,3139,3,546,273,0,3138,
        3137,1,0,0,0,3138,3139,1,0,0,0,3139,545,1,0,0,0,3140,3141,6,273,
        -1,0,3141,3142,3,548,274,0,3142,3148,1,0,0,0,3143,3144,10,1,0,0,
        3144,3145,5,5,0,0,3145,3147,3,548,274,0,3146,3143,1,0,0,0,3147,3150,
        1,0,0,0,3148,3146,1,0,0,0,3148,3149,1,0,0,0,3149,547,1,0,0,0,3150,
        3148,1,0,0,0,3151,3160,3,678,339,0,3152,3160,3,668,334,0,3153,3154,
        5,82,0,0,3154,3160,3,160,80,0,3155,3156,5,190,0,0,3156,3160,3,160,
        80,0,3157,3158,5,208,0,0,3158,3160,3,160,80,0,3159,3151,1,0,0,0,
        3159,3152,1,0,0,0,3159,3153,1,0,0,0,3159,3155,1,0,0,0,3159,3157,
        1,0,0,0,3160,549,1,0,0,0,3161,3162,5,114,0,0,3162,3163,5,8,0,0,3163,
        3164,3,552,276,0,3164,3165,5,9,0,0,3165,551,1,0,0,0,3166,3168,3,
        554,277,0,3167,3166,1,0,0,0,3167,3168,1,0,0,0,3168,553,1,0,0,0,3169,
        3170,6,277,-1,0,3170,3171,3,556,278,0,3171,3177,1,0,0,0,3172,3173,
        10,1,0,0,3173,3174,5,5,0,0,3174,3176,3,556,278,0,3175,3172,1,0,0,
        0,3176,3179,1,0,0,0,3177,3175,1,0,0,0,3177,3178,1,0,0,0,3178,555,
        1,0,0,0,3179,3177,1,0,0,0,3180,3185,3,678,339,0,3181,3185,3,668,
        334,0,3182,3183,5,139,0,0,3183,3185,3,142,71,0,3184,3180,1,0,0,0,
        3184,3181,1,0,0,0,3184,3182,1,0,0,0,3185,557,1,0,0,0,3186,3187,5,
        104,0,0,3187,3188,5,8,0,0,3188,3189,3,560,280,0,3189,3190,5,9,0,
        0,3190,559,1,0,0,0,3191,3193,3,562,281,0,3192,3191,1,0,0,0,3192,
        3193,1,0,0,0,3193,561,1,0,0,0,3194,3195,6,281,-1,0,3195,3196,3,564,
        282,0,3196,3202,1,0,0,0,3197,3198,10,1,0,0,3198,3199,5,5,0,0,3199,
        3201,3,564,282,0,3200,3197,1,0,0,0,3201,3204,1,0,0,0,3202,3200,1,
        0,0,0,3202,3203,1,0,0,0,3203,563,1,0,0,0,3204,3202,1,0,0,0,3205,
        3216,3,668,334,0,3206,3216,3,678,339,0,3207,3216,3,690,345,0,3208,
        3216,3,662,331,0,3209,3216,3,676,338,0,3210,3216,3,688,344,0,3211,
        3216,3,692,346,0,3212,3216,3,694,347,0,3213,3216,3,696,348,0,3214,
        3216,3,672,336,0,3215,3205,1,0,0,0,3215,3206,1,0,0,0,3215,3207,1,
        0,0,0,3215,3208,1,0,0,0,3215,3209,1,0,0,0,3215,3210,1,0,0,0,3215,
        3211,1,0,0,0,3215,3212,1,0,0,0,3215,3213,1,0,0,0,3215,3214,1,0,0,
        0,3216,565,1,0,0,0,3217,3218,5,119,0,0,3218,3219,5,8,0,0,3219,3220,
        3,568,284,0,3220,3221,5,9,0,0,3221,567,1,0,0,0,3222,3224,3,570,285,
        0,3223,3222,1,0,0,0,3223,3224,1,0,0,0,3224,569,1,0,0,0,3225,3226,
        6,285,-1,0,3226,3227,3,572,286,0,3227,3233,1,0,0,0,3228,3229,10,
        1,0,0,3229,3230,5,5,0,0,3230,3232,3,572,286,0,3231,3228,1,0,0,0,
        3232,3235,1,0,0,0,3233,3231,1,0,0,0,3233,3234,1,0,0,0,3234,571,1,
        0,0,0,3235,3233,1,0,0,0,3236,3265,3,668,334,0,3237,3265,3,678,339,
        0,3238,3265,3,690,345,0,3239,3265,3,662,331,0,3240,3265,3,676,338,
        0,3241,3265,3,688,344,0,3242,3265,3,692,346,0,3243,3265,3,694,347,
        0,3244,3245,5,307,0,0,3245,3265,3,146,73,0,3246,3247,5,84,0,0,3247,
        3265,3,442,221,0,3248,3249,5,384,0,0,3249,3265,3,720,360,0,3250,
        3251,5,383,0,0,3251,3265,3,146,73,0,3252,3253,5,347,0,0,3253,3265,
        3,146,73,0,3254,3265,3,674,337,0,3255,3265,3,664,332,0,3256,3257,
        5,369,0,0,3257,3265,3,442,221,0,3258,3265,3,684,342,0,3259,3265,
        3,696,348,0,3260,3261,5,382,0,0,3261,3265,3,442,221,0,3262,3263,
        5,349,0,0,3263,3265,3,442,221,0,3264,3236,1,0,0,0,3264,3237,1,0,
        0,0,3264,3238,1,0,0,0,3264,3239,1,0,0,0,3264,3240,1,0,0,0,3264,3241,
        1,0,0,0,3264,3242,1,0,0,0,3264,3243,1,0,0,0,3264,3244,1,0,0,0,3264,
        3246,1,0,0,0,3264,3248,1,0,0,0,3264,3250,1,0,0,0,3264,3252,1,0,0,
        0,3264,3254,1,0,0,0,3264,3255,1,0,0,0,3264,3256,1,0,0,0,3264,3258,
        1,0,0,0,3264,3259,1,0,0,0,3264,3260,1,0,0,0,3264,3262,1,0,0,0,3265,
        573,1,0,0,0,3266,3267,5,107,0,0,3267,3268,5,8,0,0,3268,3269,3,576,
        288,0,3269,3270,5,9,0,0,3270,575,1,0,0,0,3271,3273,3,578,289,0,3272,
        3271,1,0,0,0,3272,3273,1,0,0,0,3273,577,1,0,0,0,3274,3275,6,289,
        -1,0,3275,3276,3,580,290,0,3276,3282,1,0,0,0,3277,3278,10,1,0,0,
        3278,3279,5,5,0,0,3279,3281,3,580,290,0,3280,3277,1,0,0,0,3281,3284,
        1,0,0,0,3282,3280,1,0,0,0,3282,3283,1,0,0,0,3283,579,1,0,0,0,3284,
        3282,1,0,0,0,3285,3290,3,678,339,0,3286,3290,3,662,331,0,3287,3290,
        3,676,338,0,3288,3290,3,698,349,0,3289,3285,1,0,0,0,3289,3286,1,
        0,0,0,3289,3287,1,0,0,0,3289,3288,1,0,0,0,3290,581,1,0,0,0,3291,
        3292,5,108,0,0,3292,3293,5,8,0,0,3293,3294,3,584,292,0,3294,3295,
        5,9,0,0,3295,583,1,0,0,0,3296,3298,3,586,293,0,3297,3296,1,0,0,0,
        3297,3298,1,0,0,0,3298,585,1,0,0,0,3299,3300,6,293,-1,0,3300,3301,
        3,588,294,0,3301,3307,1,0,0,0,3302,3303,10,1,0,0,3303,3304,5,5,0,
        0,3304,3306,3,588,294,0,3305,3302,1,0,0,0,3306,3309,1,0,0,0,3307,
        3305,1,0,0,0,3307,3308,1,0,0,0,3308,587,1,0,0,0,3309,3307,1,0,0,
        0,3310,3315,3,678,339,0,3311,3315,3,662,331,0,3312,3313,5,117,0,
        0,3313,3315,3,146,73,0,3314,3310,1,0,0,0,3314,3311,1,0,0,0,3314,
        3312,1,0,0,0,3315,589,1,0,0,0,3316,3317,5,110,0,0,3317,3318,5,8,
        0,0,3318,3319,3,592,296,0,3319,3320,5,9,0,0,3320,591,1,0,0,0,3321,
        3323,3,594,297,0,3322,3321,1,0,0,0,3322,3323,1,0,0,0,3323,593,1,
        0,0,0,3324,3325,6,297,-1,0,3325,3326,3,596,298,0,3326,3332,1,0,0,
        0,3327,3328,10,1,0,0,3328,3329,5,5,0,0,3329,3331,3,596,298,0,3330,
        3327,1,0,0,0,3331,3334,1,0,0,0,3332,3330,1,0,0,0,3332,3333,1,0,0,
        0,3333,595,1,0,0,0,3334,3332,1,0,0,0,3335,3341,3,676,338,0,3336,
        3341,3,698,349,0,3337,3341,3,678,339,0,3338,3339,5,193,0,0,3339,
        3341,3,442,221,0,3340,3335,1,0,0,0,3340,3336,1,0,0,0,3340,3337,1,
        0,0,0,3340,3338,1,0,0,0,3341,597,1,0,0,0,3342,3343,5,109,0,0,3343,
        3344,5,8,0,0,3344,3345,3,600,300,0,3345,3346,5,9,0,0,3346,599,1,
        0,0,0,3347,3349,3,602,301,0,3348,3347,1,0,0,0,3348,3349,1,0,0,0,
        3349,601,1,0,0,0,3350,3351,6,301,-1,0,3351,3352,3,604,302,0,3352,
        3358,1,0,0,0,3353,3354,10,1,0,0,3354,3355,5,5,0,0,3355,3357,3,604,
        302,0,3356,3353,1,0,0,0,3357,3360,1,0,0,0,3358,3356,1,0,0,0,3358,
        3359,1,0,0,0,3359,603,1,0,0,0,3360,3358,1,0,0,0,3361,3371,3,668,
        334,0,3362,3363,5,41,0,0,3363,3371,3,146,73,0,3364,3371,3,678,339,
        0,3365,3371,3,662,331,0,3366,3371,3,676,338,0,3367,3371,3,688,344,
        0,3368,3371,3,674,337,0,3369,3371,3,672,336,0,3370,3361,1,0,0,0,
        3370,3362,1,0,0,0,3370,3364,1,0,0,0,3370,3365,1,0,0,0,3370,3366,
        1,0,0,0,3370,3367,1,0,0,0,3370,3368,1,0,0,0,3370,3369,1,0,0,0,3371,
        605,1,0,0,0,3372,3373,5,102,0,0,3373,3374,5,8,0,0,3374,3375,3,608,
        304,0,3375,3376,5,9,0,0,3376,607,1,0,0,0,3377,3379,3,610,305,0,3378,
        3377,1,0,0,0,3378,3379,1,0,0,0,3379,609,1,0,0,0,3380,3381,6,305,
        -1,0,3381,3382,3,612,306,0,3382,3388,1,0,0,0,3383,3384,10,1,0,0,
        3384,3385,5,5,0,0,3385,3387,3,612,306,0,3386,3383,1,0,0,0,3387,3390,
        1,0,0,0,3388,3386,1,0,0,0,3388,3389,1,0,0,0,3389,611,1,0,0,0,3390,
        3388,1,0,0,0,3391,3394,5,424,0,0,3392,3394,3,716,358,0,3393,3391,
        1,0,0,0,3393,3392,1,0,0,0,3394,613,1,0,0,0,3395,3396,5,105,0,0,3396,
        3397,5,8,0,0,3397,3398,3,616,308,0,3398,3399,5,9,0,0,3399,615,1,
        0,0,0,3400,3402,3,618,309,0,3401,3400,1,0,0,0,3401,3402,1,0,0,0,
        3402,617,1,0,0,0,3403,3404,6,309,-1,0,3404,3405,3,620,310,0,3405,
        3411,1,0,0,0,3406,3407,10,1,0,0,3407,3408,5,5,0,0,3408,3410,3,620,
        310,0,3409,3406,1,0,0,0,3410,3413,1,0,0,0,3411,3409,1,0,0,0,3411,
        3412,1,0,0,0,3412,619,1,0,0,0,3413,3411,1,0,0,0,3414,3415,5,381,
        0,0,3415,3419,3,442,221,0,3416,3417,5,140,0,0,3417,3419,3,442,221,
        0,3418,3414,1,0,0,0,3418,3416,1,0,0,0,3419,621,1,0,0,0,3420,3421,
        5,115,0,0,3421,3422,5,8,0,0,3422,3423,3,624,312,0,3423,3424,5,9,
        0,0,3424,623,1,0,0,0,3425,3427,3,626,313,0,3426,3425,1,0,0,0,3426,
        3427,1,0,0,0,3427,625,1,0,0,0,3428,3429,6,313,-1,0,3429,3430,3,628,
        314,0,3430,3436,1,0,0,0,3431,3432,10,1,0,0,3432,3433,5,5,0,0,3433,
        3435,3,628,314,0,3434,3431,1,0,0,0,3435,3438,1,0,0,0,3436,3434,1,
        0,0,0,3436,3437,1,0,0,0,3437,627,1,0,0,0,3438,3436,1,0,0,0,3439,
        3450,3,668,334,0,3440,3450,3,662,331,0,3441,3450,3,676,338,0,3442,
        3443,5,312,0,0,3443,3450,3,160,80,0,3444,3445,5,172,0,0,3445,3450,
        3,160,80,0,3446,3447,5,50,0,0,3447,3450,3,146,73,0,3448,3450,3,688,
        344,0,3449,3439,1,0,0,0,3449,3440,1,0,0,0,3449,3441,1,0,0,0,3449,
        3442,1,0,0,0,3449,3444,1,0,0,0,3449,3446,1,0,0,0,3449,3448,1,0,0,
        0,3450,629,1,0,0,0,3451,3452,5,106,0,0,3452,3453,5,8,0,0,3453,3454,
        3,632,316,0,3454,3455,5,9,0,0,3455,631,1,0,0,0,3456,3458,3,634,317,
        0,3457,3456,1,0,0,0,3457,3458,1,0,0,0,3458,633,1,0,0,0,3459,3460,
        6,317,-1,0,3460,3461,3,636,318,0,3461,3467,1,0,0,0,3462,3463,10,
        1,0,0,3463,3464,5,5,0,0,3464,3466,3,636,318,0,3465,3462,1,0,0,0,
        3466,3469,1,0,0,0,3467,3465,1,0,0,0,3467,3468,1,0,0,0,3468,635,1,
        0,0,0,3469,3467,1,0,0,0,3470,3478,3,666,333,0,3471,3478,3,678,339,
        0,3472,3473,5,134,0,0,3473,3478,3,442,221,0,3474,3478,3,662,331,
        0,3475,3478,3,676,338,0,3476,3478,3,668,334,0,3477,3470,1,0,0,0,
        3477,3471,1,0,0,0,3477,3472,1,0,0,0,3477,3474,1,0,0,0,3477,3475,
        1,0,0,0,3477,3476,1,0,0,0,3478,637,1,0,0,0,3479,3480,5,111,0,0,3480,
        3481,5,8,0,0,3481,3482,3,640,320,0,3482,3483,5,9,0,0,3483,639,1,
        0,0,0,3484,3486,3,642,321,0,3485,3484,1,0,0,0,3485,3486,1,0,0,0,
        3486,641,1,0,0,0,3487,3488,6,321,-1,0,3488,3489,3,644,322,0,3489,
        3495,1,0,0,0,3490,3491,10,1,0,0,3491,3492,5,5,0,0,3492,3494,3,644,
        322,0,3493,3490,1,0,0,0,3494,3497,1,0,0,0,3495,3493,1,0,0,0,3495,
        3496,1,0,0,0,3496,643,1,0,0,0,3497,3495,1,0,0,0,3498,3504,3,700,
        350,0,3499,3504,3,676,338,0,3500,3504,3,668,334,0,3501,3502,5,380,
        0,0,3502,3504,3,160,80,0,3503,3498,1,0,0,0,3503,3499,1,0,0,0,3503,
        3500,1,0,0,0,3503,3501,1,0,0,0,3504,645,1,0,0,0,3505,3506,5,112,
        0,0,3506,3507,5,8,0,0,3507,3508,3,648,324,0,3508,3509,5,9,0,0,3509,
        647,1,0,0,0,3510,3512,3,650,325,0,3511,3510,1,0,0,0,3511,3512,1,
        0,0,0,3512,649,1,0,0,0,3513,3514,6,325,-1,0,3514,3515,3,652,326,
        0,3515,3521,1,0,0,0,3516,3517,10,1,0,0,3517,3518,5,5,0,0,3518,3520,
        3,652,326,0,3519,3516,1,0,0,0,3520,3523,1,0,0,0,3521,3519,1,0,0,
        0,3521,3522,1,0,0,0,3522,651,1,0,0,0,3523,3521,1,0,0,0,3524,3530,
        3,700,350,0,3525,3530,3,676,338,0,3526,3530,3,662,331,0,3527,3528,
        5,246,0,0,3528,3530,3,442,221,0,3529,3524,1,0,0,0,3529,3525,1,0,
        0,0,3529,3526,1,0,0,0,3529,3527,1,0,0,0,3530,653,1,0,0,0,3531,3532,
        5,170,0,0,3532,3533,5,8,0,0,3533,3534,3,656,328,0,3534,3535,5,9,
        0,0,3535,655,1,0,0,0,3536,3538,3,658,329,0,3537,3536,1,0,0,0,3537,
        3538,1,0,0,0,3538,657,1,0,0,0,3539,3540,6,329,-1,0,3540,3541,3,660,
        330,0,3541,3547,1,0,0,0,3542,3543,10,1,0,0,3543,3544,5,5,0,0,3544,
        3546,3,660,330,0,3545,3542,1,0,0,0,3546,3549,1,0,0,0,3547,3545,1,
        0,0,0,3547,3548,1,0,0,0,3548,659,1,0,0,0,3549,3547,1,0,0,0,3550,
        3556,3,666,333,0,3551,3552,5,178,0,0,3552,3556,3,160,80,0,3553,3554,
        5,271,0,0,3554,3556,3,438,219,0,3555,3550,1,0,0,0,3555,3551,1,0,
        0,0,3555,3553,1,0,0,0,3556,661,1,0,0,0,3557,3558,5,154,0,0,3558,
        3559,3,442,221,0,3559,663,1,0,0,0,3560,3561,5,206,0,0,3561,3562,
        3,142,71,0,3562,665,1,0,0,0,3563,3564,5,343,0,0,3564,3565,3,718,
        359,0,3565,667,1,0,0,0,3566,3567,5,236,0,0,3567,3568,3,160,80,0,
        3568,669,1,0,0,0,3569,3570,5,321,0,0,3570,3571,3,146,73,0,3571,671,
        1,0,0,0,3572,3573,5,22,0,0,3573,3574,3,146,73,0,3574,673,1,0,0,0,
        3575,3576,5,157,0,0,3576,3577,3,704,352,0,3577,675,1,0,0,0,3578,
        3579,5,214,0,0,3579,3580,3,146,73,0,3580,677,1,0,0,0,3581,3582,5,
        306,0,0,3582,3583,3,442,221,0,3583,679,1,0,0,0,3584,3585,5,55,0,
        0,3585,3586,3,442,221,0,3586,681,1,0,0,0,3587,3588,5,264,0,0,3588,
        3589,3,146,73,0,3589,683,1,0,0,0,3590,3591,5,346,0,0,3591,3592,3,
        442,221,0,3592,685,1,0,0,0,3593,3596,5,424,0,0,3594,3596,3,442,221,
        0,3595,3593,1,0,0,0,3595,3594,1,0,0,0,3596,687,1,0,0,0,3597,3598,
        5,355,0,0,3598,3599,3,442,221,0,3599,689,1,0,0,0,3600,3601,5,216,
        0,0,3601,3602,3,160,80,0,3602,691,1,0,0,0,3603,3604,5,205,0,0,3604,
        3605,3,142,71,0,3605,693,1,0,0,0,3606,3607,5,204,0,0,3607,3608,3,
        142,71,0,3608,695,1,0,0,0,3609,3610,5,91,0,0,3610,3611,3,442,221,
        0,3611,697,1,0,0,0,3612,3613,5,79,0,0,3613,3614,3,146,73,0,3614,
        699,1,0,0,0,3615,3616,5,355,0,0,3616,3617,3,714,357,0,3617,701,1,
        0,0,0,3618,3619,5,420,0,0,3619,703,1,0,0,0,3620,3621,6,352,-1,0,
        3621,3622,3,706,353,0,3622,3628,1,0,0,0,3623,3624,10,1,0,0,3624,
        3625,5,4,0,0,3625,3627,3,706,353,0,3626,3623,1,0,0,0,3627,3630,1,
        0,0,0,3628,3626,1,0,0,0,3628,3629,1,0,0,0,3629,705,1,0,0,0,3630,
        3628,1,0,0,0,3631,3634,3,146,73,0,3632,3634,5,417,0,0,3633,3631,
        1,0,0,0,3633,3632,1,0,0,0,3634,707,1,0,0,0,3635,3638,3,146,73,0,
        3636,3638,5,416,0,0,3637,3635,1,0,0,0,3637,3636,1,0,0,0,3638,709,
        1,0,0,0,3639,3642,3,146,73,0,3640,3642,5,419,0,0,3641,3639,1,0,0,
        0,3641,3640,1,0,0,0,3642,711,1,0,0,0,3643,3646,3,146,73,0,3644,3646,
        5,418,0,0,3645,3643,1,0,0,0,3645,3644,1,0,0,0,3646,713,1,0,0,0,3647,
        3650,3,146,73,0,3648,3650,5,422,0,0,3649,3647,1,0,0,0,3649,3648,
        1,0,0,0,3650,715,1,0,0,0,3651,3652,5,423,0,0,3652,717,1,0,0,0,3653,
        3656,3,146,73,0,3654,3656,5,415,0,0,3655,3653,1,0,0,0,3655,3654,
        1,0,0,0,3656,719,1,0,0,0,3657,3660,3,146,73,0,3658,3660,5,421,0,
        0,3659,3657,1,0,0,0,3659,3658,1,0,0,0,3660,721,1,0,0,0,3661,3666,
        3,146,73,0,3662,3666,5,168,0,0,3663,3666,5,215,0,0,3664,3666,5,245,
        0,0,3665,3661,1,0,0,0,3665,3662,1,0,0,0,3665,3663,1,0,0,0,3665,3664,
        1,0,0,0,3666,723,1,0,0,0,3667,3669,3,726,363,0,3668,3667,1,0,0,0,
        3668,3669,1,0,0,0,3669,725,1,0,0,0,3670,3671,6,363,-1,0,3671,3672,
        3,730,365,0,3672,3677,1,0,0,0,3673,3674,10,1,0,0,3674,3676,3,730,
        365,0,3675,3673,1,0,0,0,3676,3679,1,0,0,0,3677,3675,1,0,0,0,3677,
        3678,1,0,0,0,3678,727,1,0,0,0,3679,3677,1,0,0,0,3680,3681,6,364,
        -1,0,3681,3682,3,730,365,0,3682,3688,1,0,0,0,3683,3684,10,1,0,0,
        3684,3685,5,5,0,0,3685,3687,3,730,365,0,3686,3683,1,0,0,0,3687,3690,
        1,0,0,0,3688,3686,1,0,0,0,3688,3689,1,0,0,0,3689,729,1,0,0,0,3690,
        3688,1,0,0,0,3691,3692,3,92,46,0,3692,3693,3,128,64,0,3693,731,1,
        0,0,0,3694,3696,3,734,367,0,3695,3694,1,0,0,0,3695,3696,1,0,0,0,
        3696,733,1,0,0,0,3697,3698,6,367,-1,0,3698,3699,3,736,368,0,3699,
        3705,1,0,0,0,3700,3701,10,1,0,0,3701,3702,5,5,0,0,3702,3704,3,736,
        368,0,3703,3700,1,0,0,0,3704,3707,1,0,0,0,3705,3703,1,0,0,0,3705,
        3706,1,0,0,0,3706,735,1,0,0,0,3707,3705,1,0,0,0,3708,3709,3,92,46,
        0,3709,3710,3,138,69,0,3710,737,1,0,0,0,3711,3712,5,23,0,0,3712,
        3713,5,424,0,0,3713,739,1,0,0,0,3714,3715,5,26,0,0,3715,3716,5,8,
        0,0,3716,3717,5,424,0,0,3717,3725,5,9,0,0,3718,3719,5,26,0,0,3719,
        3720,5,8,0,0,3720,3721,5,424,0,0,3721,3722,5,5,0,0,3722,3723,5,424,
        0,0,3723,3725,5,9,0,0,3724,3714,1,0,0,0,3724,3718,1,0,0,0,3725,741,
        1,0,0,0,3726,3733,5,7,0,0,3727,3733,3,744,372,0,3728,3729,3,744,
        372,0,3729,3730,5,5,0,0,3730,3731,5,7,0,0,3731,3733,1,0,0,0,3732,
        3726,1,0,0,0,3732,3727,1,0,0,0,3732,3728,1,0,0,0,3732,3733,1,0,0,
        0,3733,743,1,0,0,0,3734,3735,6,372,-1,0,3735,3736,3,746,373,0,3736,
        3742,1,0,0,0,3737,3738,10,1,0,0,3738,3739,5,5,0,0,3739,3741,3,746,
        373,0,3740,3737,1,0,0,0,3741,3744,1,0,0,0,3742,3740,1,0,0,0,3742,
        3743,1,0,0,0,3743,745,1,0,0,0,3744,3742,1,0,0,0,3745,3746,3,92,46,
        0,3746,3747,3,106,53,0,3747,3748,5,14,0,0,3748,3751,1,0,0,0,3749,
        3751,3,94,47,0,3750,3745,1,0,0,0,3750,3749,1,0,0,0,3751,3752,1,0,
        0,0,3752,3753,3,818,409,0,3753,3754,3,128,64,0,3754,3759,1,0,0,0,
        3755,3756,3,116,58,0,3756,3757,3,444,222,0,3757,3759,1,0,0,0,3758,
        3750,1,0,0,0,3758,3755,1,0,0,0,3759,747,1,0,0,0,3760,3761,7,7,0,
        0,3761,749,1,0,0,0,3762,3764,3,752,376,0,3763,3762,1,0,0,0,3763,
        3764,1,0,0,0,3764,751,1,0,0,0,3765,3807,5,28,0,0,3766,3807,5,29,
        0,0,3767,3807,5,30,0,0,3768,3807,5,31,0,0,3769,3807,5,32,0,0,3770,
        3807,5,33,0,0,3771,3807,5,34,0,0,3772,3807,5,35,0,0,3773,3807,5,
        38,0,0,3774,3807,5,44,0,0,3775,3807,5,43,0,0,3776,3807,5,45,0,0,
        3777,3807,5,53,0,0,3778,3807,5,54,0,0,3779,3807,5,70,0,0,3780,3807,
        5,78,0,0,3781,3807,5,88,0,0,3782,3807,5,150,0,0,3783,3807,5,173,
        0,0,3784,3807,5,180,0,0,3785,3807,5,179,0,0,3786,3807,5,200,0,0,
        3787,3807,5,232,0,0,3788,3807,5,280,0,0,3789,3807,5,281,0,0,3790,
        3807,5,287,0,0,3791,3807,5,288,0,0,3792,3807,5,326,0,0,3793,3807,
        5,327,0,0,3794,3807,5,338,0,0,3795,3807,5,389,0,0,3796,3807,5,390,
        0,0,3797,3807,5,394,0,0,3798,3807,5,395,0,0,3799,3807,5,397,0,0,
        3800,3807,5,399,0,0,3801,3807,5,400,0,0,3802,3807,5,401,0,0,3803,
        3807,5,402,0,0,3804,3805,5,69,0,0,3805,3807,5,424,0,0,3806,3765,
        1,0,0,0,3806,3766,1,0,0,0,3806,3767,1,0,0,0,3806,3768,1,0,0,0,3806,
        3769,1,0,0,0,3806,3770,1,0,0,0,3806,3771,1,0,0,0,3806,3772,1,0,0,
        0,3806,3773,1,0,0,0,3806,3774,1,0,0,0,3806,3775,1,0,0,0,3806,3776,
        1,0,0,0,3806,3777,1,0,0,0,3806,3778,1,0,0,0,3806,3779,1,0,0,0,3806,
        3780,1,0,0,0,3806,3781,1,0,0,0,3806,3782,1,0,0,0,3806,3783,1,0,0,
        0,3806,3784,1,0,0,0,3806,3785,1,0,0,0,3806,3786,1,0,0,0,3806,3787,
        1,0,0,0,3806,3788,1,0,0,0,3806,3789,1,0,0,0,3806,3790,1,0,0,0,3806,
        3791,1,0,0,0,3806,3792,1,0,0,0,3806,3793,1,0,0,0,3806,3794,1,0,0,
        0,3806,3795,1,0,0,0,3806,3796,1,0,0,0,3806,3797,1,0,0,0,3806,3798,
        1,0,0,0,3806,3799,1,0,0,0,3806,3800,1,0,0,0,3806,3801,1,0,0,0,3806,
        3802,1,0,0,0,3806,3803,1,0,0,0,3806,3804,1,0,0,0,3807,753,1,0,0,
        0,3808,3810,3,756,378,0,3809,3808,1,0,0,0,3809,3810,1,0,0,0,3810,
        755,1,0,0,0,3811,3818,5,80,0,0,3812,3813,5,80,0,0,3813,3814,5,8,
        0,0,3814,3815,3,86,43,0,3815,3816,5,9,0,0,3816,3818,1,0,0,0,3817,
        3811,1,0,0,0,3817,3812,1,0,0,0,3818,757,1,0,0,0,3819,3820,5,95,0,
        0,3820,3821,5,8,0,0,3821,3822,5,424,0,0,3822,3828,5,9,0,0,3823,3824,
        5,96,0,0,3824,3825,5,8,0,0,3825,3826,5,424,0,0,3826,3828,5,9,0,0,
        3827,3819,1,0,0,0,3827,3823,1,0,0,0,3828,759,1,0,0,0,3829,3831,3,
        762,381,0,3830,3829,1,0,0,0,3830,3831,1,0,0,0,3831,761,1,0,0,0,3832,
        3833,7,8,0,0,3833,763,1,0,0,0,3834,3836,5,137,0,0,3835,3834,1,0,
        0,0,3835,3836,1,0,0,0,3836,765,1,0,0,0,3837,3839,3,768,384,0,3838,
        3837,1,0,0,0,3838,3839,1,0,0,0,3839,767,1,0,0,0,3840,3841,6,384,
        -1,0,3841,3842,3,770,385,0,3842,3848,1,0,0,0,3843,3844,10,1,0,0,
        3844,3845,5,5,0,0,3845,3847,3,770,385,0,3846,3843,1,0,0,0,3847,3850,
        1,0,0,0,3848,3846,1,0,0,0,3848,3849,1,0,0,0,3849,769,1,0,0,0,3850,
        3848,1,0,0,0,3851,3852,3,92,46,0,3852,3853,3,106,53,0,3853,3854,
        5,14,0,0,3854,3857,1,0,0,0,3855,3857,3,94,47,0,3856,3851,1,0,0,0,
        3856,3855,1,0,0,0,3857,3858,1,0,0,0,3858,3859,3,128,64,0,3859,3864,
        1,0,0,0,3860,3861,3,116,58,0,3861,3862,3,444,222,0,3862,3864,1,0,
        0,0,3863,3856,1,0,0,0,3863,3860,1,0,0,0,3864,771,1,0,0,0,3865,3868,
        3,152,76,0,3866,3868,3,80,40,0,3867,3865,1,0,0,0,3867,3866,1,0,0,
        0,3868,773,1,0,0,0,3869,3871,3,776,388,0,3870,3869,1,0,0,0,3870,
        3871,1,0,0,0,3871,775,1,0,0,0,3872,3873,6,388,-1,0,3873,3874,3,778,
        389,0,3874,3879,1,0,0,0,3875,3876,10,1,0,0,3876,3878,3,778,389,0,
        3877,3875,1,0,0,0,3878,3881,1,0,0,0,3879,3877,1,0,0,0,3879,3880,
        1,0,0,0,3880,777,1,0,0,0,3881,3879,1,0,0,0,3882,3883,7,9,0,0,3883,
        779,1,0,0,0,3884,3885,7,10,0,0,3885,781,1,0,0,0,3886,3888,3,784,
        392,0,3887,3886,1,0,0,0,3887,3888,1,0,0,0,3888,783,1,0,0,0,3889,
        3890,6,392,-1,0,3890,3891,3,786,393,0,3891,3896,1,0,0,0,3892,3893,
        10,1,0,0,3893,3895,3,786,393,0,3894,3892,1,0,0,0,3895,3898,1,0,0,
        0,3896,3894,1,0,0,0,3896,3897,1,0,0,0,3897,785,1,0,0,0,3898,3896,
        1,0,0,0,3899,3952,3,84,42,0,3900,3901,5,23,0,0,3901,3902,5,2,0,0,
        3902,3952,5,424,0,0,3903,3904,5,24,0,0,3904,3905,5,2,0,0,3905,3952,
        5,424,0,0,3906,3952,3,738,369,0,3907,3952,3,740,370,0,3908,3952,
        3,842,421,0,3909,3952,3,160,80,0,3910,3911,3,160,80,0,3911,3912,
        5,2,0,0,3912,3913,3,160,80,0,3913,3952,1,0,0,0,3914,3952,5,27,0,
        0,3915,3952,5,42,0,0,3916,3952,5,59,0,0,3917,3952,5,77,0,0,3918,
        3952,5,86,0,0,3919,3952,5,187,0,0,3920,3952,5,186,0,0,3921,3952,
        5,194,0,0,3922,3952,5,209,0,0,3923,3952,5,229,0,0,3924,3952,5,235,
        0,0,3925,3952,5,243,0,0,3926,3952,5,247,0,0,3927,3952,5,249,0,0,
        3928,3952,5,250,0,0,3929,3952,5,252,0,0,3930,3952,5,254,0,0,3931,
        3952,5,255,0,0,3932,3952,5,256,0,0,3933,3952,5,258,0,0,3934,3952,
        5,272,0,0,3935,3952,5,273,0,0,3936,3952,5,289,0,0,3937,3952,5,290,
        0,0,3938,3952,5,297,0,0,3939,3952,5,300,0,0,3940,3952,5,302,0,0,
        3941,3952,5,303,0,0,3942,3952,5,304,0,0,3943,3952,5,305,0,0,3944,
        3952,5,325,0,0,3945,3952,5,332,0,0,3946,3952,5,333,0,0,3947,3952,
        5,334,0,0,3948,3952,5,336,0,0,3949,3952,5,378,0,0,3950,3952,5,392,
        0,0,3951,3899,1,0,0,0,3951,3900,1,0,0,0,3951,3903,1,0,0,0,3951,3906,
        1,0,0,0,3951,3907,1,0,0,0,3951,3908,1,0,0,0,3951,3909,1,0,0,0,3951,
        3910,1,0,0,0,3951,3914,1,0,0,0,3951,3915,1,0,0,0,3951,3916,1,0,0,
        0,3951,3917,1,0,0,0,3951,3918,1,0,0,0,3951,3919,1,0,0,0,3951,3920,
        1,0,0,0,3951,3921,1,0,0,0,3951,3922,1,0,0,0,3951,3923,1,0,0,0,3951,
        3924,1,0,0,0,3951,3925,1,0,0,0,3951,3926,1,0,0,0,3951,3927,1,0,0,
        0,3951,3928,1,0,0,0,3951,3929,1,0,0,0,3951,3930,1,0,0,0,3951,3931,
        1,0,0,0,3951,3932,1,0,0,0,3951,3933,1,0,0,0,3951,3934,1,0,0,0,3951,
        3935,1,0,0,0,3951,3936,1,0,0,0,3951,3937,1,0,0,0,3951,3938,1,0,0,
        0,3951,3939,1,0,0,0,3951,3940,1,0,0,0,3951,3941,1,0,0,0,3951,3942,
        1,0,0,0,3951,3943,1,0,0,0,3951,3944,1,0,0,0,3951,3945,1,0,0,0,3951,
        3946,1,0,0,0,3951,3947,1,0,0,0,3951,3948,1,0,0,0,3951,3949,1,0,0,
        0,3951,3950,1,0,0,0,3952,787,1,0,0,0,3953,3955,5,189,0,0,3954,3953,
        1,0,0,0,3954,3955,1,0,0,0,3955,789,1,0,0,0,3956,3957,5,5,0,0,3957,
        3959,3,792,396,0,3958,3956,1,0,0,0,3958,3959,1,0,0,0,3959,791,1,
        0,0,0,3960,3961,6,396,-1,0,3961,3962,3,794,397,0,3962,3968,1,0,0,
        0,3963,3964,10,1,0,0,3964,3965,5,5,0,0,3965,3967,3,794,397,0,3966,
        3963,1,0,0,0,3967,3970,1,0,0,0,3968,3966,1,0,0,0,3968,3969,1,0,0,
        0,3969,793,1,0,0,0,3970,3968,1,0,0,0,3971,3972,5,424,0,0,3972,795,
        1,0,0,0,3973,3974,7,11,0,0,3974,797,1,0,0,0,3975,3977,3,800,400,
        0,3976,3975,1,0,0,0,3976,3977,1,0,0,0,3977,799,1,0,0,0,3978,3979,
        7,12,0,0,3979,801,1,0,0,0,3980,3982,3,804,402,0,3981,3980,1,0,0,
        0,3981,3982,1,0,0,0,3982,803,1,0,0,0,3983,3984,7,13,0,0,3984,805,
        1,0,0,0,3985,3986,5,10,0,0,3986,3987,3,808,404,0,3987,3988,5,11,
        0,0,3988,3990,1,0,0,0,3989,3985,1,0,0,0,3989,3990,1,0,0,0,3990,807,
        1,0,0,0,3991,3992,6,404,-1,0,3992,3993,3,810,405,0,3993,3998,1,0,
        0,0,3994,3995,10,1,0,0,3995,3997,3,810,405,0,3996,3994,1,0,0,0,3997,
        4000,1,0,0,0,3998,3996,1,0,0,0,3998,3999,1,0,0,0,3999,809,1,0,0,
        0,4000,3998,1,0,0,0,4001,4002,3,160,80,0,4002,4003,5,8,0,0,4003,
        4004,3,724,362,0,4004,4005,5,9,0,0,4005,811,1,0,0,0,4006,4008,3,
        814,407,0,4007,4006,1,0,0,0,4007,4008,1,0,0,0,4008,813,1,0,0,0,4009,
        4010,6,407,-1,0,4010,4011,3,816,408,0,4011,4016,1,0,0,0,4012,4013,
        10,1,0,0,4013,4015,3,816,408,0,4014,4012,1,0,0,0,4015,4018,1,0,0,
        0,4016,4014,1,0,0,0,4016,4017,1,0,0,0,4017,815,1,0,0,0,4018,4016,
        1,0,0,0,4019,4020,7,14,0,0,4020,817,1,0,0,0,4021,4023,3,820,410,
        0,4022,4021,1,0,0,0,4022,4023,1,0,0,0,4023,819,1,0,0,0,4024,4025,
        6,410,-1,0,4025,4026,3,822,411,0,4026,4031,1,0,0,0,4027,4028,10,
        1,0,0,4028,4030,3,822,411,0,4029,4027,1,0,0,0,4030,4033,1,0,0,0,
        4031,4029,1,0,0,0,4031,4032,1,0,0,0,4032,821,1,0,0,0,4033,4031,1,
        0,0,0,4034,4054,3,738,369,0,4035,4054,3,758,379,0,4036,4054,3,160,
        80,0,4037,4054,5,60,0,0,4038,4054,5,188,0,0,4039,4054,5,196,0,0,
        4040,4054,5,239,0,0,4041,4054,5,242,0,0,4042,4054,5,244,0,0,4043,
        4054,5,253,0,0,4044,4054,5,289,0,0,4045,4054,5,290,0,0,4046,4054,
        5,296,0,0,4047,4054,5,319,0,0,4048,4054,5,331,0,0,4049,4054,5,339,
        0,0,4050,4054,5,340,0,0,4051,4054,5,392,0,0,4052,4054,5,405,0,0,
        4053,4034,1,0,0,0,4053,4035,1,0,0,0,4053,4036,1,0,0,0,4053,4037,
        1,0,0,0,4053,4038,1,0,0,0,4053,4039,1,0,0,0,4053,4040,1,0,0,0,4053,
        4041,1,0,0,0,4053,4042,1,0,0,0,4053,4043,1,0,0,0,4053,4044,1,0,0,
        0,4053,4045,1,0,0,0,4053,4046,1,0,0,0,4053,4047,1,0,0,0,4053,4048,
        1,0,0,0,4053,4049,1,0,0,0,4053,4050,1,0,0,0,4053,4051,1,0,0,0,4053,
        4052,1,0,0,0,4054,823,1,0,0,0,4055,4062,5,7,0,0,4056,4062,3,826,
        413,0,4057,4058,3,826,413,0,4058,4059,5,5,0,0,4059,4060,5,7,0,0,
        4060,4062,1,0,0,0,4061,4055,1,0,0,0,4061,4056,1,0,0,0,4061,4057,
        1,0,0,0,4061,4062,1,0,0,0,4062,825,1,0,0,0,4063,4064,6,413,-1,0,
        4064,4065,3,828,414,0,4065,4071,1,0,0,0,4066,4067,10,1,0,0,4067,
        4068,5,5,0,0,4068,4070,3,828,414,0,4069,4066,1,0,0,0,4070,4073,1,
        0,0,0,4071,4069,1,0,0,0,4071,4072,1,0,0,0,4072,827,1,0,0,0,4073,
        4071,1,0,0,0,4074,4075,3,92,46,0,4075,4076,3,818,409,0,4076,4082,
        1,0,0,0,4077,4078,3,92,46,0,4078,4079,3,818,409,0,4079,4080,3,80,
        40,0,4080,4082,1,0,0,0,4081,4074,1,0,0,0,4081,4077,1,0,0,0,4082,
        829,1,0,0,0,4083,4085,3,832,416,0,4084,4083,1,0,0,0,4084,4085,1,
        0,0,0,4085,831,1,0,0,0,4086,4087,7,15,0,0,4087,833,1,0,0,0,4088,
        4090,3,836,418,0,4089,4088,1,0,0,0,4089,4090,1,0,0,0,4090,835,1,
        0,0,0,4091,4092,6,418,-1,0,4092,4093,3,838,419,0,4093,4098,1,0,0,
        0,4094,4095,10,1,0,0,4095,4097,3,838,419,0,4096,4094,1,0,0,0,4097,
        4100,1,0,0,0,4098,4096,1,0,0,0,4098,4099,1,0,0,0,4099,837,1,0,0,
        0,4100,4098,1,0,0,0,4101,4110,3,738,369,0,4102,4110,3,758,379,0,
        4103,4110,3,160,80,0,4104,4110,5,196,0,0,4105,4110,5,242,0,0,4106,
        4110,5,253,0,0,4107,4110,5,319,0,0,4108,4110,5,405,0,0,4109,4101,
        1,0,0,0,4109,4102,1,0,0,0,4109,4103,1,0,0,0,4109,4104,1,0,0,0,4109,
        4105,1,0,0,0,4109,4106,1,0,0,0,4109,4107,1,0,0,0,4109,4108,1,0,0,
        0,4110,839,1,0,0,0,4111,4112,5,309,0,0,4112,4113,5,432,0,0,4113,
        841,1,0,0,0,4114,4115,5,24,0,0,4115,4116,5,8,0,0,4116,4117,5,424,
        0,0,4117,4118,5,9,0,0,4118,843,1,0,0,0,4119,4120,5,342,0,0,4120,
        4121,5,8,0,0,4121,4122,5,432,0,0,4122,4124,5,9,0,0,4123,4119,1,0,
        0,0,4123,4124,1,0,0,0,4124,845,1,0,0,0,4125,4132,5,348,0,0,4126,
        4127,5,348,0,0,4127,4128,5,8,0,0,4128,4129,3,848,424,0,4129,4130,
        5,9,0,0,4130,4132,1,0,0,0,4131,4125,1,0,0,0,4131,4126,1,0,0,0,4132,
        847,1,0,0,0,4133,4134,7,16,0,0,4134,849,1,0,0,0,4135,4136,7,17,0,
        0,4136,851,1,0,0,0,4137,4138,7,18,0,0,4138,853,1,0,0,0,233,856,861,
        870,888,902,918,932,936,939,953,957,960,971,977,987,994,1001,1005,
        1008,1021,1025,1028,1036,1053,1064,1068,1078,1084,1090,1096,1118,
        1128,1133,1145,1148,1151,1160,1198,1209,1211,1223,1236,1277,1287,
        1297,1308,1311,1314,1330,1362,1428,1662,1672,1680,1825,1833,1836,
        1845,1857,1907,2171,2174,2177,2181,2191,2204,2217,2229,2233,2244,
        2258,2272,2285,2295,2311,2315,2347,2470,2505,2521,2524,2533,2544,
        2573,2585,2590,2620,2629,2655,2717,2728,2738,2743,2752,2763,2766,
        2775,2780,2790,2818,2826,2836,2871,2879,2889,2900,2908,2918,2927,
        2935,2945,2953,2961,2971,2988,2996,3006,3030,3038,3048,3055,3063,
        3073,3081,3089,3099,3104,3112,3122,3130,3138,3148,3159,3167,3177,
        3184,3192,3202,3215,3223,3233,3264,3272,3282,3289,3297,3307,3314,
        3322,3332,3340,3348,3358,3370,3378,3388,3393,3401,3411,3418,3426,
        3436,3449,3457,3467,3477,3485,3495,3503,3511,3521,3529,3537,3547,
        3555,3595,3628,3633,3637,3641,3645,3649,3655,3659,3665,3668,3677,
        3688,3695,3705,3724,3732,3742,3750,3758,3763,3806,3809,3817,3827,
        3830,3835,3838,3848,3856,3863,3867,3870,3879,3887,3896,3951,3954,
        3958,3968,3976,3981,3989,3998,4007,4016,4022,4031,4053,4061,4071,
        4081,4084,4089,4098,4109,4123,4131
    ]

class LLVMParser ( Parser ):

    grammarFileName = "LLVMParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'<'", "'='", "'>'", "'|'", "','", "'!'", 
                     "'...'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
                     "'*'", "'acq_rel'", "'acquire'", "'add'", "'addrspace'", 
                     "'addrspacecast'", "'afn'", "'alias'", "'align:'", 
                     "'align'", "'alignstack'", "'alloca'", "'allocsize'", 
                     "'alwaysinline'", "'amdgpu_cs'", "'amdgpu_es'", "'amdgpu_gs'", 
                     "'amdgpu_hs'", "'amdgpu_kernel'", "'amdgpu_ls'", "'amdgpu_ps'", 
                     "'amdgpu_vs'", "'and'", "'any'", "'anyregcc'", "'appending'", 
                     "'arcp'", "'arg:'", "'argmemonly'", "'arm_aapcscc'", 
                     "'arm_aapcs_vfpcc'", "'arm_apcscc'", "'ashr'", "'asm'", 
                     "'atomic'", "'atomicrmw'", "'attributes:'", "'attributes'", 
                     "'available_externally'", "'avr_intrcc'", "'avr_signalcc'", 
                     "'baseType:'", "'bitcast'", "'blockaddress'", "'br'", 
                     "'builtin'", "'byval'", "'c'", "'call'", "'caller'", 
                     "'catch'", "'catchpad'", "'catchret'", "'catchswitch'", 
                     "'cc:'", "'cc'", "'ccc'", "'checksum:'", "'checksumkind:'", 
                     "'cleanup'", "'cleanuppad'", "'cleanupret'", "'cmpxchg'", 
                     "'cold'", "'coldcc'", "'column:'", "'comdat'", "'common'", 
                     "'configMacros:'", "'constant'", "'containingType:'", 
                     "'contract'", "'convergent'", "'count:'", "'cxx_fast_tlscc'", 
                     "'datalayout'", "'debugInfoForProfiling:'", "'declaration:'", 
                     "'declare'", "'default'", "'define'", "'dereferenceable'", 
                     "'dereferenceable_or_null'", "'!DIBasicType'", "'!DICompileUnit'", 
                     "'!DICompositeType'", "'!DIDerivedType'", "'!DIEnumerator'", 
                     "'!DIExpression'", "'!DIFile'", "'!DIGlobalVariable'", 
                     "'!DIGlobalVariableExpression'", "'!DIImportedEntity'", 
                     "'!DILexicalBlock'", "'!DILexicalBlockFile'", "'!DILocalVariable'", 
                     "'!DILocation'", "'!DIMacro'", "'!DIMacroFile'", "'!DIModule'", 
                     "'!DINamespace'", "'!DIObjCProperty'", "'directory:'", 
                     "'discriminator:'", "'distinct'", "'!DISubprogram'", 
                     "'!DISubrange'", "'!DISubroutineType'", "'!DITemplateTypeParameter'", 
                     "'!DITemplateValueParameter'", "'dllexport'", "'dllimport'", 
                     "'double'", "'dso_local'", "'dso_preemptable'", "'dwarfAddressSpace:'", 
                     "'dwoId:'", "'elements:'", "'emissionKind:'", "'encoding:'", 
                     "'entity:'", "'enums:'", "'eq'", "'exact'", "'exactmatch'", 
                     "'exportSymbols:'", "'expr:'", "'external'", "'externally_initialized'", 
                     "'extern_weak'", "'extractelement'", "'extractvalue'", 
                     "'extraData:'", "'fadd'", "'false'", "'fast'", "'fastcc'", 
                     "'fcmp'", "'fdiv'", "'fence'", "'file:'", "'filename:'", 
                     "'filter'", "'flags:'", "'float'", "'fmul'", "'fp128'", 
                     "'fpext'", "'fptosi'", "'fptoui'", "'fptrunc'", "'frem'", 
                     "'from'", "'fsub'", "'FullDebug'", "'gc'", "'!GenericDINode'", 
                     "'getelementptr'", "'getter:'", "'ghccc'", "'global'", 
                     "'globals:'", "'gnuPubnames:'", "'half'", "'header:'", 
                     "'hhvmcc'", "'hhvm_ccc'", "'hidden'", "'icmp'", "'identifier:'", 
                     "'ifunc'", "'imports:'", "'inaccessiblememonly'", "'inaccessiblemem_or_argmemonly'", 
                     "'inalloca'", "'inbounds'", "'includePath:'", "'indirectbr'", 
                     "'initialexec'", "'inlinedAt:'", "'inlinehint'", "'inrange'", 
                     "'inreg'", "'insertelement'", "'insertvalue'", "'inteldialect'", 
                     "'intel_ocl_bicc'", "'internal'", "'inttoptr'", "'invoke'", 
                     "'isDefinition:'", "'isLocal:'", "'isOptimized:'", 
                     "'isUnsigned:'", "'isysroot:'", "'jumptable'", "'label'", 
                     "'landingpad'", "'language:'", "'largest'", "'line:'", 
                     "'LineTablesOnly'", "'linkageName:'", "'linkonce'", 
                     "'linkonce_odr'", "'load'", "'localdynamic'", "'localexec'", 
                     "'local_unnamed_addr'", "'lowerBound:'", "'lshr'", 
                     "'macros:'", "'max'", "'metadata'", "'min'", "'minsize'", 
                     "'module'", "'monotonic'", "'msp430_intrcc'", "'mul'", 
                     "'musttail'", "'naked'", "'name:'", "'nand'", "'ne'", 
                     "'nest'", "'ninf'", "'nnan'", "'noalias'", "'nobuiltin'", 
                     "'nocapture'", "'NoDebug'", "'nodes:'", "'noduplicate'", 
                     "'noduplicates'", "'noimplicitfloat'", "'noinline'", 
                     "'none'", "'nonlazybind'", "'nonnull'", "'norecurse'", 
                     "'noredzone'", "'noreturn'", "'notail'", "'nounwind'", 
                     "'nsw'", "'nsz'", "'null'", "'nuw'", "'oeq'", "'offset:'", 
                     "'oge'", "'ogt'", "'ole'", "'olt'", "'one'", "'opaque'", 
                     "'operands:'", "'optnone'", "'optsize'", "'or'", "'ord'", 
                     "'personality'", "'phi'", "'ppc_fp128'", "'prefix'", 
                     "'preserve_allcc'", "'preserve_mostcc'", "'private'", 
                     "'producer:'", "'prologue'", "'protected'", "'ptrtoint'", 
                     "'ptx_device'", "'ptx_kernel'", "'readnone'", "'readonly'", 
                     "'reassoc'", "'release'", "'resume'", "'ret'", "'retainedTypes:'", 
                     "'returned'", "'returns_twice'", "'runtimeLang:'", 
                     "'runtimeVersion:'", "'safestack'", "'samesize'", "'sanitize_address'", 
                     "'sanitize_hwaddress'", "'sanitize_memory'", "'sanitize_thread'", 
                     "'scope:'", "'scopeLine:'", "'sdiv'", "'section'", 
                     "'select'", "'seq_cst'", "'setter:'", "'sext'", "'sge'", 
                     "'sgt'", "'shl'", "'shufflevector'", "'sideeffect'", 
                     "'signext'", "'sitofp'", "'size:'", "'sle'", "'slt'", 
                     "'source_filename'", "'speculatable'", "'spir_func'", 
                     "'spir_kernel'", "'splitDebugFilename:'", "'splitDebugInlining:'", 
                     "'srem'", "'sret'", "'ssp'", "'sspreq'", "'sspstrong'", 
                     "'store'", "'strictfp'", "'sub'", "'swiftcc'", "'swifterror'", 
                     "'swiftself'", "'switch'", "'syncscope'", "'tag:'", 
                     "'tail'", "'target'", "'templateParams:'", "'thisAdjustment:'", 
                     "'thread_local'", "'thrownTypes:'", "'to'", "'token'", 
                     "'triple'", "'true'", "'trunc'", "'type:'", "'type'", 
                     "'types:'", "'udiv'", "'ueq'", "'uge'", "'ugt'", "'uitofp'", 
                     "'ule'", "'ult'", "'umax'", "'umin'", "'undef'", "'une'", 
                     "'unit:'", "'unnamed_addr'", "'uno'", "'unordered'", 
                     "'unreachable'", "'unwind'", "'urem'", "'uselistorder'", 
                     "'uselistorder_bb'", "'uwtable'", "'va_arg'", "'value:'", 
                     "'var:'", "'variables:'", "'virtualIndex:'", "'virtuality:'", 
                     "'void'", "'vtableHolder:'", "'weak'", "'weak_odr'", 
                     "'webkit_jscc'", "'win64cc'", "'within'", "'writeonly'", 
                     "'x'", "'x86_64_sysvcc'", "'x86_fastcallcc'", "'x86_fp80'", 
                     "'x86_intrcc'", "'x86_mmx'", "'x86_regcallcc'", "'x86_stdcallcc'", 
                     "'x86_thiscallcc'", "'x86_vectorcallcc'", "'xchg'", 
                     "'xor'", "'zeroext'", "'zeroinitializer'", "'zext'", 
                     "'volatile'" ]

    symbolicNames = [ "<INVALID>", "LT", "EQSIGN", "GT", "VDASH", "COMMA", 
                      "BANG", "DOTS", "LPAREN", "RPAREN", "LBRACK", "RBRACK", 
                      "LBRACE", "RBRACE", "STAR", "ACQ_REL", "ACQUIRE", 
                      "ADD", "ADDRSPACE", "ADDRSPACECAST", "AFN", "ALIAS", 
                      "ALIGNCOLON", "ALIGN", "ALIGNSTACK", "ALLOCA", "ALLOCSIZE", 
                      "ALWAYSINLINE", "AMDGPU_CS", "AMDGPU_ES", "AMDGPU_GS", 
                      "AMDGPU_HS", "AMDGPU_KERNEL", "AMDGPU_LS", "AMDGPU_PS", 
                      "AMDGPU_VS", "AND", "ANY", "ANYREGCC", "APPENDING", 
                      "ARCP", "ARGCOLON", "ARGMEMONLY", "ARM_AAPCSCC", "ARM_AAPCS_VFPCC", 
                      "ARM_APCSCC", "ASHR", "ASM", "ATOMIC", "ATOMICRMW", 
                      "ATTRIBUTESCOLON", "ATTRIBUTES", "AVAILABLE_EXTERNALLY", 
                      "AVR_INTRCC", "AVR_SIGNALCC", "BASETYPECOLON", "BITCAST", 
                      "BLOCKADDRESS", "BR", "BUILTIN", "BYVAL", "C", "CALL", 
                      "CALLER", "CATCH", "CATCHPAD", "CATCHRET", "CATCHSWITCH", 
                      "CCCOLON", "CC", "CCC", "CHECKSUMCOLON", "CHECKSUMKINDCOLON", 
                      "CLEANUP", "CLEANUPPAD", "CLEANUPRET", "CMPXCHG", 
                      "COLD", "COLDCC", "COLUMNCOLON", "COMDAT", "COMMON", 
                      "CONFIGMACROSCOLON", "CONSTANT", "CONTAININGTYPECOLON", 
                      "CONTRACT", "CONVERGENT", "COUNTCOLON", "CXX_FAST_TLSCC", 
                      "DATALAYOUT", "DEBUGINFOFORPROFILINGCOLON", "DECLARATIONCOLON", 
                      "DECLARE", "DEFAULT", "DEFINE", "DEREFERENCEABLE", 
                      "DEREFERENCEABLE_OR_NULL", "NOTDIBASICTYPE", "NOTDICOMPILEUNIT", 
                      "NOTDICOMPOSITETYPE", "NOTDIDERIVEDTYPE", "NOTDIENUMERATOR", 
                      "NOTDIEXPRESSION", "NOTDIFILE", "NOTDIGLOBALVARIABLE", 
                      "NOTDIGLOBALVARIABLEEXPRESSION", "NOTDIIMPORTEDENTITY", 
                      "NOTDILEXICALBLOCK", "NOTDILEXICALBLOCKFILE", "NOTDILOCALVARIABLE", 
                      "NOTDILOCATION", "NOTDIMACRO", "NOTDIMACROFILE", "NOTDIMODULE", 
                      "NOTDINAMESPACE", "NOTDIOBJCPROPERTY", "DIRECTORYCOLON", 
                      "DISCRIMINATORCOLON", "DISTINCT", "NOTDISUBPROGRAM", 
                      "NOTDISUBRANGE", "NOTDISUBROUTINETYPE", "NOTDITEMPLATETYPEPARAMETER", 
                      "NOTDITEMPLATEVALUEPARAMETER", "DLLEXPORT", "DLLIMPORT", 
                      "DOUBLE", "DSO_LOCAL", "DSO_PREEMPTABLE", "DWARFADDRESSSPACECOLON", 
                      "DWOIDCOLON", "ELEMENTSCOLON", "EMISSIONKINDCOLON", 
                      "ENCODINGCOLON", "ENTITYCOLON", "ENUMSCOLON", "EQ", 
                      "EXACT", "EXACTMATCH", "EXPORTSYMBOLSCOLON", "EXPRCOLON", 
                      "EXTERNAL", "EXTERNALLY_INITIALIZED", "EXTERN_WEAK", 
                      "EXTRACTELEMENT", "EXTRACTVALUE", "EXTRADATACOLON", 
                      "FADD", "FALSE", "FAST", "FASTCC", "FCMP", "FDIV", 
                      "FENCE", "FILECOLON", "FILENAMECOLON", "FILTER", "FLAGSCOLON", 
                      "FLOAT", "FMUL", "FP128", "FPEXT", "FPTOSI", "FPTOUI", 
                      "FPTRUNC", "FREM", "FROM", "FSUB", "FULLDEBUG", "GC", 
                      "NOTGENERICDINODE", "GETELEMENTPTR", "GETTERCOLON", 
                      "GHCCC", "GLOBAL", "GLOBALSCOLON", "GNUPUBNAMESCOLON", 
                      "HALF", "HEADERCOLON", "HHVMCC", "HHVM_CCC", "HIDDEN_VISIB", 
                      "ICMP", "IDENTIFIERCOLON", "IFUNC", "IMPORTSCOLON", 
                      "INACCESSIBLEMEMONLY", "INACCESSIBLEMEM_OR_ARGMEMONLY", 
                      "INALLOCA", "INBOUNDS", "INCLUDEPATHCOLON", "INDIRECTBR", 
                      "INITIALEXEC", "INLINEDATCOLON", "INLINEHINT", "INRANGE", 
                      "INREG", "INSERTELEMENT", "INSERTVALUE", "INTELDIALECT", 
                      "INTEL_OCL_BICC", "INTERNAL", "INTTOPTR", "INVOKE", 
                      "ISDEFINITIONCOLON", "ISLOCALCOLON", "ISOPTIMIZEDCOLON", 
                      "ISUNSIGNEDCOLON", "ISYSROOTCOLON", "JUMPTABLE", "LABEL", 
                      "LANDINGPAD", "LANGUAGECOLON", "LARGEST", "LINECOLON", 
                      "LINETABLESONLY", "LINKAGENAMECOLON", "LINKONCE", 
                      "LINKONCE_ODR", "LOAD", "LOCALDYNAMIC", "LOCALEXEC", 
                      "LOCAL_UNNAMED_ADDR", "LOWERBOUNDCOLON", "LSHR", "MACROSCOLON", 
                      "MAX", "METADATA", "MIN", "MINSIZE", "MODULE", "MONOTONIC", 
                      "MSP430_INTRCC", "MUL", "MUSTTAIL", "NAKED", "NAMECOLON", 
                      "NAND", "NE", "NEST", "NINF", "NNAN", "NOALIAS", "NOBUILTIN", 
                      "NOCAPTURE", "NODEBUG", "NODESCOLON", "NODUPLICATE", 
                      "NODUPLICATES", "NOIMPLICITFLOAT", "NOINLINE", "NONE", 
                      "NONLAZYBIND", "NONNULL", "NORECURSE", "NOREDZONE", 
                      "NORETURN", "NOTAIL", "NOUNWIND", "NSW", "NSZ", "NULL", 
                      "NUW", "OEQ", "OFFSETCOLON", "OGE", "OGT", "OLE", 
                      "OLT", "ONE", "OPAQUE", "OPERANDSCOLON", "OPTNONE", 
                      "OPTSIZE", "OR", "ORD", "PERSONALITY", "PHI", "PPC_FP128", 
                      "PREFIX", "PRESERVE_ALLCC", "PRESERVE_MOSTCC", "PRIVATE", 
                      "PRODUCERCOLON", "PROLOGUE", "PROTECTED", "PTRTOINT", 
                      "PTX_DEVICE", "PTX_KERNEL", "READNONE", "READONLY", 
                      "REASSOC", "RELEASE", "RESUME", "RET", "RETAINEDTYPESCOLON", 
                      "RETURNED", "RETURNS_TWICE", "RUNTIMELANGCOLON", "RUNTIMEVERSIONCOLON", 
                      "SAFESTACK", "SAMESIZE", "SANITIZE_ADDRESS", "SANITIZE_HWADDRESS", 
                      "SANITIZE_MEMORY", "SANITIZE_THREAD", "SCOPECOLON", 
                      "SCOPELINECOLON", "SDIV", "SECTION", "SELECT", "SEQ_CST", 
                      "SETTERCOLON", "SEXT", "SGE", "SGT", "SHL", "SHUFFLEVECTOR", 
                      "SIDEEFFECT", "SIGNEXT", "SITOFP", "SIZECOLON", "SLE", 
                      "SLT", "SOURCE_FILENAME", "SPECULATABLE", "SPIR_FUNC", 
                      "SPIR_KERNEL", "SPLITDEBUGFILENAMECOLON", "SPLITDEBUGINLININGCOLON", 
                      "SREM", "SRET", "SSP", "SSPREQ", "SSPSTRONG", "STORE", 
                      "STRICTFP", "SUB", "SWIFTCC", "SWIFTERROR", "SWIFTSELF", 
                      "SWITCH", "SYNCSCOPE", "TAGCOLON", "TAIL", "TARGET", 
                      "TEMPLATEPARAMSCOLON", "THISADJUSTMENTCOLON", "THREAD_LOCAL", 
                      "THROWNTYPESCOLON", "TO", "TOKEN", "TRIPLE", "TRUE", 
                      "TRUNC", "TYPECOLON", "TYPE", "TYPESCOLON", "UDIV", 
                      "UEQ", "UGE", "UGT", "UITOFP", "ULE", "ULT", "UMAX", 
                      "UMIN", "UNDEF", "UNE", "UNITCOLON", "UNNAMED_ADDR", 
                      "UNO", "UNORDERED", "UNREACHABLE", "UNWIND", "UREM", 
                      "USELISTORDER", "USELISTORDER_BB", "UWTABLE", "VA_ARG", 
                      "VALUECOLON", "VARCOLON", "VARIABLESCOLON", "VIRTUALINDEXCOLON", 
                      "VIRTUALITYCOLON", "VOID", "VTABLEHOLDERCOLON", "WEAK", 
                      "WEAK_ODR", "WEBKIT_JSCC", "WIN64CC", "WITHIN", "WRITEONLY", 
                      "X", "X86_64_SYSVCC", "X86_FASTCALLCC", "X86_FP80", 
                      "X86_INTRCC", "X86_MMX", "X86_REGCALLCC", "X86_STDCALLCC", 
                      "X86_THISCALLCC", "X86_VECTORCALLCC", "XCHG", "XOR", 
                      "ZEROEXT", "ZEROINITIALIZER", "ZEXT", "VOLATILE", 
                      "COMMENT", "WHITESPACE", "ATTR_GROUP_ID", "COMDAT_NAME", 
                      "METADATA_NAME", "METADATA_ID", "DWARF_TAG", "DWARF_ATT_ENCODING", 
                      "DI_FLAG", "DWARF_LANG", "DWARF_CC", "CHECKSUM_KIND", 
                      "DWARF_VIRTUALITY", "DWARF_MACINFO", "DWARF_OP", "INT_LIT", 
                      "DECIMAL_LIT", "DECIMALS", "FLOAT_LIT", "FRAC_LIT", 
                      "SIGN", "SCI_LIT", "FLOAT_HEX_LIT", "STRING_LIT", 
                      "QUOTED_STRING", "INT_TYPE", "NAME", "ESCAPE_NAME", 
                      "QUOTED_NAME", "ID", "GLOBAL_IDENT", "GLOBAL_NAME", 
                      "GLOBAL_ID", "LOCAL_IDENT", "LOCAL_NAME", "LOCAL_ID", 
                      "LABEL_IDENT" ]

    RULE_mySingleInstruction = 0
    RULE_module = 1
    RULE_topLevelEntities = 2
    RULE_topLevelEntityList = 3
    RULE_topLevelEntity = 4
    RULE_sourceFilename = 5
    RULE_targetDefinition = 6
    RULE_moduleAsm = 7
    RULE_typeDef = 8
    RULE_comdatDef = 9
    RULE_selectionKind = 10
    RULE_globalDecl = 11
    RULE_globalDef = 12
    RULE_optExternallyInitialized = 13
    RULE_immutable = 14
    RULE_globalAttrs = 15
    RULE_globalAttrList = 16
    RULE_globalAttr = 17
    RULE_indirectSymbolDef = 18
    RULE_alias = 19
    RULE_functionDecl = 20
    RULE_functionDef = 21
    RULE_functionHeader = 22
    RULE_optGC = 23
    RULE_optPrefix = 24
    RULE_optPrologue = 25
    RULE_optPersonality = 26
    RULE_functionBody = 27
    RULE_attrGroupDef = 28
    RULE_namedMetadataDef = 29
    RULE_metadataNodes = 30
    RULE_metadataNodeList = 31
    RULE_metadataNode = 32
    RULE_metadataDef = 33
    RULE_optDistinct = 34
    RULE_useListOrders = 35
    RULE_useListOrderList = 36
    RULE_useListOrder = 37
    RULE_useListOrderBB = 38
    RULE_globalIdent = 39
    RULE_localIdent = 40
    RULE_labelIdent = 41
    RULE_attrGroupID = 42
    RULE_comdatName = 43
    RULE_metadataName = 44
    RULE_metadataID = 45
    RULE_llvmType = 46
    RULE_concreteNonRecType = 47
    RULE_voidType = 48
    RULE_intType = 49
    RULE_floatType = 50
    RULE_floatKind = 51
    RULE_mmxType = 52
    RULE_optAddrSpace = 53
    RULE_addrSpace = 54
    RULE_vectorType = 55
    RULE_labelType = 56
    RULE_tokenType = 57
    RULE_metadataType = 58
    RULE_arrayType = 59
    RULE_structType = 60
    RULE_typeList = 61
    RULE_opaqueType = 62
    RULE_namedType = 63
    RULE_value = 64
    RULE_inlineAsm = 65
    RULE_optSideEffect = 66
    RULE_optAlignStack = 67
    RULE_optIntelDialect = 68
    RULE_constant = 69
    RULE_boolConst = 70
    RULE_boolLit = 71
    RULE_intConst = 72
    RULE_intLit = 73
    RULE_floatConst = 74
    RULE_nullConst = 75
    RULE_noneConst = 76
    RULE_structConst = 77
    RULE_arrayConst = 78
    RULE_charArrayConst = 79
    RULE_stringLit = 80
    RULE_vectorConst = 81
    RULE_zeroInitializerConst = 82
    RULE_undefConst = 83
    RULE_blockAddressConst = 84
    RULE_constantExpr = 85
    RULE_addExpr = 86
    RULE_fAddExpr = 87
    RULE_subExpr = 88
    RULE_fSubExpr = 89
    RULE_mulExpr = 90
    RULE_fMulExpr = 91
    RULE_uDivExpr = 92
    RULE_sDivExpr = 93
    RULE_fDivExpr = 94
    RULE_uRemExpr = 95
    RULE_sRemExpr = 96
    RULE_fRemExpr = 97
    RULE_shlExpr = 98
    RULE_lShrExpr = 99
    RULE_ashrExpr = 100
    RULE_andExpr = 101
    RULE_orExpr = 102
    RULE_xorExpr = 103
    RULE_extractElementExpr = 104
    RULE_insertElementExpr = 105
    RULE_shuffleVectorExpr = 106
    RULE_extractValueExpr = 107
    RULE_insertValueExpr = 108
    RULE_getElementPtrExpr = 109
    RULE_gepConstIndices = 110
    RULE_gepConstIndexList = 111
    RULE_gepConstIndex = 112
    RULE_optInrange = 113
    RULE_truncExpr = 114
    RULE_zExtExpr = 115
    RULE_sExtExpr = 116
    RULE_fPTruncExpr = 117
    RULE_fpExtExpr = 118
    RULE_fpToUIExpr = 119
    RULE_fpToSIExpr = 120
    RULE_uiToFPExpr = 121
    RULE_siToFPExpr = 122
    RULE_ptrToIntExpr = 123
    RULE_intToPtrExpr = 124
    RULE_bitCastExpr = 125
    RULE_addrSpaceCastExpr = 126
    RULE_iCmpExpr = 127
    RULE_fCmpExpr = 128
    RULE_selectExpr = 129
    RULE_basicBlockList = 130
    RULE_basicBlock = 131
    RULE_optLabelIdent = 132
    RULE_instructions = 133
    RULE_instructionList = 134
    RULE_instruction = 135
    RULE_valueInstruction = 136
    RULE_addInst = 137
    RULE_fAddInst = 138
    RULE_subInst = 139
    RULE_fSubInst = 140
    RULE_mulInst = 141
    RULE_fMulInst = 142
    RULE_uDivInst = 143
    RULE_sDivInst = 144
    RULE_fDivInst = 145
    RULE_uRemInst = 146
    RULE_sRemInst = 147
    RULE_fRemInst = 148
    RULE_shlInst = 149
    RULE_lshrInst = 150
    RULE_ashrInst = 151
    RULE_andInst = 152
    RULE_orInst = 153
    RULE_xorInst = 154
    RULE_extractElementInst = 155
    RULE_insertElementInst = 156
    RULE_shuffleVectorInst = 157
    RULE_extractValueInst = 158
    RULE_insertValueInst = 159
    RULE_allocaInst = 160
    RULE_optInAlloca = 161
    RULE_optSwiftError = 162
    RULE_loadInst = 163
    RULE_storeInst = 164
    RULE_fenceInst = 165
    RULE_cmpXchgInst = 166
    RULE_optWeak = 167
    RULE_atomicRMWInst = 168
    RULE_binOp = 169
    RULE_getElementPtrInst = 170
    RULE_truncInst = 171
    RULE_zExtInst = 172
    RULE_sExtInst = 173
    RULE_fpTruncInst = 174
    RULE_fpExtInst = 175
    RULE_fpToUIInst = 176
    RULE_fpToSIInst = 177
    RULE_uiToFPInst = 178
    RULE_siToFPInst = 179
    RULE_ptrToIntInst = 180
    RULE_intToPtrInst = 181
    RULE_bitCastInst = 182
    RULE_addrSpaceCastInst = 183
    RULE_iCmpInst = 184
    RULE_fCmpInst = 185
    RULE_phiInst = 186
    RULE_incList = 187
    RULE_inc = 188
    RULE_selectInst = 189
    RULE_callInst = 190
    RULE_optTail = 191
    RULE_vaArgInst = 192
    RULE_landingPadInst = 193
    RULE_optCleanup = 194
    RULE_clauses = 195
    RULE_clauseList = 196
    RULE_clause = 197
    RULE_catchPadInst = 198
    RULE_cleanupPadInst = 199
    RULE_terminator = 200
    RULE_retTerm = 201
    RULE_brTerm = 202
    RULE_condBrTerm = 203
    RULE_switchTerm = 204
    RULE_cases = 205
    RULE_caseList = 206
    RULE_llvmCase = 207
    RULE_indirectBrTerm = 208
    RULE_labelList = 209
    RULE_label = 210
    RULE_invokeTerm = 211
    RULE_resumeTerm = 212
    RULE_catchSwitchTerm = 213
    RULE_catchRetTerm = 214
    RULE_cleanupRetTerm = 215
    RULE_unreachableTerm = 216
    RULE_unwindTarget = 217
    RULE_mdTuple = 218
    RULE_mdFields = 219
    RULE_mdFieldList = 220
    RULE_mdField = 221
    RULE_metadata = 222
    RULE_mdString = 223
    RULE_metadataAttachment = 224
    RULE_mdNode = 225
    RULE_metadataAttachments = 226
    RULE_metadataAttachmentList = 227
    RULE_optCommaSepMetadataAttachmentList = 228
    RULE_commaSepMetadataAttachmentList = 229
    RULE_specializedMDNode = 230
    RULE_diCompileUnit = 231
    RULE_diCompileUnitFields = 232
    RULE_diCompileUnitFieldList = 233
    RULE_diCompileUnitField = 234
    RULE_diFile = 235
    RULE_diFileFields = 236
    RULE_diFileFieldList = 237
    RULE_diFileField = 238
    RULE_diBasicType = 239
    RULE_diBasicTypeFields = 240
    RULE_diBasicTypeFieldList = 241
    RULE_diBasicTypeField = 242
    RULE_diSubroutineType = 243
    RULE_diSubroutineTypeFields = 244
    RULE_diSubroutineTypeFieldList = 245
    RULE_diSubroutineTypeField = 246
    RULE_diDerivedType = 247
    RULE_diDerivedTypeFields = 248
    RULE_diDerivedTypeFieldList = 249
    RULE_diDerivedTypeField = 250
    RULE_diCompositeType = 251
    RULE_diCompositeTypeFields = 252
    RULE_diCompositeTypeFieldList = 253
    RULE_diCompositeTypeField = 254
    RULE_diSubrange = 255
    RULE_diSubrangeFields = 256
    RULE_diSubrangeFieldList = 257
    RULE_diSubrangeField = 258
    RULE_diEnumerator = 259
    RULE_diEnumeratorFields = 260
    RULE_diEnumeratorFieldList = 261
    RULE_diEnumeratorField = 262
    RULE_diTemplateTypeParameter = 263
    RULE_diTemplateTypeParameterFields = 264
    RULE_diTemplateTypeParameterFieldList = 265
    RULE_diTemplateTypeParameterField = 266
    RULE_diTemplateValueParameter = 267
    RULE_diTemplateValueParameterFields = 268
    RULE_diTemplateValueParameterFieldList = 269
    RULE_diTemplateValueParameterField = 270
    RULE_diModule = 271
    RULE_diModuleFields = 272
    RULE_diModuleFieldList = 273
    RULE_diModuleField = 274
    RULE_diNamespace = 275
    RULE_diNamespaceFields = 276
    RULE_diNamespaceFieldList = 277
    RULE_diNamespaceField = 278
    RULE_diGlobalVariable = 279
    RULE_diGlobalVariableFields = 280
    RULE_diGlobalVariableFieldList = 281
    RULE_diGlobalVariableField = 282
    RULE_diSubprogram = 283
    RULE_diSubprogramFields = 284
    RULE_diSubprogramFieldList = 285
    RULE_diSubprogramField = 286
    RULE_diLexicalBlock = 287
    RULE_diLexicalBlockFields = 288
    RULE_diLexicalBlockFieldList = 289
    RULE_diLexicalBlockField = 290
    RULE_diLexicalBlockFile = 291
    RULE_diLexicalBlockFileFields = 292
    RULE_diLexicalBlockFileFieldList = 293
    RULE_diLexicalBlockFileField = 294
    RULE_diLocation = 295
    RULE_diLocationFields = 296
    RULE_diLocationFieldList = 297
    RULE_diLocationField = 298
    RULE_diLocalVariable = 299
    RULE_diLocalVariableFields = 300
    RULE_diLocalVariableFieldList = 301
    RULE_diLocalVariableField = 302
    RULE_diExpression = 303
    RULE_diExpressionFields = 304
    RULE_diExpressionFieldList = 305
    RULE_diExpressionField = 306
    RULE_diGlobalVariableExpression = 307
    RULE_diGlobalVariableExpressionFields = 308
    RULE_diGlobalVariableExpressionFieldList = 309
    RULE_diGlobalVariableExpressionField = 310
    RULE_diObjCProperty = 311
    RULE_diObjCPropertyFields = 312
    RULE_diObjCPropertyFieldList = 313
    RULE_diObjCPropertyField = 314
    RULE_diImportedEntity = 315
    RULE_diImportedEntityFields = 316
    RULE_diImportedEntityFieldList = 317
    RULE_diImportedEntityField = 318
    RULE_diMacro = 319
    RULE_diMacroFields = 320
    RULE_diMacroFieldList = 321
    RULE_diMacroField = 322
    RULE_diMacroFile = 323
    RULE_diMacroFileFields = 324
    RULE_diMacroFileFieldList = 325
    RULE_diMacroFileField = 326
    RULE_genericDINode = 327
    RULE_genericDINodeFields = 328
    RULE_genericDINodeFieldList = 329
    RULE_genericDINodeField = 330
    RULE_fileField = 331
    RULE_isOptimizedField = 332
    RULE_tagField = 333
    RULE_nameField = 334
    RULE_sizeField = 335
    RULE_alignField = 336
    RULE_flagsField = 337
    RULE_lineField = 338
    RULE_scopeField = 339
    RULE_baseTypeField = 340
    RULE_offsetField = 341
    RULE_templateParamsField = 342
    RULE_intOrMDField = 343
    RULE_typeField = 344
    RULE_linkageNameField = 345
    RULE_isLocalField = 346
    RULE_isDefinitionField = 347
    RULE_declarationField = 348
    RULE_columnField = 349
    RULE_typeMacinfoField = 350
    RULE_checksumkind = 351
    RULE_diFlagList = 352
    RULE_diFlag = 353
    RULE_dwarfAttEncoding = 354
    RULE_dwarfCC = 355
    RULE_dwarfLang = 356
    RULE_dwarfMacinfo = 357
    RULE_dwarfOp = 358
    RULE_dwarfTag = 359
    RULE_dwarfVirtuality = 360
    RULE_emissionKind = 361
    RULE_typeValues = 362
    RULE_typeValueList = 363
    RULE_commaSepTypeValueList = 364
    RULE_typeValue = 365
    RULE_typeConsts = 366
    RULE_typeConstList = 367
    RULE_typeConst = 368
    RULE_alignment = 369
    RULE_allocSize = 370
    RULE_args = 371
    RULE_argList = 372
    RULE_arg = 373
    RULE_atomicOrdering = 374
    RULE_optCallingConv = 375
    RULE_callingConv = 376
    RULE_optComdat = 377
    RULE_comdat = 378
    RULE_dereferenceable = 379
    RULE_optDLLStorageClass = 380
    RULE_dllStorageClass = 381
    RULE_optExact = 382
    RULE_exceptionArgs = 383
    RULE_exceptionArgList = 384
    RULE_exceptionArg = 385
    RULE_exceptionScope = 386
    RULE_fastMathFlags = 387
    RULE_fastMathFlagList = 388
    RULE_fastMathFlag = 389
    RULE_fpred = 390
    RULE_funcAttrs = 391
    RULE_funcAttrList = 392
    RULE_funcAttr = 393
    RULE_optInBounds = 394
    RULE_indices = 395
    RULE_indexList = 396
    RULE_index = 397
    RULE_iPred = 398
    RULE_optLinkage = 399
    RULE_linkage = 400
    RULE_optExternLinkage = 401
    RULE_externLinkage = 402
    RULE_operandBundles = 403
    RULE_operandBundleList = 404
    RULE_operandBundle = 405
    RULE_overflowFlags = 406
    RULE_overflowFlagList = 407
    RULE_overflowFlag = 408
    RULE_paramAttrs = 409
    RULE_paramAttrList = 410
    RULE_paramAttr = 411
    RULE_params = 412
    RULE_paramList = 413
    RULE_param = 414
    RULE_optPreemptionSpecifier = 415
    RULE_preemptionSpecifier = 416
    RULE_returnAttrs = 417
    RULE_returnAttrList = 418
    RULE_returnAttr = 419
    RULE_section = 420
    RULE_stackAlignment = 421
    RULE_optSyncScope = 422
    RULE_threadLocal = 423
    RULE_tlsModel = 424
    RULE_unnamedAddr = 425
    RULE_visibility = 426

    ruleNames =  [ "mySingleInstruction", "module", "topLevelEntities", 
                   "topLevelEntityList", "topLevelEntity", "sourceFilename", 
                   "targetDefinition", "moduleAsm", "typeDef", "comdatDef", 
                   "selectionKind", "globalDecl", "globalDef", "optExternallyInitialized", 
                   "immutable", "globalAttrs", "globalAttrList", "globalAttr", 
                   "indirectSymbolDef", "alias", "functionDecl", "functionDef", 
                   "functionHeader", "optGC", "optPrefix", "optPrologue", 
                   "optPersonality", "functionBody", "attrGroupDef", "namedMetadataDef", 
                   "metadataNodes", "metadataNodeList", "metadataNode", 
                   "metadataDef", "optDistinct", "useListOrders", "useListOrderList", 
                   "useListOrder", "useListOrderBB", "globalIdent", "localIdent", 
                   "labelIdent", "attrGroupID", "comdatName", "metadataName", 
                   "metadataID", "llvmType", "concreteNonRecType", "voidType", 
                   "intType", "floatType", "floatKind", "mmxType", "optAddrSpace", 
                   "addrSpace", "vectorType", "labelType", "tokenType", 
                   "metadataType", "arrayType", "structType", "typeList", 
                   "opaqueType", "namedType", "value", "inlineAsm", "optSideEffect", 
                   "optAlignStack", "optIntelDialect", "constant", "boolConst", 
                   "boolLit", "intConst", "intLit", "floatConst", "nullConst", 
                   "noneConst", "structConst", "arrayConst", "charArrayConst", 
                   "stringLit", "vectorConst", "zeroInitializerConst", "undefConst", 
                   "blockAddressConst", "constantExpr", "addExpr", "fAddExpr", 
                   "subExpr", "fSubExpr", "mulExpr", "fMulExpr", "uDivExpr", 
                   "sDivExpr", "fDivExpr", "uRemExpr", "sRemExpr", "fRemExpr", 
                   "shlExpr", "lShrExpr", "ashrExpr", "andExpr", "orExpr", 
                   "xorExpr", "extractElementExpr", "insertElementExpr", 
                   "shuffleVectorExpr", "extractValueExpr", "insertValueExpr", 
                   "getElementPtrExpr", "gepConstIndices", "gepConstIndexList", 
                   "gepConstIndex", "optInrange", "truncExpr", "zExtExpr", 
                   "sExtExpr", "fPTruncExpr", "fpExtExpr", "fpToUIExpr", 
                   "fpToSIExpr", "uiToFPExpr", "siToFPExpr", "ptrToIntExpr", 
                   "intToPtrExpr", "bitCastExpr", "addrSpaceCastExpr", "iCmpExpr", 
                   "fCmpExpr", "selectExpr", "basicBlockList", "basicBlock", 
                   "optLabelIdent", "instructions", "instructionList", "instruction", 
                   "valueInstruction", "addInst", "fAddInst", "subInst", 
                   "fSubInst", "mulInst", "fMulInst", "uDivInst", "sDivInst", 
                   "fDivInst", "uRemInst", "sRemInst", "fRemInst", "shlInst", 
                   "lshrInst", "ashrInst", "andInst", "orInst", "xorInst", 
                   "extractElementInst", "insertElementInst", "shuffleVectorInst", 
                   "extractValueInst", "insertValueInst", "allocaInst", 
                   "optInAlloca", "optSwiftError", "loadInst", "storeInst", 
                   "fenceInst", "cmpXchgInst", "optWeak", "atomicRMWInst", 
                   "binOp", "getElementPtrInst", "truncInst", "zExtInst", 
                   "sExtInst", "fpTruncInst", "fpExtInst", "fpToUIInst", 
                   "fpToSIInst", "uiToFPInst", "siToFPInst", "ptrToIntInst", 
                   "intToPtrInst", "bitCastInst", "addrSpaceCastInst", "iCmpInst", 
                   "fCmpInst", "phiInst", "incList", "inc", "selectInst", 
                   "callInst", "optTail", "vaArgInst", "landingPadInst", 
                   "optCleanup", "clauses", "clauseList", "clause", "catchPadInst", 
                   "cleanupPadInst", "terminator", "retTerm", "brTerm", 
                   "condBrTerm", "switchTerm", "cases", "caseList", "llvmCase", 
                   "indirectBrTerm", "labelList", "label", "invokeTerm", 
                   "resumeTerm", "catchSwitchTerm", "catchRetTerm", "cleanupRetTerm", 
                   "unreachableTerm", "unwindTarget", "mdTuple", "mdFields", 
                   "mdFieldList", "mdField", "metadata", "mdString", "metadataAttachment", 
                   "mdNode", "metadataAttachments", "metadataAttachmentList", 
                   "optCommaSepMetadataAttachmentList", "commaSepMetadataAttachmentList", 
                   "specializedMDNode", "diCompileUnit", "diCompileUnitFields", 
                   "diCompileUnitFieldList", "diCompileUnitField", "diFile", 
                   "diFileFields", "diFileFieldList", "diFileField", "diBasicType", 
                   "diBasicTypeFields", "diBasicTypeFieldList", "diBasicTypeField", 
                   "diSubroutineType", "diSubroutineTypeFields", "diSubroutineTypeFieldList", 
                   "diSubroutineTypeField", "diDerivedType", "diDerivedTypeFields", 
                   "diDerivedTypeFieldList", "diDerivedTypeField", "diCompositeType", 
                   "diCompositeTypeFields", "diCompositeTypeFieldList", 
                   "diCompositeTypeField", "diSubrange", "diSubrangeFields", 
                   "diSubrangeFieldList", "diSubrangeField", "diEnumerator", 
                   "diEnumeratorFields", "diEnumeratorFieldList", "diEnumeratorField", 
                   "diTemplateTypeParameter", "diTemplateTypeParameterFields", 
                   "diTemplateTypeParameterFieldList", "diTemplateTypeParameterField", 
                   "diTemplateValueParameter", "diTemplateValueParameterFields", 
                   "diTemplateValueParameterFieldList", "diTemplateValueParameterField", 
                   "diModule", "diModuleFields", "diModuleFieldList", "diModuleField", 
                   "diNamespace", "diNamespaceFields", "diNamespaceFieldList", 
                   "diNamespaceField", "diGlobalVariable", "diGlobalVariableFields", 
                   "diGlobalVariableFieldList", "diGlobalVariableField", 
                   "diSubprogram", "diSubprogramFields", "diSubprogramFieldList", 
                   "diSubprogramField", "diLexicalBlock", "diLexicalBlockFields", 
                   "diLexicalBlockFieldList", "diLexicalBlockField", "diLexicalBlockFile", 
                   "diLexicalBlockFileFields", "diLexicalBlockFileFieldList", 
                   "diLexicalBlockFileField", "diLocation", "diLocationFields", 
                   "diLocationFieldList", "diLocationField", "diLocalVariable", 
                   "diLocalVariableFields", "diLocalVariableFieldList", 
                   "diLocalVariableField", "diExpression", "diExpressionFields", 
                   "diExpressionFieldList", "diExpressionField", "diGlobalVariableExpression", 
                   "diGlobalVariableExpressionFields", "diGlobalVariableExpressionFieldList", 
                   "diGlobalVariableExpressionField", "diObjCProperty", 
                   "diObjCPropertyFields", "diObjCPropertyFieldList", "diObjCPropertyField", 
                   "diImportedEntity", "diImportedEntityFields", "diImportedEntityFieldList", 
                   "diImportedEntityField", "diMacro", "diMacroFields", 
                   "diMacroFieldList", "diMacroField", "diMacroFile", "diMacroFileFields", 
                   "diMacroFileFieldList", "diMacroFileField", "genericDINode", 
                   "genericDINodeFields", "genericDINodeFieldList", "genericDINodeField", 
                   "fileField", "isOptimizedField", "tagField", "nameField", 
                   "sizeField", "alignField", "flagsField", "lineField", 
                   "scopeField", "baseTypeField", "offsetField", "templateParamsField", 
                   "intOrMDField", "typeField", "linkageNameField", "isLocalField", 
                   "isDefinitionField", "declarationField", "columnField", 
                   "typeMacinfoField", "checksumkind", "diFlagList", "diFlag", 
                   "dwarfAttEncoding", "dwarfCC", "dwarfLang", "dwarfMacinfo", 
                   "dwarfOp", "dwarfTag", "dwarfVirtuality", "emissionKind", 
                   "typeValues", "typeValueList", "commaSepTypeValueList", 
                   "typeValue", "typeConsts", "typeConstList", "typeConst", 
                   "alignment", "allocSize", "args", "argList", "arg", "atomicOrdering", 
                   "optCallingConv", "callingConv", "optComdat", "comdat", 
                   "dereferenceable", "optDLLStorageClass", "dllStorageClass", 
                   "optExact", "exceptionArgs", "exceptionArgList", "exceptionArg", 
                   "exceptionScope", "fastMathFlags", "fastMathFlagList", 
                   "fastMathFlag", "fpred", "funcAttrs", "funcAttrList", 
                   "funcAttr", "optInBounds", "indices", "indexList", "index", 
                   "iPred", "optLinkage", "linkage", "optExternLinkage", 
                   "externLinkage", "operandBundles", "operandBundleList", 
                   "operandBundle", "overflowFlags", "overflowFlagList", 
                   "overflowFlag", "paramAttrs", "paramAttrList", "paramAttr", 
                   "params", "paramList", "param", "optPreemptionSpecifier", 
                   "preemptionSpecifier", "returnAttrs", "returnAttrList", 
                   "returnAttr", "section", "stackAlignment", "optSyncScope", 
                   "threadLocal", "tlsModel", "unnamedAddr", "visibility" ]

    EOF = Token.EOF
    LT=1
    EQSIGN=2
    GT=3
    VDASH=4
    COMMA=5
    BANG=6
    DOTS=7
    LPAREN=8
    RPAREN=9
    LBRACK=10
    RBRACK=11
    LBRACE=12
    RBRACE=13
    STAR=14
    ACQ_REL=15
    ACQUIRE=16
    ADD=17
    ADDRSPACE=18
    ADDRSPACECAST=19
    AFN=20
    ALIAS=21
    ALIGNCOLON=22
    ALIGN=23
    ALIGNSTACK=24
    ALLOCA=25
    ALLOCSIZE=26
    ALWAYSINLINE=27
    AMDGPU_CS=28
    AMDGPU_ES=29
    AMDGPU_GS=30
    AMDGPU_HS=31
    AMDGPU_KERNEL=32
    AMDGPU_LS=33
    AMDGPU_PS=34
    AMDGPU_VS=35
    AND=36
    ANY=37
    ANYREGCC=38
    APPENDING=39
    ARCP=40
    ARGCOLON=41
    ARGMEMONLY=42
    ARM_AAPCSCC=43
    ARM_AAPCS_VFPCC=44
    ARM_APCSCC=45
    ASHR=46
    ASM=47
    ATOMIC=48
    ATOMICRMW=49
    ATTRIBUTESCOLON=50
    ATTRIBUTES=51
    AVAILABLE_EXTERNALLY=52
    AVR_INTRCC=53
    AVR_SIGNALCC=54
    BASETYPECOLON=55
    BITCAST=56
    BLOCKADDRESS=57
    BR=58
    BUILTIN=59
    BYVAL=60
    C=61
    CALL=62
    CALLER=63
    CATCH=64
    CATCHPAD=65
    CATCHRET=66
    CATCHSWITCH=67
    CCCOLON=68
    CC=69
    CCC=70
    CHECKSUMCOLON=71
    CHECKSUMKINDCOLON=72
    CLEANUP=73
    CLEANUPPAD=74
    CLEANUPRET=75
    CMPXCHG=76
    COLD=77
    COLDCC=78
    COLUMNCOLON=79
    COMDAT=80
    COMMON=81
    CONFIGMACROSCOLON=82
    CONSTANT=83
    CONTAININGTYPECOLON=84
    CONTRACT=85
    CONVERGENT=86
    COUNTCOLON=87
    CXX_FAST_TLSCC=88
    DATALAYOUT=89
    DEBUGINFOFORPROFILINGCOLON=90
    DECLARATIONCOLON=91
    DECLARE=92
    DEFAULT=93
    DEFINE=94
    DEREFERENCEABLE=95
    DEREFERENCEABLE_OR_NULL=96
    NOTDIBASICTYPE=97
    NOTDICOMPILEUNIT=98
    NOTDICOMPOSITETYPE=99
    NOTDIDERIVEDTYPE=100
    NOTDIENUMERATOR=101
    NOTDIEXPRESSION=102
    NOTDIFILE=103
    NOTDIGLOBALVARIABLE=104
    NOTDIGLOBALVARIABLEEXPRESSION=105
    NOTDIIMPORTEDENTITY=106
    NOTDILEXICALBLOCK=107
    NOTDILEXICALBLOCKFILE=108
    NOTDILOCALVARIABLE=109
    NOTDILOCATION=110
    NOTDIMACRO=111
    NOTDIMACROFILE=112
    NOTDIMODULE=113
    NOTDINAMESPACE=114
    NOTDIOBJCPROPERTY=115
    DIRECTORYCOLON=116
    DISCRIMINATORCOLON=117
    DISTINCT=118
    NOTDISUBPROGRAM=119
    NOTDISUBRANGE=120
    NOTDISUBROUTINETYPE=121
    NOTDITEMPLATETYPEPARAMETER=122
    NOTDITEMPLATEVALUEPARAMETER=123
    DLLEXPORT=124
    DLLIMPORT=125
    DOUBLE=126
    DSO_LOCAL=127
    DSO_PREEMPTABLE=128
    DWARFADDRESSSPACECOLON=129
    DWOIDCOLON=130
    ELEMENTSCOLON=131
    EMISSIONKINDCOLON=132
    ENCODINGCOLON=133
    ENTITYCOLON=134
    ENUMSCOLON=135
    EQ=136
    EXACT=137
    EXACTMATCH=138
    EXPORTSYMBOLSCOLON=139
    EXPRCOLON=140
    EXTERNAL=141
    EXTERNALLY_INITIALIZED=142
    EXTERN_WEAK=143
    EXTRACTELEMENT=144
    EXTRACTVALUE=145
    EXTRADATACOLON=146
    FADD=147
    FALSE=148
    FAST=149
    FASTCC=150
    FCMP=151
    FDIV=152
    FENCE=153
    FILECOLON=154
    FILENAMECOLON=155
    FILTER=156
    FLAGSCOLON=157
    FLOAT=158
    FMUL=159
    FP128=160
    FPEXT=161
    FPTOSI=162
    FPTOUI=163
    FPTRUNC=164
    FREM=165
    FROM=166
    FSUB=167
    FULLDEBUG=168
    GC=169
    NOTGENERICDINODE=170
    GETELEMENTPTR=171
    GETTERCOLON=172
    GHCCC=173
    GLOBAL=174
    GLOBALSCOLON=175
    GNUPUBNAMESCOLON=176
    HALF=177
    HEADERCOLON=178
    HHVMCC=179
    HHVM_CCC=180
    HIDDEN_VISIB=181
    ICMP=182
    IDENTIFIERCOLON=183
    IFUNC=184
    IMPORTSCOLON=185
    INACCESSIBLEMEMONLY=186
    INACCESSIBLEMEM_OR_ARGMEMONLY=187
    INALLOCA=188
    INBOUNDS=189
    INCLUDEPATHCOLON=190
    INDIRECTBR=191
    INITIALEXEC=192
    INLINEDATCOLON=193
    INLINEHINT=194
    INRANGE=195
    INREG=196
    INSERTELEMENT=197
    INSERTVALUE=198
    INTELDIALECT=199
    INTEL_OCL_BICC=200
    INTERNAL=201
    INTTOPTR=202
    INVOKE=203
    ISDEFINITIONCOLON=204
    ISLOCALCOLON=205
    ISOPTIMIZEDCOLON=206
    ISUNSIGNEDCOLON=207
    ISYSROOTCOLON=208
    JUMPTABLE=209
    LABEL=210
    LANDINGPAD=211
    LANGUAGECOLON=212
    LARGEST=213
    LINECOLON=214
    LINETABLESONLY=215
    LINKAGENAMECOLON=216
    LINKONCE=217
    LINKONCE_ODR=218
    LOAD=219
    LOCALDYNAMIC=220
    LOCALEXEC=221
    LOCAL_UNNAMED_ADDR=222
    LOWERBOUNDCOLON=223
    LSHR=224
    MACROSCOLON=225
    MAX=226
    METADATA=227
    MIN=228
    MINSIZE=229
    MODULE=230
    MONOTONIC=231
    MSP430_INTRCC=232
    MUL=233
    MUSTTAIL=234
    NAKED=235
    NAMECOLON=236
    NAND=237
    NE=238
    NEST=239
    NINF=240
    NNAN=241
    NOALIAS=242
    NOBUILTIN=243
    NOCAPTURE=244
    NODEBUG=245
    NODESCOLON=246
    NODUPLICATE=247
    NODUPLICATES=248
    NOIMPLICITFLOAT=249
    NOINLINE=250
    NONE=251
    NONLAZYBIND=252
    NONNULL=253
    NORECURSE=254
    NOREDZONE=255
    NORETURN=256
    NOTAIL=257
    NOUNWIND=258
    NSW=259
    NSZ=260
    NULL=261
    NUW=262
    OEQ=263
    OFFSETCOLON=264
    OGE=265
    OGT=266
    OLE=267
    OLT=268
    ONE=269
    OPAQUE=270
    OPERANDSCOLON=271
    OPTNONE=272
    OPTSIZE=273
    OR=274
    ORD=275
    PERSONALITY=276
    PHI=277
    PPC_FP128=278
    PREFIX=279
    PRESERVE_ALLCC=280
    PRESERVE_MOSTCC=281
    PRIVATE=282
    PRODUCERCOLON=283
    PROLOGUE=284
    PROTECTED=285
    PTRTOINT=286
    PTX_DEVICE=287
    PTX_KERNEL=288
    READNONE=289
    READONLY=290
    REASSOC=291
    RELEASE=292
    RESUME=293
    RET=294
    RETAINEDTYPESCOLON=295
    RETURNED=296
    RETURNS_TWICE=297
    RUNTIMELANGCOLON=298
    RUNTIMEVERSIONCOLON=299
    SAFESTACK=300
    SAMESIZE=301
    SANITIZE_ADDRESS=302
    SANITIZE_HWADDRESS=303
    SANITIZE_MEMORY=304
    SANITIZE_THREAD=305
    SCOPECOLON=306
    SCOPELINECOLON=307
    SDIV=308
    SECTION=309
    SELECT=310
    SEQ_CST=311
    SETTERCOLON=312
    SEXT=313
    SGE=314
    SGT=315
    SHL=316
    SHUFFLEVECTOR=317
    SIDEEFFECT=318
    SIGNEXT=319
    SITOFP=320
    SIZECOLON=321
    SLE=322
    SLT=323
    SOURCE_FILENAME=324
    SPECULATABLE=325
    SPIR_FUNC=326
    SPIR_KERNEL=327
    SPLITDEBUGFILENAMECOLON=328
    SPLITDEBUGINLININGCOLON=329
    SREM=330
    SRET=331
    SSP=332
    SSPREQ=333
    SSPSTRONG=334
    STORE=335
    STRICTFP=336
    SUB=337
    SWIFTCC=338
    SWIFTERROR=339
    SWIFTSELF=340
    SWITCH=341
    SYNCSCOPE=342
    TAGCOLON=343
    TAIL=344
    TARGET=345
    TEMPLATEPARAMSCOLON=346
    THISADJUSTMENTCOLON=347
    THREAD_LOCAL=348
    THROWNTYPESCOLON=349
    TO=350
    TOKEN=351
    TRIPLE=352
    TRUE=353
    TRUNC=354
    TYPECOLON=355
    TYPE=356
    TYPESCOLON=357
    UDIV=358
    UEQ=359
    UGE=360
    UGT=361
    UITOFP=362
    ULE=363
    ULT=364
    UMAX=365
    UMIN=366
    UNDEF=367
    UNE=368
    UNITCOLON=369
    UNNAMED_ADDR=370
    UNO=371
    UNORDERED=372
    UNREACHABLE=373
    UNWIND=374
    UREM=375
    USELISTORDER=376
    USELISTORDER_BB=377
    UWTABLE=378
    VA_ARG=379
    VALUECOLON=380
    VARCOLON=381
    VARIABLESCOLON=382
    VIRTUALINDEXCOLON=383
    VIRTUALITYCOLON=384
    VOID=385
    VTABLEHOLDERCOLON=386
    WEAK=387
    WEAK_ODR=388
    WEBKIT_JSCC=389
    WIN64CC=390
    WITHIN=391
    WRITEONLY=392
    X=393
    X86_64_SYSVCC=394
    X86_FASTCALLCC=395
    X86_FP80=396
    X86_INTRCC=397
    X86_MMX=398
    X86_REGCALLCC=399
    X86_STDCALLCC=400
    X86_THISCALLCC=401
    X86_VECTORCALLCC=402
    XCHG=403
    XOR=404
    ZEROEXT=405
    ZEROINITIALIZER=406
    ZEXT=407
    VOLATILE=408
    COMMENT=409
    WHITESPACE=410
    ATTR_GROUP_ID=411
    COMDAT_NAME=412
    METADATA_NAME=413
    METADATA_ID=414
    DWARF_TAG=415
    DWARF_ATT_ENCODING=416
    DI_FLAG=417
    DWARF_LANG=418
    DWARF_CC=419
    CHECKSUM_KIND=420
    DWARF_VIRTUALITY=421
    DWARF_MACINFO=422
    DWARF_OP=423
    INT_LIT=424
    DECIMAL_LIT=425
    DECIMALS=426
    FLOAT_LIT=427
    FRAC_LIT=428
    SIGN=429
    SCI_LIT=430
    FLOAT_HEX_LIT=431
    STRING_LIT=432
    QUOTED_STRING=433
    INT_TYPE=434
    NAME=435
    ESCAPE_NAME=436
    QUOTED_NAME=437
    ID=438
    GLOBAL_IDENT=439
    GLOBAL_NAME=440
    GLOBAL_ID=441
    LOCAL_IDENT=442
    LOCAL_NAME=443
    LOCAL_ID=444
    LABEL_IDENT=445

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MySingleInstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def instruction(self):
            return self.getTypedRuleContext(LLVMParser.InstructionContext,0)


        def terminator(self):
            return self.getTypedRuleContext(LLVMParser.TerminatorContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_mySingleInstruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMySingleInstruction" ):
                listener.enterMySingleInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMySingleInstruction" ):
                listener.exitMySingleInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMySingleInstruction" ):
                return visitor.visitMySingleInstruction(self)
            else:
                return visitor.visitChildren(self)




    def mySingleInstruction(self):

        localctx = LLVMParser.MySingleInstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_mySingleInstruction)
        try:
            self.state = 856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.ADD, LLVMParser.ADDRSPACECAST, LLVMParser.ALLOCA, LLVMParser.AND, LLVMParser.ASHR, LLVMParser.ATOMICRMW, LLVMParser.BITCAST, LLVMParser.CALL, LLVMParser.CATCHPAD, LLVMParser.CLEANUPPAD, LLVMParser.CMPXCHG, LLVMParser.EXTRACTELEMENT, LLVMParser.EXTRACTVALUE, LLVMParser.FADD, LLVMParser.FCMP, LLVMParser.FDIV, LLVMParser.FENCE, LLVMParser.FMUL, LLVMParser.FPEXT, LLVMParser.FPTOSI, LLVMParser.FPTOUI, LLVMParser.FPTRUNC, LLVMParser.FREM, LLVMParser.FSUB, LLVMParser.GETELEMENTPTR, LLVMParser.ICMP, LLVMParser.INSERTELEMENT, LLVMParser.INSERTVALUE, LLVMParser.INTTOPTR, LLVMParser.LANDINGPAD, LLVMParser.LOAD, LLVMParser.LSHR, LLVMParser.MUL, LLVMParser.MUSTTAIL, LLVMParser.NOTAIL, LLVMParser.OR, LLVMParser.PHI, LLVMParser.PTRTOINT, LLVMParser.SDIV, LLVMParser.SELECT, LLVMParser.SEXT, LLVMParser.SHL, LLVMParser.SHUFFLEVECTOR, LLVMParser.SITOFP, LLVMParser.SREM, LLVMParser.STORE, LLVMParser.SUB, LLVMParser.TAIL, LLVMParser.TRUNC, LLVMParser.UDIV, LLVMParser.UITOFP, LLVMParser.UREM, LLVMParser.VA_ARG, LLVMParser.XOR, LLVMParser.ZEXT, LLVMParser.LOCAL_IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 854
                self.instruction()
                pass
            elif token in [LLVMParser.BR, LLVMParser.CATCHRET, LLVMParser.CATCHSWITCH, LLVMParser.CLEANUPRET, LLVMParser.INDIRECTBR, LLVMParser.INVOKE, LLVMParser.RESUME, LLVMParser.RET, LLVMParser.SWITCH, LLVMParser.UNREACHABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 855
                self.terminator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelEntities(self):
            return self.getTypedRuleContext(LLVMParser.TopLevelEntitiesContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModule" ):
                return visitor.visitModule(self)
            else:
                return visitor.visitChildren(self)




    def module(self):

        localctx = LLVMParser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_module)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.topLevelEntities()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelEntitiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelEntityList(self):
            return self.getTypedRuleContext(LLVMParser.TopLevelEntityListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_topLevelEntities

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelEntities" ):
                listener.enterTopLevelEntities(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelEntities" ):
                listener.exitTopLevelEntities(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelEntities" ):
                return visitor.visitTopLevelEntities(self)
            else:
                return visitor.visitChildren(self)




    def topLevelEntities(self):

        localctx = LLVMParser.TopLevelEntitiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_topLevelEntities)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (LLVMParser.ATTRIBUTES - 51)) | (1 << (LLVMParser.DECLARE - 51)) | (1 << (LLVMParser.DEFINE - 51)))) != 0) or _la==LLVMParser.MODULE or ((((_la - 324)) & ~0x3f) == 0 and ((1 << (_la - 324)) & ((1 << (LLVMParser.SOURCE_FILENAME - 324)) | (1 << (LLVMParser.TARGET - 324)) | (1 << (LLVMParser.USELISTORDER - 324)) | (1 << (LLVMParser.USELISTORDER_BB - 324)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (LLVMParser.COMDAT_NAME - 412)) | (1 << (LLVMParser.METADATA_NAME - 412)) | (1 << (LLVMParser.METADATA_ID - 412)) | (1 << (LLVMParser.GLOBAL_IDENT - 412)) | (1 << (LLVMParser.LOCAL_IDENT - 412)))) != 0):
                self.state = 860
                self.topLevelEntityList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelEntityListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelEntity(self):
            return self.getTypedRuleContext(LLVMParser.TopLevelEntityContext,0)


        def topLevelEntityList(self):
            return self.getTypedRuleContext(LLVMParser.TopLevelEntityListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_topLevelEntityList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelEntityList" ):
                listener.enterTopLevelEntityList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelEntityList" ):
                listener.exitTopLevelEntityList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelEntityList" ):
                return visitor.visitTopLevelEntityList(self)
            else:
                return visitor.visitChildren(self)



    def topLevelEntityList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.TopLevelEntityListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 6
        self.enterRecursionRule(localctx, 6, self.RULE_topLevelEntityList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.topLevelEntity()
            self._ctx.stop = self._input.LT(-1)
            self.state = 870
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.TopLevelEntityListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_topLevelEntityList)
                    self.state = 866
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 867
                    self.topLevelEntity() 
                self.state = 872
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TopLevelEntityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceFilename(self):
            return self.getTypedRuleContext(LLVMParser.SourceFilenameContext,0)


        def targetDefinition(self):
            return self.getTypedRuleContext(LLVMParser.TargetDefinitionContext,0)


        def moduleAsm(self):
            return self.getTypedRuleContext(LLVMParser.ModuleAsmContext,0)


        def typeDef(self):
            return self.getTypedRuleContext(LLVMParser.TypeDefContext,0)


        def comdatDef(self):
            return self.getTypedRuleContext(LLVMParser.ComdatDefContext,0)


        def globalDecl(self):
            return self.getTypedRuleContext(LLVMParser.GlobalDeclContext,0)


        def globalDef(self):
            return self.getTypedRuleContext(LLVMParser.GlobalDefContext,0)


        def indirectSymbolDef(self):
            return self.getTypedRuleContext(LLVMParser.IndirectSymbolDefContext,0)


        def functionDecl(self):
            return self.getTypedRuleContext(LLVMParser.FunctionDeclContext,0)


        def functionDef(self):
            return self.getTypedRuleContext(LLVMParser.FunctionDefContext,0)


        def attrGroupDef(self):
            return self.getTypedRuleContext(LLVMParser.AttrGroupDefContext,0)


        def namedMetadataDef(self):
            return self.getTypedRuleContext(LLVMParser.NamedMetadataDefContext,0)


        def metadataDef(self):
            return self.getTypedRuleContext(LLVMParser.MetadataDefContext,0)


        def useListOrder(self):
            return self.getTypedRuleContext(LLVMParser.UseListOrderContext,0)


        def useListOrderBB(self):
            return self.getTypedRuleContext(LLVMParser.UseListOrderBBContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_topLevelEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelEntity" ):
                listener.enterTopLevelEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelEntity" ):
                listener.exitTopLevelEntity(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelEntity" ):
                return visitor.visitTopLevelEntity(self)
            else:
                return visitor.visitChildren(self)




    def topLevelEntity(self):

        localctx = LLVMParser.TopLevelEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_topLevelEntity)
        try:
            self.state = 888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.sourceFilename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.targetDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 875
                self.moduleAsm()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 876
                self.typeDef()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 877
                self.comdatDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 878
                self.globalDecl()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 879
                self.globalDef()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 880
                self.indirectSymbolDef()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 881
                self.functionDecl()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 882
                self.functionDef()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 883
                self.attrGroupDef()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 884
                self.namedMetadataDef()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 885
                self.metadataDef()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 886
                self.useListOrder()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 887
                self.useListOrderBB()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceFilenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOURCE_FILENAME(self):
            return self.getToken(LLVMParser.SOURCE_FILENAME, 0)

        def EQSIGN(self):
            return self.getToken(LLVMParser.EQSIGN, 0)

        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_sourceFilename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceFilename" ):
                listener.enterSourceFilename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceFilename" ):
                listener.exitSourceFilename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceFilename" ):
                return visitor.visitSourceFilename(self)
            else:
                return visitor.visitChildren(self)




    def sourceFilename(self):

        localctx = LLVMParser.SourceFilenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_sourceFilename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.match(LLVMParser.SOURCE_FILENAME)
            self.state = 891
            self.match(LLVMParser.EQSIGN)
            self.state = 892
            self.stringLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGET(self):
            return self.getToken(LLVMParser.TARGET, 0)

        def DATALAYOUT(self):
            return self.getToken(LLVMParser.DATALAYOUT, 0)

        def EQSIGN(self):
            return self.getToken(LLVMParser.EQSIGN, 0)

        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def TRIPLE(self):
            return self.getToken(LLVMParser.TRIPLE, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_targetDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTargetDefinition" ):
                listener.enterTargetDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTargetDefinition" ):
                listener.exitTargetDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTargetDefinition" ):
                return visitor.visitTargetDefinition(self)
            else:
                return visitor.visitChildren(self)




    def targetDefinition(self):

        localctx = LLVMParser.TargetDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_targetDefinition)
        try:
            self.state = 902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 894
                self.match(LLVMParser.TARGET)
                self.state = 895
                self.match(LLVMParser.DATALAYOUT)
                self.state = 896
                self.match(LLVMParser.EQSIGN)
                self.state = 897
                self.stringLit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 898
                self.match(LLVMParser.TARGET)
                self.state = 899
                self.match(LLVMParser.TRIPLE)
                self.state = 900
                self.match(LLVMParser.EQSIGN)
                self.state = 901
                self.stringLit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleAsmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODULE(self):
            return self.getToken(LLVMParser.MODULE, 0)

        def ASM(self):
            return self.getToken(LLVMParser.ASM, 0)

        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_moduleAsm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleAsm" ):
                listener.enterModuleAsm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleAsm" ):
                listener.exitModuleAsm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleAsm" ):
                return visitor.visitModuleAsm(self)
            else:
                return visitor.visitChildren(self)




    def moduleAsm(self):

        localctx = LLVMParser.ModuleAsmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_moduleAsm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.match(LLVMParser.MODULE)
            self.state = 905
            self.match(LLVMParser.ASM)
            self.state = 906
            self.stringLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localIdent(self):
            return self.getTypedRuleContext(LLVMParser.LocalIdentContext,0)


        def EQSIGN(self):
            return self.getToken(LLVMParser.EQSIGN, 0)

        def TYPE(self):
            return self.getToken(LLVMParser.TYPE, 0)

        def opaqueType(self):
            return self.getTypedRuleContext(LLVMParser.OpaqueTypeContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_typeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDef" ):
                listener.enterTypeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDef" ):
                listener.exitTypeDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeDef" ):
                return visitor.visitTypeDef(self)
            else:
                return visitor.visitChildren(self)




    def typeDef(self):

        localctx = LLVMParser.TypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typeDef)
        try:
            self.state = 918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 908
                self.localIdent()
                self.state = 909
                self.match(LLVMParser.EQSIGN)
                self.state = 910
                self.match(LLVMParser.TYPE)
                self.state = 911
                self.opaqueType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 913
                self.localIdent()
                self.state = 914
                self.match(LLVMParser.EQSIGN)
                self.state = 915
                self.match(LLVMParser.TYPE)
                self.state = 916
                self.llvmType(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComdatDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comdatName(self):
            return self.getTypedRuleContext(LLVMParser.ComdatNameContext,0)


        def EQSIGN(self):
            return self.getToken(LLVMParser.EQSIGN, 0)

        def COMDAT(self):
            return self.getToken(LLVMParser.COMDAT, 0)

        def selectionKind(self):
            return self.getTypedRuleContext(LLVMParser.SelectionKindContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_comdatDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComdatDef" ):
                listener.enterComdatDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComdatDef" ):
                listener.exitComdatDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComdatDef" ):
                return visitor.visitComdatDef(self)
            else:
                return visitor.visitChildren(self)




    def comdatDef(self):

        localctx = LLVMParser.ComdatDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_comdatDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.comdatName()
            self.state = 921
            self.match(LLVMParser.EQSIGN)
            self.state = 922
            self.match(LLVMParser.COMDAT)
            self.state = 923
            self.selectionKind()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(LLVMParser.ANY, 0)

        def EXACTMATCH(self):
            return self.getToken(LLVMParser.EXACTMATCH, 0)

        def LARGEST(self):
            return self.getToken(LLVMParser.LARGEST, 0)

        def NODUPLICATES(self):
            return self.getToken(LLVMParser.NODUPLICATES, 0)

        def SAMESIZE(self):
            return self.getToken(LLVMParser.SAMESIZE, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_selectionKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionKind" ):
                listener.enterSelectionKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionKind" ):
                listener.exitSelectionKind(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionKind" ):
                return visitor.visitSelectionKind(self)
            else:
                return visitor.visitChildren(self)




    def selectionKind(self):

        localctx = LLVMParser.SelectionKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_selectionKind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            _la = self._input.LA(1)
            if not(_la==LLVMParser.ANY or _la==LLVMParser.EXACTMATCH or _la==LLVMParser.LARGEST or _la==LLVMParser.NODUPLICATES or _la==LLVMParser.SAMESIZE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def globalIdent(self):
            return self.getTypedRuleContext(LLVMParser.GlobalIdentContext,0)


        def EQSIGN(self):
            return self.getToken(LLVMParser.EQSIGN, 0)

        def externLinkage(self):
            return self.getTypedRuleContext(LLVMParser.ExternLinkageContext,0)


        def optPreemptionSpecifier(self):
            return self.getTypedRuleContext(LLVMParser.OptPreemptionSpecifierContext,0)


        def optDLLStorageClass(self):
            return self.getTypedRuleContext(LLVMParser.OptDLLStorageClassContext,0)


        def optAddrSpace(self):
            return self.getTypedRuleContext(LLVMParser.OptAddrSpaceContext,0)


        def optExternallyInitialized(self):
            return self.getTypedRuleContext(LLVMParser.OptExternallyInitializedContext,0)


        def immutable(self):
            return self.getTypedRuleContext(LLVMParser.ImmutableContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def globalAttrs(self):
            return self.getTypedRuleContext(LLVMParser.GlobalAttrsContext,0)


        def funcAttrs(self):
            return self.getTypedRuleContext(LLVMParser.FuncAttrsContext,0)


        def visibility(self):
            return self.getTypedRuleContext(LLVMParser.VisibilityContext,0)


        def threadLocal(self):
            return self.getTypedRuleContext(LLVMParser.ThreadLocalContext,0)


        def unnamedAddr(self):
            return self.getTypedRuleContext(LLVMParser.UnnamedAddrContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_globalDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalDecl" ):
                listener.enterGlobalDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalDecl" ):
                listener.exitGlobalDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalDecl" ):
                return visitor.visitGlobalDecl(self)
            else:
                return visitor.visitChildren(self)




    def globalDecl(self):

        localctx = LLVMParser.GlobalDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_globalDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.globalIdent()
            self.state = 928
            self.match(LLVMParser.EQSIGN)
            self.state = 929
            self.externLinkage()
            self.state = 930
            self.optPreemptionSpecifier()
            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.DEFAULT or _la==LLVMParser.HIDDEN_VISIB or _la==LLVMParser.PROTECTED:
                self.state = 931
                self.visibility()


            self.state = 934
            self.optDLLStorageClass()
            self.state = 936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.THREAD_LOCAL:
                self.state = 935
                self.threadLocal()


            self.state = 939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.LOCAL_UNNAMED_ADDR or _la==LLVMParser.UNNAMED_ADDR:
                self.state = 938
                self.unnamedAddr()


            self.state = 941
            self.optAddrSpace()
            self.state = 942
            self.optExternallyInitialized()
            self.state = 943
            self.immutable()
            self.state = 944
            self.llvmType(0)
            self.state = 945
            self.globalAttrs()
            self.state = 946
            self.funcAttrs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def globalIdent(self):
            return self.getTypedRuleContext(LLVMParser.GlobalIdentContext,0)


        def EQSIGN(self):
            return self.getToken(LLVMParser.EQSIGN, 0)

        def optLinkage(self):
            return self.getTypedRuleContext(LLVMParser.OptLinkageContext,0)


        def optPreemptionSpecifier(self):
            return self.getTypedRuleContext(LLVMParser.OptPreemptionSpecifierContext,0)


        def optDLLStorageClass(self):
            return self.getTypedRuleContext(LLVMParser.OptDLLStorageClassContext,0)


        def optAddrSpace(self):
            return self.getTypedRuleContext(LLVMParser.OptAddrSpaceContext,0)


        def optExternallyInitialized(self):
            return self.getTypedRuleContext(LLVMParser.OptExternallyInitializedContext,0)


        def immutable(self):
            return self.getTypedRuleContext(LLVMParser.ImmutableContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def globalAttrs(self):
            return self.getTypedRuleContext(LLVMParser.GlobalAttrsContext,0)


        def funcAttrs(self):
            return self.getTypedRuleContext(LLVMParser.FuncAttrsContext,0)


        def visibility(self):
            return self.getTypedRuleContext(LLVMParser.VisibilityContext,0)


        def threadLocal(self):
            return self.getTypedRuleContext(LLVMParser.ThreadLocalContext,0)


        def unnamedAddr(self):
            return self.getTypedRuleContext(LLVMParser.UnnamedAddrContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_globalDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalDef" ):
                listener.enterGlobalDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalDef" ):
                listener.exitGlobalDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalDef" ):
                return visitor.visitGlobalDef(self)
            else:
                return visitor.visitChildren(self)




    def globalDef(self):

        localctx = LLVMParser.GlobalDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_globalDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.globalIdent()
            self.state = 949
            self.match(LLVMParser.EQSIGN)
            self.state = 950
            self.optLinkage()
            self.state = 951
            self.optPreemptionSpecifier()
            self.state = 953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.DEFAULT or _la==LLVMParser.HIDDEN_VISIB or _la==LLVMParser.PROTECTED:
                self.state = 952
                self.visibility()


            self.state = 955
            self.optDLLStorageClass()
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.THREAD_LOCAL:
                self.state = 956
                self.threadLocal()


            self.state = 960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.LOCAL_UNNAMED_ADDR or _la==LLVMParser.UNNAMED_ADDR:
                self.state = 959
                self.unnamedAddr()


            self.state = 962
            self.optAddrSpace()
            self.state = 963
            self.optExternallyInitialized()
            self.state = 964
            self.immutable()
            self.state = 965
            self.llvmType(0)
            self.state = 966
            self.constant()
            self.state = 967
            self.globalAttrs()
            self.state = 968
            self.funcAttrs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptExternallyInitializedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNALLY_INITIALIZED(self):
            return self.getToken(LLVMParser.EXTERNALLY_INITIALIZED, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_optExternallyInitialized

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptExternallyInitialized" ):
                listener.enterOptExternallyInitialized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptExternallyInitialized" ):
                listener.exitOptExternallyInitialized(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptExternallyInitialized" ):
                return visitor.visitOptExternallyInitialized(self)
            else:
                return visitor.visitChildren(self)




    def optExternallyInitialized(self):

        localctx = LLVMParser.OptExternallyInitializedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_optExternallyInitialized)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.EXTERNALLY_INITIALIZED:
                self.state = 970
                self.match(LLVMParser.EXTERNALLY_INITIALIZED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImmutableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTANT(self):
            return self.getToken(LLVMParser.CONSTANT, 0)

        def GLOBAL(self):
            return self.getToken(LLVMParser.GLOBAL, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_immutable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImmutable" ):
                listener.enterImmutable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImmutable" ):
                listener.exitImmutable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImmutable" ):
                return visitor.visitImmutable(self)
            else:
                return visitor.visitChildren(self)




    def immutable(self):

        localctx = LLVMParser.ImmutableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_immutable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            _la = self._input.LA(1)
            if not(_la==LLVMParser.CONSTANT or _la==LLVMParser.GLOBAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalAttrsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def globalAttrList(self):
            return self.getTypedRuleContext(LLVMParser.GlobalAttrListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_globalAttrs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalAttrs" ):
                listener.enterGlobalAttrs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalAttrs" ):
                listener.exitGlobalAttrs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalAttrs" ):
                return visitor.visitGlobalAttrs(self)
            else:
                return visitor.visitChildren(self)




    def globalAttrs(self):

        localctx = LLVMParser.GlobalAttrsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_globalAttrs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 975
                self.match(LLVMParser.COMMA)
                self.state = 976
                self.globalAttrList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalAttrListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def globalAttr(self):
            return self.getTypedRuleContext(LLVMParser.GlobalAttrContext,0)


        def globalAttrList(self):
            return self.getTypedRuleContext(LLVMParser.GlobalAttrListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_globalAttrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalAttrList" ):
                listener.enterGlobalAttrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalAttrList" ):
                listener.exitGlobalAttrList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalAttrList" ):
                return visitor.visitGlobalAttrList(self)
            else:
                return visitor.visitChildren(self)



    def globalAttrList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.GlobalAttrListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_globalAttrList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.globalAttr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 987
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.GlobalAttrListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_globalAttrList)
                    self.state = 982
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 983
                    self.match(LLVMParser.COMMA)
                    self.state = 984
                    self.globalAttr() 
                self.state = 989
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class GlobalAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def section(self):
            return self.getTypedRuleContext(LLVMParser.SectionContext,0)


        def comdat(self):
            return self.getTypedRuleContext(LLVMParser.ComdatContext,0)


        def alignment(self):
            return self.getTypedRuleContext(LLVMParser.AlignmentContext,0)


        def metadataAttachment(self):
            return self.getTypedRuleContext(LLVMParser.MetadataAttachmentContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_globalAttr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalAttr" ):
                listener.enterGlobalAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalAttr" ):
                listener.exitGlobalAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalAttr" ):
                return visitor.visitGlobalAttr(self)
            else:
                return visitor.visitChildren(self)




    def globalAttr(self):

        localctx = LLVMParser.GlobalAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_globalAttr)
        try:
            self.state = 994
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.SECTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 990
                self.section()
                pass
            elif token in [LLVMParser.COMDAT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 991
                self.comdat()
                pass
            elif token in [LLVMParser.ALIGN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 992
                self.alignment()
                pass
            elif token in [LLVMParser.METADATA_NAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 993
                self.metadataAttachment()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndirectSymbolDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def globalIdent(self):
            return self.getTypedRuleContext(LLVMParser.GlobalIdentContext,0)


        def EQSIGN(self):
            return self.getToken(LLVMParser.EQSIGN, 0)

        def externLinkage(self):
            return self.getTypedRuleContext(LLVMParser.ExternLinkageContext,0)


        def optPreemptionSpecifier(self):
            return self.getTypedRuleContext(LLVMParser.OptPreemptionSpecifierContext,0)


        def optDLLStorageClass(self):
            return self.getTypedRuleContext(LLVMParser.OptDLLStorageClassContext,0)


        def alias(self):
            return self.getTypedRuleContext(LLVMParser.AliasContext,0)


        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def visibility(self):
            return self.getTypedRuleContext(LLVMParser.VisibilityContext,0)


        def threadLocal(self):
            return self.getTypedRuleContext(LLVMParser.ThreadLocalContext,0)


        def unnamedAddr(self):
            return self.getTypedRuleContext(LLVMParser.UnnamedAddrContext,0)


        def optLinkage(self):
            return self.getTypedRuleContext(LLVMParser.OptLinkageContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_indirectSymbolDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndirectSymbolDef" ):
                listener.enterIndirectSymbolDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndirectSymbolDef" ):
                listener.exitIndirectSymbolDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndirectSymbolDef" ):
                return visitor.visitIndirectSymbolDef(self)
            else:
                return visitor.visitChildren(self)




    def indirectSymbolDef(self):

        localctx = LLVMParser.IndirectSymbolDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_indirectSymbolDef)
        self._la = 0 # Token type
        try:
            self.state = 1036
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 996
                self.globalIdent()
                self.state = 997
                self.match(LLVMParser.EQSIGN)
                self.state = 998
                self.externLinkage()
                self.state = 999
                self.optPreemptionSpecifier()
                self.state = 1001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LLVMParser.DEFAULT or _la==LLVMParser.HIDDEN_VISIB or _la==LLVMParser.PROTECTED:
                    self.state = 1000
                    self.visibility()


                self.state = 1003
                self.optDLLStorageClass()
                self.state = 1005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LLVMParser.THREAD_LOCAL:
                    self.state = 1004
                    self.threadLocal()


                self.state = 1008
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LLVMParser.LOCAL_UNNAMED_ADDR or _la==LLVMParser.UNNAMED_ADDR:
                    self.state = 1007
                    self.unnamedAddr()


                self.state = 1010
                self.alias()
                self.state = 1011
                self.llvmType(0)
                self.state = 1012
                self.match(LLVMParser.COMMA)
                self.state = 1013
                self.llvmType(0)
                self.state = 1014
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1016
                self.globalIdent()
                self.state = 1017
                self.match(LLVMParser.EQSIGN)
                self.state = 1018
                self.optLinkage()
                self.state = 1019
                self.optPreemptionSpecifier()
                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LLVMParser.DEFAULT or _la==LLVMParser.HIDDEN_VISIB or _la==LLVMParser.PROTECTED:
                    self.state = 1020
                    self.visibility()


                self.state = 1023
                self.optDLLStorageClass()
                self.state = 1025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LLVMParser.THREAD_LOCAL:
                    self.state = 1024
                    self.threadLocal()


                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LLVMParser.LOCAL_UNNAMED_ADDR or _la==LLVMParser.UNNAMED_ADDR:
                    self.state = 1027
                    self.unnamedAddr()


                self.state = 1030
                self.alias()
                self.state = 1031
                self.llvmType(0)
                self.state = 1032
                self.match(LLVMParser.COMMA)
                self.state = 1033
                self.llvmType(0)
                self.state = 1034
                self.constant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(LLVMParser.ALIAS, 0)

        def IFUNC(self):
            return self.getToken(LLVMParser.IFUNC, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = LLVMParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            _la = self._input.LA(1)
            if not(_la==LLVMParser.ALIAS or _la==LLVMParser.IFUNC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(LLVMParser.DECLARE, 0)

        def metadataAttachments(self):
            return self.getTypedRuleContext(LLVMParser.MetadataAttachmentsContext,0)


        def optExternLinkage(self):
            return self.getTypedRuleContext(LLVMParser.OptExternLinkageContext,0)


        def functionHeader(self):
            return self.getTypedRuleContext(LLVMParser.FunctionHeaderContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_functionDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDecl" ):
                listener.enterFunctionDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDecl" ):
                listener.exitFunctionDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDecl" ):
                return visitor.visitFunctionDecl(self)
            else:
                return visitor.visitChildren(self)




    def functionDecl(self):

        localctx = LLVMParser.FunctionDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_functionDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(LLVMParser.DECLARE)
            self.state = 1041
            self.metadataAttachments()
            self.state = 1042
            self.optExternLinkage()
            self.state = 1043
            self.functionHeader()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFINE(self):
            return self.getToken(LLVMParser.DEFINE, 0)

        def optLinkage(self):
            return self.getTypedRuleContext(LLVMParser.OptLinkageContext,0)


        def functionHeader(self):
            return self.getTypedRuleContext(LLVMParser.FunctionHeaderContext,0)


        def metadataAttachments(self):
            return self.getTypedRuleContext(LLVMParser.MetadataAttachmentsContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(LLVMParser.FunctionBodyContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = LLVMParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_functionDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.match(LLVMParser.DEFINE)
            self.state = 1046
            self.optLinkage()
            self.state = 1047
            self.functionHeader()
            self.state = 1048
            self.metadataAttachments()
            self.state = 1049
            self.functionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optPreemptionSpecifier(self):
            return self.getTypedRuleContext(LLVMParser.OptPreemptionSpecifierContext,0)


        def optDLLStorageClass(self):
            return self.getTypedRuleContext(LLVMParser.OptDLLStorageClassContext,0)


        def optCallingConv(self):
            return self.getTypedRuleContext(LLVMParser.OptCallingConvContext,0)


        def returnAttrs(self):
            return self.getTypedRuleContext(LLVMParser.ReturnAttrsContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def globalIdent(self):
            return self.getTypedRuleContext(LLVMParser.GlobalIdentContext,0)


        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def params(self):
            return self.getTypedRuleContext(LLVMParser.ParamsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def funcAttrs(self):
            return self.getTypedRuleContext(LLVMParser.FuncAttrsContext,0)


        def optComdat(self):
            return self.getTypedRuleContext(LLVMParser.OptComdatContext,0)


        def optGC(self):
            return self.getTypedRuleContext(LLVMParser.OptGCContext,0)


        def optPrefix(self):
            return self.getTypedRuleContext(LLVMParser.OptPrefixContext,0)


        def optPrologue(self):
            return self.getTypedRuleContext(LLVMParser.OptPrologueContext,0)


        def optPersonality(self):
            return self.getTypedRuleContext(LLVMParser.OptPersonalityContext,0)


        def visibility(self):
            return self.getTypedRuleContext(LLVMParser.VisibilityContext,0)


        def unnamedAddr(self):
            return self.getTypedRuleContext(LLVMParser.UnnamedAddrContext,0)


        def section(self):
            return self.getTypedRuleContext(LLVMParser.SectionContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_functionHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionHeader" ):
                listener.enterFunctionHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionHeader" ):
                listener.exitFunctionHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionHeader" ):
                return visitor.visitFunctionHeader(self)
            else:
                return visitor.visitChildren(self)




    def functionHeader(self):

        localctx = LLVMParser.FunctionHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_functionHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.optPreemptionSpecifier()
            self.state = 1053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.DEFAULT or _la==LLVMParser.HIDDEN_VISIB or _la==LLVMParser.PROTECTED:
                self.state = 1052
                self.visibility()


            self.state = 1055
            self.optDLLStorageClass()
            self.state = 1056
            self.optCallingConv()
            self.state = 1057
            self.returnAttrs()
            self.state = 1058
            self.llvmType(0)
            self.state = 1059
            self.globalIdent()
            self.state = 1060
            self.match(LLVMParser.LPAREN)
            self.state = 1061
            self.params()
            self.state = 1062
            self.match(LLVMParser.RPAREN)
            self.state = 1064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 1063
                self.unnamedAddr()


            self.state = 1066
            self.funcAttrs()
            self.state = 1068
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 1067
                self.section()


            self.state = 1070
            self.optComdat()
            self.state = 1071
            self.optGC()
            self.state = 1072
            self.optPrefix()
            self.state = 1073
            self.optPrologue()
            self.state = 1074
            self.optPersonality()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptGCContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GC(self):
            return self.getToken(LLVMParser.GC, 0)

        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_optGC

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptGC" ):
                listener.enterOptGC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptGC" ):
                listener.exitOptGC(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptGC" ):
                return visitor.visitOptGC(self)
            else:
                return visitor.visitChildren(self)




    def optGC(self):

        localctx = LLVMParser.OptGCContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_optGC)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 1076
                self.match(LLVMParser.GC)
                self.state = 1077
                self.stringLit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREFIX(self):
            return self.getToken(LLVMParser.PREFIX, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_optPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptPrefix" ):
                listener.enterOptPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptPrefix" ):
                listener.exitOptPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptPrefix" ):
                return visitor.visitOptPrefix(self)
            else:
                return visitor.visitChildren(self)




    def optPrefix(self):

        localctx = LLVMParser.OptPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_optPrefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 1080
                self.match(LLVMParser.PREFIX)
                self.state = 1081
                self.llvmType(0)
                self.state = 1082
                self.constant()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptPrologueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROLOGUE(self):
            return self.getToken(LLVMParser.PROLOGUE, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_optPrologue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptPrologue" ):
                listener.enterOptPrologue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptPrologue" ):
                listener.exitOptPrologue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptPrologue" ):
                return visitor.visitOptPrologue(self)
            else:
                return visitor.visitChildren(self)




    def optPrologue(self):

        localctx = LLVMParser.OptPrologueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_optPrologue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 1086
                self.match(LLVMParser.PROLOGUE)
                self.state = 1087
                self.llvmType(0)
                self.state = 1088
                self.constant()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptPersonalityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERSONALITY(self):
            return self.getToken(LLVMParser.PERSONALITY, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_optPersonality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptPersonality" ):
                listener.enterOptPersonality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptPersonality" ):
                listener.exitOptPersonality(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptPersonality" ):
                return visitor.visitOptPersonality(self)
            else:
                return visitor.visitChildren(self)




    def optPersonality(self):

        localctx = LLVMParser.OptPersonalityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_optPersonality)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 1092
                self.match(LLVMParser.PERSONALITY)
                self.state = 1093
                self.llvmType(0)
                self.state = 1094
                self.constant()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(LLVMParser.LBRACE, 0)

        def basicBlockList(self):
            return self.getTypedRuleContext(LLVMParser.BasicBlockListContext,0)


        def useListOrders(self):
            return self.getTypedRuleContext(LLVMParser.UseListOrdersContext,0)


        def RBRACE(self):
            return self.getToken(LLVMParser.RBRACE, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionBody" ):
                return visitor.visitFunctionBody(self)
            else:
                return visitor.visitChildren(self)




    def functionBody(self):

        localctx = LLVMParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_functionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(LLVMParser.LBRACE)
            self.state = 1099
            self.basicBlockList(0)
            self.state = 1100
            self.useListOrders()
            self.state = 1101
            self.match(LLVMParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrGroupDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTES(self):
            return self.getToken(LLVMParser.ATTRIBUTES, 0)

        def attrGroupID(self):
            return self.getTypedRuleContext(LLVMParser.AttrGroupIDContext,0)


        def EQSIGN(self):
            return self.getToken(LLVMParser.EQSIGN, 0)

        def LBRACE(self):
            return self.getToken(LLVMParser.LBRACE, 0)

        def funcAttrs(self):
            return self.getTypedRuleContext(LLVMParser.FuncAttrsContext,0)


        def RBRACE(self):
            return self.getToken(LLVMParser.RBRACE, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_attrGroupDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrGroupDef" ):
                listener.enterAttrGroupDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrGroupDef" ):
                listener.exitAttrGroupDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrGroupDef" ):
                return visitor.visitAttrGroupDef(self)
            else:
                return visitor.visitChildren(self)




    def attrGroupDef(self):

        localctx = LLVMParser.AttrGroupDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_attrGroupDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.match(LLVMParser.ATTRIBUTES)
            self.state = 1104
            self.attrGroupID()
            self.state = 1105
            self.match(LLVMParser.EQSIGN)
            self.state = 1106
            self.match(LLVMParser.LBRACE)
            self.state = 1107
            self.funcAttrs()
            self.state = 1108
            self.match(LLVMParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedMetadataDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadataName(self):
            return self.getTypedRuleContext(LLVMParser.MetadataNameContext,0)


        def EQSIGN(self):
            return self.getToken(LLVMParser.EQSIGN, 0)

        def BANG(self):
            return self.getToken(LLVMParser.BANG, 0)

        def LBRACE(self):
            return self.getToken(LLVMParser.LBRACE, 0)

        def metadataNodes(self):
            return self.getTypedRuleContext(LLVMParser.MetadataNodesContext,0)


        def RBRACE(self):
            return self.getToken(LLVMParser.RBRACE, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_namedMetadataDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedMetadataDef" ):
                listener.enterNamedMetadataDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedMetadataDef" ):
                listener.exitNamedMetadataDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedMetadataDef" ):
                return visitor.visitNamedMetadataDef(self)
            else:
                return visitor.visitChildren(self)




    def namedMetadataDef(self):

        localctx = LLVMParser.NamedMetadataDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_namedMetadataDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.metadataName()
            self.state = 1111
            self.match(LLVMParser.EQSIGN)
            self.state = 1112
            self.match(LLVMParser.BANG)
            self.state = 1113
            self.match(LLVMParser.LBRACE)
            self.state = 1114
            self.metadataNodes()
            self.state = 1115
            self.match(LLVMParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataNodesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadataNodeList(self):
            return self.getTypedRuleContext(LLVMParser.MetadataNodeListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_metadataNodes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadataNodes" ):
                listener.enterMetadataNodes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadataNodes" ):
                listener.exitMetadataNodes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetadataNodes" ):
                return visitor.visitMetadataNodes(self)
            else:
                return visitor.visitChildren(self)




    def metadataNodes(self):

        localctx = LLVMParser.MetadataNodesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_metadataNodes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.NOTDIEXPRESSION or _la==LLVMParser.METADATA_ID:
                self.state = 1117
                self.metadataNodeList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataNodeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadataNode(self):
            return self.getTypedRuleContext(LLVMParser.MetadataNodeContext,0)


        def metadataNodeList(self):
            return self.getTypedRuleContext(LLVMParser.MetadataNodeListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_metadataNodeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadataNodeList" ):
                listener.enterMetadataNodeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadataNodeList" ):
                listener.exitMetadataNodeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetadataNodeList" ):
                return visitor.visitMetadataNodeList(self)
            else:
                return visitor.visitChildren(self)



    def metadataNodeList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.MetadataNodeListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_metadataNodeList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.metadataNode()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1128
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.MetadataNodeListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_metadataNodeList)
                    self.state = 1123
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1124
                    self.match(LLVMParser.COMMA)
                    self.state = 1125
                    self.metadataNode() 
                self.state = 1130
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MetadataNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadataID(self):
            return self.getTypedRuleContext(LLVMParser.MetadataIDContext,0)


        def diExpression(self):
            return self.getTypedRuleContext(LLVMParser.DiExpressionContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_metadataNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadataNode" ):
                listener.enterMetadataNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadataNode" ):
                listener.exitMetadataNode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetadataNode" ):
                return visitor.visitMetadataNode(self)
            else:
                return visitor.visitChildren(self)




    def metadataNode(self):

        localctx = LLVMParser.MetadataNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_metadataNode)
        try:
            self.state = 1133
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.METADATA_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1131
                self.metadataID()
                pass
            elif token in [LLVMParser.NOTDIEXPRESSION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1132
                self.diExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadataID(self):
            return self.getTypedRuleContext(LLVMParser.MetadataIDContext,0)


        def EQSIGN(self):
            return self.getToken(LLVMParser.EQSIGN, 0)

        def optDistinct(self):
            return self.getTypedRuleContext(LLVMParser.OptDistinctContext,0)


        def mdTuple(self):
            return self.getTypedRuleContext(LLVMParser.MdTupleContext,0)


        def specializedMDNode(self):
            return self.getTypedRuleContext(LLVMParser.SpecializedMDNodeContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_metadataDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadataDef" ):
                listener.enterMetadataDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadataDef" ):
                listener.exitMetadataDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetadataDef" ):
                return visitor.visitMetadataDef(self)
            else:
                return visitor.visitChildren(self)




    def metadataDef(self):

        localctx = LLVMParser.MetadataDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_metadataDef)
        try:
            self.state = 1145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1135
                self.metadataID()
                self.state = 1136
                self.match(LLVMParser.EQSIGN)
                self.state = 1137
                self.optDistinct()
                self.state = 1138
                self.mdTuple()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1140
                self.metadataID()
                self.state = 1141
                self.match(LLVMParser.EQSIGN)
                self.state = 1142
                self.optDistinct()
                self.state = 1143
                self.specializedMDNode()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptDistinctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(LLVMParser.DISTINCT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_optDistinct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptDistinct" ):
                listener.enterOptDistinct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptDistinct" ):
                listener.exitOptDistinct(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptDistinct" ):
                return visitor.visitOptDistinct(self)
            else:
                return visitor.visitChildren(self)




    def optDistinct(self):

        localctx = LLVMParser.OptDistinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_optDistinct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.DISTINCT:
                self.state = 1147
                self.match(LLVMParser.DISTINCT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseListOrdersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useListOrderList(self):
            return self.getTypedRuleContext(LLVMParser.UseListOrderListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_useListOrders

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseListOrders" ):
                listener.enterUseListOrders(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseListOrders" ):
                listener.exitUseListOrders(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseListOrders" ):
                return visitor.visitUseListOrders(self)
            else:
                return visitor.visitChildren(self)




    def useListOrders(self):

        localctx = LLVMParser.UseListOrdersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_useListOrders)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.USELISTORDER:
                self.state = 1150
                self.useListOrderList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseListOrderListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useListOrder(self):
            return self.getTypedRuleContext(LLVMParser.UseListOrderContext,0)


        def useListOrderList(self):
            return self.getTypedRuleContext(LLVMParser.UseListOrderListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_useListOrderList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseListOrderList" ):
                listener.enterUseListOrderList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseListOrderList" ):
                listener.exitUseListOrderList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseListOrderList" ):
                return visitor.visitUseListOrderList(self)
            else:
                return visitor.visitChildren(self)



    def useListOrderList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.UseListOrderListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 72
        self.enterRecursionRule(localctx, 72, self.RULE_useListOrderList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.useListOrder()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1160
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.UseListOrderListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_useListOrderList)
                    self.state = 1156
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1157
                    self.useListOrder() 
                self.state = 1162
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UseListOrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USELISTORDER(self):
            return self.getToken(LLVMParser.USELISTORDER, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def LBRACE(self):
            return self.getToken(LLVMParser.LBRACE, 0)

        def indexList(self):
            return self.getTypedRuleContext(LLVMParser.IndexListContext,0)


        def RBRACE(self):
            return self.getToken(LLVMParser.RBRACE, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_useListOrder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseListOrder" ):
                listener.enterUseListOrder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseListOrder" ):
                listener.exitUseListOrder(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseListOrder" ):
                return visitor.visitUseListOrder(self)
            else:
                return visitor.visitChildren(self)




    def useListOrder(self):

        localctx = LLVMParser.UseListOrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_useListOrder)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.match(LLVMParser.USELISTORDER)
            self.state = 1164
            self.llvmType(0)
            self.state = 1165
            self.value()
            self.state = 1166
            self.match(LLVMParser.COMMA)
            self.state = 1167
            self.match(LLVMParser.LBRACE)
            self.state = 1168
            self.indexList(0)
            self.state = 1169
            self.match(LLVMParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseListOrderBBContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USELISTORDER_BB(self):
            return self.getToken(LLVMParser.USELISTORDER_BB, 0)

        def globalIdent(self):
            return self.getTypedRuleContext(LLVMParser.GlobalIdentContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMParser.COMMA)
            else:
                return self.getToken(LLVMParser.COMMA, i)

        def localIdent(self):
            return self.getTypedRuleContext(LLVMParser.LocalIdentContext,0)


        def LBRACE(self):
            return self.getToken(LLVMParser.LBRACE, 0)

        def indexList(self):
            return self.getTypedRuleContext(LLVMParser.IndexListContext,0)


        def RBRACE(self):
            return self.getToken(LLVMParser.RBRACE, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_useListOrderBB

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseListOrderBB" ):
                listener.enterUseListOrderBB(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseListOrderBB" ):
                listener.exitUseListOrderBB(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseListOrderBB" ):
                return visitor.visitUseListOrderBB(self)
            else:
                return visitor.visitChildren(self)




    def useListOrderBB(self):

        localctx = LLVMParser.UseListOrderBBContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_useListOrderBB)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self.match(LLVMParser.USELISTORDER_BB)
            self.state = 1172
            self.globalIdent()
            self.state = 1173
            self.match(LLVMParser.COMMA)
            self.state = 1174
            self.localIdent()
            self.state = 1175
            self.match(LLVMParser.COMMA)
            self.state = 1176
            self.match(LLVMParser.LBRACE)
            self.state = 1177
            self.indexList(0)
            self.state = 1178
            self.match(LLVMParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL_IDENT(self):
            return self.getToken(LLVMParser.GLOBAL_IDENT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_globalIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalIdent" ):
                listener.enterGlobalIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalIdent" ):
                listener.exitGlobalIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalIdent" ):
                return visitor.visitGlobalIdent(self)
            else:
                return visitor.visitChildren(self)




    def globalIdent(self):

        localctx = LLVMParser.GlobalIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_globalIdent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            self.match(LLVMParser.GLOBAL_IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_IDENT(self):
            return self.getToken(LLVMParser.LOCAL_IDENT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_localIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalIdent" ):
                listener.enterLocalIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalIdent" ):
                listener.exitLocalIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalIdent" ):
                return visitor.visitLocalIdent(self)
            else:
                return visitor.visitChildren(self)




    def localIdent(self):

        localctx = LLVMParser.LocalIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_localIdent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.match(LLVMParser.LOCAL_IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL_IDENT(self):
            return self.getToken(LLVMParser.LABEL_IDENT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_labelIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelIdent" ):
                listener.enterLabelIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelIdent" ):
                listener.exitLabelIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelIdent" ):
                return visitor.visitLabelIdent(self)
            else:
                return visitor.visitChildren(self)




    def labelIdent(self):

        localctx = LLVMParser.LabelIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_labelIdent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.match(LLVMParser.LABEL_IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrGroupIDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTR_GROUP_ID(self):
            return self.getToken(LLVMParser.ATTR_GROUP_ID, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_attrGroupID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrGroupID" ):
                listener.enterAttrGroupID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrGroupID" ):
                listener.exitAttrGroupID(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrGroupID" ):
                return visitor.visitAttrGroupID(self)
            else:
                return visitor.visitChildren(self)




    def attrGroupID(self):

        localctx = LLVMParser.AttrGroupIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_attrGroupID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1186
            self.match(LLVMParser.ATTR_GROUP_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComdatNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMDAT_NAME(self):
            return self.getToken(LLVMParser.COMDAT_NAME, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_comdatName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComdatName" ):
                listener.enterComdatName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComdatName" ):
                listener.exitComdatName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComdatName" ):
                return visitor.visitComdatName(self)
            else:
                return visitor.visitChildren(self)




    def comdatName(self):

        localctx = LLVMParser.ComdatNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_comdatName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            self.match(LLVMParser.COMDAT_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METADATA_NAME(self):
            return self.getToken(LLVMParser.METADATA_NAME, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_metadataName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadataName" ):
                listener.enterMetadataName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadataName" ):
                listener.exitMetadataName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetadataName" ):
                return visitor.visitMetadataName(self)
            else:
                return visitor.visitChildren(self)




    def metadataName(self):

        localctx = LLVMParser.MetadataNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_metadataName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.match(LLVMParser.METADATA_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataIDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METADATA_ID(self):
            return self.getToken(LLVMParser.METADATA_ID, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_metadataID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadataID" ):
                listener.enterMetadataID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadataID" ):
                listener.exitMetadataID(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetadataID" ):
                return visitor.visitMetadataID(self)
            else:
                return visitor.visitChildren(self)




    def metadataID(self):

        localctx = LLVMParser.MetadataIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_metadataID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.match(LLVMParser.METADATA_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LlvmTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def voidType(self):
            return self.getTypedRuleContext(LLVMParser.VoidTypeContext,0)


        def concreteNonRecType(self):
            return self.getTypedRuleContext(LLVMParser.ConcreteNonRecTypeContext,0)


        def metadataType(self):
            return self.getTypedRuleContext(LLVMParser.MetadataTypeContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def params(self):
            return self.getTypedRuleContext(LLVMParser.ParamsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def optAddrSpace(self):
            return self.getTypedRuleContext(LLVMParser.OptAddrSpaceContext,0)


        def STAR(self):
            return self.getToken(LLVMParser.STAR, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_llvmType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLlvmType" ):
                listener.enterLlvmType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLlvmType" ):
                listener.exitLlvmType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLlvmType" ):
                return visitor.visitLlvmType(self)
            else:
                return visitor.visitChildren(self)



    def llvmType(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.LlvmTypeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_llvmType, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.VOID]:
                self.state = 1195
                self.voidType()
                pass
            elif token in [LLVMParser.LT, LLVMParser.LBRACK, LLVMParser.LBRACE, LLVMParser.DOUBLE, LLVMParser.FLOAT, LLVMParser.FP128, LLVMParser.HALF, LLVMParser.LABEL, LLVMParser.PPC_FP128, LLVMParser.TOKEN, LLVMParser.X86_FP80, LLVMParser.X86_MMX, LLVMParser.INT_TYPE, LLVMParser.LOCAL_IDENT]:
                self.state = 1196
                self.concreteNonRecType()
                pass
            elif token in [LLVMParser.METADATA]:
                self.state = 1197
                self.metadataType()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1211
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1209
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                    if la_ == 1:
                        localctx = LLVMParser.LlvmTypeContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_llvmType)
                        self.state = 1200
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1201
                        self.match(LLVMParser.LPAREN)
                        self.state = 1202
                        self.params()
                        self.state = 1203
                        self.match(LLVMParser.RPAREN)
                        pass

                    elif la_ == 2:
                        localctx = LLVMParser.LlvmTypeContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_llvmType)
                        self.state = 1205
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1206
                        self.optAddrSpace()
                        self.state = 1207
                        self.match(LLVMParser.STAR)
                        pass

             
                self.state = 1213
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConcreteNonRecTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intType(self):
            return self.getTypedRuleContext(LLVMParser.IntTypeContext,0)


        def floatType(self):
            return self.getTypedRuleContext(LLVMParser.FloatTypeContext,0)


        def vectorType(self):
            return self.getTypedRuleContext(LLVMParser.VectorTypeContext,0)


        def labelType(self):
            return self.getTypedRuleContext(LLVMParser.LabelTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(LLVMParser.ArrayTypeContext,0)


        def structType(self):
            return self.getTypedRuleContext(LLVMParser.StructTypeContext,0)


        def namedType(self):
            return self.getTypedRuleContext(LLVMParser.NamedTypeContext,0)


        def mmxType(self):
            return self.getTypedRuleContext(LLVMParser.MmxTypeContext,0)


        def tokenType(self):
            return self.getTypedRuleContext(LLVMParser.TokenTypeContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_concreteNonRecType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcreteNonRecType" ):
                listener.enterConcreteNonRecType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcreteNonRecType" ):
                listener.exitConcreteNonRecType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcreteNonRecType" ):
                return visitor.visitConcreteNonRecType(self)
            else:
                return visitor.visitChildren(self)




    def concreteNonRecType(self):

        localctx = LLVMParser.ConcreteNonRecTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_concreteNonRecType)
        try:
            self.state = 1223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1214
                self.intType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1215
                self.floatType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1216
                self.vectorType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1217
                self.labelType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1218
                self.arrayType()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1219
                self.structType()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1220
                self.namedType()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1221
                self.mmxType()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1222
                self.tokenType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VoidTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VOID(self):
            return self.getToken(LLVMParser.VOID, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_voidType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVoidType" ):
                listener.enterVoidType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVoidType" ):
                listener.exitVoidType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVoidType" ):
                return visitor.visitVoidType(self)
            else:
                return visitor.visitChildren(self)




    def voidType(self):

        localctx = LLVMParser.VoidTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_voidType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.match(LLVMParser.VOID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_TYPE(self):
            return self.getToken(LLVMParser.INT_TYPE, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_intType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntType" ):
                listener.enterIntType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntType" ):
                listener.exitIntType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntType" ):
                return visitor.visitIntType(self)
            else:
                return visitor.visitChildren(self)




    def intType(self):

        localctx = LLVMParser.IntTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_intType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1227
            self.match(LLVMParser.INT_TYPE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatKind(self):
            return self.getTypedRuleContext(LLVMParser.FloatKindContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_floatType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatType" ):
                listener.enterFloatType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatType" ):
                listener.exitFloatType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatType" ):
                return visitor.visitFloatType(self)
            else:
                return visitor.visitChildren(self)




    def floatType(self):

        localctx = LLVMParser.FloatTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_floatType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.floatKind()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HALF(self):
            return self.getToken(LLVMParser.HALF, 0)

        def FLOAT(self):
            return self.getToken(LLVMParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(LLVMParser.DOUBLE, 0)

        def X86_FP80(self):
            return self.getToken(LLVMParser.X86_FP80, 0)

        def FP128(self):
            return self.getToken(LLVMParser.FP128, 0)

        def PPC_FP128(self):
            return self.getToken(LLVMParser.PPC_FP128, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_floatKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatKind" ):
                listener.enterFloatKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatKind" ):
                listener.exitFloatKind(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatKind" ):
                return visitor.visitFloatKind(self)
            else:
                return visitor.visitChildren(self)




    def floatKind(self):

        localctx = LLVMParser.FloatKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_floatKind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            _la = self._input.LA(1)
            if not(((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (LLVMParser.DOUBLE - 126)) | (1 << (LLVMParser.FLOAT - 126)) | (1 << (LLVMParser.FP128 - 126)) | (1 << (LLVMParser.HALF - 126)))) != 0) or _la==LLVMParser.PPC_FP128 or _la==LLVMParser.X86_FP80):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MmxTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def X86_MMX(self):
            return self.getToken(LLVMParser.X86_MMX, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_mmxType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMmxType" ):
                listener.enterMmxType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMmxType" ):
                listener.exitMmxType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMmxType" ):
                return visitor.visitMmxType(self)
            else:
                return visitor.visitChildren(self)




    def mmxType(self):

        localctx = LLVMParser.MmxTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_mmxType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            self.match(LLVMParser.X86_MMX)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptAddrSpaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def addrSpace(self):
            return self.getTypedRuleContext(LLVMParser.AddrSpaceContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_optAddrSpace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptAddrSpace" ):
                listener.enterOptAddrSpace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptAddrSpace" ):
                listener.exitOptAddrSpace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptAddrSpace" ):
                return visitor.visitOptAddrSpace(self)
            else:
                return visitor.visitChildren(self)




    def optAddrSpace(self):

        localctx = LLVMParser.OptAddrSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_optAddrSpace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.ADDRSPACE:
                self.state = 1235
                self.addrSpace()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddrSpaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDRSPACE(self):
            return self.getToken(LLVMParser.ADDRSPACE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def INT_LIT(self):
            return self.getToken(LLVMParser.INT_LIT, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_addrSpace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddrSpace" ):
                listener.enterAddrSpace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddrSpace" ):
                listener.exitAddrSpace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddrSpace" ):
                return visitor.visitAddrSpace(self)
            else:
                return visitor.visitChildren(self)




    def addrSpace(self):

        localctx = LLVMParser.AddrSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_addrSpace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self.match(LLVMParser.ADDRSPACE)
            self.state = 1239
            self.match(LLVMParser.LPAREN)
            self.state = 1240
            self.match(LLVMParser.INT_LIT)
            self.state = 1241
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VectorTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(LLVMParser.LT, 0)

        def INT_LIT(self):
            return self.getToken(LLVMParser.INT_LIT, 0)

        def X(self):
            return self.getToken(LLVMParser.X, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def GT(self):
            return self.getToken(LLVMParser.GT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_vectorType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVectorType" ):
                listener.enterVectorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVectorType" ):
                listener.exitVectorType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVectorType" ):
                return visitor.visitVectorType(self)
            else:
                return visitor.visitChildren(self)




    def vectorType(self):

        localctx = LLVMParser.VectorTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_vectorType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self.match(LLVMParser.LT)
            self.state = 1244
            self.match(LLVMParser.INT_LIT)
            self.state = 1245
            self.match(LLVMParser.X)
            self.state = 1246
            self.llvmType(0)
            self.state = 1247
            self.match(LLVMParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(LLVMParser.LABEL, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_labelType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelType" ):
                listener.enterLabelType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelType" ):
                listener.exitLabelType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelType" ):
                return visitor.visitLabelType(self)
            else:
                return visitor.visitChildren(self)




    def labelType(self):

        localctx = LLVMParser.LabelTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_labelType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1249
            self.match(LLVMParser.LABEL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokenTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOKEN(self):
            return self.getToken(LLVMParser.TOKEN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_tokenType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokenType" ):
                listener.enterTokenType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokenType" ):
                listener.exitTokenType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTokenType" ):
                return visitor.visitTokenType(self)
            else:
                return visitor.visitChildren(self)




    def tokenType(self):

        localctx = LLVMParser.TokenTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_tokenType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.match(LLVMParser.TOKEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METADATA(self):
            return self.getToken(LLVMParser.METADATA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_metadataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadataType" ):
                listener.enterMetadataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadataType" ):
                listener.exitMetadataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetadataType" ):
                return visitor.visitMetadataType(self)
            else:
                return visitor.visitChildren(self)




    def metadataType(self):

        localctx = LLVMParser.MetadataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_metadataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self.match(LLVMParser.METADATA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(LLVMParser.LBRACK, 0)

        def INT_LIT(self):
            return self.getToken(LLVMParser.INT_LIT, 0)

        def X(self):
            return self.getToken(LLVMParser.X, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def RBRACK(self):
            return self.getToken(LLVMParser.RBRACK, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = LLVMParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self.match(LLVMParser.LBRACK)
            self.state = 1256
            self.match(LLVMParser.INT_LIT)
            self.state = 1257
            self.match(LLVMParser.X)
            self.state = 1258
            self.llvmType(0)
            self.state = 1259
            self.match(LLVMParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(LLVMParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(LLVMParser.RBRACE, 0)

        def typeList(self):
            return self.getTypedRuleContext(LLVMParser.TypeListContext,0)


        def LT(self):
            return self.getToken(LLVMParser.LT, 0)

        def GT(self):
            return self.getToken(LLVMParser.GT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_structType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructType" ):
                listener.enterStructType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructType" ):
                listener.exitStructType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructType" ):
                return visitor.visitStructType(self)
            else:
                return visitor.visitChildren(self)




    def structType(self):

        localctx = LLVMParser.StructTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_structType)
        try:
            self.state = 1277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1261
                self.match(LLVMParser.LBRACE)
                self.state = 1262
                self.match(LLVMParser.RBRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1263
                self.match(LLVMParser.LBRACE)
                self.state = 1264
                self.typeList(0)
                self.state = 1265
                self.match(LLVMParser.RBRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1267
                self.match(LLVMParser.LT)
                self.state = 1268
                self.match(LLVMParser.LBRACE)
                self.state = 1269
                self.match(LLVMParser.RBRACE)
                self.state = 1270
                self.match(LLVMParser.GT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1271
                self.match(LLVMParser.LT)
                self.state = 1272
                self.match(LLVMParser.LBRACE)
                self.state = 1273
                self.typeList(0)
                self.state = 1274
                self.match(LLVMParser.RBRACE)
                self.state = 1275
                self.match(LLVMParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def typeList(self):
            return self.getTypedRuleContext(LLVMParser.TypeListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeList" ):
                return visitor.visitTypeList(self)
            else:
                return visitor.visitChildren(self)



    def typeList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.TypeListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_typeList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.llvmType(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1287
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.TypeListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeList)
                    self.state = 1282
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1283
                    self.match(LLVMParser.COMMA)
                    self.state = 1284
                    self.llvmType(0) 
                self.state = 1289
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class OpaqueTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPAQUE(self):
            return self.getToken(LLVMParser.OPAQUE, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_opaqueType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpaqueType" ):
                listener.enterOpaqueType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpaqueType" ):
                listener.exitOpaqueType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpaqueType" ):
                return visitor.visitOpaqueType(self)
            else:
                return visitor.visitChildren(self)




    def opaqueType(self):

        localctx = LLVMParser.OpaqueTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_opaqueType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.match(LLVMParser.OPAQUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localIdent(self):
            return self.getTypedRuleContext(LLVMParser.LocalIdentContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_namedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedType" ):
                listener.enterNamedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedType" ):
                listener.exitNamedType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedType" ):
                return visitor.visitNamedType(self)
            else:
                return visitor.visitChildren(self)




    def namedType(self):

        localctx = LLVMParser.NamedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_namedType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.localIdent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def localIdent(self):
            return self.getTypedRuleContext(LLVMParser.LocalIdentContext,0)


        def inlineAsm(self):
            return self.getTypedRuleContext(LLVMParser.InlineAsmContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue" ):
                return visitor.visitValue(self)
            else:
                return visitor.visitChildren(self)




    def value(self):

        localctx = LLVMParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_value)
        try:
            self.state = 1297
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.LT, LLVMParser.LBRACK, LLVMParser.LBRACE, LLVMParser.ADD, LLVMParser.ADDRSPACECAST, LLVMParser.AND, LLVMParser.ASHR, LLVMParser.BITCAST, LLVMParser.BLOCKADDRESS, LLVMParser.C, LLVMParser.EXTRACTELEMENT, LLVMParser.EXTRACTVALUE, LLVMParser.FADD, LLVMParser.FALSE, LLVMParser.FCMP, LLVMParser.FDIV, LLVMParser.FMUL, LLVMParser.FPEXT, LLVMParser.FPTOSI, LLVMParser.FPTOUI, LLVMParser.FPTRUNC, LLVMParser.FREM, LLVMParser.FSUB, LLVMParser.GETELEMENTPTR, LLVMParser.ICMP, LLVMParser.INSERTELEMENT, LLVMParser.INSERTVALUE, LLVMParser.INTTOPTR, LLVMParser.LSHR, LLVMParser.MUL, LLVMParser.NONE, LLVMParser.NULL, LLVMParser.OR, LLVMParser.PTRTOINT, LLVMParser.SDIV, LLVMParser.SELECT, LLVMParser.SEXT, LLVMParser.SHL, LLVMParser.SHUFFLEVECTOR, LLVMParser.SITOFP, LLVMParser.SREM, LLVMParser.SUB, LLVMParser.TRUE, LLVMParser.TRUNC, LLVMParser.UDIV, LLVMParser.UITOFP, LLVMParser.UNDEF, LLVMParser.UREM, LLVMParser.XOR, LLVMParser.ZEROINITIALIZER, LLVMParser.ZEXT, LLVMParser.INT_LIT, LLVMParser.FLOAT_LIT, LLVMParser.GLOBAL_IDENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1294
                self.constant()
                pass
            elif token in [LLVMParser.LOCAL_IDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1295
                self.localIdent()
                pass
            elif token in [LLVMParser.ASM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1296
                self.inlineAsm()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineAsmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASM(self):
            return self.getToken(LLVMParser.ASM, 0)

        def optSideEffect(self):
            return self.getTypedRuleContext(LLVMParser.OptSideEffectContext,0)


        def optAlignStack(self):
            return self.getTypedRuleContext(LLVMParser.OptAlignStackContext,0)


        def optIntelDialect(self):
            return self.getTypedRuleContext(LLVMParser.OptIntelDialectContext,0)


        def stringLit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.StringLitContext)
            else:
                return self.getTypedRuleContext(LLVMParser.StringLitContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_inlineAsm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAsm" ):
                listener.enterInlineAsm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAsm" ):
                listener.exitInlineAsm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineAsm" ):
                return visitor.visitInlineAsm(self)
            else:
                return visitor.visitChildren(self)




    def inlineAsm(self):

        localctx = LLVMParser.InlineAsmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_inlineAsm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1299
            self.match(LLVMParser.ASM)
            self.state = 1300
            self.optSideEffect()
            self.state = 1301
            self.optAlignStack()
            self.state = 1302
            self.optIntelDialect()
            self.state = 1303
            self.stringLit()
            self.state = 1304
            self.match(LLVMParser.COMMA)
            self.state = 1305
            self.stringLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptSideEffectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIDEEFFECT(self):
            return self.getToken(LLVMParser.SIDEEFFECT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_optSideEffect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptSideEffect" ):
                listener.enterOptSideEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptSideEffect" ):
                listener.exitOptSideEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptSideEffect" ):
                return visitor.visitOptSideEffect(self)
            else:
                return visitor.visitChildren(self)




    def optSideEffect(self):

        localctx = LLVMParser.OptSideEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_optSideEffect)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.SIDEEFFECT:
                self.state = 1307
                self.match(LLVMParser.SIDEEFFECT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptAlignStackContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIGNSTACK(self):
            return self.getToken(LLVMParser.ALIGNSTACK, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_optAlignStack

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptAlignStack" ):
                listener.enterOptAlignStack(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptAlignStack" ):
                listener.exitOptAlignStack(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptAlignStack" ):
                return visitor.visitOptAlignStack(self)
            else:
                return visitor.visitChildren(self)




    def optAlignStack(self):

        localctx = LLVMParser.OptAlignStackContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_optAlignStack)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.ALIGNSTACK:
                self.state = 1310
                self.match(LLVMParser.ALIGNSTACK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptIntelDialectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTELDIALECT(self):
            return self.getToken(LLVMParser.INTELDIALECT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_optIntelDialect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptIntelDialect" ):
                listener.enterOptIntelDialect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptIntelDialect" ):
                listener.exitOptIntelDialect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptIntelDialect" ):
                return visitor.visitOptIntelDialect(self)
            else:
                return visitor.visitChildren(self)




    def optIntelDialect(self):

        localctx = LLVMParser.OptIntelDialectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_optIntelDialect)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.INTELDIALECT:
                self.state = 1313
                self.match(LLVMParser.INTELDIALECT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolConst(self):
            return self.getTypedRuleContext(LLVMParser.BoolConstContext,0)


        def intConst(self):
            return self.getTypedRuleContext(LLVMParser.IntConstContext,0)


        def floatConst(self):
            return self.getTypedRuleContext(LLVMParser.FloatConstContext,0)


        def nullConst(self):
            return self.getTypedRuleContext(LLVMParser.NullConstContext,0)


        def noneConst(self):
            return self.getTypedRuleContext(LLVMParser.NoneConstContext,0)


        def structConst(self):
            return self.getTypedRuleContext(LLVMParser.StructConstContext,0)


        def arrayConst(self):
            return self.getTypedRuleContext(LLVMParser.ArrayConstContext,0)


        def charArrayConst(self):
            return self.getTypedRuleContext(LLVMParser.CharArrayConstContext,0)


        def vectorConst(self):
            return self.getTypedRuleContext(LLVMParser.VectorConstContext,0)


        def zeroInitializerConst(self):
            return self.getTypedRuleContext(LLVMParser.ZeroInitializerConstContext,0)


        def globalIdent(self):
            return self.getTypedRuleContext(LLVMParser.GlobalIdentContext,0)


        def undefConst(self):
            return self.getTypedRuleContext(LLVMParser.UndefConstContext,0)


        def blockAddressConst(self):
            return self.getTypedRuleContext(LLVMParser.BlockAddressConstContext,0)


        def constantExpr(self):
            return self.getTypedRuleContext(LLVMParser.ConstantExprContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = LLVMParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_constant)
        try:
            self.state = 1330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1316
                self.boolConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1317
                self.intConst()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1318
                self.floatConst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1319
                self.nullConst()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1320
                self.noneConst()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1321
                self.structConst()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1322
                self.arrayConst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1323
                self.charArrayConst()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1324
                self.vectorConst()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1325
                self.zeroInitializerConst()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1326
                self.globalIdent()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1327
                self.undefConst()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1328
                self.blockAddressConst()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1329
                self.constantExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolLit(self):
            return self.getTypedRuleContext(LLVMParser.BoolLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_boolConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolConst" ):
                listener.enterBoolConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolConst" ):
                listener.exitBoolConst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolConst" ):
                return visitor.visitBoolConst(self)
            else:
                return visitor.visitChildren(self)




    def boolConst(self):

        localctx = LLVMParser.BoolConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_boolConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.boolLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(LLVMParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(LLVMParser.FALSE, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_boolLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolLit" ):
                listener.enterBoolLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolLit" ):
                listener.exitBoolLit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolLit" ):
                return visitor.visitBoolLit(self)
            else:
                return visitor.visitChildren(self)




    def boolLit(self):

        localctx = LLVMParser.BoolLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_boolLit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            _la = self._input.LA(1)
            if not(_la==LLVMParser.FALSE or _la==LLVMParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(LLVMParser.INT_LIT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_intConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntConst" ):
                listener.enterIntConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntConst" ):
                listener.exitIntConst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntConst" ):
                return visitor.visitIntConst(self)
            else:
                return visitor.visitChildren(self)




    def intConst(self):

        localctx = LLVMParser.IntConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_intConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1336
            self.match(LLVMParser.INT_LIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(LLVMParser.INT_LIT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_intLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntLit" ):
                listener.enterIntLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntLit" ):
                listener.exitIntLit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntLit" ):
                return visitor.visitIntLit(self)
            else:
                return visitor.visitChildren(self)




    def intLit(self):

        localctx = LLVMParser.IntLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_intLit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self.match(LLVMParser.INT_LIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LIT(self):
            return self.getToken(LLVMParser.FLOAT_LIT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_floatConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatConst" ):
                listener.enterFloatConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatConst" ):
                listener.exitFloatConst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatConst" ):
                return visitor.visitFloatConst(self)
            else:
                return visitor.visitChildren(self)




    def floatConst(self):

        localctx = LLVMParser.FloatConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_floatConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1340
            self.match(LLVMParser.FLOAT_LIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(LLVMParser.NULL, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_nullConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullConst" ):
                listener.enterNullConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullConst" ):
                listener.exitNullConst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullConst" ):
                return visitor.visitNullConst(self)
            else:
                return visitor.visitChildren(self)




    def nullConst(self):

        localctx = LLVMParser.NullConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_nullConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342
            self.match(LLVMParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoneConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONE(self):
            return self.getToken(LLVMParser.NONE, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_noneConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoneConst" ):
                listener.enterNoneConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoneConst" ):
                listener.exitNoneConst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoneConst" ):
                return visitor.visitNoneConst(self)
            else:
                return visitor.visitChildren(self)




    def noneConst(self):

        localctx = LLVMParser.NoneConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_noneConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.match(LLVMParser.NONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(LLVMParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(LLVMParser.RBRACE, 0)

        def typeConstList(self):
            return self.getTypedRuleContext(LLVMParser.TypeConstListContext,0)


        def LT(self):
            return self.getToken(LLVMParser.LT, 0)

        def GT(self):
            return self.getToken(LLVMParser.GT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_structConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructConst" ):
                listener.enterStructConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructConst" ):
                listener.exitStructConst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructConst" ):
                return visitor.visitStructConst(self)
            else:
                return visitor.visitChildren(self)




    def structConst(self):

        localctx = LLVMParser.StructConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_structConst)
        try:
            self.state = 1362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1346
                self.match(LLVMParser.LBRACE)
                self.state = 1347
                self.match(LLVMParser.RBRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1348
                self.match(LLVMParser.LBRACE)
                self.state = 1349
                self.typeConstList(0)
                self.state = 1350
                self.match(LLVMParser.RBRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1352
                self.match(LLVMParser.LT)
                self.state = 1353
                self.match(LLVMParser.LBRACE)
                self.state = 1354
                self.match(LLVMParser.RBRACE)
                self.state = 1355
                self.match(LLVMParser.GT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1356
                self.match(LLVMParser.LT)
                self.state = 1357
                self.match(LLVMParser.LBRACE)
                self.state = 1358
                self.typeConstList(0)
                self.state = 1359
                self.match(LLVMParser.RBRACE)
                self.state = 1360
                self.match(LLVMParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(LLVMParser.LBRACK, 0)

        def typeConsts(self):
            return self.getTypedRuleContext(LLVMParser.TypeConstsContext,0)


        def RBRACK(self):
            return self.getToken(LLVMParser.RBRACK, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_arrayConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConst" ):
                listener.enterArrayConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConst" ):
                listener.exitArrayConst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayConst" ):
                return visitor.visitArrayConst(self)
            else:
                return visitor.visitChildren(self)




    def arrayConst(self):

        localctx = LLVMParser.ArrayConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_arrayConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.match(LLVMParser.LBRACK)
            self.state = 1365
            self.typeConsts()
            self.state = 1366
            self.match(LLVMParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharArrayConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C(self):
            return self.getToken(LLVMParser.C, 0)

        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_charArrayConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharArrayConst" ):
                listener.enterCharArrayConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharArrayConst" ):
                listener.exitCharArrayConst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharArrayConst" ):
                return visitor.visitCharArrayConst(self)
            else:
                return visitor.visitChildren(self)




    def charArrayConst(self):

        localctx = LLVMParser.CharArrayConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_charArrayConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            self.match(LLVMParser.C)
            self.state = 1369
            self.stringLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LIT(self):
            return self.getToken(LLVMParser.STRING_LIT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_stringLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLit" ):
                listener.enterStringLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLit" ):
                listener.exitStringLit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLit" ):
                return visitor.visitStringLit(self)
            else:
                return visitor.visitChildren(self)




    def stringLit(self):

        localctx = LLVMParser.StringLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_stringLit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            self.match(LLVMParser.STRING_LIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VectorConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(LLVMParser.LT, 0)

        def typeConsts(self):
            return self.getTypedRuleContext(LLVMParser.TypeConstsContext,0)


        def GT(self):
            return self.getToken(LLVMParser.GT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_vectorConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVectorConst" ):
                listener.enterVectorConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVectorConst" ):
                listener.exitVectorConst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVectorConst" ):
                return visitor.visitVectorConst(self)
            else:
                return visitor.visitChildren(self)




    def vectorConst(self):

        localctx = LLVMParser.VectorConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_vectorConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1373
            self.match(LLVMParser.LT)
            self.state = 1374
            self.typeConsts()
            self.state = 1375
            self.match(LLVMParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ZeroInitializerConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ZEROINITIALIZER(self):
            return self.getToken(LLVMParser.ZEROINITIALIZER, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_zeroInitializerConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZeroInitializerConst" ):
                listener.enterZeroInitializerConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZeroInitializerConst" ):
                listener.exitZeroInitializerConst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitZeroInitializerConst" ):
                return visitor.visitZeroInitializerConst(self)
            else:
                return visitor.visitChildren(self)




    def zeroInitializerConst(self):

        localctx = LLVMParser.ZeroInitializerConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_zeroInitializerConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1377
            self.match(LLVMParser.ZEROINITIALIZER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UndefConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDEF(self):
            return self.getToken(LLVMParser.UNDEF, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_undefConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUndefConst" ):
                listener.enterUndefConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUndefConst" ):
                listener.exitUndefConst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUndefConst" ):
                return visitor.visitUndefConst(self)
            else:
                return visitor.visitChildren(self)




    def undefConst(self):

        localctx = LLVMParser.UndefConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_undefConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.match(LLVMParser.UNDEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockAddressConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCKADDRESS(self):
            return self.getToken(LLVMParser.BLOCKADDRESS, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def globalIdent(self):
            return self.getTypedRuleContext(LLVMParser.GlobalIdentContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def localIdent(self):
            return self.getTypedRuleContext(LLVMParser.LocalIdentContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_blockAddressConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockAddressConst" ):
                listener.enterBlockAddressConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockAddressConst" ):
                listener.exitBlockAddressConst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockAddressConst" ):
                return visitor.visitBlockAddressConst(self)
            else:
                return visitor.visitChildren(self)




    def blockAddressConst(self):

        localctx = LLVMParser.BlockAddressConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_blockAddressConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1381
            self.match(LLVMParser.BLOCKADDRESS)
            self.state = 1382
            self.match(LLVMParser.LPAREN)
            self.state = 1383
            self.globalIdent()
            self.state = 1384
            self.match(LLVMParser.COMMA)
            self.state = 1385
            self.localIdent()
            self.state = 1386
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def addExpr(self):
            return self.getTypedRuleContext(LLVMParser.AddExprContext,0)


        def fAddExpr(self):
            return self.getTypedRuleContext(LLVMParser.FAddExprContext,0)


        def subExpr(self):
            return self.getTypedRuleContext(LLVMParser.SubExprContext,0)


        def fSubExpr(self):
            return self.getTypedRuleContext(LLVMParser.FSubExprContext,0)


        def mulExpr(self):
            return self.getTypedRuleContext(LLVMParser.MulExprContext,0)


        def fMulExpr(self):
            return self.getTypedRuleContext(LLVMParser.FMulExprContext,0)


        def uDivExpr(self):
            return self.getTypedRuleContext(LLVMParser.UDivExprContext,0)


        def sDivExpr(self):
            return self.getTypedRuleContext(LLVMParser.SDivExprContext,0)


        def fDivExpr(self):
            return self.getTypedRuleContext(LLVMParser.FDivExprContext,0)


        def uRemExpr(self):
            return self.getTypedRuleContext(LLVMParser.URemExprContext,0)


        def sRemExpr(self):
            return self.getTypedRuleContext(LLVMParser.SRemExprContext,0)


        def fRemExpr(self):
            return self.getTypedRuleContext(LLVMParser.FRemExprContext,0)


        def shlExpr(self):
            return self.getTypedRuleContext(LLVMParser.ShlExprContext,0)


        def lShrExpr(self):
            return self.getTypedRuleContext(LLVMParser.LShrExprContext,0)


        def ashrExpr(self):
            return self.getTypedRuleContext(LLVMParser.AshrExprContext,0)


        def andExpr(self):
            return self.getTypedRuleContext(LLVMParser.AndExprContext,0)


        def orExpr(self):
            return self.getTypedRuleContext(LLVMParser.OrExprContext,0)


        def xorExpr(self):
            return self.getTypedRuleContext(LLVMParser.XorExprContext,0)


        def extractElementExpr(self):
            return self.getTypedRuleContext(LLVMParser.ExtractElementExprContext,0)


        def insertElementExpr(self):
            return self.getTypedRuleContext(LLVMParser.InsertElementExprContext,0)


        def shuffleVectorExpr(self):
            return self.getTypedRuleContext(LLVMParser.ShuffleVectorExprContext,0)


        def extractValueExpr(self):
            return self.getTypedRuleContext(LLVMParser.ExtractValueExprContext,0)


        def insertValueExpr(self):
            return self.getTypedRuleContext(LLVMParser.InsertValueExprContext,0)


        def getElementPtrExpr(self):
            return self.getTypedRuleContext(LLVMParser.GetElementPtrExprContext,0)


        def truncExpr(self):
            return self.getTypedRuleContext(LLVMParser.TruncExprContext,0)


        def zExtExpr(self):
            return self.getTypedRuleContext(LLVMParser.ZExtExprContext,0)


        def sExtExpr(self):
            return self.getTypedRuleContext(LLVMParser.SExtExprContext,0)


        def fPTruncExpr(self):
            return self.getTypedRuleContext(LLVMParser.FPTruncExprContext,0)


        def fpExtExpr(self):
            return self.getTypedRuleContext(LLVMParser.FpExtExprContext,0)


        def fpToUIExpr(self):
            return self.getTypedRuleContext(LLVMParser.FpToUIExprContext,0)


        def fpToSIExpr(self):
            return self.getTypedRuleContext(LLVMParser.FpToSIExprContext,0)


        def uiToFPExpr(self):
            return self.getTypedRuleContext(LLVMParser.UiToFPExprContext,0)


        def siToFPExpr(self):
            return self.getTypedRuleContext(LLVMParser.SiToFPExprContext,0)


        def ptrToIntExpr(self):
            return self.getTypedRuleContext(LLVMParser.PtrToIntExprContext,0)


        def intToPtrExpr(self):
            return self.getTypedRuleContext(LLVMParser.IntToPtrExprContext,0)


        def bitCastExpr(self):
            return self.getTypedRuleContext(LLVMParser.BitCastExprContext,0)


        def addrSpaceCastExpr(self):
            return self.getTypedRuleContext(LLVMParser.AddrSpaceCastExprContext,0)


        def iCmpExpr(self):
            return self.getTypedRuleContext(LLVMParser.ICmpExprContext,0)


        def fCmpExpr(self):
            return self.getTypedRuleContext(LLVMParser.FCmpExprContext,0)


        def selectExpr(self):
            return self.getTypedRuleContext(LLVMParser.SelectExprContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_constantExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpr" ):
                listener.enterConstantExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpr" ):
                listener.exitConstantExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpr" ):
                return visitor.visitConstantExpr(self)
            else:
                return visitor.visitChildren(self)




    def constantExpr(self):

        localctx = LLVMParser.ConstantExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_constantExpr)
        try:
            self.state = 1428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1388
                self.addExpr()
                pass
            elif token in [LLVMParser.FADD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1389
                self.fAddExpr()
                pass
            elif token in [LLVMParser.SUB]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1390
                self.subExpr()
                pass
            elif token in [LLVMParser.FSUB]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1391
                self.fSubExpr()
                pass
            elif token in [LLVMParser.MUL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1392
                self.mulExpr()
                pass
            elif token in [LLVMParser.FMUL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1393
                self.fMulExpr()
                pass
            elif token in [LLVMParser.UDIV]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1394
                self.uDivExpr()
                pass
            elif token in [LLVMParser.SDIV]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1395
                self.sDivExpr()
                pass
            elif token in [LLVMParser.FDIV]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1396
                self.fDivExpr()
                pass
            elif token in [LLVMParser.UREM]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1397
                self.uRemExpr()
                pass
            elif token in [LLVMParser.SREM]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1398
                self.sRemExpr()
                pass
            elif token in [LLVMParser.FREM]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1399
                self.fRemExpr()
                pass
            elif token in [LLVMParser.SHL]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1400
                self.shlExpr()
                pass
            elif token in [LLVMParser.LSHR]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1401
                self.lShrExpr()
                pass
            elif token in [LLVMParser.ASHR]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1402
                self.ashrExpr()
                pass
            elif token in [LLVMParser.AND]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1403
                self.andExpr()
                pass
            elif token in [LLVMParser.OR]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1404
                self.orExpr()
                pass
            elif token in [LLVMParser.XOR]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1405
                self.xorExpr()
                pass
            elif token in [LLVMParser.EXTRACTELEMENT]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1406
                self.extractElementExpr()
                pass
            elif token in [LLVMParser.INSERTELEMENT]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1407
                self.insertElementExpr()
                pass
            elif token in [LLVMParser.SHUFFLEVECTOR]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1408
                self.shuffleVectorExpr()
                pass
            elif token in [LLVMParser.EXTRACTVALUE]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1409
                self.extractValueExpr()
                pass
            elif token in [LLVMParser.INSERTVALUE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1410
                self.insertValueExpr()
                pass
            elif token in [LLVMParser.GETELEMENTPTR]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1411
                self.getElementPtrExpr()
                pass
            elif token in [LLVMParser.TRUNC]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1412
                self.truncExpr()
                pass
            elif token in [LLVMParser.ZEXT]:
                self.enterOuterAlt(localctx, 26)
                self.state = 1413
                self.zExtExpr()
                pass
            elif token in [LLVMParser.SEXT]:
                self.enterOuterAlt(localctx, 27)
                self.state = 1414
                self.sExtExpr()
                pass
            elif token in [LLVMParser.FPTRUNC]:
                self.enterOuterAlt(localctx, 28)
                self.state = 1415
                self.fPTruncExpr()
                pass
            elif token in [LLVMParser.FPEXT]:
                self.enterOuterAlt(localctx, 29)
                self.state = 1416
                self.fpExtExpr()
                pass
            elif token in [LLVMParser.FPTOUI]:
                self.enterOuterAlt(localctx, 30)
                self.state = 1417
                self.fpToUIExpr()
                pass
            elif token in [LLVMParser.FPTOSI]:
                self.enterOuterAlt(localctx, 31)
                self.state = 1418
                self.fpToSIExpr()
                pass
            elif token in [LLVMParser.UITOFP]:
                self.enterOuterAlt(localctx, 32)
                self.state = 1419
                self.uiToFPExpr()
                pass
            elif token in [LLVMParser.SITOFP]:
                self.enterOuterAlt(localctx, 33)
                self.state = 1420
                self.siToFPExpr()
                pass
            elif token in [LLVMParser.PTRTOINT]:
                self.enterOuterAlt(localctx, 34)
                self.state = 1421
                self.ptrToIntExpr()
                pass
            elif token in [LLVMParser.INTTOPTR]:
                self.enterOuterAlt(localctx, 35)
                self.state = 1422
                self.intToPtrExpr()
                pass
            elif token in [LLVMParser.BITCAST]:
                self.enterOuterAlt(localctx, 36)
                self.state = 1423
                self.bitCastExpr()
                pass
            elif token in [LLVMParser.ADDRSPACECAST]:
                self.enterOuterAlt(localctx, 37)
                self.state = 1424
                self.addrSpaceCastExpr()
                pass
            elif token in [LLVMParser.ICMP]:
                self.enterOuterAlt(localctx, 38)
                self.state = 1425
                self.iCmpExpr()
                pass
            elif token in [LLVMParser.FCMP]:
                self.enterOuterAlt(localctx, 39)
                self.state = 1426
                self.fCmpExpr()
                pass
            elif token in [LLVMParser.SELECT]:
                self.enterOuterAlt(localctx, 40)
                self.state = 1427
                self.selectExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(LLVMParser.ADD, 0)

        def overflowFlags(self):
            return self.getTypedRuleContext(LLVMParser.OverflowFlagsContext,0)


        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_addExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddExpr" ):
                listener.enterAddExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddExpr" ):
                listener.exitAddExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddExpr" ):
                return visitor.visitAddExpr(self)
            else:
                return visitor.visitChildren(self)




    def addExpr(self):

        localctx = LLVMParser.AddExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_addExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self.match(LLVMParser.ADD)
            self.state = 1431
            self.overflowFlags()
            self.state = 1432
            self.match(LLVMParser.LPAREN)
            self.state = 1433
            self.llvmType(0)
            self.state = 1434
            self.constant()
            self.state = 1435
            self.match(LLVMParser.COMMA)
            self.state = 1436
            self.llvmType(0)
            self.state = 1437
            self.constant()
            self.state = 1438
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FAddExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FADD(self):
            return self.getToken(LLVMParser.FADD, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_fAddExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFAddExpr" ):
                listener.enterFAddExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFAddExpr" ):
                listener.exitFAddExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFAddExpr" ):
                return visitor.visitFAddExpr(self)
            else:
                return visitor.visitChildren(self)




    def fAddExpr(self):

        localctx = LLVMParser.FAddExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_fAddExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self.match(LLVMParser.FADD)
            self.state = 1441
            self.match(LLVMParser.LPAREN)
            self.state = 1442
            self.llvmType(0)
            self.state = 1443
            self.constant()
            self.state = 1444
            self.match(LLVMParser.COMMA)
            self.state = 1445
            self.llvmType(0)
            self.state = 1446
            self.constant()
            self.state = 1447
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(LLVMParser.SUB, 0)

        def overflowFlags(self):
            return self.getTypedRuleContext(LLVMParser.OverflowFlagsContext,0)


        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_subExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubExpr" ):
                listener.enterSubExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubExpr" ):
                listener.exitSubExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubExpr" ):
                return visitor.visitSubExpr(self)
            else:
                return visitor.visitChildren(self)




    def subExpr(self):

        localctx = LLVMParser.SubExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_subExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1449
            self.match(LLVMParser.SUB)
            self.state = 1450
            self.overflowFlags()
            self.state = 1451
            self.match(LLVMParser.LPAREN)
            self.state = 1452
            self.llvmType(0)
            self.state = 1453
            self.constant()
            self.state = 1454
            self.match(LLVMParser.COMMA)
            self.state = 1455
            self.llvmType(0)
            self.state = 1456
            self.constant()
            self.state = 1457
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FSubExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FSUB(self):
            return self.getToken(LLVMParser.FSUB, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_fSubExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFSubExpr" ):
                listener.enterFSubExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFSubExpr" ):
                listener.exitFSubExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFSubExpr" ):
                return visitor.visitFSubExpr(self)
            else:
                return visitor.visitChildren(self)




    def fSubExpr(self):

        localctx = LLVMParser.FSubExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_fSubExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self.match(LLVMParser.FSUB)
            self.state = 1460
            self.match(LLVMParser.LPAREN)
            self.state = 1461
            self.llvmType(0)
            self.state = 1462
            self.constant()
            self.state = 1463
            self.match(LLVMParser.COMMA)
            self.state = 1464
            self.llvmType(0)
            self.state = 1465
            self.constant()
            self.state = 1466
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MulExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUL(self):
            return self.getToken(LLVMParser.MUL, 0)

        def overflowFlags(self):
            return self.getTypedRuleContext(LLVMParser.OverflowFlagsContext,0)


        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_mulExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulExpr" ):
                listener.enterMulExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulExpr" ):
                listener.exitMulExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulExpr" ):
                return visitor.visitMulExpr(self)
            else:
                return visitor.visitChildren(self)




    def mulExpr(self):

        localctx = LLVMParser.MulExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_mulExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1468
            self.match(LLVMParser.MUL)
            self.state = 1469
            self.overflowFlags()
            self.state = 1470
            self.match(LLVMParser.LPAREN)
            self.state = 1471
            self.llvmType(0)
            self.state = 1472
            self.constant()
            self.state = 1473
            self.match(LLVMParser.COMMA)
            self.state = 1474
            self.llvmType(0)
            self.state = 1475
            self.constant()
            self.state = 1476
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FMulExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FMUL(self):
            return self.getToken(LLVMParser.FMUL, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_fMulExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFMulExpr" ):
                listener.enterFMulExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFMulExpr" ):
                listener.exitFMulExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFMulExpr" ):
                return visitor.visitFMulExpr(self)
            else:
                return visitor.visitChildren(self)




    def fMulExpr(self):

        localctx = LLVMParser.FMulExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_fMulExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1478
            self.match(LLVMParser.FMUL)
            self.state = 1479
            self.match(LLVMParser.LPAREN)
            self.state = 1480
            self.llvmType(0)
            self.state = 1481
            self.constant()
            self.state = 1482
            self.match(LLVMParser.COMMA)
            self.state = 1483
            self.llvmType(0)
            self.state = 1484
            self.constant()
            self.state = 1485
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UDivExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UDIV(self):
            return self.getToken(LLVMParser.UDIV, 0)

        def optExact(self):
            return self.getTypedRuleContext(LLVMParser.OptExactContext,0)


        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_uDivExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUDivExpr" ):
                listener.enterUDivExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUDivExpr" ):
                listener.exitUDivExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUDivExpr" ):
                return visitor.visitUDivExpr(self)
            else:
                return visitor.visitChildren(self)




    def uDivExpr(self):

        localctx = LLVMParser.UDivExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_uDivExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            self.match(LLVMParser.UDIV)
            self.state = 1488
            self.optExact()
            self.state = 1489
            self.match(LLVMParser.LPAREN)
            self.state = 1490
            self.llvmType(0)
            self.state = 1491
            self.constant()
            self.state = 1492
            self.match(LLVMParser.COMMA)
            self.state = 1493
            self.llvmType(0)
            self.state = 1494
            self.constant()
            self.state = 1495
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SDivExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SDIV(self):
            return self.getToken(LLVMParser.SDIV, 0)

        def optExact(self):
            return self.getTypedRuleContext(LLVMParser.OptExactContext,0)


        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_sDivExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSDivExpr" ):
                listener.enterSDivExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSDivExpr" ):
                listener.exitSDivExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSDivExpr" ):
                return visitor.visitSDivExpr(self)
            else:
                return visitor.visitChildren(self)




    def sDivExpr(self):

        localctx = LLVMParser.SDivExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_sDivExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1497
            self.match(LLVMParser.SDIV)
            self.state = 1498
            self.optExact()
            self.state = 1499
            self.match(LLVMParser.LPAREN)
            self.state = 1500
            self.llvmType(0)
            self.state = 1501
            self.constant()
            self.state = 1502
            self.match(LLVMParser.COMMA)
            self.state = 1503
            self.llvmType(0)
            self.state = 1504
            self.constant()
            self.state = 1505
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FDivExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FDIV(self):
            return self.getToken(LLVMParser.FDIV, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_fDivExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFDivExpr" ):
                listener.enterFDivExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFDivExpr" ):
                listener.exitFDivExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFDivExpr" ):
                return visitor.visitFDivExpr(self)
            else:
                return visitor.visitChildren(self)




    def fDivExpr(self):

        localctx = LLVMParser.FDivExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_fDivExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self.match(LLVMParser.FDIV)
            self.state = 1508
            self.match(LLVMParser.LPAREN)
            self.state = 1509
            self.llvmType(0)
            self.state = 1510
            self.constant()
            self.state = 1511
            self.match(LLVMParser.COMMA)
            self.state = 1512
            self.llvmType(0)
            self.state = 1513
            self.constant()
            self.state = 1514
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class URemExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UREM(self):
            return self.getToken(LLVMParser.UREM, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_uRemExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterURemExpr" ):
                listener.enterURemExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitURemExpr" ):
                listener.exitURemExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitURemExpr" ):
                return visitor.visitURemExpr(self)
            else:
                return visitor.visitChildren(self)




    def uRemExpr(self):

        localctx = LLVMParser.URemExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_uRemExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1516
            self.match(LLVMParser.UREM)
            self.state = 1517
            self.match(LLVMParser.LPAREN)
            self.state = 1518
            self.llvmType(0)
            self.state = 1519
            self.constant()
            self.state = 1520
            self.match(LLVMParser.COMMA)
            self.state = 1521
            self.llvmType(0)
            self.state = 1522
            self.constant()
            self.state = 1523
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SRemExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SREM(self):
            return self.getToken(LLVMParser.SREM, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_sRemExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSRemExpr" ):
                listener.enterSRemExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSRemExpr" ):
                listener.exitSRemExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSRemExpr" ):
                return visitor.visitSRemExpr(self)
            else:
                return visitor.visitChildren(self)




    def sRemExpr(self):

        localctx = LLVMParser.SRemExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_sRemExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1525
            self.match(LLVMParser.SREM)
            self.state = 1526
            self.match(LLVMParser.LPAREN)
            self.state = 1527
            self.llvmType(0)
            self.state = 1528
            self.constant()
            self.state = 1529
            self.match(LLVMParser.COMMA)
            self.state = 1530
            self.llvmType(0)
            self.state = 1531
            self.constant()
            self.state = 1532
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FRemExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FREM(self):
            return self.getToken(LLVMParser.FREM, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_fRemExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFRemExpr" ):
                listener.enterFRemExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFRemExpr" ):
                listener.exitFRemExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFRemExpr" ):
                return visitor.visitFRemExpr(self)
            else:
                return visitor.visitChildren(self)




    def fRemExpr(self):

        localctx = LLVMParser.FRemExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_fRemExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1534
            self.match(LLVMParser.FREM)
            self.state = 1535
            self.match(LLVMParser.LPAREN)
            self.state = 1536
            self.llvmType(0)
            self.state = 1537
            self.constant()
            self.state = 1538
            self.match(LLVMParser.COMMA)
            self.state = 1539
            self.llvmType(0)
            self.state = 1540
            self.constant()
            self.state = 1541
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShlExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHL(self):
            return self.getToken(LLVMParser.SHL, 0)

        def overflowFlags(self):
            return self.getTypedRuleContext(LLVMParser.OverflowFlagsContext,0)


        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_shlExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShlExpr" ):
                listener.enterShlExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShlExpr" ):
                listener.exitShlExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShlExpr" ):
                return visitor.visitShlExpr(self)
            else:
                return visitor.visitChildren(self)




    def shlExpr(self):

        localctx = LLVMParser.ShlExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_shlExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1543
            self.match(LLVMParser.SHL)
            self.state = 1544
            self.overflowFlags()
            self.state = 1545
            self.match(LLVMParser.LPAREN)
            self.state = 1546
            self.llvmType(0)
            self.state = 1547
            self.constant()
            self.state = 1548
            self.match(LLVMParser.COMMA)
            self.state = 1549
            self.llvmType(0)
            self.state = 1550
            self.constant()
            self.state = 1551
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LShrExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSHR(self):
            return self.getToken(LLVMParser.LSHR, 0)

        def optExact(self):
            return self.getTypedRuleContext(LLVMParser.OptExactContext,0)


        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_lShrExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLShrExpr" ):
                listener.enterLShrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLShrExpr" ):
                listener.exitLShrExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLShrExpr" ):
                return visitor.visitLShrExpr(self)
            else:
                return visitor.visitChildren(self)




    def lShrExpr(self):

        localctx = LLVMParser.LShrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_lShrExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1553
            self.match(LLVMParser.LSHR)
            self.state = 1554
            self.optExact()
            self.state = 1555
            self.match(LLVMParser.LPAREN)
            self.state = 1556
            self.llvmType(0)
            self.state = 1557
            self.constant()
            self.state = 1558
            self.match(LLVMParser.COMMA)
            self.state = 1559
            self.llvmType(0)
            self.state = 1560
            self.constant()
            self.state = 1561
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AshrExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASHR(self):
            return self.getToken(LLVMParser.ASHR, 0)

        def optExact(self):
            return self.getTypedRuleContext(LLVMParser.OptExactContext,0)


        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_ashrExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAshrExpr" ):
                listener.enterAshrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAshrExpr" ):
                listener.exitAshrExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAshrExpr" ):
                return visitor.visitAshrExpr(self)
            else:
                return visitor.visitChildren(self)




    def ashrExpr(self):

        localctx = LLVMParser.AshrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_ashrExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            self.match(LLVMParser.ASHR)
            self.state = 1564
            self.optExact()
            self.state = 1565
            self.match(LLVMParser.LPAREN)
            self.state = 1566
            self.llvmType(0)
            self.state = 1567
            self.constant()
            self.state = 1568
            self.match(LLVMParser.COMMA)
            self.state = 1569
            self.llvmType(0)
            self.state = 1570
            self.constant()
            self.state = 1571
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(LLVMParser.AND, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_andExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpr" ):
                listener.enterAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpr" ):
                listener.exitAndExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndExpr" ):
                return visitor.visitAndExpr(self)
            else:
                return visitor.visitChildren(self)




    def andExpr(self):

        localctx = LLVMParser.AndExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_andExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1573
            self.match(LLVMParser.AND)
            self.state = 1574
            self.match(LLVMParser.LPAREN)
            self.state = 1575
            self.llvmType(0)
            self.state = 1576
            self.constant()
            self.state = 1577
            self.match(LLVMParser.COMMA)
            self.state = 1578
            self.llvmType(0)
            self.state = 1579
            self.constant()
            self.state = 1580
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(LLVMParser.OR, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_orExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpr" ):
                listener.enterOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpr" ):
                listener.exitOrExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrExpr" ):
                return visitor.visitOrExpr(self)
            else:
                return visitor.visitChildren(self)




    def orExpr(self):

        localctx = LLVMParser.OrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_orExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1582
            self.match(LLVMParser.OR)
            self.state = 1583
            self.match(LLVMParser.LPAREN)
            self.state = 1584
            self.llvmType(0)
            self.state = 1585
            self.constant()
            self.state = 1586
            self.match(LLVMParser.COMMA)
            self.state = 1587
            self.llvmType(0)
            self.state = 1588
            self.constant()
            self.state = 1589
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XorExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XOR(self):
            return self.getToken(LLVMParser.XOR, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_xorExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXorExpr" ):
                listener.enterXorExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXorExpr" ):
                listener.exitXorExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXorExpr" ):
                return visitor.visitXorExpr(self)
            else:
                return visitor.visitChildren(self)




    def xorExpr(self):

        localctx = LLVMParser.XorExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_xorExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1591
            self.match(LLVMParser.XOR)
            self.state = 1592
            self.match(LLVMParser.LPAREN)
            self.state = 1593
            self.llvmType(0)
            self.state = 1594
            self.constant()
            self.state = 1595
            self.match(LLVMParser.COMMA)
            self.state = 1596
            self.llvmType(0)
            self.state = 1597
            self.constant()
            self.state = 1598
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtractElementExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTRACTELEMENT(self):
            return self.getToken(LLVMParser.EXTRACTELEMENT, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_extractElementExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractElementExpr" ):
                listener.enterExtractElementExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractElementExpr" ):
                listener.exitExtractElementExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtractElementExpr" ):
                return visitor.visitExtractElementExpr(self)
            else:
                return visitor.visitChildren(self)




    def extractElementExpr(self):

        localctx = LLVMParser.ExtractElementExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_extractElementExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1600
            self.match(LLVMParser.EXTRACTELEMENT)
            self.state = 1601
            self.match(LLVMParser.LPAREN)
            self.state = 1602
            self.llvmType(0)
            self.state = 1603
            self.constant()
            self.state = 1604
            self.match(LLVMParser.COMMA)
            self.state = 1605
            self.llvmType(0)
            self.state = 1606
            self.constant()
            self.state = 1607
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertElementExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERTELEMENT(self):
            return self.getToken(LLVMParser.INSERTELEMENT, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMParser.COMMA)
            else:
                return self.getToken(LLVMParser.COMMA, i)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_insertElementExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertElementExpr" ):
                listener.enterInsertElementExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertElementExpr" ):
                listener.exitInsertElementExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertElementExpr" ):
                return visitor.visitInsertElementExpr(self)
            else:
                return visitor.visitChildren(self)




    def insertElementExpr(self):

        localctx = LLVMParser.InsertElementExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_insertElementExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1609
            self.match(LLVMParser.INSERTELEMENT)
            self.state = 1610
            self.match(LLVMParser.LPAREN)
            self.state = 1611
            self.llvmType(0)
            self.state = 1612
            self.constant()
            self.state = 1613
            self.match(LLVMParser.COMMA)
            self.state = 1614
            self.llvmType(0)
            self.state = 1615
            self.constant()
            self.state = 1616
            self.match(LLVMParser.COMMA)
            self.state = 1617
            self.llvmType(0)
            self.state = 1618
            self.constant()
            self.state = 1619
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShuffleVectorExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHUFFLEVECTOR(self):
            return self.getToken(LLVMParser.SHUFFLEVECTOR, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMParser.COMMA)
            else:
                return self.getToken(LLVMParser.COMMA, i)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_shuffleVectorExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShuffleVectorExpr" ):
                listener.enterShuffleVectorExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShuffleVectorExpr" ):
                listener.exitShuffleVectorExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShuffleVectorExpr" ):
                return visitor.visitShuffleVectorExpr(self)
            else:
                return visitor.visitChildren(self)




    def shuffleVectorExpr(self):

        localctx = LLVMParser.ShuffleVectorExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_shuffleVectorExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            self.match(LLVMParser.SHUFFLEVECTOR)
            self.state = 1622
            self.match(LLVMParser.LPAREN)
            self.state = 1623
            self.llvmType(0)
            self.state = 1624
            self.constant()
            self.state = 1625
            self.match(LLVMParser.COMMA)
            self.state = 1626
            self.llvmType(0)
            self.state = 1627
            self.constant()
            self.state = 1628
            self.match(LLVMParser.COMMA)
            self.state = 1629
            self.llvmType(0)
            self.state = 1630
            self.constant()
            self.state = 1631
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtractValueExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTRACTVALUE(self):
            return self.getToken(LLVMParser.EXTRACTVALUE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def indices(self):
            return self.getTypedRuleContext(LLVMParser.IndicesContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_extractValueExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractValueExpr" ):
                listener.enterExtractValueExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractValueExpr" ):
                listener.exitExtractValueExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtractValueExpr" ):
                return visitor.visitExtractValueExpr(self)
            else:
                return visitor.visitChildren(self)




    def extractValueExpr(self):

        localctx = LLVMParser.ExtractValueExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_extractValueExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1633
            self.match(LLVMParser.EXTRACTVALUE)
            self.state = 1634
            self.match(LLVMParser.LPAREN)
            self.state = 1635
            self.llvmType(0)
            self.state = 1636
            self.constant()
            self.state = 1637
            self.indices()
            self.state = 1638
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertValueExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERTVALUE(self):
            return self.getToken(LLVMParser.INSERTVALUE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def indices(self):
            return self.getTypedRuleContext(LLVMParser.IndicesContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_insertValueExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertValueExpr" ):
                listener.enterInsertValueExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertValueExpr" ):
                listener.exitInsertValueExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertValueExpr" ):
                return visitor.visitInsertValueExpr(self)
            else:
                return visitor.visitChildren(self)




    def insertValueExpr(self):

        localctx = LLVMParser.InsertValueExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_insertValueExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.match(LLVMParser.INSERTVALUE)
            self.state = 1641
            self.match(LLVMParser.LPAREN)
            self.state = 1642
            self.llvmType(0)
            self.state = 1643
            self.constant()
            self.state = 1644
            self.match(LLVMParser.COMMA)
            self.state = 1645
            self.llvmType(0)
            self.state = 1646
            self.constant()
            self.state = 1647
            self.indices()
            self.state = 1648
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetElementPtrExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GETELEMENTPTR(self):
            return self.getToken(LLVMParser.GETELEMENTPTR, 0)

        def optInBounds(self):
            return self.getTypedRuleContext(LLVMParser.OptInBoundsContext,0)


        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMParser.COMMA)
            else:
                return self.getToken(LLVMParser.COMMA, i)

        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def gepConstIndices(self):
            return self.getTypedRuleContext(LLVMParser.GepConstIndicesContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_getElementPtrExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetElementPtrExpr" ):
                listener.enterGetElementPtrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetElementPtrExpr" ):
                listener.exitGetElementPtrExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetElementPtrExpr" ):
                return visitor.visitGetElementPtrExpr(self)
            else:
                return visitor.visitChildren(self)




    def getElementPtrExpr(self):

        localctx = LLVMParser.GetElementPtrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_getElementPtrExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self.match(LLVMParser.GETELEMENTPTR)
            self.state = 1651
            self.optInBounds()
            self.state = 1652
            self.match(LLVMParser.LPAREN)
            self.state = 1653
            self.llvmType(0)
            self.state = 1654
            self.match(LLVMParser.COMMA)
            self.state = 1655
            self.llvmType(0)
            self.state = 1656
            self.constant()
            self.state = 1657
            self.match(LLVMParser.COMMA)
            self.state = 1658
            self.gepConstIndices()
            self.state = 1659
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GepConstIndicesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gepConstIndexList(self):
            return self.getTypedRuleContext(LLVMParser.GepConstIndexListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_gepConstIndices

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGepConstIndices" ):
                listener.enterGepConstIndices(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGepConstIndices" ):
                listener.exitGepConstIndices(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGepConstIndices" ):
                return visitor.visitGepConstIndices(self)
            else:
                return visitor.visitChildren(self)




    def gepConstIndices(self):

        localctx = LLVMParser.GepConstIndicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_gepConstIndices)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LLVMParser.LT) | (1 << LLVMParser.LBRACK) | (1 << LLVMParser.LBRACE))) != 0) or ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (LLVMParser.DOUBLE - 126)) | (1 << (LLVMParser.FLOAT - 126)) | (1 << (LLVMParser.FP128 - 126)) | (1 << (LLVMParser.HALF - 126)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (LLVMParser.INRANGE - 195)) | (1 << (LLVMParser.LABEL - 195)) | (1 << (LLVMParser.METADATA - 195)))) != 0) or _la==LLVMParser.PPC_FP128 or ((((_la - 351)) & ~0x3f) == 0 and ((1 << (_la - 351)) & ((1 << (LLVMParser.TOKEN - 351)) | (1 << (LLVMParser.VOID - 351)) | (1 << (LLVMParser.X86_FP80 - 351)) | (1 << (LLVMParser.X86_MMX - 351)))) != 0) or _la==LLVMParser.INT_TYPE or _la==LLVMParser.LOCAL_IDENT:
                self.state = 1661
                self.gepConstIndexList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GepConstIndexListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gepConstIndex(self):
            return self.getTypedRuleContext(LLVMParser.GepConstIndexContext,0)


        def gepConstIndexList(self):
            return self.getTypedRuleContext(LLVMParser.GepConstIndexListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_gepConstIndexList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGepConstIndexList" ):
                listener.enterGepConstIndexList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGepConstIndexList" ):
                listener.exitGepConstIndexList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGepConstIndexList" ):
                return visitor.visitGepConstIndexList(self)
            else:
                return visitor.visitChildren(self)



    def gepConstIndexList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.GepConstIndexListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 222
        self.enterRecursionRule(localctx, 222, self.RULE_gepConstIndexList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1665
            self.gepConstIndex()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1672
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.GepConstIndexListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_gepConstIndexList)
                    self.state = 1667
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1668
                    self.match(LLVMParser.COMMA)
                    self.state = 1669
                    self.gepConstIndex() 
                self.state = 1674
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class GepConstIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optInrange(self):
            return self.getTypedRuleContext(LLVMParser.OptInrangeContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_gepConstIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGepConstIndex" ):
                listener.enterGepConstIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGepConstIndex" ):
                listener.exitGepConstIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGepConstIndex" ):
                return visitor.visitGepConstIndex(self)
            else:
                return visitor.visitChildren(self)




    def gepConstIndex(self):

        localctx = LLVMParser.GepConstIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_gepConstIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1675
            self.optInrange()
            self.state = 1676
            self.llvmType(0)
            self.state = 1677
            self.constant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptInrangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INRANGE(self):
            return self.getToken(LLVMParser.INRANGE, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_optInrange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptInrange" ):
                listener.enterOptInrange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptInrange" ):
                listener.exitOptInrange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptInrange" ):
                return visitor.visitOptInrange(self)
            else:
                return visitor.visitChildren(self)




    def optInrange(self):

        localctx = LLVMParser.OptInrangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_optInrange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.INRANGE:
                self.state = 1679
                self.match(LLVMParser.INRANGE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNC(self):
            return self.getToken(LLVMParser.TRUNC, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_truncExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncExpr" ):
                listener.enterTruncExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncExpr" ):
                listener.exitTruncExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncExpr" ):
                return visitor.visitTruncExpr(self)
            else:
                return visitor.visitChildren(self)




    def truncExpr(self):

        localctx = LLVMParser.TruncExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_truncExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1682
            self.match(LLVMParser.TRUNC)
            self.state = 1683
            self.match(LLVMParser.LPAREN)
            self.state = 1684
            self.llvmType(0)
            self.state = 1685
            self.constant()
            self.state = 1686
            self.match(LLVMParser.TO)
            self.state = 1687
            self.llvmType(0)
            self.state = 1688
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ZExtExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ZEXT(self):
            return self.getToken(LLVMParser.ZEXT, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_zExtExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZExtExpr" ):
                listener.enterZExtExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZExtExpr" ):
                listener.exitZExtExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitZExtExpr" ):
                return visitor.visitZExtExpr(self)
            else:
                return visitor.visitChildren(self)




    def zExtExpr(self):

        localctx = LLVMParser.ZExtExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_zExtExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1690
            self.match(LLVMParser.ZEXT)
            self.state = 1691
            self.match(LLVMParser.LPAREN)
            self.state = 1692
            self.llvmType(0)
            self.state = 1693
            self.constant()
            self.state = 1694
            self.match(LLVMParser.TO)
            self.state = 1695
            self.llvmType(0)
            self.state = 1696
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SExtExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEXT(self):
            return self.getToken(LLVMParser.SEXT, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_sExtExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSExtExpr" ):
                listener.enterSExtExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSExtExpr" ):
                listener.exitSExtExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSExtExpr" ):
                return visitor.visitSExtExpr(self)
            else:
                return visitor.visitChildren(self)




    def sExtExpr(self):

        localctx = LLVMParser.SExtExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_sExtExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1698
            self.match(LLVMParser.SEXT)
            self.state = 1699
            self.match(LLVMParser.LPAREN)
            self.state = 1700
            self.llvmType(0)
            self.state = 1701
            self.constant()
            self.state = 1702
            self.match(LLVMParser.TO)
            self.state = 1703
            self.llvmType(0)
            self.state = 1704
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FPTruncExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FPTRUNC(self):
            return self.getToken(LLVMParser.FPTRUNC, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_fPTruncExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFPTruncExpr" ):
                listener.enterFPTruncExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFPTruncExpr" ):
                listener.exitFPTruncExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFPTruncExpr" ):
                return visitor.visitFPTruncExpr(self)
            else:
                return visitor.visitChildren(self)




    def fPTruncExpr(self):

        localctx = LLVMParser.FPTruncExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_fPTruncExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706
            self.match(LLVMParser.FPTRUNC)
            self.state = 1707
            self.match(LLVMParser.LPAREN)
            self.state = 1708
            self.llvmType(0)
            self.state = 1709
            self.constant()
            self.state = 1710
            self.match(LLVMParser.TO)
            self.state = 1711
            self.llvmType(0)
            self.state = 1712
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FpExtExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FPEXT(self):
            return self.getToken(LLVMParser.FPEXT, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_fpExtExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFpExtExpr" ):
                listener.enterFpExtExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFpExtExpr" ):
                listener.exitFpExtExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFpExtExpr" ):
                return visitor.visitFpExtExpr(self)
            else:
                return visitor.visitChildren(self)




    def fpExtExpr(self):

        localctx = LLVMParser.FpExtExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_fpExtExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1714
            self.match(LLVMParser.FPEXT)
            self.state = 1715
            self.match(LLVMParser.LPAREN)
            self.state = 1716
            self.llvmType(0)
            self.state = 1717
            self.constant()
            self.state = 1718
            self.match(LLVMParser.TO)
            self.state = 1719
            self.llvmType(0)
            self.state = 1720
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FpToUIExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FPTOUI(self):
            return self.getToken(LLVMParser.FPTOUI, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_fpToUIExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFpToUIExpr" ):
                listener.enterFpToUIExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFpToUIExpr" ):
                listener.exitFpToUIExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFpToUIExpr" ):
                return visitor.visitFpToUIExpr(self)
            else:
                return visitor.visitChildren(self)




    def fpToUIExpr(self):

        localctx = LLVMParser.FpToUIExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_fpToUIExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1722
            self.match(LLVMParser.FPTOUI)
            self.state = 1723
            self.match(LLVMParser.LPAREN)
            self.state = 1724
            self.llvmType(0)
            self.state = 1725
            self.constant()
            self.state = 1726
            self.match(LLVMParser.TO)
            self.state = 1727
            self.llvmType(0)
            self.state = 1728
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FpToSIExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FPTOSI(self):
            return self.getToken(LLVMParser.FPTOSI, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_fpToSIExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFpToSIExpr" ):
                listener.enterFpToSIExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFpToSIExpr" ):
                listener.exitFpToSIExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFpToSIExpr" ):
                return visitor.visitFpToSIExpr(self)
            else:
                return visitor.visitChildren(self)




    def fpToSIExpr(self):

        localctx = LLVMParser.FpToSIExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_fpToSIExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1730
            self.match(LLVMParser.FPTOSI)
            self.state = 1731
            self.match(LLVMParser.LPAREN)
            self.state = 1732
            self.llvmType(0)
            self.state = 1733
            self.constant()
            self.state = 1734
            self.match(LLVMParser.TO)
            self.state = 1735
            self.llvmType(0)
            self.state = 1736
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UiToFPExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UITOFP(self):
            return self.getToken(LLVMParser.UITOFP, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_uiToFPExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUiToFPExpr" ):
                listener.enterUiToFPExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUiToFPExpr" ):
                listener.exitUiToFPExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUiToFPExpr" ):
                return visitor.visitUiToFPExpr(self)
            else:
                return visitor.visitChildren(self)




    def uiToFPExpr(self):

        localctx = LLVMParser.UiToFPExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_uiToFPExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1738
            self.match(LLVMParser.UITOFP)
            self.state = 1739
            self.match(LLVMParser.LPAREN)
            self.state = 1740
            self.llvmType(0)
            self.state = 1741
            self.constant()
            self.state = 1742
            self.match(LLVMParser.TO)
            self.state = 1743
            self.llvmType(0)
            self.state = 1744
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SiToFPExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SITOFP(self):
            return self.getToken(LLVMParser.SITOFP, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_siToFPExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSiToFPExpr" ):
                listener.enterSiToFPExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSiToFPExpr" ):
                listener.exitSiToFPExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSiToFPExpr" ):
                return visitor.visitSiToFPExpr(self)
            else:
                return visitor.visitChildren(self)




    def siToFPExpr(self):

        localctx = LLVMParser.SiToFPExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_siToFPExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1746
            self.match(LLVMParser.SITOFP)
            self.state = 1747
            self.match(LLVMParser.LPAREN)
            self.state = 1748
            self.llvmType(0)
            self.state = 1749
            self.constant()
            self.state = 1750
            self.match(LLVMParser.TO)
            self.state = 1751
            self.llvmType(0)
            self.state = 1752
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrToIntExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PTRTOINT(self):
            return self.getToken(LLVMParser.PTRTOINT, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_ptrToIntExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrToIntExpr" ):
                listener.enterPtrToIntExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrToIntExpr" ):
                listener.exitPtrToIntExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrToIntExpr" ):
                return visitor.visitPtrToIntExpr(self)
            else:
                return visitor.visitChildren(self)




    def ptrToIntExpr(self):

        localctx = LLVMParser.PtrToIntExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_ptrToIntExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1754
            self.match(LLVMParser.PTRTOINT)
            self.state = 1755
            self.match(LLVMParser.LPAREN)
            self.state = 1756
            self.llvmType(0)
            self.state = 1757
            self.constant()
            self.state = 1758
            self.match(LLVMParser.TO)
            self.state = 1759
            self.llvmType(0)
            self.state = 1760
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntToPtrExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTTOPTR(self):
            return self.getToken(LLVMParser.INTTOPTR, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_intToPtrExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntToPtrExpr" ):
                listener.enterIntToPtrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntToPtrExpr" ):
                listener.exitIntToPtrExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntToPtrExpr" ):
                return visitor.visitIntToPtrExpr(self)
            else:
                return visitor.visitChildren(self)




    def intToPtrExpr(self):

        localctx = LLVMParser.IntToPtrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_intToPtrExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1762
            self.match(LLVMParser.INTTOPTR)
            self.state = 1763
            self.match(LLVMParser.LPAREN)
            self.state = 1764
            self.llvmType(0)
            self.state = 1765
            self.constant()
            self.state = 1766
            self.match(LLVMParser.TO)
            self.state = 1767
            self.llvmType(0)
            self.state = 1768
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitCastExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITCAST(self):
            return self.getToken(LLVMParser.BITCAST, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_bitCastExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitCastExpr" ):
                listener.enterBitCastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitCastExpr" ):
                listener.exitBitCastExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitCastExpr" ):
                return visitor.visitBitCastExpr(self)
            else:
                return visitor.visitChildren(self)




    def bitCastExpr(self):

        localctx = LLVMParser.BitCastExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_bitCastExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1770
            self.match(LLVMParser.BITCAST)
            self.state = 1771
            self.match(LLVMParser.LPAREN)
            self.state = 1772
            self.llvmType(0)
            self.state = 1773
            self.constant()
            self.state = 1774
            self.match(LLVMParser.TO)
            self.state = 1775
            self.llvmType(0)
            self.state = 1776
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddrSpaceCastExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDRSPACECAST(self):
            return self.getToken(LLVMParser.ADDRSPACECAST, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_addrSpaceCastExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddrSpaceCastExpr" ):
                listener.enterAddrSpaceCastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddrSpaceCastExpr" ):
                listener.exitAddrSpaceCastExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddrSpaceCastExpr" ):
                return visitor.visitAddrSpaceCastExpr(self)
            else:
                return visitor.visitChildren(self)




    def addrSpaceCastExpr(self):

        localctx = LLVMParser.AddrSpaceCastExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_addrSpaceCastExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1778
            self.match(LLVMParser.ADDRSPACECAST)
            self.state = 1779
            self.match(LLVMParser.LPAREN)
            self.state = 1780
            self.llvmType(0)
            self.state = 1781
            self.constant()
            self.state = 1782
            self.match(LLVMParser.TO)
            self.state = 1783
            self.llvmType(0)
            self.state = 1784
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICmpExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ICMP(self):
            return self.getToken(LLVMParser.ICMP, 0)

        def iPred(self):
            return self.getTypedRuleContext(LLVMParser.IPredContext,0)


        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_iCmpExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICmpExpr" ):
                listener.enterICmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICmpExpr" ):
                listener.exitICmpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitICmpExpr" ):
                return visitor.visitICmpExpr(self)
            else:
                return visitor.visitChildren(self)




    def iCmpExpr(self):

        localctx = LLVMParser.ICmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_iCmpExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1786
            self.match(LLVMParser.ICMP)
            self.state = 1787
            self.iPred()
            self.state = 1788
            self.match(LLVMParser.LPAREN)
            self.state = 1789
            self.llvmType(0)
            self.state = 1790
            self.constant()
            self.state = 1791
            self.match(LLVMParser.COMMA)
            self.state = 1792
            self.llvmType(0)
            self.state = 1793
            self.constant()
            self.state = 1794
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FCmpExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FCMP(self):
            return self.getToken(LLVMParser.FCMP, 0)

        def fpred(self):
            return self.getTypedRuleContext(LLVMParser.FpredContext,0)


        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_fCmpExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFCmpExpr" ):
                listener.enterFCmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFCmpExpr" ):
                listener.exitFCmpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFCmpExpr" ):
                return visitor.visitFCmpExpr(self)
            else:
                return visitor.visitChildren(self)




    def fCmpExpr(self):

        localctx = LLVMParser.FCmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_fCmpExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1796
            self.match(LLVMParser.FCMP)
            self.state = 1797
            self.fpred()
            self.state = 1798
            self.match(LLVMParser.LPAREN)
            self.state = 1799
            self.llvmType(0)
            self.state = 1800
            self.constant()
            self.state = 1801
            self.match(LLVMParser.COMMA)
            self.state = 1802
            self.llvmType(0)
            self.state = 1803
            self.constant()
            self.state = 1804
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(LLVMParser.SELECT, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ConstantContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMParser.COMMA)
            else:
                return self.getToken(LLVMParser.COMMA, i)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_selectExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpr" ):
                listener.enterSelectExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpr" ):
                listener.exitSelectExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectExpr" ):
                return visitor.visitSelectExpr(self)
            else:
                return visitor.visitChildren(self)




    def selectExpr(self):

        localctx = LLVMParser.SelectExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_selectExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1806
            self.match(LLVMParser.SELECT)
            self.state = 1807
            self.match(LLVMParser.LPAREN)
            self.state = 1808
            self.llvmType(0)
            self.state = 1809
            self.constant()
            self.state = 1810
            self.match(LLVMParser.COMMA)
            self.state = 1811
            self.llvmType(0)
            self.state = 1812
            self.constant()
            self.state = 1813
            self.match(LLVMParser.COMMA)
            self.state = 1814
            self.llvmType(0)
            self.state = 1815
            self.constant()
            self.state = 1816
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicBlockListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicBlock(self):
            return self.getTypedRuleContext(LLVMParser.BasicBlockContext,0)


        def basicBlockList(self):
            return self.getTypedRuleContext(LLVMParser.BasicBlockListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_basicBlockList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicBlockList" ):
                listener.enterBasicBlockList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicBlockList" ):
                listener.exitBasicBlockList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicBlockList" ):
                return visitor.visitBasicBlockList(self)
            else:
                return visitor.visitChildren(self)



    def basicBlockList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.BasicBlockListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 260
        self.enterRecursionRule(localctx, 260, self.RULE_basicBlockList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1819
            self.basicBlock()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1825
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.BasicBlockListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_basicBlockList)
                    self.state = 1821
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1822
                    self.basicBlock() 
                self.state = 1827
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BasicBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optLabelIdent(self):
            return self.getTypedRuleContext(LLVMParser.OptLabelIdentContext,0)


        def instructions(self):
            return self.getTypedRuleContext(LLVMParser.InstructionsContext,0)


        def terminator(self):
            return self.getTypedRuleContext(LLVMParser.TerminatorContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_basicBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicBlock" ):
                listener.enterBasicBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicBlock" ):
                listener.exitBasicBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicBlock" ):
                return visitor.visitBasicBlock(self)
            else:
                return visitor.visitChildren(self)




    def basicBlock(self):

        localctx = LLVMParser.BasicBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_basicBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            self.optLabelIdent()
            self.state = 1829
            self.instructions()
            self.state = 1830
            self.terminator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptLabelIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelIdent(self):
            return self.getTypedRuleContext(LLVMParser.LabelIdentContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_optLabelIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptLabelIdent" ):
                listener.enterOptLabelIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptLabelIdent" ):
                listener.exitOptLabelIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptLabelIdent" ):
                return visitor.visitOptLabelIdent(self)
            else:
                return visitor.visitChildren(self)




    def optLabelIdent(self):

        localctx = LLVMParser.OptLabelIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_optLabelIdent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.LABEL_IDENT:
                self.state = 1832
                self.labelIdent()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstructionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def instructionList(self):
            return self.getTypedRuleContext(LLVMParser.InstructionListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_instructions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstructions" ):
                listener.enterInstructions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstructions" ):
                listener.exitInstructions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstructions" ):
                return visitor.visitInstructions(self)
            else:
                return visitor.visitChildren(self)




    def instructions(self):

        localctx = LLVMParser.InstructionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_instructions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (LLVMParser.ADD - 17)) | (1 << (LLVMParser.ADDRSPACECAST - 17)) | (1 << (LLVMParser.ALLOCA - 17)) | (1 << (LLVMParser.AND - 17)) | (1 << (LLVMParser.ASHR - 17)) | (1 << (LLVMParser.ATOMICRMW - 17)) | (1 << (LLVMParser.BITCAST - 17)) | (1 << (LLVMParser.CALL - 17)) | (1 << (LLVMParser.CATCHPAD - 17)) | (1 << (LLVMParser.CLEANUPPAD - 17)) | (1 << (LLVMParser.CMPXCHG - 17)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (LLVMParser.EXTRACTELEMENT - 144)) | (1 << (LLVMParser.EXTRACTVALUE - 144)) | (1 << (LLVMParser.FADD - 144)) | (1 << (LLVMParser.FCMP - 144)) | (1 << (LLVMParser.FDIV - 144)) | (1 << (LLVMParser.FENCE - 144)) | (1 << (LLVMParser.FMUL - 144)) | (1 << (LLVMParser.FPEXT - 144)) | (1 << (LLVMParser.FPTOSI - 144)) | (1 << (LLVMParser.FPTOUI - 144)) | (1 << (LLVMParser.FPTRUNC - 144)) | (1 << (LLVMParser.FREM - 144)) | (1 << (LLVMParser.FSUB - 144)) | (1 << (LLVMParser.GETELEMENTPTR - 144)) | (1 << (LLVMParser.ICMP - 144)) | (1 << (LLVMParser.INSERTELEMENT - 144)) | (1 << (LLVMParser.INSERTVALUE - 144)) | (1 << (LLVMParser.INTTOPTR - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (LLVMParser.LANDINGPAD - 211)) | (1 << (LLVMParser.LOAD - 211)) | (1 << (LLVMParser.LSHR - 211)) | (1 << (LLVMParser.MUL - 211)) | (1 << (LLVMParser.MUSTTAIL - 211)) | (1 << (LLVMParser.NOTAIL - 211)) | (1 << (LLVMParser.OR - 211)))) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & ((1 << (LLVMParser.PHI - 277)) | (1 << (LLVMParser.PTRTOINT - 277)) | (1 << (LLVMParser.SDIV - 277)) | (1 << (LLVMParser.SELECT - 277)) | (1 << (LLVMParser.SEXT - 277)) | (1 << (LLVMParser.SHL - 277)) | (1 << (LLVMParser.SHUFFLEVECTOR - 277)) | (1 << (LLVMParser.SITOFP - 277)) | (1 << (LLVMParser.SREM - 277)) | (1 << (LLVMParser.STORE - 277)) | (1 << (LLVMParser.SUB - 277)))) != 0) or ((((_la - 344)) & ~0x3f) == 0 and ((1 << (_la - 344)) & ((1 << (LLVMParser.TAIL - 344)) | (1 << (LLVMParser.TRUNC - 344)) | (1 << (LLVMParser.UDIV - 344)) | (1 << (LLVMParser.UITOFP - 344)) | (1 << (LLVMParser.UREM - 344)) | (1 << (LLVMParser.VA_ARG - 344)) | (1 << (LLVMParser.XOR - 344)) | (1 << (LLVMParser.ZEXT - 344)))) != 0) or _la==LLVMParser.LOCAL_IDENT:
                self.state = 1835
                self.instructionList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstructionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def instruction(self):
            return self.getTypedRuleContext(LLVMParser.InstructionContext,0)


        def instructionList(self):
            return self.getTypedRuleContext(LLVMParser.InstructionListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_instructionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstructionList" ):
                listener.enterInstructionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstructionList" ):
                listener.exitInstructionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstructionList" ):
                return visitor.visitInstructionList(self)
            else:
                return visitor.visitChildren(self)



    def instructionList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.InstructionListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 268
        self.enterRecursionRule(localctx, 268, self.RULE_instructionList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1839
            self.instruction()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1845
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.InstructionListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_instructionList)
                    self.state = 1841
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1842
                    self.instruction() 
                self.state = 1847
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storeInst(self):
            return self.getTypedRuleContext(LLVMParser.StoreInstContext,0)


        def fenceInst(self):
            return self.getTypedRuleContext(LLVMParser.FenceInstContext,0)


        def cmpXchgInst(self):
            return self.getTypedRuleContext(LLVMParser.CmpXchgInstContext,0)


        def atomicRMWInst(self):
            return self.getTypedRuleContext(LLVMParser.AtomicRMWInstContext,0)


        def localIdent(self):
            return self.getTypedRuleContext(LLVMParser.LocalIdentContext,0)


        def EQSIGN(self):
            return self.getToken(LLVMParser.EQSIGN, 0)

        def valueInstruction(self):
            return self.getTypedRuleContext(LLVMParser.ValueInstructionContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_instruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstruction" ):
                listener.enterInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstruction" ):
                listener.exitInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstruction" ):
                return visitor.visitInstruction(self)
            else:
                return visitor.visitChildren(self)




    def instruction(self):

        localctx = LLVMParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_instruction)
        try:
            self.state = 1857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.STORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1848
                self.storeInst()
                pass
            elif token in [LLVMParser.FENCE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1849
                self.fenceInst()
                pass
            elif token in [LLVMParser.CMPXCHG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1850
                self.cmpXchgInst()
                pass
            elif token in [LLVMParser.ATOMICRMW]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1851
                self.atomicRMWInst()
                pass
            elif token in [LLVMParser.LOCAL_IDENT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1852
                self.localIdent()
                self.state = 1853
                self.match(LLVMParser.EQSIGN)
                self.state = 1854
                self.valueInstruction()
                pass
            elif token in [LLVMParser.ADD, LLVMParser.ADDRSPACECAST, LLVMParser.ALLOCA, LLVMParser.AND, LLVMParser.ASHR, LLVMParser.BITCAST, LLVMParser.CALL, LLVMParser.CATCHPAD, LLVMParser.CLEANUPPAD, LLVMParser.EXTRACTELEMENT, LLVMParser.EXTRACTVALUE, LLVMParser.FADD, LLVMParser.FCMP, LLVMParser.FDIV, LLVMParser.FMUL, LLVMParser.FPEXT, LLVMParser.FPTOSI, LLVMParser.FPTOUI, LLVMParser.FPTRUNC, LLVMParser.FREM, LLVMParser.FSUB, LLVMParser.GETELEMENTPTR, LLVMParser.ICMP, LLVMParser.INSERTELEMENT, LLVMParser.INSERTVALUE, LLVMParser.INTTOPTR, LLVMParser.LANDINGPAD, LLVMParser.LOAD, LLVMParser.LSHR, LLVMParser.MUL, LLVMParser.MUSTTAIL, LLVMParser.NOTAIL, LLVMParser.OR, LLVMParser.PHI, LLVMParser.PTRTOINT, LLVMParser.SDIV, LLVMParser.SELECT, LLVMParser.SEXT, LLVMParser.SHL, LLVMParser.SHUFFLEVECTOR, LLVMParser.SITOFP, LLVMParser.SREM, LLVMParser.SUB, LLVMParser.TAIL, LLVMParser.TRUNC, LLVMParser.UDIV, LLVMParser.UITOFP, LLVMParser.UREM, LLVMParser.VA_ARG, LLVMParser.XOR, LLVMParser.ZEXT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1856
                self.valueInstruction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueInstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def addInst(self):
            return self.getTypedRuleContext(LLVMParser.AddInstContext,0)


        def fAddInst(self):
            return self.getTypedRuleContext(LLVMParser.FAddInstContext,0)


        def subInst(self):
            return self.getTypedRuleContext(LLVMParser.SubInstContext,0)


        def fSubInst(self):
            return self.getTypedRuleContext(LLVMParser.FSubInstContext,0)


        def mulInst(self):
            return self.getTypedRuleContext(LLVMParser.MulInstContext,0)


        def fMulInst(self):
            return self.getTypedRuleContext(LLVMParser.FMulInstContext,0)


        def uDivInst(self):
            return self.getTypedRuleContext(LLVMParser.UDivInstContext,0)


        def sDivInst(self):
            return self.getTypedRuleContext(LLVMParser.SDivInstContext,0)


        def fDivInst(self):
            return self.getTypedRuleContext(LLVMParser.FDivInstContext,0)


        def uRemInst(self):
            return self.getTypedRuleContext(LLVMParser.URemInstContext,0)


        def sRemInst(self):
            return self.getTypedRuleContext(LLVMParser.SRemInstContext,0)


        def fRemInst(self):
            return self.getTypedRuleContext(LLVMParser.FRemInstContext,0)


        def shlInst(self):
            return self.getTypedRuleContext(LLVMParser.ShlInstContext,0)


        def lshrInst(self):
            return self.getTypedRuleContext(LLVMParser.LshrInstContext,0)


        def ashrInst(self):
            return self.getTypedRuleContext(LLVMParser.AshrInstContext,0)


        def andInst(self):
            return self.getTypedRuleContext(LLVMParser.AndInstContext,0)


        def orInst(self):
            return self.getTypedRuleContext(LLVMParser.OrInstContext,0)


        def xorInst(self):
            return self.getTypedRuleContext(LLVMParser.XorInstContext,0)


        def extractElementInst(self):
            return self.getTypedRuleContext(LLVMParser.ExtractElementInstContext,0)


        def insertElementInst(self):
            return self.getTypedRuleContext(LLVMParser.InsertElementInstContext,0)


        def shuffleVectorInst(self):
            return self.getTypedRuleContext(LLVMParser.ShuffleVectorInstContext,0)


        def extractValueInst(self):
            return self.getTypedRuleContext(LLVMParser.ExtractValueInstContext,0)


        def insertValueInst(self):
            return self.getTypedRuleContext(LLVMParser.InsertValueInstContext,0)


        def allocaInst(self):
            return self.getTypedRuleContext(LLVMParser.AllocaInstContext,0)


        def loadInst(self):
            return self.getTypedRuleContext(LLVMParser.LoadInstContext,0)


        def getElementPtrInst(self):
            return self.getTypedRuleContext(LLVMParser.GetElementPtrInstContext,0)


        def truncInst(self):
            return self.getTypedRuleContext(LLVMParser.TruncInstContext,0)


        def zExtInst(self):
            return self.getTypedRuleContext(LLVMParser.ZExtInstContext,0)


        def sExtInst(self):
            return self.getTypedRuleContext(LLVMParser.SExtInstContext,0)


        def fpTruncInst(self):
            return self.getTypedRuleContext(LLVMParser.FpTruncInstContext,0)


        def fpExtInst(self):
            return self.getTypedRuleContext(LLVMParser.FpExtInstContext,0)


        def fpToUIInst(self):
            return self.getTypedRuleContext(LLVMParser.FpToUIInstContext,0)


        def fpToSIInst(self):
            return self.getTypedRuleContext(LLVMParser.FpToSIInstContext,0)


        def uiToFPInst(self):
            return self.getTypedRuleContext(LLVMParser.UiToFPInstContext,0)


        def siToFPInst(self):
            return self.getTypedRuleContext(LLVMParser.SiToFPInstContext,0)


        def ptrToIntInst(self):
            return self.getTypedRuleContext(LLVMParser.PtrToIntInstContext,0)


        def intToPtrInst(self):
            return self.getTypedRuleContext(LLVMParser.IntToPtrInstContext,0)


        def bitCastInst(self):
            return self.getTypedRuleContext(LLVMParser.BitCastInstContext,0)


        def addrSpaceCastInst(self):
            return self.getTypedRuleContext(LLVMParser.AddrSpaceCastInstContext,0)


        def iCmpInst(self):
            return self.getTypedRuleContext(LLVMParser.ICmpInstContext,0)


        def fCmpInst(self):
            return self.getTypedRuleContext(LLVMParser.FCmpInstContext,0)


        def phiInst(self):
            return self.getTypedRuleContext(LLVMParser.PhiInstContext,0)


        def selectInst(self):
            return self.getTypedRuleContext(LLVMParser.SelectInstContext,0)


        def callInst(self):
            return self.getTypedRuleContext(LLVMParser.CallInstContext,0)


        def vaArgInst(self):
            return self.getTypedRuleContext(LLVMParser.VaArgInstContext,0)


        def landingPadInst(self):
            return self.getTypedRuleContext(LLVMParser.LandingPadInstContext,0)


        def catchPadInst(self):
            return self.getTypedRuleContext(LLVMParser.CatchPadInstContext,0)


        def cleanupPadInst(self):
            return self.getTypedRuleContext(LLVMParser.CleanupPadInstContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_valueInstruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueInstruction" ):
                listener.enterValueInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueInstruction" ):
                listener.exitValueInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueInstruction" ):
                return visitor.visitValueInstruction(self)
            else:
                return visitor.visitChildren(self)




    def valueInstruction(self):

        localctx = LLVMParser.ValueInstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_valueInstruction)
        try:
            self.state = 1907
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1859
                self.addInst()
                pass
            elif token in [LLVMParser.FADD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1860
                self.fAddInst()
                pass
            elif token in [LLVMParser.SUB]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1861
                self.subInst()
                pass
            elif token in [LLVMParser.FSUB]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1862
                self.fSubInst()
                pass
            elif token in [LLVMParser.MUL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1863
                self.mulInst()
                pass
            elif token in [LLVMParser.FMUL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1864
                self.fMulInst()
                pass
            elif token in [LLVMParser.UDIV]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1865
                self.uDivInst()
                pass
            elif token in [LLVMParser.SDIV]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1866
                self.sDivInst()
                pass
            elif token in [LLVMParser.FDIV]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1867
                self.fDivInst()
                pass
            elif token in [LLVMParser.UREM]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1868
                self.uRemInst()
                pass
            elif token in [LLVMParser.SREM]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1869
                self.sRemInst()
                pass
            elif token in [LLVMParser.FREM]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1870
                self.fRemInst()
                pass
            elif token in [LLVMParser.SHL]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1871
                self.shlInst()
                pass
            elif token in [LLVMParser.LSHR]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1872
                self.lshrInst()
                pass
            elif token in [LLVMParser.ASHR]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1873
                self.ashrInst()
                pass
            elif token in [LLVMParser.AND]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1874
                self.andInst()
                pass
            elif token in [LLVMParser.OR]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1875
                self.orInst()
                pass
            elif token in [LLVMParser.XOR]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1876
                self.xorInst()
                pass
            elif token in [LLVMParser.EXTRACTELEMENT]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1877
                self.extractElementInst()
                pass
            elif token in [LLVMParser.INSERTELEMENT]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1878
                self.insertElementInst()
                pass
            elif token in [LLVMParser.SHUFFLEVECTOR]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1879
                self.shuffleVectorInst()
                pass
            elif token in [LLVMParser.EXTRACTVALUE]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1880
                self.extractValueInst()
                pass
            elif token in [LLVMParser.INSERTVALUE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1881
                self.insertValueInst()
                pass
            elif token in [LLVMParser.ALLOCA]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1882
                self.allocaInst()
                pass
            elif token in [LLVMParser.LOAD]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1883
                self.loadInst()
                pass
            elif token in [LLVMParser.GETELEMENTPTR]:
                self.enterOuterAlt(localctx, 26)
                self.state = 1884
                self.getElementPtrInst()
                pass
            elif token in [LLVMParser.TRUNC]:
                self.enterOuterAlt(localctx, 27)
                self.state = 1885
                self.truncInst()
                pass
            elif token in [LLVMParser.ZEXT]:
                self.enterOuterAlt(localctx, 28)
                self.state = 1886
                self.zExtInst()
                pass
            elif token in [LLVMParser.SEXT]:
                self.enterOuterAlt(localctx, 29)
                self.state = 1887
                self.sExtInst()
                pass
            elif token in [LLVMParser.FPTRUNC]:
                self.enterOuterAlt(localctx, 30)
                self.state = 1888
                self.fpTruncInst()
                pass
            elif token in [LLVMParser.FPEXT]:
                self.enterOuterAlt(localctx, 31)
                self.state = 1889
                self.fpExtInst()
                pass
            elif token in [LLVMParser.FPTOUI]:
                self.enterOuterAlt(localctx, 32)
                self.state = 1890
                self.fpToUIInst()
                pass
            elif token in [LLVMParser.FPTOSI]:
                self.enterOuterAlt(localctx, 33)
                self.state = 1891
                self.fpToSIInst()
                pass
            elif token in [LLVMParser.UITOFP]:
                self.enterOuterAlt(localctx, 34)
                self.state = 1892
                self.uiToFPInst()
                pass
            elif token in [LLVMParser.SITOFP]:
                self.enterOuterAlt(localctx, 35)
                self.state = 1893
                self.siToFPInst()
                pass
            elif token in [LLVMParser.PTRTOINT]:
                self.enterOuterAlt(localctx, 36)
                self.state = 1894
                self.ptrToIntInst()
                pass
            elif token in [LLVMParser.INTTOPTR]:
                self.enterOuterAlt(localctx, 37)
                self.state = 1895
                self.intToPtrInst()
                pass
            elif token in [LLVMParser.BITCAST]:
                self.enterOuterAlt(localctx, 38)
                self.state = 1896
                self.bitCastInst()
                pass
            elif token in [LLVMParser.ADDRSPACECAST]:
                self.enterOuterAlt(localctx, 39)
                self.state = 1897
                self.addrSpaceCastInst()
                pass
            elif token in [LLVMParser.ICMP]:
                self.enterOuterAlt(localctx, 40)
                self.state = 1898
                self.iCmpInst()
                pass
            elif token in [LLVMParser.FCMP]:
                self.enterOuterAlt(localctx, 41)
                self.state = 1899
                self.fCmpInst()
                pass
            elif token in [LLVMParser.PHI]:
                self.enterOuterAlt(localctx, 42)
                self.state = 1900
                self.phiInst()
                pass
            elif token in [LLVMParser.SELECT]:
                self.enterOuterAlt(localctx, 43)
                self.state = 1901
                self.selectInst()
                pass
            elif token in [LLVMParser.CALL, LLVMParser.MUSTTAIL, LLVMParser.NOTAIL, LLVMParser.TAIL]:
                self.enterOuterAlt(localctx, 44)
                self.state = 1902
                self.callInst()
                pass
            elif token in [LLVMParser.VA_ARG]:
                self.enterOuterAlt(localctx, 45)
                self.state = 1903
                self.vaArgInst()
                pass
            elif token in [LLVMParser.LANDINGPAD]:
                self.enterOuterAlt(localctx, 46)
                self.state = 1904
                self.landingPadInst()
                pass
            elif token in [LLVMParser.CATCHPAD]:
                self.enterOuterAlt(localctx, 47)
                self.state = 1905
                self.catchPadInst()
                pass
            elif token in [LLVMParser.CLEANUPPAD]:
                self.enterOuterAlt(localctx, 48)
                self.state = 1906
                self.cleanupPadInst()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(LLVMParser.ADD, 0)

        def overflowFlags(self):
            return self.getTypedRuleContext(LLVMParser.OverflowFlagsContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_addInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddInst" ):
                listener.enterAddInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddInst" ):
                listener.exitAddInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddInst" ):
                return visitor.visitAddInst(self)
            else:
                return visitor.visitChildren(self)




    def addInst(self):

        localctx = LLVMParser.AddInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_addInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1909
            self.match(LLVMParser.ADD)
            self.state = 1910
            self.overflowFlags()
            self.state = 1911
            self.llvmType(0)
            self.state = 1912
            self.value()
            self.state = 1913
            self.match(LLVMParser.COMMA)
            self.state = 1914
            self.value()
            self.state = 1915
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FAddInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FADD(self):
            return self.getToken(LLVMParser.FADD, 0)

        def fastMathFlags(self):
            return self.getTypedRuleContext(LLVMParser.FastMathFlagsContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_fAddInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFAddInst" ):
                listener.enterFAddInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFAddInst" ):
                listener.exitFAddInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFAddInst" ):
                return visitor.visitFAddInst(self)
            else:
                return visitor.visitChildren(self)




    def fAddInst(self):

        localctx = LLVMParser.FAddInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_fAddInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1917
            self.match(LLVMParser.FADD)
            self.state = 1918
            self.fastMathFlags()
            self.state = 1919
            self.llvmType(0)
            self.state = 1920
            self.value()
            self.state = 1921
            self.match(LLVMParser.COMMA)
            self.state = 1922
            self.value()
            self.state = 1923
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(LLVMParser.SUB, 0)

        def overflowFlags(self):
            return self.getTypedRuleContext(LLVMParser.OverflowFlagsContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_subInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubInst" ):
                listener.enterSubInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubInst" ):
                listener.exitSubInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubInst" ):
                return visitor.visitSubInst(self)
            else:
                return visitor.visitChildren(self)




    def subInst(self):

        localctx = LLVMParser.SubInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_subInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1925
            self.match(LLVMParser.SUB)
            self.state = 1926
            self.overflowFlags()
            self.state = 1927
            self.llvmType(0)
            self.state = 1928
            self.value()
            self.state = 1929
            self.match(LLVMParser.COMMA)
            self.state = 1930
            self.value()
            self.state = 1931
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FSubInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FSUB(self):
            return self.getToken(LLVMParser.FSUB, 0)

        def fastMathFlags(self):
            return self.getTypedRuleContext(LLVMParser.FastMathFlagsContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_fSubInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFSubInst" ):
                listener.enterFSubInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFSubInst" ):
                listener.exitFSubInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFSubInst" ):
                return visitor.visitFSubInst(self)
            else:
                return visitor.visitChildren(self)




    def fSubInst(self):

        localctx = LLVMParser.FSubInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_fSubInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1933
            self.match(LLVMParser.FSUB)
            self.state = 1934
            self.fastMathFlags()
            self.state = 1935
            self.llvmType(0)
            self.state = 1936
            self.value()
            self.state = 1937
            self.match(LLVMParser.COMMA)
            self.state = 1938
            self.value()
            self.state = 1939
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MulInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUL(self):
            return self.getToken(LLVMParser.MUL, 0)

        def overflowFlags(self):
            return self.getTypedRuleContext(LLVMParser.OverflowFlagsContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_mulInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulInst" ):
                listener.enterMulInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulInst" ):
                listener.exitMulInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulInst" ):
                return visitor.visitMulInst(self)
            else:
                return visitor.visitChildren(self)




    def mulInst(self):

        localctx = LLVMParser.MulInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_mulInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1941
            self.match(LLVMParser.MUL)
            self.state = 1942
            self.overflowFlags()
            self.state = 1943
            self.llvmType(0)
            self.state = 1944
            self.value()
            self.state = 1945
            self.match(LLVMParser.COMMA)
            self.state = 1946
            self.value()
            self.state = 1947
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FMulInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FMUL(self):
            return self.getToken(LLVMParser.FMUL, 0)

        def fastMathFlags(self):
            return self.getTypedRuleContext(LLVMParser.FastMathFlagsContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_fMulInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFMulInst" ):
                listener.enterFMulInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFMulInst" ):
                listener.exitFMulInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFMulInst" ):
                return visitor.visitFMulInst(self)
            else:
                return visitor.visitChildren(self)




    def fMulInst(self):

        localctx = LLVMParser.FMulInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_fMulInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1949
            self.match(LLVMParser.FMUL)
            self.state = 1950
            self.fastMathFlags()
            self.state = 1951
            self.llvmType(0)
            self.state = 1952
            self.value()
            self.state = 1953
            self.match(LLVMParser.COMMA)
            self.state = 1954
            self.value()
            self.state = 1955
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UDivInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UDIV(self):
            return self.getToken(LLVMParser.UDIV, 0)

        def optExact(self):
            return self.getTypedRuleContext(LLVMParser.OptExactContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_uDivInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUDivInst" ):
                listener.enterUDivInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUDivInst" ):
                listener.exitUDivInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUDivInst" ):
                return visitor.visitUDivInst(self)
            else:
                return visitor.visitChildren(self)




    def uDivInst(self):

        localctx = LLVMParser.UDivInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_uDivInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1957
            self.match(LLVMParser.UDIV)
            self.state = 1958
            self.optExact()
            self.state = 1959
            self.llvmType(0)
            self.state = 1960
            self.value()
            self.state = 1961
            self.match(LLVMParser.COMMA)
            self.state = 1962
            self.value()
            self.state = 1963
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SDivInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SDIV(self):
            return self.getToken(LLVMParser.SDIV, 0)

        def optExact(self):
            return self.getTypedRuleContext(LLVMParser.OptExactContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_sDivInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSDivInst" ):
                listener.enterSDivInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSDivInst" ):
                listener.exitSDivInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSDivInst" ):
                return visitor.visitSDivInst(self)
            else:
                return visitor.visitChildren(self)




    def sDivInst(self):

        localctx = LLVMParser.SDivInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_sDivInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1965
            self.match(LLVMParser.SDIV)
            self.state = 1966
            self.optExact()
            self.state = 1967
            self.llvmType(0)
            self.state = 1968
            self.value()
            self.state = 1969
            self.match(LLVMParser.COMMA)
            self.state = 1970
            self.value()
            self.state = 1971
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FDivInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FDIV(self):
            return self.getToken(LLVMParser.FDIV, 0)

        def fastMathFlags(self):
            return self.getTypedRuleContext(LLVMParser.FastMathFlagsContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_fDivInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFDivInst" ):
                listener.enterFDivInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFDivInst" ):
                listener.exitFDivInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFDivInst" ):
                return visitor.visitFDivInst(self)
            else:
                return visitor.visitChildren(self)




    def fDivInst(self):

        localctx = LLVMParser.FDivInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_fDivInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1973
            self.match(LLVMParser.FDIV)
            self.state = 1974
            self.fastMathFlags()
            self.state = 1975
            self.llvmType(0)
            self.state = 1976
            self.value()
            self.state = 1977
            self.match(LLVMParser.COMMA)
            self.state = 1978
            self.value()
            self.state = 1979
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class URemInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UREM(self):
            return self.getToken(LLVMParser.UREM, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_uRemInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterURemInst" ):
                listener.enterURemInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitURemInst" ):
                listener.exitURemInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitURemInst" ):
                return visitor.visitURemInst(self)
            else:
                return visitor.visitChildren(self)




    def uRemInst(self):

        localctx = LLVMParser.URemInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_uRemInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1981
            self.match(LLVMParser.UREM)
            self.state = 1982
            self.llvmType(0)
            self.state = 1983
            self.value()
            self.state = 1984
            self.match(LLVMParser.COMMA)
            self.state = 1985
            self.value()
            self.state = 1986
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SRemInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SREM(self):
            return self.getToken(LLVMParser.SREM, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_sRemInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSRemInst" ):
                listener.enterSRemInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSRemInst" ):
                listener.exitSRemInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSRemInst" ):
                return visitor.visitSRemInst(self)
            else:
                return visitor.visitChildren(self)




    def sRemInst(self):

        localctx = LLVMParser.SRemInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_sRemInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1988
            self.match(LLVMParser.SREM)
            self.state = 1989
            self.llvmType(0)
            self.state = 1990
            self.value()
            self.state = 1991
            self.match(LLVMParser.COMMA)
            self.state = 1992
            self.value()
            self.state = 1993
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FRemInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FREM(self):
            return self.getToken(LLVMParser.FREM, 0)

        def fastMathFlags(self):
            return self.getTypedRuleContext(LLVMParser.FastMathFlagsContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_fRemInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFRemInst" ):
                listener.enterFRemInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFRemInst" ):
                listener.exitFRemInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFRemInst" ):
                return visitor.visitFRemInst(self)
            else:
                return visitor.visitChildren(self)




    def fRemInst(self):

        localctx = LLVMParser.FRemInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_fRemInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1995
            self.match(LLVMParser.FREM)
            self.state = 1996
            self.fastMathFlags()
            self.state = 1997
            self.llvmType(0)
            self.state = 1998
            self.value()
            self.state = 1999
            self.match(LLVMParser.COMMA)
            self.state = 2000
            self.value()
            self.state = 2001
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShlInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHL(self):
            return self.getToken(LLVMParser.SHL, 0)

        def overflowFlags(self):
            return self.getTypedRuleContext(LLVMParser.OverflowFlagsContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_shlInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShlInst" ):
                listener.enterShlInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShlInst" ):
                listener.exitShlInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShlInst" ):
                return visitor.visitShlInst(self)
            else:
                return visitor.visitChildren(self)




    def shlInst(self):

        localctx = LLVMParser.ShlInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_shlInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2003
            self.match(LLVMParser.SHL)
            self.state = 2004
            self.overflowFlags()
            self.state = 2005
            self.llvmType(0)
            self.state = 2006
            self.value()
            self.state = 2007
            self.match(LLVMParser.COMMA)
            self.state = 2008
            self.value()
            self.state = 2009
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LshrInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSHR(self):
            return self.getToken(LLVMParser.LSHR, 0)

        def optExact(self):
            return self.getTypedRuleContext(LLVMParser.OptExactContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_lshrInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLshrInst" ):
                listener.enterLshrInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLshrInst" ):
                listener.exitLshrInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLshrInst" ):
                return visitor.visitLshrInst(self)
            else:
                return visitor.visitChildren(self)




    def lshrInst(self):

        localctx = LLVMParser.LshrInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_lshrInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2011
            self.match(LLVMParser.LSHR)
            self.state = 2012
            self.optExact()
            self.state = 2013
            self.llvmType(0)
            self.state = 2014
            self.value()
            self.state = 2015
            self.match(LLVMParser.COMMA)
            self.state = 2016
            self.value()
            self.state = 2017
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AshrInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASHR(self):
            return self.getToken(LLVMParser.ASHR, 0)

        def optExact(self):
            return self.getTypedRuleContext(LLVMParser.OptExactContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_ashrInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAshrInst" ):
                listener.enterAshrInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAshrInst" ):
                listener.exitAshrInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAshrInst" ):
                return visitor.visitAshrInst(self)
            else:
                return visitor.visitChildren(self)




    def ashrInst(self):

        localctx = LLVMParser.AshrInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_ashrInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2019
            self.match(LLVMParser.ASHR)
            self.state = 2020
            self.optExact()
            self.state = 2021
            self.llvmType(0)
            self.state = 2022
            self.value()
            self.state = 2023
            self.match(LLVMParser.COMMA)
            self.state = 2024
            self.value()
            self.state = 2025
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(LLVMParser.AND, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_andInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndInst" ):
                listener.enterAndInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndInst" ):
                listener.exitAndInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndInst" ):
                return visitor.visitAndInst(self)
            else:
                return visitor.visitChildren(self)




    def andInst(self):

        localctx = LLVMParser.AndInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_andInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2027
            self.match(LLVMParser.AND)
            self.state = 2028
            self.llvmType(0)
            self.state = 2029
            self.value()
            self.state = 2030
            self.match(LLVMParser.COMMA)
            self.state = 2031
            self.value()
            self.state = 2032
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(LLVMParser.OR, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_orInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrInst" ):
                listener.enterOrInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrInst" ):
                listener.exitOrInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrInst" ):
                return visitor.visitOrInst(self)
            else:
                return visitor.visitChildren(self)




    def orInst(self):

        localctx = LLVMParser.OrInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_orInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2034
            self.match(LLVMParser.OR)
            self.state = 2035
            self.llvmType(0)
            self.state = 2036
            self.value()
            self.state = 2037
            self.match(LLVMParser.COMMA)
            self.state = 2038
            self.value()
            self.state = 2039
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XorInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XOR(self):
            return self.getToken(LLVMParser.XOR, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_xorInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXorInst" ):
                listener.enterXorInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXorInst" ):
                listener.exitXorInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXorInst" ):
                return visitor.visitXorInst(self)
            else:
                return visitor.visitChildren(self)




    def xorInst(self):

        localctx = LLVMParser.XorInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_xorInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2041
            self.match(LLVMParser.XOR)
            self.state = 2042
            self.llvmType(0)
            self.state = 2043
            self.value()
            self.state = 2044
            self.match(LLVMParser.COMMA)
            self.state = 2045
            self.value()
            self.state = 2046
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtractElementInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTRACTELEMENT(self):
            return self.getToken(LLVMParser.EXTRACTELEMENT, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_extractElementInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractElementInst" ):
                listener.enterExtractElementInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractElementInst" ):
                listener.exitExtractElementInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtractElementInst" ):
                return visitor.visitExtractElementInst(self)
            else:
                return visitor.visitChildren(self)




    def extractElementInst(self):

        localctx = LLVMParser.ExtractElementInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_extractElementInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2048
            self.match(LLVMParser.EXTRACTELEMENT)
            self.state = 2049
            self.llvmType(0)
            self.state = 2050
            self.value()
            self.state = 2051
            self.match(LLVMParser.COMMA)
            self.state = 2052
            self.llvmType(0)
            self.state = 2053
            self.value()
            self.state = 2054
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertElementInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERTELEMENT(self):
            return self.getToken(LLVMParser.INSERTELEMENT, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMParser.COMMA)
            else:
                return self.getToken(LLVMParser.COMMA, i)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_insertElementInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertElementInst" ):
                listener.enterInsertElementInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertElementInst" ):
                listener.exitInsertElementInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertElementInst" ):
                return visitor.visitInsertElementInst(self)
            else:
                return visitor.visitChildren(self)




    def insertElementInst(self):

        localctx = LLVMParser.InsertElementInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_insertElementInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2056
            self.match(LLVMParser.INSERTELEMENT)
            self.state = 2057
            self.llvmType(0)
            self.state = 2058
            self.value()
            self.state = 2059
            self.match(LLVMParser.COMMA)
            self.state = 2060
            self.llvmType(0)
            self.state = 2061
            self.value()
            self.state = 2062
            self.match(LLVMParser.COMMA)
            self.state = 2063
            self.llvmType(0)
            self.state = 2064
            self.value()
            self.state = 2065
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShuffleVectorInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHUFFLEVECTOR(self):
            return self.getToken(LLVMParser.SHUFFLEVECTOR, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMParser.COMMA)
            else:
                return self.getToken(LLVMParser.COMMA, i)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_shuffleVectorInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShuffleVectorInst" ):
                listener.enterShuffleVectorInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShuffleVectorInst" ):
                listener.exitShuffleVectorInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShuffleVectorInst" ):
                return visitor.visitShuffleVectorInst(self)
            else:
                return visitor.visitChildren(self)




    def shuffleVectorInst(self):

        localctx = LLVMParser.ShuffleVectorInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_shuffleVectorInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2067
            self.match(LLVMParser.SHUFFLEVECTOR)
            self.state = 2068
            self.llvmType(0)
            self.state = 2069
            self.value()
            self.state = 2070
            self.match(LLVMParser.COMMA)
            self.state = 2071
            self.llvmType(0)
            self.state = 2072
            self.value()
            self.state = 2073
            self.match(LLVMParser.COMMA)
            self.state = 2074
            self.llvmType(0)
            self.state = 2075
            self.value()
            self.state = 2076
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtractValueInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTRACTVALUE(self):
            return self.getToken(LLVMParser.EXTRACTVALUE, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def indexList(self):
            return self.getTypedRuleContext(LLVMParser.IndexListContext,0)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_extractValueInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractValueInst" ):
                listener.enterExtractValueInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractValueInst" ):
                listener.exitExtractValueInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtractValueInst" ):
                return visitor.visitExtractValueInst(self)
            else:
                return visitor.visitChildren(self)




    def extractValueInst(self):

        localctx = LLVMParser.ExtractValueInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_extractValueInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2078
            self.match(LLVMParser.EXTRACTVALUE)
            self.state = 2079
            self.llvmType(0)
            self.state = 2080
            self.value()
            self.state = 2081
            self.match(LLVMParser.COMMA)
            self.state = 2082
            self.indexList(0)
            self.state = 2083
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertValueInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERTVALUE(self):
            return self.getToken(LLVMParser.INSERTVALUE, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMParser.COMMA)
            else:
                return self.getToken(LLVMParser.COMMA, i)

        def indexList(self):
            return self.getTypedRuleContext(LLVMParser.IndexListContext,0)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_insertValueInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertValueInst" ):
                listener.enterInsertValueInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertValueInst" ):
                listener.exitInsertValueInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertValueInst" ):
                return visitor.visitInsertValueInst(self)
            else:
                return visitor.visitChildren(self)




    def insertValueInst(self):

        localctx = LLVMParser.InsertValueInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_insertValueInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2085
            self.match(LLVMParser.INSERTVALUE)
            self.state = 2086
            self.llvmType(0)
            self.state = 2087
            self.value()
            self.state = 2088
            self.match(LLVMParser.COMMA)
            self.state = 2089
            self.llvmType(0)
            self.state = 2090
            self.value()
            self.state = 2091
            self.match(LLVMParser.COMMA)
            self.state = 2092
            self.indexList(0)
            self.state = 2093
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllocaInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOCA(self):
            return self.getToken(LLVMParser.ALLOCA, 0)

        def optInAlloca(self):
            return self.getTypedRuleContext(LLVMParser.OptInAllocaContext,0)


        def optSwiftError(self):
            return self.getTypedRuleContext(LLVMParser.OptSwiftErrorContext,0)


        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMParser.COMMA)
            else:
                return self.getToken(LLVMParser.COMMA, i)

        def alignment(self):
            return self.getTypedRuleContext(LLVMParser.AlignmentContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def addrSpace(self):
            return self.getTypedRuleContext(LLVMParser.AddrSpaceContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_allocaInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllocaInst" ):
                listener.enterAllocaInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllocaInst" ):
                listener.exitAllocaInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllocaInst" ):
                return visitor.visitAllocaInst(self)
            else:
                return visitor.visitChildren(self)




    def allocaInst(self):

        localctx = LLVMParser.AllocaInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_allocaInst)
        try:
            self.state = 2171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2095
                self.match(LLVMParser.ALLOCA)
                self.state = 2096
                self.optInAlloca()
                self.state = 2097
                self.optSwiftError()
                self.state = 2098
                self.llvmType(0)
                self.state = 2099
                self.optCommaSepMetadataAttachmentList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2101
                self.match(LLVMParser.ALLOCA)
                self.state = 2102
                self.optInAlloca()
                self.state = 2103
                self.optSwiftError()
                self.state = 2104
                self.llvmType(0)
                self.state = 2105
                self.match(LLVMParser.COMMA)
                self.state = 2106
                self.alignment()
                self.state = 2107
                self.optCommaSepMetadataAttachmentList()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2109
                self.match(LLVMParser.ALLOCA)
                self.state = 2110
                self.optInAlloca()
                self.state = 2111
                self.optSwiftError()
                self.state = 2112
                self.llvmType(0)
                self.state = 2113
                self.match(LLVMParser.COMMA)
                self.state = 2114
                self.llvmType(0)
                self.state = 2115
                self.value()
                self.state = 2116
                self.optCommaSepMetadataAttachmentList()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2118
                self.match(LLVMParser.ALLOCA)
                self.state = 2119
                self.optInAlloca()
                self.state = 2120
                self.optSwiftError()
                self.state = 2121
                self.llvmType(0)
                self.state = 2122
                self.match(LLVMParser.COMMA)
                self.state = 2123
                self.llvmType(0)
                self.state = 2124
                self.value()
                self.state = 2125
                self.match(LLVMParser.COMMA)
                self.state = 2126
                self.alignment()
                self.state = 2127
                self.optCommaSepMetadataAttachmentList()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2129
                self.match(LLVMParser.ALLOCA)
                self.state = 2130
                self.optInAlloca()
                self.state = 2131
                self.optSwiftError()
                self.state = 2132
                self.llvmType(0)
                self.state = 2133
                self.match(LLVMParser.COMMA)
                self.state = 2134
                self.addrSpace()
                self.state = 2135
                self.optCommaSepMetadataAttachmentList()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2137
                self.match(LLVMParser.ALLOCA)
                self.state = 2138
                self.optInAlloca()
                self.state = 2139
                self.optSwiftError()
                self.state = 2140
                self.llvmType(0)
                self.state = 2141
                self.match(LLVMParser.COMMA)
                self.state = 2142
                self.alignment()
                self.state = 2143
                self.match(LLVMParser.COMMA)
                self.state = 2144
                self.addrSpace()
                self.state = 2145
                self.optCommaSepMetadataAttachmentList()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2147
                self.match(LLVMParser.ALLOCA)
                self.state = 2148
                self.optInAlloca()
                self.state = 2149
                self.optSwiftError()
                self.state = 2150
                self.llvmType(0)
                self.state = 2151
                self.match(LLVMParser.COMMA)
                self.state = 2152
                self.llvmType(0)
                self.state = 2153
                self.value()
                self.state = 2154
                self.match(LLVMParser.COMMA)
                self.state = 2155
                self.addrSpace()
                self.state = 2156
                self.optCommaSepMetadataAttachmentList()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2158
                self.match(LLVMParser.ALLOCA)
                self.state = 2159
                self.optInAlloca()
                self.state = 2160
                self.optSwiftError()
                self.state = 2161
                self.llvmType(0)
                self.state = 2162
                self.match(LLVMParser.COMMA)
                self.state = 2163
                self.llvmType(0)
                self.state = 2164
                self.value()
                self.state = 2165
                self.match(LLVMParser.COMMA)
                self.state = 2166
                self.alignment()
                self.state = 2167
                self.match(LLVMParser.COMMA)
                self.state = 2168
                self.addrSpace()
                self.state = 2169
                self.optCommaSepMetadataAttachmentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptInAllocaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INALLOCA(self):
            return self.getToken(LLVMParser.INALLOCA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_optInAlloca

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptInAlloca" ):
                listener.enterOptInAlloca(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptInAlloca" ):
                listener.exitOptInAlloca(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptInAlloca" ):
                return visitor.visitOptInAlloca(self)
            else:
                return visitor.visitChildren(self)




    def optInAlloca(self):

        localctx = LLVMParser.OptInAllocaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_optInAlloca)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.INALLOCA:
                self.state = 2173
                self.match(LLVMParser.INALLOCA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptSwiftErrorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWIFTERROR(self):
            return self.getToken(LLVMParser.SWIFTERROR, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_optSwiftError

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptSwiftError" ):
                listener.enterOptSwiftError(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptSwiftError" ):
                listener.exitOptSwiftError(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptSwiftError" ):
                return visitor.visitOptSwiftError(self)
            else:
                return visitor.visitChildren(self)




    def optSwiftError(self):

        localctx = LLVMParser.OptSwiftErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_optSwiftError)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.SWIFTERROR:
                self.state = 2176
                self.match(LLVMParser.SWIFTERROR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(LLVMParser.LOAD, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMParser.COMMA)
            else:
                return self.getToken(LLVMParser.COMMA, i)

        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def VOLATILE(self):
            return self.getToken(LLVMParser.VOLATILE, 0)

        def alignment(self):
            return self.getTypedRuleContext(LLVMParser.AlignmentContext,0)


        def ATOMIC(self):
            return self.getToken(LLVMParser.ATOMIC, 0)

        def optSyncScope(self):
            return self.getTypedRuleContext(LLVMParser.OptSyncScopeContext,0)


        def atomicOrdering(self):
            return self.getTypedRuleContext(LLVMParser.AtomicOrderingContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_loadInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadInst" ):
                listener.enterLoadInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadInst" ):
                listener.exitLoadInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadInst" ):
                return visitor.visitLoadInst(self)
            else:
                return visitor.visitChildren(self)




    def loadInst(self):

        localctx = LLVMParser.LoadInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_loadInst)
        self._la = 0 # Token type
        try:
            self.state = 2229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2179
                self.match(LLVMParser.LOAD)
                self.state = 2181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LLVMParser.VOLATILE:
                    self.state = 2180
                    self.match(LLVMParser.VOLATILE)


                self.state = 2183
                self.llvmType(0)
                self.state = 2184
                self.match(LLVMParser.COMMA)
                self.state = 2185
                self.llvmType(0)
                self.state = 2186
                self.value()
                self.state = 2187
                self.optCommaSepMetadataAttachmentList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2189
                self.match(LLVMParser.LOAD)
                self.state = 2191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LLVMParser.VOLATILE:
                    self.state = 2190
                    self.match(LLVMParser.VOLATILE)


                self.state = 2193
                self.llvmType(0)
                self.state = 2194
                self.match(LLVMParser.COMMA)
                self.state = 2195
                self.llvmType(0)
                self.state = 2196
                self.value()
                self.state = 2197
                self.match(LLVMParser.COMMA)
                self.state = 2198
                self.alignment()
                self.state = 2199
                self.optCommaSepMetadataAttachmentList()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2201
                self.match(LLVMParser.LOAD)
                self.state = 2202
                self.match(LLVMParser.ATOMIC)
                self.state = 2204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LLVMParser.VOLATILE:
                    self.state = 2203
                    self.match(LLVMParser.VOLATILE)


                self.state = 2206
                self.llvmType(0)
                self.state = 2207
                self.match(LLVMParser.COMMA)
                self.state = 2208
                self.llvmType(0)
                self.state = 2209
                self.value()
                self.state = 2210
                self.optSyncScope()
                self.state = 2211
                self.atomicOrdering()
                self.state = 2212
                self.optCommaSepMetadataAttachmentList()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2214
                self.match(LLVMParser.LOAD)
                self.state = 2215
                self.match(LLVMParser.ATOMIC)
                self.state = 2217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LLVMParser.VOLATILE:
                    self.state = 2216
                    self.match(LLVMParser.VOLATILE)


                self.state = 2219
                self.llvmType(0)
                self.state = 2220
                self.match(LLVMParser.COMMA)
                self.state = 2221
                self.llvmType(0)
                self.state = 2222
                self.value()
                self.state = 2223
                self.optSyncScope()
                self.state = 2224
                self.atomicOrdering()
                self.state = 2225
                self.match(LLVMParser.COMMA)
                self.state = 2226
                self.alignment()
                self.state = 2227
                self.optCommaSepMetadataAttachmentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StoreInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORE(self):
            return self.getToken(LLVMParser.STORE, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMParser.COMMA)
            else:
                return self.getToken(LLVMParser.COMMA, i)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def VOLATILE(self):
            return self.getToken(LLVMParser.VOLATILE, 0)

        def alignment(self):
            return self.getTypedRuleContext(LLVMParser.AlignmentContext,0)


        def ATOMIC(self):
            return self.getToken(LLVMParser.ATOMIC, 0)

        def optSyncScope(self):
            return self.getTypedRuleContext(LLVMParser.OptSyncScopeContext,0)


        def atomicOrdering(self):
            return self.getTypedRuleContext(LLVMParser.AtomicOrderingContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_storeInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStoreInst" ):
                listener.enterStoreInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStoreInst" ):
                listener.exitStoreInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStoreInst" ):
                return visitor.visitStoreInst(self)
            else:
                return visitor.visitChildren(self)




    def storeInst(self):

        localctx = LLVMParser.StoreInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_storeInst)
        self._la = 0 # Token type
        try:
            self.state = 2285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2231
                self.match(LLVMParser.STORE)
                self.state = 2233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LLVMParser.VOLATILE:
                    self.state = 2232
                    self.match(LLVMParser.VOLATILE)


                self.state = 2235
                self.llvmType(0)
                self.state = 2236
                self.value()
                self.state = 2237
                self.match(LLVMParser.COMMA)
                self.state = 2238
                self.llvmType(0)
                self.state = 2239
                self.value()
                self.state = 2240
                self.optCommaSepMetadataAttachmentList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2242
                self.match(LLVMParser.STORE)
                self.state = 2244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LLVMParser.VOLATILE:
                    self.state = 2243
                    self.match(LLVMParser.VOLATILE)


                self.state = 2246
                self.llvmType(0)
                self.state = 2247
                self.value()
                self.state = 2248
                self.match(LLVMParser.COMMA)
                self.state = 2249
                self.llvmType(0)
                self.state = 2250
                self.value()
                self.state = 2251
                self.match(LLVMParser.COMMA)
                self.state = 2252
                self.alignment()
                self.state = 2253
                self.optCommaSepMetadataAttachmentList()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2255
                self.match(LLVMParser.STORE)
                self.state = 2256
                self.match(LLVMParser.ATOMIC)
                self.state = 2258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LLVMParser.VOLATILE:
                    self.state = 2257
                    self.match(LLVMParser.VOLATILE)


                self.state = 2260
                self.llvmType(0)
                self.state = 2261
                self.value()
                self.state = 2262
                self.match(LLVMParser.COMMA)
                self.state = 2263
                self.llvmType(0)
                self.state = 2264
                self.value()
                self.state = 2265
                self.optSyncScope()
                self.state = 2266
                self.atomicOrdering()
                self.state = 2267
                self.optCommaSepMetadataAttachmentList()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2269
                self.match(LLVMParser.STORE)
                self.state = 2270
                self.match(LLVMParser.ATOMIC)
                self.state = 2272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LLVMParser.VOLATILE:
                    self.state = 2271
                    self.match(LLVMParser.VOLATILE)


                self.state = 2274
                self.llvmType(0)
                self.state = 2275
                self.value()
                self.state = 2276
                self.match(LLVMParser.COMMA)
                self.state = 2277
                self.llvmType(0)
                self.state = 2278
                self.value()
                self.state = 2279
                self.optSyncScope()
                self.state = 2280
                self.atomicOrdering()
                self.state = 2281
                self.match(LLVMParser.COMMA)
                self.state = 2282
                self.alignment()
                self.state = 2283
                self.optCommaSepMetadataAttachmentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FenceInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FENCE(self):
            return self.getToken(LLVMParser.FENCE, 0)

        def optSyncScope(self):
            return self.getTypedRuleContext(LLVMParser.OptSyncScopeContext,0)


        def atomicOrdering(self):
            return self.getTypedRuleContext(LLVMParser.AtomicOrderingContext,0)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_fenceInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFenceInst" ):
                listener.enterFenceInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFenceInst" ):
                listener.exitFenceInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFenceInst" ):
                return visitor.visitFenceInst(self)
            else:
                return visitor.visitChildren(self)




    def fenceInst(self):

        localctx = LLVMParser.FenceInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_fenceInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2287
            self.match(LLVMParser.FENCE)
            self.state = 2288
            self.optSyncScope()
            self.state = 2289
            self.atomicOrdering()
            self.state = 2290
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmpXchgInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMPXCHG(self):
            return self.getToken(LLVMParser.CMPXCHG, 0)

        def optWeak(self):
            return self.getTypedRuleContext(LLVMParser.OptWeakContext,0)


        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMParser.COMMA)
            else:
                return self.getToken(LLVMParser.COMMA, i)

        def optSyncScope(self):
            return self.getTypedRuleContext(LLVMParser.OptSyncScopeContext,0)


        def atomicOrdering(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.AtomicOrderingContext)
            else:
                return self.getTypedRuleContext(LLVMParser.AtomicOrderingContext,i)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def VOLATILE(self):
            return self.getToken(LLVMParser.VOLATILE, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_cmpXchgInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpXchgInst" ):
                listener.enterCmpXchgInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpXchgInst" ):
                listener.exitCmpXchgInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmpXchgInst" ):
                return visitor.visitCmpXchgInst(self)
            else:
                return visitor.visitChildren(self)




    def cmpXchgInst(self):

        localctx = LLVMParser.CmpXchgInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_cmpXchgInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2292
            self.match(LLVMParser.CMPXCHG)
            self.state = 2293
            self.optWeak()
            self.state = 2295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.VOLATILE:
                self.state = 2294
                self.match(LLVMParser.VOLATILE)


            self.state = 2297
            self.llvmType(0)
            self.state = 2298
            self.value()
            self.state = 2299
            self.match(LLVMParser.COMMA)
            self.state = 2300
            self.llvmType(0)
            self.state = 2301
            self.value()
            self.state = 2302
            self.match(LLVMParser.COMMA)
            self.state = 2303
            self.llvmType(0)
            self.state = 2304
            self.value()
            self.state = 2305
            self.optSyncScope()
            self.state = 2306
            self.atomicOrdering()
            self.state = 2307
            self.atomicOrdering()
            self.state = 2308
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptWeakContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WEAK(self):
            return self.getToken(LLVMParser.WEAK, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_optWeak

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptWeak" ):
                listener.enterOptWeak(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptWeak" ):
                listener.exitOptWeak(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptWeak" ):
                return visitor.visitOptWeak(self)
            else:
                return visitor.visitChildren(self)




    def optWeak(self):

        localctx = LLVMParser.OptWeakContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_optWeak)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.WEAK:
                self.state = 2310
                self.match(LLVMParser.WEAK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicRMWInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATOMICRMW(self):
            return self.getToken(LLVMParser.ATOMICRMW, 0)

        def binOp(self):
            return self.getTypedRuleContext(LLVMParser.BinOpContext,0)


        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optSyncScope(self):
            return self.getTypedRuleContext(LLVMParser.OptSyncScopeContext,0)


        def atomicOrdering(self):
            return self.getTypedRuleContext(LLVMParser.AtomicOrderingContext,0)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def VOLATILE(self):
            return self.getToken(LLVMParser.VOLATILE, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_atomicRMWInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicRMWInst" ):
                listener.enterAtomicRMWInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicRMWInst" ):
                listener.exitAtomicRMWInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomicRMWInst" ):
                return visitor.visitAtomicRMWInst(self)
            else:
                return visitor.visitChildren(self)




    def atomicRMWInst(self):

        localctx = LLVMParser.AtomicRMWInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_atomicRMWInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2313
            self.match(LLVMParser.ATOMICRMW)
            self.state = 2315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.VOLATILE:
                self.state = 2314
                self.match(LLVMParser.VOLATILE)


            self.state = 2317
            self.binOp()
            self.state = 2318
            self.llvmType(0)
            self.state = 2319
            self.value()
            self.state = 2320
            self.match(LLVMParser.COMMA)
            self.state = 2321
            self.llvmType(0)
            self.state = 2322
            self.value()
            self.state = 2323
            self.optSyncScope()
            self.state = 2324
            self.atomicOrdering()
            self.state = 2325
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(LLVMParser.ADD, 0)

        def AND(self):
            return self.getToken(LLVMParser.AND, 0)

        def MAX(self):
            return self.getToken(LLVMParser.MAX, 0)

        def MIN(self):
            return self.getToken(LLVMParser.MIN, 0)

        def NAND(self):
            return self.getToken(LLVMParser.NAND, 0)

        def OR(self):
            return self.getToken(LLVMParser.OR, 0)

        def SUB(self):
            return self.getToken(LLVMParser.SUB, 0)

        def UMAX(self):
            return self.getToken(LLVMParser.UMAX, 0)

        def UMIN(self):
            return self.getToken(LLVMParser.UMIN, 0)

        def XCHG(self):
            return self.getToken(LLVMParser.XCHG, 0)

        def XOR(self):
            return self.getToken(LLVMParser.XOR, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_binOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinOp" ):
                listener.enterBinOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinOp" ):
                listener.exitBinOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinOp" ):
                return visitor.visitBinOp(self)
            else:
                return visitor.visitChildren(self)




    def binOp(self):

        localctx = LLVMParser.BinOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_binOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2327
            _la = self._input.LA(1)
            if not(_la==LLVMParser.ADD or _la==LLVMParser.AND or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (LLVMParser.MAX - 226)) | (1 << (LLVMParser.MIN - 226)) | (1 << (LLVMParser.NAND - 226)) | (1 << (LLVMParser.OR - 226)))) != 0) or ((((_la - 337)) & ~0x3f) == 0 and ((1 << (_la - 337)) & ((1 << (LLVMParser.SUB - 337)) | (1 << (LLVMParser.UMAX - 337)) | (1 << (LLVMParser.UMIN - 337)))) != 0) or _la==LLVMParser.XCHG or _la==LLVMParser.XOR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetElementPtrInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GETELEMENTPTR(self):
            return self.getToken(LLVMParser.GETELEMENTPTR, 0)

        def optInBounds(self):
            return self.getTypedRuleContext(LLVMParser.OptInBoundsContext,0)


        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMParser.COMMA)
            else:
                return self.getToken(LLVMParser.COMMA, i)

        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def commaSepTypeValueList(self):
            return self.getTypedRuleContext(LLVMParser.CommaSepTypeValueListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_getElementPtrInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetElementPtrInst" ):
                listener.enterGetElementPtrInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetElementPtrInst" ):
                listener.exitGetElementPtrInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetElementPtrInst" ):
                return visitor.visitGetElementPtrInst(self)
            else:
                return visitor.visitChildren(self)




    def getElementPtrInst(self):

        localctx = LLVMParser.GetElementPtrInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_getElementPtrInst)
        try:
            self.state = 2347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2329
                self.match(LLVMParser.GETELEMENTPTR)
                self.state = 2330
                self.optInBounds()
                self.state = 2331
                self.llvmType(0)
                self.state = 2332
                self.match(LLVMParser.COMMA)
                self.state = 2333
                self.llvmType(0)
                self.state = 2334
                self.value()
                self.state = 2335
                self.optCommaSepMetadataAttachmentList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2337
                self.match(LLVMParser.GETELEMENTPTR)
                self.state = 2338
                self.optInBounds()
                self.state = 2339
                self.llvmType(0)
                self.state = 2340
                self.match(LLVMParser.COMMA)
                self.state = 2341
                self.llvmType(0)
                self.state = 2342
                self.value()
                self.state = 2343
                self.match(LLVMParser.COMMA)
                self.state = 2344
                self.commaSepTypeValueList(0)
                self.state = 2345
                self.optCommaSepMetadataAttachmentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNC(self):
            return self.getToken(LLVMParser.TRUNC, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_truncInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncInst" ):
                listener.enterTruncInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncInst" ):
                listener.exitTruncInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncInst" ):
                return visitor.visitTruncInst(self)
            else:
                return visitor.visitChildren(self)




    def truncInst(self):

        localctx = LLVMParser.TruncInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_truncInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2349
            self.match(LLVMParser.TRUNC)
            self.state = 2350
            self.llvmType(0)
            self.state = 2351
            self.value()
            self.state = 2352
            self.match(LLVMParser.TO)
            self.state = 2353
            self.llvmType(0)
            self.state = 2354
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ZExtInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ZEXT(self):
            return self.getToken(LLVMParser.ZEXT, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_zExtInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZExtInst" ):
                listener.enterZExtInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZExtInst" ):
                listener.exitZExtInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitZExtInst" ):
                return visitor.visitZExtInst(self)
            else:
                return visitor.visitChildren(self)




    def zExtInst(self):

        localctx = LLVMParser.ZExtInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_zExtInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2356
            self.match(LLVMParser.ZEXT)
            self.state = 2357
            self.llvmType(0)
            self.state = 2358
            self.value()
            self.state = 2359
            self.match(LLVMParser.TO)
            self.state = 2360
            self.llvmType(0)
            self.state = 2361
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SExtInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEXT(self):
            return self.getToken(LLVMParser.SEXT, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_sExtInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSExtInst" ):
                listener.enterSExtInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSExtInst" ):
                listener.exitSExtInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSExtInst" ):
                return visitor.visitSExtInst(self)
            else:
                return visitor.visitChildren(self)




    def sExtInst(self):

        localctx = LLVMParser.SExtInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_sExtInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2363
            self.match(LLVMParser.SEXT)
            self.state = 2364
            self.llvmType(0)
            self.state = 2365
            self.value()
            self.state = 2366
            self.match(LLVMParser.TO)
            self.state = 2367
            self.llvmType(0)
            self.state = 2368
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FpTruncInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FPTRUNC(self):
            return self.getToken(LLVMParser.FPTRUNC, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_fpTruncInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFpTruncInst" ):
                listener.enterFpTruncInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFpTruncInst" ):
                listener.exitFpTruncInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFpTruncInst" ):
                return visitor.visitFpTruncInst(self)
            else:
                return visitor.visitChildren(self)




    def fpTruncInst(self):

        localctx = LLVMParser.FpTruncInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_fpTruncInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2370
            self.match(LLVMParser.FPTRUNC)
            self.state = 2371
            self.llvmType(0)
            self.state = 2372
            self.value()
            self.state = 2373
            self.match(LLVMParser.TO)
            self.state = 2374
            self.llvmType(0)
            self.state = 2375
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FpExtInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FPEXT(self):
            return self.getToken(LLVMParser.FPEXT, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_fpExtInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFpExtInst" ):
                listener.enterFpExtInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFpExtInst" ):
                listener.exitFpExtInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFpExtInst" ):
                return visitor.visitFpExtInst(self)
            else:
                return visitor.visitChildren(self)




    def fpExtInst(self):

        localctx = LLVMParser.FpExtInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_fpExtInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2377
            self.match(LLVMParser.FPEXT)
            self.state = 2378
            self.llvmType(0)
            self.state = 2379
            self.value()
            self.state = 2380
            self.match(LLVMParser.TO)
            self.state = 2381
            self.llvmType(0)
            self.state = 2382
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FpToUIInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FPTOUI(self):
            return self.getToken(LLVMParser.FPTOUI, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_fpToUIInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFpToUIInst" ):
                listener.enterFpToUIInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFpToUIInst" ):
                listener.exitFpToUIInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFpToUIInst" ):
                return visitor.visitFpToUIInst(self)
            else:
                return visitor.visitChildren(self)




    def fpToUIInst(self):

        localctx = LLVMParser.FpToUIInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_fpToUIInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2384
            self.match(LLVMParser.FPTOUI)
            self.state = 2385
            self.llvmType(0)
            self.state = 2386
            self.value()
            self.state = 2387
            self.match(LLVMParser.TO)
            self.state = 2388
            self.llvmType(0)
            self.state = 2389
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FpToSIInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FPTOSI(self):
            return self.getToken(LLVMParser.FPTOSI, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_fpToSIInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFpToSIInst" ):
                listener.enterFpToSIInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFpToSIInst" ):
                listener.exitFpToSIInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFpToSIInst" ):
                return visitor.visitFpToSIInst(self)
            else:
                return visitor.visitChildren(self)




    def fpToSIInst(self):

        localctx = LLVMParser.FpToSIInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_fpToSIInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2391
            self.match(LLVMParser.FPTOSI)
            self.state = 2392
            self.llvmType(0)
            self.state = 2393
            self.value()
            self.state = 2394
            self.match(LLVMParser.TO)
            self.state = 2395
            self.llvmType(0)
            self.state = 2396
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UiToFPInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UITOFP(self):
            return self.getToken(LLVMParser.UITOFP, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_uiToFPInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUiToFPInst" ):
                listener.enterUiToFPInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUiToFPInst" ):
                listener.exitUiToFPInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUiToFPInst" ):
                return visitor.visitUiToFPInst(self)
            else:
                return visitor.visitChildren(self)




    def uiToFPInst(self):

        localctx = LLVMParser.UiToFPInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_uiToFPInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2398
            self.match(LLVMParser.UITOFP)
            self.state = 2399
            self.llvmType(0)
            self.state = 2400
            self.value()
            self.state = 2401
            self.match(LLVMParser.TO)
            self.state = 2402
            self.llvmType(0)
            self.state = 2403
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SiToFPInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SITOFP(self):
            return self.getToken(LLVMParser.SITOFP, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_siToFPInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSiToFPInst" ):
                listener.enterSiToFPInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSiToFPInst" ):
                listener.exitSiToFPInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSiToFPInst" ):
                return visitor.visitSiToFPInst(self)
            else:
                return visitor.visitChildren(self)




    def siToFPInst(self):

        localctx = LLVMParser.SiToFPInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_siToFPInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2405
            self.match(LLVMParser.SITOFP)
            self.state = 2406
            self.llvmType(0)
            self.state = 2407
            self.value()
            self.state = 2408
            self.match(LLVMParser.TO)
            self.state = 2409
            self.llvmType(0)
            self.state = 2410
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrToIntInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PTRTOINT(self):
            return self.getToken(LLVMParser.PTRTOINT, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_ptrToIntInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrToIntInst" ):
                listener.enterPtrToIntInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrToIntInst" ):
                listener.exitPtrToIntInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrToIntInst" ):
                return visitor.visitPtrToIntInst(self)
            else:
                return visitor.visitChildren(self)




    def ptrToIntInst(self):

        localctx = LLVMParser.PtrToIntInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_ptrToIntInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2412
            self.match(LLVMParser.PTRTOINT)
            self.state = 2413
            self.llvmType(0)
            self.state = 2414
            self.value()
            self.state = 2415
            self.match(LLVMParser.TO)
            self.state = 2416
            self.llvmType(0)
            self.state = 2417
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntToPtrInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTTOPTR(self):
            return self.getToken(LLVMParser.INTTOPTR, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_intToPtrInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntToPtrInst" ):
                listener.enterIntToPtrInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntToPtrInst" ):
                listener.exitIntToPtrInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntToPtrInst" ):
                return visitor.visitIntToPtrInst(self)
            else:
                return visitor.visitChildren(self)




    def intToPtrInst(self):

        localctx = LLVMParser.IntToPtrInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_intToPtrInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2419
            self.match(LLVMParser.INTTOPTR)
            self.state = 2420
            self.llvmType(0)
            self.state = 2421
            self.value()
            self.state = 2422
            self.match(LLVMParser.TO)
            self.state = 2423
            self.llvmType(0)
            self.state = 2424
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitCastInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITCAST(self):
            return self.getToken(LLVMParser.BITCAST, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_bitCastInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitCastInst" ):
                listener.enterBitCastInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitCastInst" ):
                listener.exitBitCastInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitCastInst" ):
                return visitor.visitBitCastInst(self)
            else:
                return visitor.visitChildren(self)




    def bitCastInst(self):

        localctx = LLVMParser.BitCastInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_bitCastInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2426
            self.match(LLVMParser.BITCAST)
            self.state = 2427
            self.llvmType(0)
            self.state = 2428
            self.value()
            self.state = 2429
            self.match(LLVMParser.TO)
            self.state = 2430
            self.llvmType(0)
            self.state = 2431
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddrSpaceCastInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDRSPACECAST(self):
            return self.getToken(LLVMParser.ADDRSPACECAST, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_addrSpaceCastInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddrSpaceCastInst" ):
                listener.enterAddrSpaceCastInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddrSpaceCastInst" ):
                listener.exitAddrSpaceCastInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddrSpaceCastInst" ):
                return visitor.visitAddrSpaceCastInst(self)
            else:
                return visitor.visitChildren(self)




    def addrSpaceCastInst(self):

        localctx = LLVMParser.AddrSpaceCastInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_addrSpaceCastInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2433
            self.match(LLVMParser.ADDRSPACECAST)
            self.state = 2434
            self.llvmType(0)
            self.state = 2435
            self.value()
            self.state = 2436
            self.match(LLVMParser.TO)
            self.state = 2437
            self.llvmType(0)
            self.state = 2438
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICmpInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ICMP(self):
            return self.getToken(LLVMParser.ICMP, 0)

        def iPred(self):
            return self.getTypedRuleContext(LLVMParser.IPredContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_iCmpInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICmpInst" ):
                listener.enterICmpInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICmpInst" ):
                listener.exitICmpInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitICmpInst" ):
                return visitor.visitICmpInst(self)
            else:
                return visitor.visitChildren(self)




    def iCmpInst(self):

        localctx = LLVMParser.ICmpInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_iCmpInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2440
            self.match(LLVMParser.ICMP)
            self.state = 2441
            self.iPred()
            self.state = 2442
            self.llvmType(0)
            self.state = 2443
            self.value()
            self.state = 2444
            self.match(LLVMParser.COMMA)
            self.state = 2445
            self.value()
            self.state = 2446
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FCmpInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FCMP(self):
            return self.getToken(LLVMParser.FCMP, 0)

        def fastMathFlags(self):
            return self.getTypedRuleContext(LLVMParser.FastMathFlagsContext,0)


        def fpred(self):
            return self.getTypedRuleContext(LLVMParser.FpredContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_fCmpInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFCmpInst" ):
                listener.enterFCmpInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFCmpInst" ):
                listener.exitFCmpInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFCmpInst" ):
                return visitor.visitFCmpInst(self)
            else:
                return visitor.visitChildren(self)




    def fCmpInst(self):

        localctx = LLVMParser.FCmpInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_fCmpInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2448
            self.match(LLVMParser.FCMP)
            self.state = 2449
            self.fastMathFlags()
            self.state = 2450
            self.fpred()
            self.state = 2451
            self.llvmType(0)
            self.state = 2452
            self.value()
            self.state = 2453
            self.match(LLVMParser.COMMA)
            self.state = 2454
            self.value()
            self.state = 2455
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhiInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PHI(self):
            return self.getToken(LLVMParser.PHI, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def incList(self):
            return self.getTypedRuleContext(LLVMParser.IncListContext,0)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_phiInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhiInst" ):
                listener.enterPhiInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhiInst" ):
                listener.exitPhiInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhiInst" ):
                return visitor.visitPhiInst(self)
            else:
                return visitor.visitChildren(self)




    def phiInst(self):

        localctx = LLVMParser.PhiInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_phiInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2457
            self.match(LLVMParser.PHI)
            self.state = 2458
            self.llvmType(0)
            self.state = 2459
            self.incList(0)
            self.state = 2460
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inc(self):
            return self.getTypedRuleContext(LLVMParser.IncContext,0)


        def incList(self):
            return self.getTypedRuleContext(LLVMParser.IncListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_incList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncList" ):
                listener.enterIncList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncList" ):
                listener.exitIncList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncList" ):
                return visitor.visitIncList(self)
            else:
                return visitor.visitChildren(self)



    def incList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.IncListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 374
        self.enterRecursionRule(localctx, 374, self.RULE_incList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2463
            self.inc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2470
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.IncListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_incList)
                    self.state = 2465
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2466
                    self.match(LLVMParser.COMMA)
                    self.state = 2467
                    self.inc() 
                self.state = 2472
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class IncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(LLVMParser.LBRACK, 0)

        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def localIdent(self):
            return self.getTypedRuleContext(LLVMParser.LocalIdentContext,0)


        def RBRACK(self):
            return self.getToken(LLVMParser.RBRACK, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_inc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInc" ):
                listener.enterInc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInc" ):
                listener.exitInc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInc" ):
                return visitor.visitInc(self)
            else:
                return visitor.visitChildren(self)




    def inc(self):

        localctx = LLVMParser.IncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_inc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2473
            self.match(LLVMParser.LBRACK)
            self.state = 2474
            self.value()
            self.state = 2475
            self.match(LLVMParser.COMMA)
            self.state = 2476
            self.localIdent()
            self.state = 2477
            self.match(LLVMParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(LLVMParser.SELECT, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.ValueContext)
            else:
                return self.getTypedRuleContext(LLVMParser.ValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMParser.COMMA)
            else:
                return self.getToken(LLVMParser.COMMA, i)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_selectInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectInst" ):
                listener.enterSelectInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectInst" ):
                listener.exitSelectInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectInst" ):
                return visitor.visitSelectInst(self)
            else:
                return visitor.visitChildren(self)




    def selectInst(self):

        localctx = LLVMParser.SelectInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_selectInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2479
            self.match(LLVMParser.SELECT)
            self.state = 2480
            self.llvmType(0)
            self.state = 2481
            self.value()
            self.state = 2482
            self.match(LLVMParser.COMMA)
            self.state = 2483
            self.llvmType(0)
            self.state = 2484
            self.value()
            self.state = 2485
            self.match(LLVMParser.COMMA)
            self.state = 2486
            self.llvmType(0)
            self.state = 2487
            self.value()
            self.state = 2488
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optTail(self):
            return self.getTypedRuleContext(LLVMParser.OptTailContext,0)


        def CALL(self):
            return self.getToken(LLVMParser.CALL, 0)

        def fastMathFlags(self):
            return self.getTypedRuleContext(LLVMParser.FastMathFlagsContext,0)


        def optCallingConv(self):
            return self.getTypedRuleContext(LLVMParser.OptCallingConvContext,0)


        def returnAttrs(self):
            return self.getTypedRuleContext(LLVMParser.ReturnAttrsContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def args(self):
            return self.getTypedRuleContext(LLVMParser.ArgsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def funcAttrs(self):
            return self.getTypedRuleContext(LLVMParser.FuncAttrsContext,0)


        def operandBundles(self):
            return self.getTypedRuleContext(LLVMParser.OperandBundlesContext,0)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_callInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallInst" ):
                listener.enterCallInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallInst" ):
                listener.exitCallInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallInst" ):
                return visitor.visitCallInst(self)
            else:
                return visitor.visitChildren(self)




    def callInst(self):

        localctx = LLVMParser.CallInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_callInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2490
            self.optTail()
            self.state = 2491
            self.match(LLVMParser.CALL)
            self.state = 2492
            self.fastMathFlags()
            self.state = 2493
            self.optCallingConv()
            self.state = 2494
            self.returnAttrs()
            self.state = 2495
            self.llvmType(0)
            self.state = 2496
            self.value()
            self.state = 2497
            self.match(LLVMParser.LPAREN)
            self.state = 2498
            self.args()
            self.state = 2499
            self.match(LLVMParser.RPAREN)
            self.state = 2500
            self.funcAttrs()
            self.state = 2501
            self.operandBundles()
            self.state = 2502
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUSTTAIL(self):
            return self.getToken(LLVMParser.MUSTTAIL, 0)

        def NOTAIL(self):
            return self.getToken(LLVMParser.NOTAIL, 0)

        def TAIL(self):
            return self.getToken(LLVMParser.TAIL, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_optTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptTail" ):
                listener.enterOptTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptTail" ):
                listener.exitOptTail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptTail" ):
                return visitor.visitOptTail(self)
            else:
                return visitor.visitChildren(self)




    def optTail(self):

        localctx = LLVMParser.OptTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_optTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.MUSTTAIL or _la==LLVMParser.NOTAIL or _la==LLVMParser.TAIL:
                self.state = 2504
                _la = self._input.LA(1)
                if not(_la==LLVMParser.MUSTTAIL or _la==LLVMParser.NOTAIL or _la==LLVMParser.TAIL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VaArgInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VA_ARG(self):
            return self.getToken(LLVMParser.VA_ARG, 0)

        def llvmType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LlvmTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,i)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_vaArgInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVaArgInst" ):
                listener.enterVaArgInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVaArgInst" ):
                listener.exitVaArgInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVaArgInst" ):
                return visitor.visitVaArgInst(self)
            else:
                return visitor.visitChildren(self)




    def vaArgInst(self):

        localctx = LLVMParser.VaArgInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_vaArgInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2507
            self.match(LLVMParser.VA_ARG)
            self.state = 2508
            self.llvmType(0)
            self.state = 2509
            self.value()
            self.state = 2510
            self.match(LLVMParser.COMMA)
            self.state = 2511
            self.llvmType(0)
            self.state = 2512
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LandingPadInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANDINGPAD(self):
            return self.getToken(LLVMParser.LANDINGPAD, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def optCleanup(self):
            return self.getTypedRuleContext(LLVMParser.OptCleanupContext,0)


        def clauses(self):
            return self.getTypedRuleContext(LLVMParser.ClausesContext,0)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_landingPadInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLandingPadInst" ):
                listener.enterLandingPadInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLandingPadInst" ):
                listener.exitLandingPadInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLandingPadInst" ):
                return visitor.visitLandingPadInst(self)
            else:
                return visitor.visitChildren(self)




    def landingPadInst(self):

        localctx = LLVMParser.LandingPadInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_landingPadInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2514
            self.match(LLVMParser.LANDINGPAD)
            self.state = 2515
            self.llvmType(0)
            self.state = 2516
            self.optCleanup()
            self.state = 2517
            self.clauses()
            self.state = 2518
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptCleanupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLEANUP(self):
            return self.getToken(LLVMParser.CLEANUP, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_optCleanup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptCleanup" ):
                listener.enterOptCleanup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptCleanup" ):
                listener.exitOptCleanup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptCleanup" ):
                return visitor.visitOptCleanup(self)
            else:
                return visitor.visitChildren(self)




    def optCleanup(self):

        localctx = LLVMParser.OptCleanupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_optCleanup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 2520
                self.match(LLVMParser.CLEANUP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def clauseList(self):
            return self.getTypedRuleContext(LLVMParser.ClauseListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClauses" ):
                listener.enterClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClauses" ):
                listener.exitClauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClauses" ):
                return visitor.visitClauses(self)
            else:
                return visitor.visitChildren(self)




    def clauses(self):

        localctx = LLVMParser.ClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 2523
                self.clauseList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClauseListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def clause(self):
            return self.getTypedRuleContext(LLVMParser.ClauseContext,0)


        def clauseList(self):
            return self.getTypedRuleContext(LLVMParser.ClauseListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_clauseList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClauseList" ):
                listener.enterClauseList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClauseList" ):
                listener.exitClauseList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClauseList" ):
                return visitor.visitClauseList(self)
            else:
                return visitor.visitChildren(self)



    def clauseList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.ClauseListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 392
        self.enterRecursionRule(localctx, 392, self.RULE_clauseList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2527
            self.clause()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2533
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.ClauseListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_clauseList)
                    self.state = 2529
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2530
                    self.clause() 
                self.state = 2535
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(LLVMParser.CATCH, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def FILTER(self):
            return self.getToken(LLVMParser.FILTER, 0)

        def arrayConst(self):
            return self.getTypedRuleContext(LLVMParser.ArrayConstContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClause" ):
                listener.enterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClause" ):
                listener.exitClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClause" ):
                return visitor.visitClause(self)
            else:
                return visitor.visitChildren(self)




    def clause(self):

        localctx = LLVMParser.ClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_clause)
        try:
            self.state = 2544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.CATCH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2536
                self.match(LLVMParser.CATCH)
                self.state = 2537
                self.llvmType(0)
                self.state = 2538
                self.value()
                pass
            elif token in [LLVMParser.FILTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2540
                self.match(LLVMParser.FILTER)
                self.state = 2541
                self.llvmType(0)
                self.state = 2542
                self.arrayConst()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchPadInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCHPAD(self):
            return self.getToken(LLVMParser.CATCHPAD, 0)

        def WITHIN(self):
            return self.getToken(LLVMParser.WITHIN, 0)

        def localIdent(self):
            return self.getTypedRuleContext(LLVMParser.LocalIdentContext,0)


        def LBRACK(self):
            return self.getToken(LLVMParser.LBRACK, 0)

        def exceptionArgs(self):
            return self.getTypedRuleContext(LLVMParser.ExceptionArgsContext,0)


        def RBRACK(self):
            return self.getToken(LLVMParser.RBRACK, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_catchPadInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchPadInst" ):
                listener.enterCatchPadInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchPadInst" ):
                listener.exitCatchPadInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchPadInst" ):
                return visitor.visitCatchPadInst(self)
            else:
                return visitor.visitChildren(self)




    def catchPadInst(self):

        localctx = LLVMParser.CatchPadInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_catchPadInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2546
            self.match(LLVMParser.CATCHPAD)
            self.state = 2547
            self.match(LLVMParser.WITHIN)
            self.state = 2548
            self.localIdent()
            self.state = 2549
            self.match(LLVMParser.LBRACK)
            self.state = 2550
            self.exceptionArgs()
            self.state = 2551
            self.match(LLVMParser.RBRACK)
            self.state = 2552
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CleanupPadInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLEANUPPAD(self):
            return self.getToken(LLVMParser.CLEANUPPAD, 0)

        def WITHIN(self):
            return self.getToken(LLVMParser.WITHIN, 0)

        def exceptionScope(self):
            return self.getTypedRuleContext(LLVMParser.ExceptionScopeContext,0)


        def LBRACK(self):
            return self.getToken(LLVMParser.LBRACK, 0)

        def exceptionArgs(self):
            return self.getTypedRuleContext(LLVMParser.ExceptionArgsContext,0)


        def RBRACK(self):
            return self.getToken(LLVMParser.RBRACK, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_cleanupPadInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCleanupPadInst" ):
                listener.enterCleanupPadInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCleanupPadInst" ):
                listener.exitCleanupPadInst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCleanupPadInst" ):
                return visitor.visitCleanupPadInst(self)
            else:
                return visitor.visitChildren(self)




    def cleanupPadInst(self):

        localctx = LLVMParser.CleanupPadInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_cleanupPadInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2554
            self.match(LLVMParser.CLEANUPPAD)
            self.state = 2555
            self.match(LLVMParser.WITHIN)
            self.state = 2556
            self.exceptionScope()
            self.state = 2557
            self.match(LLVMParser.LBRACK)
            self.state = 2558
            self.exceptionArgs()
            self.state = 2559
            self.match(LLVMParser.RBRACK)
            self.state = 2560
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TerminatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def retTerm(self):
            return self.getTypedRuleContext(LLVMParser.RetTermContext,0)


        def brTerm(self):
            return self.getTypedRuleContext(LLVMParser.BrTermContext,0)


        def condBrTerm(self):
            return self.getTypedRuleContext(LLVMParser.CondBrTermContext,0)


        def switchTerm(self):
            return self.getTypedRuleContext(LLVMParser.SwitchTermContext,0)


        def indirectBrTerm(self):
            return self.getTypedRuleContext(LLVMParser.IndirectBrTermContext,0)


        def invokeTerm(self):
            return self.getTypedRuleContext(LLVMParser.InvokeTermContext,0)


        def resumeTerm(self):
            return self.getTypedRuleContext(LLVMParser.ResumeTermContext,0)


        def catchSwitchTerm(self):
            return self.getTypedRuleContext(LLVMParser.CatchSwitchTermContext,0)


        def catchRetTerm(self):
            return self.getTypedRuleContext(LLVMParser.CatchRetTermContext,0)


        def cleanupRetTerm(self):
            return self.getTypedRuleContext(LLVMParser.CleanupRetTermContext,0)


        def unreachableTerm(self):
            return self.getTypedRuleContext(LLVMParser.UnreachableTermContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_terminator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerminator" ):
                listener.enterTerminator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerminator" ):
                listener.exitTerminator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerminator" ):
                return visitor.visitTerminator(self)
            else:
                return visitor.visitChildren(self)




    def terminator(self):

        localctx = LLVMParser.TerminatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_terminator)
        try:
            self.state = 2573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2562
                self.retTerm()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2563
                self.brTerm()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2564
                self.condBrTerm()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2565
                self.switchTerm()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2566
                self.indirectBrTerm()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2567
                self.invokeTerm()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2568
                self.resumeTerm()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2569
                self.catchSwitchTerm()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2570
                self.catchRetTerm()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2571
                self.cleanupRetTerm()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2572
                self.unreachableTerm()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RET(self):
            return self.getToken(LLVMParser.RET, 0)

        def voidType(self):
            return self.getTypedRuleContext(LLVMParser.VoidTypeContext,0)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def optAddrSpace(self):
            return self.getTypedRuleContext(LLVMParser.OptAddrSpaceContext,0)


        def STAR(self):
            return self.getToken(LLVMParser.STAR, 0)

        def concreteNonRecType(self):
            return self.getTypedRuleContext(LLVMParser.ConcreteNonRecTypeContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_retTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetTerm" ):
                listener.enterRetTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetTerm" ):
                listener.exitRetTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRetTerm" ):
                return visitor.visitRetTerm(self)
            else:
                return visitor.visitChildren(self)




    def retTerm(self):

        localctx = LLVMParser.RetTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_retTerm)
        try:
            self.state = 2590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2575
                self.match(LLVMParser.RET)
                self.state = 2576
                self.voidType()
                self.state = 2577
                self.optCommaSepMetadataAttachmentList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2579
                self.match(LLVMParser.RET)
                self.state = 2585
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 2580
                    self.llvmType(0)
                    self.state = 2581
                    self.optAddrSpace()
                    self.state = 2582
                    self.match(LLVMParser.STAR)
                    pass

                elif la_ == 2:
                    self.state = 2584
                    self.concreteNonRecType()
                    pass


                self.state = 2587
                self.value()
                self.state = 2588
                self.optCommaSepMetadataAttachmentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BrTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BR(self):
            return self.getToken(LLVMParser.BR, 0)

        def labelType(self):
            return self.getTypedRuleContext(LLVMParser.LabelTypeContext,0)


        def localIdent(self):
            return self.getTypedRuleContext(LLVMParser.LocalIdentContext,0)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_brTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBrTerm" ):
                listener.enterBrTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBrTerm" ):
                listener.exitBrTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBrTerm" ):
                return visitor.visitBrTerm(self)
            else:
                return visitor.visitChildren(self)




    def brTerm(self):

        localctx = LLVMParser.BrTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_brTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2592
            self.match(LLVMParser.BR)
            self.state = 2593
            self.labelType()
            self.state = 2594
            self.localIdent()
            self.state = 2595
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondBrTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BR(self):
            return self.getToken(LLVMParser.BR, 0)

        def intType(self):
            return self.getTypedRuleContext(LLVMParser.IntTypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMParser.COMMA)
            else:
                return self.getToken(LLVMParser.COMMA, i)

        def labelType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LabelTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LabelTypeContext,i)


        def localIdent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LocalIdentContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LocalIdentContext,i)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_condBrTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondBrTerm" ):
                listener.enterCondBrTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondBrTerm" ):
                listener.exitCondBrTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondBrTerm" ):
                return visitor.visitCondBrTerm(self)
            else:
                return visitor.visitChildren(self)




    def condBrTerm(self):

        localctx = LLVMParser.CondBrTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_condBrTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2597
            self.match(LLVMParser.BR)
            self.state = 2598
            self.intType()
            self.state = 2599
            self.value()
            self.state = 2600
            self.match(LLVMParser.COMMA)
            self.state = 2601
            self.labelType()
            self.state = 2602
            self.localIdent()
            self.state = 2603
            self.match(LLVMParser.COMMA)
            self.state = 2604
            self.labelType()
            self.state = 2605
            self.localIdent()
            self.state = 2606
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(LLVMParser.SWITCH, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def labelType(self):
            return self.getTypedRuleContext(LLVMParser.LabelTypeContext,0)


        def localIdent(self):
            return self.getTypedRuleContext(LLVMParser.LocalIdentContext,0)


        def LBRACK(self):
            return self.getToken(LLVMParser.LBRACK, 0)

        def cases(self):
            return self.getTypedRuleContext(LLVMParser.CasesContext,0)


        def RBRACK(self):
            return self.getToken(LLVMParser.RBRACK, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_switchTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchTerm" ):
                listener.enterSwitchTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchTerm" ):
                listener.exitSwitchTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchTerm" ):
                return visitor.visitSwitchTerm(self)
            else:
                return visitor.visitChildren(self)




    def switchTerm(self):

        localctx = LLVMParser.SwitchTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_switchTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2608
            self.match(LLVMParser.SWITCH)
            self.state = 2609
            self.llvmType(0)
            self.state = 2610
            self.value()
            self.state = 2611
            self.match(LLVMParser.COMMA)
            self.state = 2612
            self.labelType()
            self.state = 2613
            self.localIdent()
            self.state = 2614
            self.match(LLVMParser.LBRACK)
            self.state = 2615
            self.cases()
            self.state = 2616
            self.match(LLVMParser.RBRACK)
            self.state = 2617
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseList(self):
            return self.getTypedRuleContext(LLVMParser.CaseListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_cases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCases" ):
                listener.enterCases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCases" ):
                listener.exitCases(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCases" ):
                return visitor.visitCases(self)
            else:
                return visitor.visitChildren(self)




    def cases(self):

        localctx = LLVMParser.CasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_cases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LLVMParser.LT) | (1 << LLVMParser.LBRACK) | (1 << LLVMParser.LBRACE))) != 0) or ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (LLVMParser.DOUBLE - 126)) | (1 << (LLVMParser.FLOAT - 126)) | (1 << (LLVMParser.FP128 - 126)) | (1 << (LLVMParser.HALF - 126)))) != 0) or _la==LLVMParser.LABEL or _la==LLVMParser.METADATA or _la==LLVMParser.PPC_FP128 or ((((_la - 351)) & ~0x3f) == 0 and ((1 << (_la - 351)) & ((1 << (LLVMParser.TOKEN - 351)) | (1 << (LLVMParser.VOID - 351)) | (1 << (LLVMParser.X86_FP80 - 351)) | (1 << (LLVMParser.X86_MMX - 351)))) != 0) or _la==LLVMParser.INT_TYPE or _la==LLVMParser.LOCAL_IDENT:
                self.state = 2619
                self.caseList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def llvmCase(self):
            return self.getTypedRuleContext(LLVMParser.LlvmCaseContext,0)


        def caseList(self):
            return self.getTypedRuleContext(LLVMParser.CaseListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_caseList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseList" ):
                listener.enterCaseList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseList" ):
                listener.exitCaseList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseList" ):
                return visitor.visitCaseList(self)
            else:
                return visitor.visitChildren(self)



    def caseList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.CaseListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 412
        self.enterRecursionRule(localctx, 412, self.RULE_caseList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2623
            self.llvmCase()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2629
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.CaseListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_caseList)
                    self.state = 2625
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2626
                    self.llvmCase() 
                self.state = 2631
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LlvmCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def intConst(self):
            return self.getTypedRuleContext(LLVMParser.IntConstContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def labelType(self):
            return self.getTypedRuleContext(LLVMParser.LabelTypeContext,0)


        def localIdent(self):
            return self.getTypedRuleContext(LLVMParser.LocalIdentContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_llvmCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLlvmCase" ):
                listener.enterLlvmCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLlvmCase" ):
                listener.exitLlvmCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLlvmCase" ):
                return visitor.visitLlvmCase(self)
            else:
                return visitor.visitChildren(self)




    def llvmCase(self):

        localctx = LLVMParser.LlvmCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_llvmCase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2632
            self.llvmType(0)
            self.state = 2633
            self.intConst()
            self.state = 2634
            self.match(LLVMParser.COMMA)
            self.state = 2635
            self.labelType()
            self.state = 2636
            self.localIdent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndirectBrTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDIRECTBR(self):
            return self.getToken(LLVMParser.INDIRECTBR, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def LBRACK(self):
            return self.getToken(LLVMParser.LBRACK, 0)

        def labelList(self):
            return self.getTypedRuleContext(LLVMParser.LabelListContext,0)


        def RBRACK(self):
            return self.getToken(LLVMParser.RBRACK, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_indirectBrTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndirectBrTerm" ):
                listener.enterIndirectBrTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndirectBrTerm" ):
                listener.exitIndirectBrTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndirectBrTerm" ):
                return visitor.visitIndirectBrTerm(self)
            else:
                return visitor.visitChildren(self)




    def indirectBrTerm(self):

        localctx = LLVMParser.IndirectBrTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_indirectBrTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2638
            self.match(LLVMParser.INDIRECTBR)
            self.state = 2639
            self.llvmType(0)
            self.state = 2640
            self.value()
            self.state = 2641
            self.match(LLVMParser.COMMA)
            self.state = 2642
            self.match(LLVMParser.LBRACK)
            self.state = 2643
            self.labelList(0)
            self.state = 2644
            self.match(LLVMParser.RBRACK)
            self.state = 2645
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label(self):
            return self.getTypedRuleContext(LLVMParser.LabelContext,0)


        def labelList(self):
            return self.getTypedRuleContext(LLVMParser.LabelListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_labelList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelList" ):
                listener.enterLabelList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelList" ):
                listener.exitLabelList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelList" ):
                return visitor.visitLabelList(self)
            else:
                return visitor.visitChildren(self)



    def labelList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.LabelListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 418
        self.enterRecursionRule(localctx, 418, self.RULE_labelList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2648
            self.label()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2655
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.LabelListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_labelList)
                    self.state = 2650
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2651
                    self.match(LLVMParser.COMMA)
                    self.state = 2652
                    self.label() 
                self.state = 2657
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelType(self):
            return self.getTypedRuleContext(LLVMParser.LabelTypeContext,0)


        def localIdent(self):
            return self.getTypedRuleContext(LLVMParser.LocalIdentContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = LLVMParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2658
            self.labelType()
            self.state = 2659
            self.localIdent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InvokeTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INVOKE(self):
            return self.getToken(LLVMParser.INVOKE, 0)

        def optCallingConv(self):
            return self.getTypedRuleContext(LLVMParser.OptCallingConvContext,0)


        def returnAttrs(self):
            return self.getTypedRuleContext(LLVMParser.ReturnAttrsContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def args(self):
            return self.getTypedRuleContext(LLVMParser.ArgsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def funcAttrs(self):
            return self.getTypedRuleContext(LLVMParser.FuncAttrsContext,0)


        def operandBundles(self):
            return self.getTypedRuleContext(LLVMParser.OperandBundlesContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def labelType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LabelTypeContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LabelTypeContext,i)


        def localIdent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.LocalIdentContext)
            else:
                return self.getTypedRuleContext(LLVMParser.LocalIdentContext,i)


        def UNWIND(self):
            return self.getToken(LLVMParser.UNWIND, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_invokeTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvokeTerm" ):
                listener.enterInvokeTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvokeTerm" ):
                listener.exitInvokeTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvokeTerm" ):
                return visitor.visitInvokeTerm(self)
            else:
                return visitor.visitChildren(self)




    def invokeTerm(self):

        localctx = LLVMParser.InvokeTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_invokeTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2661
            self.match(LLVMParser.INVOKE)
            self.state = 2662
            self.optCallingConv()
            self.state = 2663
            self.returnAttrs()
            self.state = 2664
            self.llvmType(0)
            self.state = 2665
            self.value()
            self.state = 2666
            self.match(LLVMParser.LPAREN)
            self.state = 2667
            self.args()
            self.state = 2668
            self.match(LLVMParser.RPAREN)
            self.state = 2669
            self.funcAttrs()
            self.state = 2670
            self.operandBundles()
            self.state = 2671
            self.match(LLVMParser.TO)
            self.state = 2672
            self.labelType()
            self.state = 2673
            self.localIdent()
            self.state = 2674
            self.match(LLVMParser.UNWIND)
            self.state = 2675
            self.labelType()
            self.state = 2676
            self.localIdent()
            self.state = 2677
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResumeTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESUME(self):
            return self.getToken(LLVMParser.RESUME, 0)

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_resumeTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResumeTerm" ):
                listener.enterResumeTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResumeTerm" ):
                listener.exitResumeTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResumeTerm" ):
                return visitor.visitResumeTerm(self)
            else:
                return visitor.visitChildren(self)




    def resumeTerm(self):

        localctx = LLVMParser.ResumeTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_resumeTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2679
            self.match(LLVMParser.RESUME)
            self.state = 2680
            self.llvmType(0)
            self.state = 2681
            self.value()
            self.state = 2682
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchSwitchTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCHSWITCH(self):
            return self.getToken(LLVMParser.CATCHSWITCH, 0)

        def WITHIN(self):
            return self.getToken(LLVMParser.WITHIN, 0)

        def exceptionScope(self):
            return self.getTypedRuleContext(LLVMParser.ExceptionScopeContext,0)


        def LBRACK(self):
            return self.getToken(LLVMParser.LBRACK, 0)

        def labelList(self):
            return self.getTypedRuleContext(LLVMParser.LabelListContext,0)


        def RBRACK(self):
            return self.getToken(LLVMParser.RBRACK, 0)

        def UNWIND(self):
            return self.getToken(LLVMParser.UNWIND, 0)

        def unwindTarget(self):
            return self.getTypedRuleContext(LLVMParser.UnwindTargetContext,0)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_catchSwitchTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchSwitchTerm" ):
                listener.enterCatchSwitchTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchSwitchTerm" ):
                listener.exitCatchSwitchTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchSwitchTerm" ):
                return visitor.visitCatchSwitchTerm(self)
            else:
                return visitor.visitChildren(self)




    def catchSwitchTerm(self):

        localctx = LLVMParser.CatchSwitchTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_catchSwitchTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2684
            self.match(LLVMParser.CATCHSWITCH)
            self.state = 2685
            self.match(LLVMParser.WITHIN)
            self.state = 2686
            self.exceptionScope()
            self.state = 2687
            self.match(LLVMParser.LBRACK)
            self.state = 2688
            self.labelList(0)
            self.state = 2689
            self.match(LLVMParser.RBRACK)
            self.state = 2690
            self.match(LLVMParser.UNWIND)
            self.state = 2691
            self.unwindTarget()
            self.state = 2692
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchRetTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCHRET(self):
            return self.getToken(LLVMParser.CATCHRET, 0)

        def FROM(self):
            return self.getToken(LLVMParser.FROM, 0)

        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def labelType(self):
            return self.getTypedRuleContext(LLVMParser.LabelTypeContext,0)


        def localIdent(self):
            return self.getTypedRuleContext(LLVMParser.LocalIdentContext,0)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_catchRetTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchRetTerm" ):
                listener.enterCatchRetTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchRetTerm" ):
                listener.exitCatchRetTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchRetTerm" ):
                return visitor.visitCatchRetTerm(self)
            else:
                return visitor.visitChildren(self)




    def catchRetTerm(self):

        localctx = LLVMParser.CatchRetTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_catchRetTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2694
            self.match(LLVMParser.CATCHRET)
            self.state = 2695
            self.match(LLVMParser.FROM)
            self.state = 2696
            self.value()
            self.state = 2697
            self.match(LLVMParser.TO)
            self.state = 2698
            self.labelType()
            self.state = 2699
            self.localIdent()
            self.state = 2700
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CleanupRetTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLEANUPRET(self):
            return self.getToken(LLVMParser.CLEANUPRET, 0)

        def FROM(self):
            return self.getToken(LLVMParser.FROM, 0)

        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def UNWIND(self):
            return self.getToken(LLVMParser.UNWIND, 0)

        def unwindTarget(self):
            return self.getTypedRuleContext(LLVMParser.UnwindTargetContext,0)


        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_cleanupRetTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCleanupRetTerm" ):
                listener.enterCleanupRetTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCleanupRetTerm" ):
                listener.exitCleanupRetTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCleanupRetTerm" ):
                return visitor.visitCleanupRetTerm(self)
            else:
                return visitor.visitChildren(self)




    def cleanupRetTerm(self):

        localctx = LLVMParser.CleanupRetTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_cleanupRetTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2702
            self.match(LLVMParser.CLEANUPRET)
            self.state = 2703
            self.match(LLVMParser.FROM)
            self.state = 2704
            self.value()
            self.state = 2705
            self.match(LLVMParser.UNWIND)
            self.state = 2706
            self.unwindTarget()
            self.state = 2707
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnreachableTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNREACHABLE(self):
            return self.getToken(LLVMParser.UNREACHABLE, 0)

        def optCommaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.OptCommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_unreachableTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnreachableTerm" ):
                listener.enterUnreachableTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnreachableTerm" ):
                listener.exitUnreachableTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnreachableTerm" ):
                return visitor.visitUnreachableTerm(self)
            else:
                return visitor.visitChildren(self)




    def unreachableTerm(self):

        localctx = LLVMParser.UnreachableTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_unreachableTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2709
            self.match(LLVMParser.UNREACHABLE)
            self.state = 2710
            self.optCommaSepMetadataAttachmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnwindTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(LLVMParser.TO, 0)

        def CALLER(self):
            return self.getToken(LLVMParser.CALLER, 0)

        def labelType(self):
            return self.getTypedRuleContext(LLVMParser.LabelTypeContext,0)


        def localIdent(self):
            return self.getTypedRuleContext(LLVMParser.LocalIdentContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_unwindTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnwindTarget" ):
                listener.enterUnwindTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnwindTarget" ):
                listener.exitUnwindTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnwindTarget" ):
                return visitor.visitUnwindTarget(self)
            else:
                return visitor.visitChildren(self)




    def unwindTarget(self):

        localctx = LLVMParser.UnwindTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_unwindTarget)
        try:
            self.state = 2717
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.TO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2712
                self.match(LLVMParser.TO)
                self.state = 2713
                self.match(LLVMParser.CALLER)
                pass
            elif token in [LLVMParser.LABEL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2714
                self.labelType()
                self.state = 2715
                self.localIdent()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MdTupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANG(self):
            return self.getToken(LLVMParser.BANG, 0)

        def mdFields(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldsContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_mdTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMdTuple" ):
                listener.enterMdTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMdTuple" ):
                listener.exitMdTuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMdTuple" ):
                return visitor.visitMdTuple(self)
            else:
                return visitor.visitChildren(self)




    def mdTuple(self):

        localctx = LLVMParser.MdTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_mdTuple)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2719
            self.match(LLVMParser.BANG)
            self.state = 2720
            self.mdFields()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MdFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(LLVMParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(LLVMParser.RBRACE, 0)

        def mdFieldList(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_mdFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMdFields" ):
                listener.enterMdFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMdFields" ):
                listener.exitMdFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMdFields" ):
                return visitor.visitMdFields(self)
            else:
                return visitor.visitChildren(self)




    def mdFields(self):

        localctx = LLVMParser.MdFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_mdFields)
        try:
            self.state = 2728
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2722
                self.match(LLVMParser.LBRACE)
                self.state = 2723
                self.match(LLVMParser.RBRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2724
                self.match(LLVMParser.LBRACE)
                self.state = 2725
                self.mdFieldList(0)
                self.state = 2726
                self.match(LLVMParser.RBRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MdFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def mdFieldList(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_mdFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMdFieldList" ):
                listener.enterMdFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMdFieldList" ):
                listener.exitMdFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMdFieldList" ):
                return visitor.visitMdFieldList(self)
            else:
                return visitor.visitChildren(self)



    def mdFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.MdFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 440
        self.enterRecursionRule(localctx, 440, self.RULE_mdFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2731
            self.mdField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2738
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.MdFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mdFieldList)
                    self.state = 2733
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2734
                    self.match(LLVMParser.COMMA)
                    self.state = 2735
                    self.mdField() 
                self.state = 2740
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MdFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(LLVMParser.NULL, 0)

        def metadata(self):
            return self.getTypedRuleContext(LLVMParser.MetadataContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_mdField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMdField" ):
                listener.enterMdField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMdField" ):
                listener.exitMdField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMdField" ):
                return visitor.visitMdField(self)
            else:
                return visitor.visitChildren(self)




    def mdField(self):

        localctx = LLVMParser.MdFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_mdField)
        try:
            self.state = 2743
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.NULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2741
                self.match(LLVMParser.NULL)
                pass
            elif token in [LLVMParser.LT, LLVMParser.BANG, LLVMParser.LBRACK, LLVMParser.LBRACE, LLVMParser.NOTDIBASICTYPE, LLVMParser.NOTDICOMPILEUNIT, LLVMParser.NOTDICOMPOSITETYPE, LLVMParser.NOTDIDERIVEDTYPE, LLVMParser.NOTDIENUMERATOR, LLVMParser.NOTDIEXPRESSION, LLVMParser.NOTDIFILE, LLVMParser.NOTDIGLOBALVARIABLE, LLVMParser.NOTDIGLOBALVARIABLEEXPRESSION, LLVMParser.NOTDIIMPORTEDENTITY, LLVMParser.NOTDILEXICALBLOCK, LLVMParser.NOTDILEXICALBLOCKFILE, LLVMParser.NOTDILOCALVARIABLE, LLVMParser.NOTDILOCATION, LLVMParser.NOTDIMACRO, LLVMParser.NOTDIMACROFILE, LLVMParser.NOTDIMODULE, LLVMParser.NOTDINAMESPACE, LLVMParser.NOTDIOBJCPROPERTY, LLVMParser.NOTDISUBPROGRAM, LLVMParser.NOTDISUBRANGE, LLVMParser.NOTDISUBROUTINETYPE, LLVMParser.NOTDITEMPLATETYPEPARAMETER, LLVMParser.NOTDITEMPLATEVALUEPARAMETER, LLVMParser.DOUBLE, LLVMParser.FLOAT, LLVMParser.FP128, LLVMParser.NOTGENERICDINODE, LLVMParser.HALF, LLVMParser.LABEL, LLVMParser.METADATA, LLVMParser.PPC_FP128, LLVMParser.TOKEN, LLVMParser.VOID, LLVMParser.X86_FP80, LLVMParser.X86_MMX, LLVMParser.METADATA_ID, LLVMParser.INT_TYPE, LLVMParser.LOCAL_IDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2742
                self.metadata()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def mdString(self):
            return self.getTypedRuleContext(LLVMParser.MdStringContext,0)


        def mdTuple(self):
            return self.getTypedRuleContext(LLVMParser.MdTupleContext,0)


        def metadataID(self):
            return self.getTypedRuleContext(LLVMParser.MetadataIDContext,0)


        def specializedMDNode(self):
            return self.getTypedRuleContext(LLVMParser.SpecializedMDNodeContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_metadata

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadata" ):
                listener.enterMetadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadata" ):
                listener.exitMetadata(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetadata" ):
                return visitor.visitMetadata(self)
            else:
                return visitor.visitChildren(self)




    def metadata(self):

        localctx = LLVMParser.MetadataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_metadata)
        try:
            self.state = 2752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2745
                self.llvmType(0)
                self.state = 2746
                self.value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2748
                self.mdString()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2749
                self.mdTuple()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2750
                self.metadataID()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2751
                self.specializedMDNode()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MdStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANG(self):
            return self.getToken(LLVMParser.BANG, 0)

        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_mdString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMdString" ):
                listener.enterMdString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMdString" ):
                listener.exitMdString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMdString" ):
                return visitor.visitMdString(self)
            else:
                return visitor.visitChildren(self)




    def mdString(self):

        localctx = LLVMParser.MdStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_mdString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2754
            self.match(LLVMParser.BANG)
            self.state = 2755
            self.stringLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataAttachmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadataName(self):
            return self.getTypedRuleContext(LLVMParser.MetadataNameContext,0)


        def mdNode(self):
            return self.getTypedRuleContext(LLVMParser.MdNodeContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_metadataAttachment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadataAttachment" ):
                listener.enterMetadataAttachment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadataAttachment" ):
                listener.exitMetadataAttachment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetadataAttachment" ):
                return visitor.visitMetadataAttachment(self)
            else:
                return visitor.visitChildren(self)




    def metadataAttachment(self):

        localctx = LLVMParser.MetadataAttachmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_metadataAttachment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2757
            self.metadataName()
            self.state = 2758
            self.mdNode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MdNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdTuple(self):
            return self.getTypedRuleContext(LLVMParser.MdTupleContext,0)


        def metadataID(self):
            return self.getTypedRuleContext(LLVMParser.MetadataIDContext,0)


        def specializedMDNode(self):
            return self.getTypedRuleContext(LLVMParser.SpecializedMDNodeContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_mdNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMdNode" ):
                listener.enterMdNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMdNode" ):
                listener.exitMdNode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMdNode" ):
                return visitor.visitMdNode(self)
            else:
                return visitor.visitChildren(self)




    def mdNode(self):

        localctx = LLVMParser.MdNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_mdNode)
        try:
            self.state = 2763
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.BANG]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2760
                self.mdTuple()
                pass
            elif token in [LLVMParser.METADATA_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2761
                self.metadataID()
                pass
            elif token in [LLVMParser.NOTDIBASICTYPE, LLVMParser.NOTDICOMPILEUNIT, LLVMParser.NOTDICOMPOSITETYPE, LLVMParser.NOTDIDERIVEDTYPE, LLVMParser.NOTDIENUMERATOR, LLVMParser.NOTDIEXPRESSION, LLVMParser.NOTDIFILE, LLVMParser.NOTDIGLOBALVARIABLE, LLVMParser.NOTDIGLOBALVARIABLEEXPRESSION, LLVMParser.NOTDIIMPORTEDENTITY, LLVMParser.NOTDILEXICALBLOCK, LLVMParser.NOTDILEXICALBLOCKFILE, LLVMParser.NOTDILOCALVARIABLE, LLVMParser.NOTDILOCATION, LLVMParser.NOTDIMACRO, LLVMParser.NOTDIMACROFILE, LLVMParser.NOTDIMODULE, LLVMParser.NOTDINAMESPACE, LLVMParser.NOTDIOBJCPROPERTY, LLVMParser.NOTDISUBPROGRAM, LLVMParser.NOTDISUBRANGE, LLVMParser.NOTDISUBROUTINETYPE, LLVMParser.NOTDITEMPLATETYPEPARAMETER, LLVMParser.NOTDITEMPLATEVALUEPARAMETER, LLVMParser.NOTGENERICDINODE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2762
                self.specializedMDNode()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataAttachmentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.MetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_metadataAttachments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadataAttachments" ):
                listener.enterMetadataAttachments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadataAttachments" ):
                listener.exitMetadataAttachments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetadataAttachments" ):
                return visitor.visitMetadataAttachments(self)
            else:
                return visitor.visitChildren(self)




    def metadataAttachments(self):

        localctx = LLVMParser.MetadataAttachmentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_metadataAttachments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.METADATA_NAME:
                self.state = 2765
                self.metadataAttachmentList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataAttachmentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadataAttachment(self):
            return self.getTypedRuleContext(LLVMParser.MetadataAttachmentContext,0)


        def metadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.MetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_metadataAttachmentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadataAttachmentList" ):
                listener.enterMetadataAttachmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadataAttachmentList" ):
                listener.exitMetadataAttachmentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetadataAttachmentList" ):
                return visitor.visitMetadataAttachmentList(self)
            else:
                return visitor.visitChildren(self)



    def metadataAttachmentList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.MetadataAttachmentListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 454
        self.enterRecursionRule(localctx, 454, self.RULE_metadataAttachmentList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2769
            self.metadataAttachment()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2775
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.MetadataAttachmentListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_metadataAttachmentList)
                    self.state = 2771
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2772
                    self.metadataAttachment() 
                self.state = 2777
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class OptCommaSepMetadataAttachmentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def commaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.CommaSepMetadataAttachmentListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_optCommaSepMetadataAttachmentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptCommaSepMetadataAttachmentList" ):
                listener.enterOptCommaSepMetadataAttachmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptCommaSepMetadataAttachmentList" ):
                listener.exitOptCommaSepMetadataAttachmentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptCommaSepMetadataAttachmentList" ):
                return visitor.visitOptCommaSepMetadataAttachmentList(self)
            else:
                return visitor.visitChildren(self)




    def optCommaSepMetadataAttachmentList(self):

        localctx = LLVMParser.OptCommaSepMetadataAttachmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_optCommaSepMetadataAttachmentList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 2778
                self.match(LLVMParser.COMMA)
                self.state = 2779
                self.commaSepMetadataAttachmentList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommaSepMetadataAttachmentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadataAttachment(self):
            return self.getTypedRuleContext(LLVMParser.MetadataAttachmentContext,0)


        def commaSepMetadataAttachmentList(self):
            return self.getTypedRuleContext(LLVMParser.CommaSepMetadataAttachmentListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_commaSepMetadataAttachmentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommaSepMetadataAttachmentList" ):
                listener.enterCommaSepMetadataAttachmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommaSepMetadataAttachmentList" ):
                listener.exitCommaSepMetadataAttachmentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommaSepMetadataAttachmentList" ):
                return visitor.visitCommaSepMetadataAttachmentList(self)
            else:
                return visitor.visitChildren(self)



    def commaSepMetadataAttachmentList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.CommaSepMetadataAttachmentListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 458
        self.enterRecursionRule(localctx, 458, self.RULE_commaSepMetadataAttachmentList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2783
            self.metadataAttachment()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2790
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.CommaSepMetadataAttachmentListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_commaSepMetadataAttachmentList)
                    self.state = 2785
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2786
                    self.match(LLVMParser.COMMA)
                    self.state = 2787
                    self.metadataAttachment() 
                self.state = 2792
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SpecializedMDNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diCompileUnit(self):
            return self.getTypedRuleContext(LLVMParser.DiCompileUnitContext,0)


        def diFile(self):
            return self.getTypedRuleContext(LLVMParser.DiFileContext,0)


        def diBasicType(self):
            return self.getTypedRuleContext(LLVMParser.DiBasicTypeContext,0)


        def diSubroutineType(self):
            return self.getTypedRuleContext(LLVMParser.DiSubroutineTypeContext,0)


        def diDerivedType(self):
            return self.getTypedRuleContext(LLVMParser.DiDerivedTypeContext,0)


        def diCompositeType(self):
            return self.getTypedRuleContext(LLVMParser.DiCompositeTypeContext,0)


        def diSubrange(self):
            return self.getTypedRuleContext(LLVMParser.DiSubrangeContext,0)


        def diEnumerator(self):
            return self.getTypedRuleContext(LLVMParser.DiEnumeratorContext,0)


        def diTemplateTypeParameter(self):
            return self.getTypedRuleContext(LLVMParser.DiTemplateTypeParameterContext,0)


        def diTemplateValueParameter(self):
            return self.getTypedRuleContext(LLVMParser.DiTemplateValueParameterContext,0)


        def diModule(self):
            return self.getTypedRuleContext(LLVMParser.DiModuleContext,0)


        def diNamespace(self):
            return self.getTypedRuleContext(LLVMParser.DiNamespaceContext,0)


        def diGlobalVariable(self):
            return self.getTypedRuleContext(LLVMParser.DiGlobalVariableContext,0)


        def diSubprogram(self):
            return self.getTypedRuleContext(LLVMParser.DiSubprogramContext,0)


        def diLexicalBlock(self):
            return self.getTypedRuleContext(LLVMParser.DiLexicalBlockContext,0)


        def diLexicalBlockFile(self):
            return self.getTypedRuleContext(LLVMParser.DiLexicalBlockFileContext,0)


        def diLocation(self):
            return self.getTypedRuleContext(LLVMParser.DiLocationContext,0)


        def diLocalVariable(self):
            return self.getTypedRuleContext(LLVMParser.DiLocalVariableContext,0)


        def diExpression(self):
            return self.getTypedRuleContext(LLVMParser.DiExpressionContext,0)


        def diGlobalVariableExpression(self):
            return self.getTypedRuleContext(LLVMParser.DiGlobalVariableExpressionContext,0)


        def diObjCProperty(self):
            return self.getTypedRuleContext(LLVMParser.DiObjCPropertyContext,0)


        def diImportedEntity(self):
            return self.getTypedRuleContext(LLVMParser.DiImportedEntityContext,0)


        def diMacro(self):
            return self.getTypedRuleContext(LLVMParser.DiMacroContext,0)


        def diMacroFile(self):
            return self.getTypedRuleContext(LLVMParser.DiMacroFileContext,0)


        def genericDINode(self):
            return self.getTypedRuleContext(LLVMParser.GenericDINodeContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_specializedMDNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecializedMDNode" ):
                listener.enterSpecializedMDNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecializedMDNode" ):
                listener.exitSpecializedMDNode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecializedMDNode" ):
                return visitor.visitSpecializedMDNode(self)
            else:
                return visitor.visitChildren(self)




    def specializedMDNode(self):

        localctx = LLVMParser.SpecializedMDNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_specializedMDNode)
        try:
            self.state = 2818
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.NOTDICOMPILEUNIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2793
                self.diCompileUnit()
                pass
            elif token in [LLVMParser.NOTDIFILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2794
                self.diFile()
                pass
            elif token in [LLVMParser.NOTDIBASICTYPE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2795
                self.diBasicType()
                pass
            elif token in [LLVMParser.NOTDISUBROUTINETYPE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2796
                self.diSubroutineType()
                pass
            elif token in [LLVMParser.NOTDIDERIVEDTYPE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2797
                self.diDerivedType()
                pass
            elif token in [LLVMParser.NOTDICOMPOSITETYPE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2798
                self.diCompositeType()
                pass
            elif token in [LLVMParser.NOTDISUBRANGE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2799
                self.diSubrange()
                pass
            elif token in [LLVMParser.NOTDIENUMERATOR]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2800
                self.diEnumerator()
                pass
            elif token in [LLVMParser.NOTDITEMPLATETYPEPARAMETER]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2801
                self.diTemplateTypeParameter()
                pass
            elif token in [LLVMParser.NOTDITEMPLATEVALUEPARAMETER]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2802
                self.diTemplateValueParameter()
                pass
            elif token in [LLVMParser.NOTDIMODULE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2803
                self.diModule()
                pass
            elif token in [LLVMParser.NOTDINAMESPACE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2804
                self.diNamespace()
                pass
            elif token in [LLVMParser.NOTDIGLOBALVARIABLE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2805
                self.diGlobalVariable()
                pass
            elif token in [LLVMParser.NOTDISUBPROGRAM]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2806
                self.diSubprogram()
                pass
            elif token in [LLVMParser.NOTDILEXICALBLOCK]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2807
                self.diLexicalBlock()
                pass
            elif token in [LLVMParser.NOTDILEXICALBLOCKFILE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2808
                self.diLexicalBlockFile()
                pass
            elif token in [LLVMParser.NOTDILOCATION]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2809
                self.diLocation()
                pass
            elif token in [LLVMParser.NOTDILOCALVARIABLE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2810
                self.diLocalVariable()
                pass
            elif token in [LLVMParser.NOTDIEXPRESSION]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2811
                self.diExpression()
                pass
            elif token in [LLVMParser.NOTDIGLOBALVARIABLEEXPRESSION]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2812
                self.diGlobalVariableExpression()
                pass
            elif token in [LLVMParser.NOTDIOBJCPROPERTY]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2813
                self.diObjCProperty()
                pass
            elif token in [LLVMParser.NOTDIIMPORTEDENTITY]:
                self.enterOuterAlt(localctx, 22)
                self.state = 2814
                self.diImportedEntity()
                pass
            elif token in [LLVMParser.NOTDIMACRO]:
                self.enterOuterAlt(localctx, 23)
                self.state = 2815
                self.diMacro()
                pass
            elif token in [LLVMParser.NOTDIMACROFILE]:
                self.enterOuterAlt(localctx, 24)
                self.state = 2816
                self.diMacroFile()
                pass
            elif token in [LLVMParser.NOTGENERICDINODE]:
                self.enterOuterAlt(localctx, 25)
                self.state = 2817
                self.genericDINode()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiCompileUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDICOMPILEUNIT(self):
            return self.getToken(LLVMParser.NOTDICOMPILEUNIT, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diCompileUnitFields(self):
            return self.getTypedRuleContext(LLVMParser.DiCompileUnitFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diCompileUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiCompileUnit" ):
                listener.enterDiCompileUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiCompileUnit" ):
                listener.exitDiCompileUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiCompileUnit" ):
                return visitor.visitDiCompileUnit(self)
            else:
                return visitor.visitChildren(self)




    def diCompileUnit(self):

        localctx = LLVMParser.DiCompileUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_diCompileUnit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2820
            self.match(LLVMParser.NOTDICOMPILEUNIT)
            self.state = 2821
            self.match(LLVMParser.LPAREN)
            self.state = 2822
            self.diCompileUnitFields()
            self.state = 2823
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiCompileUnitFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diCompileUnitFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiCompileUnitFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diCompileUnitFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiCompileUnitFields" ):
                listener.enterDiCompileUnitFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiCompileUnitFields" ):
                listener.exitDiCompileUnitFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiCompileUnitFields" ):
                return visitor.visitDiCompileUnitFields(self)
            else:
                return visitor.visitChildren(self)




    def diCompileUnitFields(self):

        localctx = LLVMParser.DiCompileUnitFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_diCompileUnitFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (LLVMParser.DEBUGINFOFORPROFILINGCOLON - 90)) | (1 << (LLVMParser.DWOIDCOLON - 90)) | (1 << (LLVMParser.EMISSIONKINDCOLON - 90)) | (1 << (LLVMParser.ENUMSCOLON - 90)))) != 0) or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (LLVMParser.FILECOLON - 154)) | (1 << (LLVMParser.FLAGSCOLON - 154)) | (1 << (LLVMParser.GLOBALSCOLON - 154)) | (1 << (LLVMParser.GNUPUBNAMESCOLON - 154)) | (1 << (LLVMParser.IMPORTSCOLON - 154)) | (1 << (LLVMParser.ISOPTIMIZEDCOLON - 154)) | (1 << (LLVMParser.LANGUAGECOLON - 154)))) != 0) or _la==LLVMParser.MACROSCOLON or _la==LLVMParser.PRODUCERCOLON or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (LLVMParser.RETAINEDTYPESCOLON - 295)) | (1 << (LLVMParser.RUNTIMEVERSIONCOLON - 295)) | (1 << (LLVMParser.SPLITDEBUGFILENAMECOLON - 295)) | (1 << (LLVMParser.SPLITDEBUGINLININGCOLON - 295)))) != 0):
                self.state = 2825
                self.diCompileUnitFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiCompileUnitFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diCompileUnitField(self):
            return self.getTypedRuleContext(LLVMParser.DiCompileUnitFieldContext,0)


        def diCompileUnitFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiCompileUnitFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diCompileUnitFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiCompileUnitFieldList" ):
                listener.enterDiCompileUnitFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiCompileUnitFieldList" ):
                listener.exitDiCompileUnitFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiCompileUnitFieldList" ):
                return visitor.visitDiCompileUnitFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diCompileUnitFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiCompileUnitFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 466
        self.enterRecursionRule(localctx, 466, self.RULE_diCompileUnitFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2829
            self.diCompileUnitField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2836
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiCompileUnitFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diCompileUnitFieldList)
                    self.state = 2831
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2832
                    self.match(LLVMParser.COMMA)
                    self.state = 2833
                    self.diCompileUnitField() 
                self.state = 2838
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiCompileUnitFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGECOLON(self):
            return self.getToken(LLVMParser.LANGUAGECOLON, 0)

        def dwarfLang(self):
            return self.getTypedRuleContext(LLVMParser.DwarfLangContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMParser.FileFieldContext,0)


        def PRODUCERCOLON(self):
            return self.getToken(LLVMParser.PRODUCERCOLON, 0)

        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def isOptimizedField(self):
            return self.getTypedRuleContext(LLVMParser.IsOptimizedFieldContext,0)


        def FLAGSCOLON(self):
            return self.getToken(LLVMParser.FLAGSCOLON, 0)

        def RUNTIMEVERSIONCOLON(self):
            return self.getToken(LLVMParser.RUNTIMEVERSIONCOLON, 0)

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def SPLITDEBUGFILENAMECOLON(self):
            return self.getToken(LLVMParser.SPLITDEBUGFILENAMECOLON, 0)

        def EMISSIONKINDCOLON(self):
            return self.getToken(LLVMParser.EMISSIONKINDCOLON, 0)

        def emissionKind(self):
            return self.getTypedRuleContext(LLVMParser.EmissionKindContext,0)


        def ENUMSCOLON(self):
            return self.getToken(LLVMParser.ENUMSCOLON, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def RETAINEDTYPESCOLON(self):
            return self.getToken(LLVMParser.RETAINEDTYPESCOLON, 0)

        def GLOBALSCOLON(self):
            return self.getToken(LLVMParser.GLOBALSCOLON, 0)

        def IMPORTSCOLON(self):
            return self.getToken(LLVMParser.IMPORTSCOLON, 0)

        def MACROSCOLON(self):
            return self.getToken(LLVMParser.MACROSCOLON, 0)

        def DWOIDCOLON(self):
            return self.getToken(LLVMParser.DWOIDCOLON, 0)

        def SPLITDEBUGINLININGCOLON(self):
            return self.getToken(LLVMParser.SPLITDEBUGINLININGCOLON, 0)

        def boolLit(self):
            return self.getTypedRuleContext(LLVMParser.BoolLitContext,0)


        def DEBUGINFOFORPROFILINGCOLON(self):
            return self.getToken(LLVMParser.DEBUGINFOFORPROFILINGCOLON, 0)

        def GNUPUBNAMESCOLON(self):
            return self.getToken(LLVMParser.GNUPUBNAMESCOLON, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diCompileUnitField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiCompileUnitField" ):
                listener.enterDiCompileUnitField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiCompileUnitField" ):
                listener.exitDiCompileUnitField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiCompileUnitField" ):
                return visitor.visitDiCompileUnitField(self)
            else:
                return visitor.visitChildren(self)




    def diCompileUnitField(self):

        localctx = LLVMParser.DiCompileUnitFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_diCompileUnitField)
        try:
            self.state = 2871
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.LANGUAGECOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2839
                self.match(LLVMParser.LANGUAGECOLON)
                self.state = 2840
                self.dwarfLang()
                pass
            elif token in [LLVMParser.FILECOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2841
                self.fileField()
                pass
            elif token in [LLVMParser.PRODUCERCOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2842
                self.match(LLVMParser.PRODUCERCOLON)
                self.state = 2843
                self.stringLit()
                pass
            elif token in [LLVMParser.ISOPTIMIZEDCOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2844
                self.isOptimizedField()
                pass
            elif token in [LLVMParser.FLAGSCOLON]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2845
                self.match(LLVMParser.FLAGSCOLON)
                self.state = 2846
                self.stringLit()
                pass
            elif token in [LLVMParser.RUNTIMEVERSIONCOLON]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2847
                self.match(LLVMParser.RUNTIMEVERSIONCOLON)
                self.state = 2848
                self.intLit()
                pass
            elif token in [LLVMParser.SPLITDEBUGFILENAMECOLON]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2849
                self.match(LLVMParser.SPLITDEBUGFILENAMECOLON)
                self.state = 2850
                self.stringLit()
                pass
            elif token in [LLVMParser.EMISSIONKINDCOLON]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2851
                self.match(LLVMParser.EMISSIONKINDCOLON)
                self.state = 2852
                self.emissionKind()
                pass
            elif token in [LLVMParser.ENUMSCOLON]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2853
                self.match(LLVMParser.ENUMSCOLON)
                self.state = 2854
                self.mdField()
                pass
            elif token in [LLVMParser.RETAINEDTYPESCOLON]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2855
                self.match(LLVMParser.RETAINEDTYPESCOLON)
                self.state = 2856
                self.mdField()
                pass
            elif token in [LLVMParser.GLOBALSCOLON]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2857
                self.match(LLVMParser.GLOBALSCOLON)
                self.state = 2858
                self.mdField()
                pass
            elif token in [LLVMParser.IMPORTSCOLON]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2859
                self.match(LLVMParser.IMPORTSCOLON)
                self.state = 2860
                self.mdField()
                pass
            elif token in [LLVMParser.MACROSCOLON]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2861
                self.match(LLVMParser.MACROSCOLON)
                self.state = 2862
                self.mdField()
                pass
            elif token in [LLVMParser.DWOIDCOLON]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2863
                self.match(LLVMParser.DWOIDCOLON)
                self.state = 2864
                self.intLit()
                pass
            elif token in [LLVMParser.SPLITDEBUGINLININGCOLON]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2865
                self.match(LLVMParser.SPLITDEBUGINLININGCOLON)
                self.state = 2866
                self.boolLit()
                pass
            elif token in [LLVMParser.DEBUGINFOFORPROFILINGCOLON]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2867
                self.match(LLVMParser.DEBUGINFOFORPROFILINGCOLON)
                self.state = 2868
                self.boolLit()
                pass
            elif token in [LLVMParser.GNUPUBNAMESCOLON]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2869
                self.match(LLVMParser.GNUPUBNAMESCOLON)
                self.state = 2870
                self.boolLit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDIFILE(self):
            return self.getToken(LLVMParser.NOTDIFILE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diFileFields(self):
            return self.getTypedRuleContext(LLVMParser.DiFileFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiFile" ):
                listener.enterDiFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiFile" ):
                listener.exitDiFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiFile" ):
                return visitor.visitDiFile(self)
            else:
                return visitor.visitChildren(self)




    def diFile(self):

        localctx = LLVMParser.DiFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_diFile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2873
            self.match(LLVMParser.NOTDIFILE)
            self.state = 2874
            self.match(LLVMParser.LPAREN)
            self.state = 2875
            self.diFileFields()
            self.state = 2876
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiFileFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diFileFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiFileFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diFileFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiFileFields" ):
                listener.enterDiFileFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiFileFields" ):
                listener.exitDiFileFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiFileFields" ):
                return visitor.visitDiFileFields(self)
            else:
                return visitor.visitChildren(self)




    def diFileFields(self):

        localctx = LLVMParser.DiFileFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_diFileFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (LLVMParser.CHECKSUMCOLON - 71)) | (1 << (LLVMParser.CHECKSUMKINDCOLON - 71)) | (1 << (LLVMParser.DIRECTORYCOLON - 71)))) != 0) or _la==LLVMParser.FILENAMECOLON:
                self.state = 2878
                self.diFileFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiFileFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diFileField(self):
            return self.getTypedRuleContext(LLVMParser.DiFileFieldContext,0)


        def diFileFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiFileFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diFileFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiFileFieldList" ):
                listener.enterDiFileFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiFileFieldList" ):
                listener.exitDiFileFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiFileFieldList" ):
                return visitor.visitDiFileFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diFileFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiFileFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 474
        self.enterRecursionRule(localctx, 474, self.RULE_diFileFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2882
            self.diFileField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2889
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiFileFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diFileFieldList)
                    self.state = 2884
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2885
                    self.match(LLVMParser.COMMA)
                    self.state = 2886
                    self.diFileField() 
                self.state = 2891
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiFileFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILENAMECOLON(self):
            return self.getToken(LLVMParser.FILENAMECOLON, 0)

        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def DIRECTORYCOLON(self):
            return self.getToken(LLVMParser.DIRECTORYCOLON, 0)

        def CHECKSUMKINDCOLON(self):
            return self.getToken(LLVMParser.CHECKSUMKINDCOLON, 0)

        def checksumkind(self):
            return self.getTypedRuleContext(LLVMParser.ChecksumkindContext,0)


        def CHECKSUMCOLON(self):
            return self.getToken(LLVMParser.CHECKSUMCOLON, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diFileField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiFileField" ):
                listener.enterDiFileField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiFileField" ):
                listener.exitDiFileField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiFileField" ):
                return visitor.visitDiFileField(self)
            else:
                return visitor.visitChildren(self)




    def diFileField(self):

        localctx = LLVMParser.DiFileFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_diFileField)
        try:
            self.state = 2900
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.FILENAMECOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2892
                self.match(LLVMParser.FILENAMECOLON)
                self.state = 2893
                self.stringLit()
                pass
            elif token in [LLVMParser.DIRECTORYCOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2894
                self.match(LLVMParser.DIRECTORYCOLON)
                self.state = 2895
                self.stringLit()
                pass
            elif token in [LLVMParser.CHECKSUMKINDCOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2896
                self.match(LLVMParser.CHECKSUMKINDCOLON)
                self.state = 2897
                self.checksumkind()
                pass
            elif token in [LLVMParser.CHECKSUMCOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2898
                self.match(LLVMParser.CHECKSUMCOLON)
                self.state = 2899
                self.stringLit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiBasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDIBASICTYPE(self):
            return self.getToken(LLVMParser.NOTDIBASICTYPE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diBasicTypeFields(self):
            return self.getTypedRuleContext(LLVMParser.DiBasicTypeFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diBasicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiBasicType" ):
                listener.enterDiBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiBasicType" ):
                listener.exitDiBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiBasicType" ):
                return visitor.visitDiBasicType(self)
            else:
                return visitor.visitChildren(self)




    def diBasicType(self):

        localctx = LLVMParser.DiBasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_diBasicType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2902
            self.match(LLVMParser.NOTDIBASICTYPE)
            self.state = 2903
            self.match(LLVMParser.LPAREN)
            self.state = 2904
            self.diBasicTypeFields()
            self.state = 2905
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiBasicTypeFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diBasicTypeFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiBasicTypeFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diBasicTypeFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiBasicTypeFields" ):
                listener.enterDiBasicTypeFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiBasicTypeFields" ):
                listener.exitDiBasicTypeFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiBasicTypeFields" ):
                return visitor.visitDiBasicTypeFields(self)
            else:
                return visitor.visitChildren(self)




    def diBasicTypeFields(self):

        localctx = LLVMParser.DiBasicTypeFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_diBasicTypeFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.ALIGNCOLON or _la==LLVMParser.ENCODINGCOLON or _la==LLVMParser.NAMECOLON or _la==LLVMParser.SIZECOLON or _la==LLVMParser.TAGCOLON:
                self.state = 2907
                self.diBasicTypeFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiBasicTypeFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diBasicTypeField(self):
            return self.getTypedRuleContext(LLVMParser.DiBasicTypeFieldContext,0)


        def diBasicTypeFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiBasicTypeFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diBasicTypeFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiBasicTypeFieldList" ):
                listener.enterDiBasicTypeFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiBasicTypeFieldList" ):
                listener.exitDiBasicTypeFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiBasicTypeFieldList" ):
                return visitor.visitDiBasicTypeFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diBasicTypeFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiBasicTypeFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 482
        self.enterRecursionRule(localctx, 482, self.RULE_diBasicTypeFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2911
            self.diBasicTypeField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2918
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiBasicTypeFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diBasicTypeFieldList)
                    self.state = 2913
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2914
                    self.match(LLVMParser.COMMA)
                    self.state = 2915
                    self.diBasicTypeField() 
                self.state = 2920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiBasicTypeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tagField(self):
            return self.getTypedRuleContext(LLVMParser.TagFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMParser.NameFieldContext,0)


        def sizeField(self):
            return self.getTypedRuleContext(LLVMParser.SizeFieldContext,0)


        def alignField(self):
            return self.getTypedRuleContext(LLVMParser.AlignFieldContext,0)


        def ENCODINGCOLON(self):
            return self.getToken(LLVMParser.ENCODINGCOLON, 0)

        def dwarfAttEncoding(self):
            return self.getTypedRuleContext(LLVMParser.DwarfAttEncodingContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diBasicTypeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiBasicTypeField" ):
                listener.enterDiBasicTypeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiBasicTypeField" ):
                listener.exitDiBasicTypeField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiBasicTypeField" ):
                return visitor.visitDiBasicTypeField(self)
            else:
                return visitor.visitChildren(self)




    def diBasicTypeField(self):

        localctx = LLVMParser.DiBasicTypeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_diBasicTypeField)
        try:
            self.state = 2927
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.TAGCOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2921
                self.tagField()
                pass
            elif token in [LLVMParser.NAMECOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2922
                self.nameField()
                pass
            elif token in [LLVMParser.SIZECOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2923
                self.sizeField()
                pass
            elif token in [LLVMParser.ALIGNCOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2924
                self.alignField()
                pass
            elif token in [LLVMParser.ENCODINGCOLON]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2925
                self.match(LLVMParser.ENCODINGCOLON)
                self.state = 2926
                self.dwarfAttEncoding()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiSubroutineTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDISUBROUTINETYPE(self):
            return self.getToken(LLVMParser.NOTDISUBROUTINETYPE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diSubroutineTypeFields(self):
            return self.getTypedRuleContext(LLVMParser.DiSubroutineTypeFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diSubroutineType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubroutineType" ):
                listener.enterDiSubroutineType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubroutineType" ):
                listener.exitDiSubroutineType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiSubroutineType" ):
                return visitor.visitDiSubroutineType(self)
            else:
                return visitor.visitChildren(self)




    def diSubroutineType(self):

        localctx = LLVMParser.DiSubroutineTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_diSubroutineType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2929
            self.match(LLVMParser.NOTDISUBROUTINETYPE)
            self.state = 2930
            self.match(LLVMParser.LPAREN)
            self.state = 2931
            self.diSubroutineTypeFields()
            self.state = 2932
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiSubroutineTypeFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diSubroutineTypeFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiSubroutineTypeFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diSubroutineTypeFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubroutineTypeFields" ):
                listener.enterDiSubroutineTypeFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubroutineTypeFields" ):
                listener.exitDiSubroutineTypeFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiSubroutineTypeFields" ):
                return visitor.visitDiSubroutineTypeFields(self)
            else:
                return visitor.visitChildren(self)




    def diSubroutineTypeFields(self):

        localctx = LLVMParser.DiSubroutineTypeFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_diSubroutineTypeFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.CCCOLON or _la==LLVMParser.FLAGSCOLON or _la==LLVMParser.TYPESCOLON:
                self.state = 2934
                self.diSubroutineTypeFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiSubroutineTypeFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diSubroutineTypeField(self):
            return self.getTypedRuleContext(LLVMParser.DiSubroutineTypeFieldContext,0)


        def diSubroutineTypeFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiSubroutineTypeFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diSubroutineTypeFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubroutineTypeFieldList" ):
                listener.enterDiSubroutineTypeFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubroutineTypeFieldList" ):
                listener.exitDiSubroutineTypeFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiSubroutineTypeFieldList" ):
                return visitor.visitDiSubroutineTypeFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diSubroutineTypeFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiSubroutineTypeFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 490
        self.enterRecursionRule(localctx, 490, self.RULE_diSubroutineTypeFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2938
            self.diSubroutineTypeField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2945
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiSubroutineTypeFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diSubroutineTypeFieldList)
                    self.state = 2940
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2941
                    self.match(LLVMParser.COMMA)
                    self.state = 2942
                    self.diSubroutineTypeField() 
                self.state = 2947
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiSubroutineTypeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def flagsField(self):
            return self.getTypedRuleContext(LLVMParser.FlagsFieldContext,0)


        def CCCOLON(self):
            return self.getToken(LLVMParser.CCCOLON, 0)

        def dwarfCC(self):
            return self.getTypedRuleContext(LLVMParser.DwarfCCContext,0)


        def TYPESCOLON(self):
            return self.getToken(LLVMParser.TYPESCOLON, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diSubroutineTypeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubroutineTypeField" ):
                listener.enterDiSubroutineTypeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubroutineTypeField" ):
                listener.exitDiSubroutineTypeField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiSubroutineTypeField" ):
                return visitor.visitDiSubroutineTypeField(self)
            else:
                return visitor.visitChildren(self)




    def diSubroutineTypeField(self):

        localctx = LLVMParser.DiSubroutineTypeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_diSubroutineTypeField)
        try:
            self.state = 2953
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.FLAGSCOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2948
                self.flagsField()
                pass
            elif token in [LLVMParser.CCCOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2949
                self.match(LLVMParser.CCCOLON)
                self.state = 2950
                self.dwarfCC()
                pass
            elif token in [LLVMParser.TYPESCOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2951
                self.match(LLVMParser.TYPESCOLON)
                self.state = 2952
                self.mdField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiDerivedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDIDERIVEDTYPE(self):
            return self.getToken(LLVMParser.NOTDIDERIVEDTYPE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diDerivedTypeFields(self):
            return self.getTypedRuleContext(LLVMParser.DiDerivedTypeFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diDerivedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiDerivedType" ):
                listener.enterDiDerivedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiDerivedType" ):
                listener.exitDiDerivedType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiDerivedType" ):
                return visitor.visitDiDerivedType(self)
            else:
                return visitor.visitChildren(self)




    def diDerivedType(self):

        localctx = LLVMParser.DiDerivedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_diDerivedType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2955
            self.match(LLVMParser.NOTDIDERIVEDTYPE)
            self.state = 2956
            self.match(LLVMParser.LPAREN)
            self.state = 2957
            self.diDerivedTypeFields()
            self.state = 2958
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiDerivedTypeFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diDerivedTypeFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiDerivedTypeFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diDerivedTypeFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiDerivedTypeFields" ):
                listener.enterDiDerivedTypeFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiDerivedTypeFields" ):
                listener.exitDiDerivedTypeFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiDerivedTypeFields" ):
                return visitor.visitDiDerivedTypeFields(self)
            else:
                return visitor.visitChildren(self)




    def diDerivedTypeFields(self):

        localctx = LLVMParser.DiDerivedTypeFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_diDerivedTypeFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.ALIGNCOLON or _la==LLVMParser.BASETYPECOLON or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (LLVMParser.DWARFADDRESSSPACECOLON - 129)) | (1 << (LLVMParser.EXTRADATACOLON - 129)) | (1 << (LLVMParser.FILECOLON - 129)) | (1 << (LLVMParser.FLAGSCOLON - 129)))) != 0) or ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & ((1 << (LLVMParser.LINECOLON - 214)) | (1 << (LLVMParser.NAMECOLON - 214)) | (1 << (LLVMParser.OFFSETCOLON - 214)))) != 0) or ((((_la - 306)) & ~0x3f) == 0 and ((1 << (_la - 306)) & ((1 << (LLVMParser.SCOPECOLON - 306)) | (1 << (LLVMParser.SIZECOLON - 306)) | (1 << (LLVMParser.TAGCOLON - 306)))) != 0):
                self.state = 2960
                self.diDerivedTypeFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiDerivedTypeFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diDerivedTypeField(self):
            return self.getTypedRuleContext(LLVMParser.DiDerivedTypeFieldContext,0)


        def diDerivedTypeFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiDerivedTypeFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diDerivedTypeFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiDerivedTypeFieldList" ):
                listener.enterDiDerivedTypeFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiDerivedTypeFieldList" ):
                listener.exitDiDerivedTypeFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiDerivedTypeFieldList" ):
                return visitor.visitDiDerivedTypeFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diDerivedTypeFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiDerivedTypeFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 498
        self.enterRecursionRule(localctx, 498, self.RULE_diDerivedTypeFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2964
            self.diDerivedTypeField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2971
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiDerivedTypeFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diDerivedTypeFieldList)
                    self.state = 2966
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2967
                    self.match(LLVMParser.COMMA)
                    self.state = 2968
                    self.diDerivedTypeField() 
                self.state = 2973
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiDerivedTypeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tagField(self):
            return self.getTypedRuleContext(LLVMParser.TagFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMParser.NameFieldContext,0)


        def scopeField(self):
            return self.getTypedRuleContext(LLVMParser.ScopeFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMParser.LineFieldContext,0)


        def baseTypeField(self):
            return self.getTypedRuleContext(LLVMParser.BaseTypeFieldContext,0)


        def sizeField(self):
            return self.getTypedRuleContext(LLVMParser.SizeFieldContext,0)


        def alignField(self):
            return self.getTypedRuleContext(LLVMParser.AlignFieldContext,0)


        def offsetField(self):
            return self.getTypedRuleContext(LLVMParser.OffsetFieldContext,0)


        def flagsField(self):
            return self.getTypedRuleContext(LLVMParser.FlagsFieldContext,0)


        def EXTRADATACOLON(self):
            return self.getToken(LLVMParser.EXTRADATACOLON, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def DWARFADDRESSSPACECOLON(self):
            return self.getToken(LLVMParser.DWARFADDRESSSPACECOLON, 0)

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diDerivedTypeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiDerivedTypeField" ):
                listener.enterDiDerivedTypeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiDerivedTypeField" ):
                listener.exitDiDerivedTypeField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiDerivedTypeField" ):
                return visitor.visitDiDerivedTypeField(self)
            else:
                return visitor.visitChildren(self)




    def diDerivedTypeField(self):

        localctx = LLVMParser.DiDerivedTypeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_diDerivedTypeField)
        try:
            self.state = 2988
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.TAGCOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2974
                self.tagField()
                pass
            elif token in [LLVMParser.NAMECOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2975
                self.nameField()
                pass
            elif token in [LLVMParser.SCOPECOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2976
                self.scopeField()
                pass
            elif token in [LLVMParser.FILECOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2977
                self.fileField()
                pass
            elif token in [LLVMParser.LINECOLON]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2978
                self.lineField()
                pass
            elif token in [LLVMParser.BASETYPECOLON]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2979
                self.baseTypeField()
                pass
            elif token in [LLVMParser.SIZECOLON]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2980
                self.sizeField()
                pass
            elif token in [LLVMParser.ALIGNCOLON]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2981
                self.alignField()
                pass
            elif token in [LLVMParser.OFFSETCOLON]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2982
                self.offsetField()
                pass
            elif token in [LLVMParser.FLAGSCOLON]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2983
                self.flagsField()
                pass
            elif token in [LLVMParser.EXTRADATACOLON]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2984
                self.match(LLVMParser.EXTRADATACOLON)
                self.state = 2985
                self.mdField()
                pass
            elif token in [LLVMParser.DWARFADDRESSSPACECOLON]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2986
                self.match(LLVMParser.DWARFADDRESSSPACECOLON)
                self.state = 2987
                self.intLit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiCompositeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDICOMPOSITETYPE(self):
            return self.getToken(LLVMParser.NOTDICOMPOSITETYPE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diCompositeTypeFields(self):
            return self.getTypedRuleContext(LLVMParser.DiCompositeTypeFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diCompositeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiCompositeType" ):
                listener.enterDiCompositeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiCompositeType" ):
                listener.exitDiCompositeType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiCompositeType" ):
                return visitor.visitDiCompositeType(self)
            else:
                return visitor.visitChildren(self)




    def diCompositeType(self):

        localctx = LLVMParser.DiCompositeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_diCompositeType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2990
            self.match(LLVMParser.NOTDICOMPOSITETYPE)
            self.state = 2991
            self.match(LLVMParser.LPAREN)
            self.state = 2992
            self.diCompositeTypeFields()
            self.state = 2993
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiCompositeTypeFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diCompositeTypeFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiCompositeTypeFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diCompositeTypeFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiCompositeTypeFields" ):
                listener.enterDiCompositeTypeFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiCompositeTypeFields" ):
                listener.exitDiCompositeTypeFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiCompositeTypeFields" ):
                return visitor.visitDiCompositeTypeFields(self)
            else:
                return visitor.visitChildren(self)




    def diCompositeTypeFields(self):

        localctx = LLVMParser.DiCompositeTypeFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_diCompositeTypeFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.ALIGNCOLON or _la==LLVMParser.BASETYPECOLON or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (LLVMParser.DISCRIMINATORCOLON - 117)) | (1 << (LLVMParser.ELEMENTSCOLON - 117)) | (1 << (LLVMParser.FILECOLON - 117)) | (1 << (LLVMParser.FLAGSCOLON - 117)))) != 0) or ((((_la - 183)) & ~0x3f) == 0 and ((1 << (_la - 183)) & ((1 << (LLVMParser.IDENTIFIERCOLON - 183)) | (1 << (LLVMParser.LINECOLON - 183)) | (1 << (LLVMParser.NAMECOLON - 183)))) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & ((1 << (LLVMParser.OFFSETCOLON - 264)) | (1 << (LLVMParser.RUNTIMELANGCOLON - 264)) | (1 << (LLVMParser.SCOPECOLON - 264)) | (1 << (LLVMParser.SIZECOLON - 264)))) != 0) or ((((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & ((1 << (LLVMParser.TAGCOLON - 343)) | (1 << (LLVMParser.TEMPLATEPARAMSCOLON - 343)) | (1 << (LLVMParser.VTABLEHOLDERCOLON - 343)))) != 0):
                self.state = 2995
                self.diCompositeTypeFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiCompositeTypeFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diCompositeTypeField(self):
            return self.getTypedRuleContext(LLVMParser.DiCompositeTypeFieldContext,0)


        def diCompositeTypeFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiCompositeTypeFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diCompositeTypeFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiCompositeTypeFieldList" ):
                listener.enterDiCompositeTypeFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiCompositeTypeFieldList" ):
                listener.exitDiCompositeTypeFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiCompositeTypeFieldList" ):
                return visitor.visitDiCompositeTypeFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diCompositeTypeFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiCompositeTypeFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 506
        self.enterRecursionRule(localctx, 506, self.RULE_diCompositeTypeFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2999
            self.diCompositeTypeField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3006
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiCompositeTypeFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diCompositeTypeFieldList)
                    self.state = 3001
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3002
                    self.match(LLVMParser.COMMA)
                    self.state = 3003
                    self.diCompositeTypeField() 
                self.state = 3008
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiCompositeTypeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tagField(self):
            return self.getTypedRuleContext(LLVMParser.TagFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMParser.NameFieldContext,0)


        def scopeField(self):
            return self.getTypedRuleContext(LLVMParser.ScopeFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMParser.LineFieldContext,0)


        def baseTypeField(self):
            return self.getTypedRuleContext(LLVMParser.BaseTypeFieldContext,0)


        def sizeField(self):
            return self.getTypedRuleContext(LLVMParser.SizeFieldContext,0)


        def alignField(self):
            return self.getTypedRuleContext(LLVMParser.AlignFieldContext,0)


        def offsetField(self):
            return self.getTypedRuleContext(LLVMParser.OffsetFieldContext,0)


        def flagsField(self):
            return self.getTypedRuleContext(LLVMParser.FlagsFieldContext,0)


        def ELEMENTSCOLON(self):
            return self.getToken(LLVMParser.ELEMENTSCOLON, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def RUNTIMELANGCOLON(self):
            return self.getToken(LLVMParser.RUNTIMELANGCOLON, 0)

        def dwarfLang(self):
            return self.getTypedRuleContext(LLVMParser.DwarfLangContext,0)


        def VTABLEHOLDERCOLON(self):
            return self.getToken(LLVMParser.VTABLEHOLDERCOLON, 0)

        def templateParamsField(self):
            return self.getTypedRuleContext(LLVMParser.TemplateParamsFieldContext,0)


        def IDENTIFIERCOLON(self):
            return self.getToken(LLVMParser.IDENTIFIERCOLON, 0)

        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def DISCRIMINATORCOLON(self):
            return self.getToken(LLVMParser.DISCRIMINATORCOLON, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diCompositeTypeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiCompositeTypeField" ):
                listener.enterDiCompositeTypeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiCompositeTypeField" ):
                listener.exitDiCompositeTypeField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiCompositeTypeField" ):
                return visitor.visitDiCompositeTypeField(self)
            else:
                return visitor.visitChildren(self)




    def diCompositeTypeField(self):

        localctx = LLVMParser.DiCompositeTypeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_diCompositeTypeField)
        try:
            self.state = 3030
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.TAGCOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3009
                self.tagField()
                pass
            elif token in [LLVMParser.NAMECOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3010
                self.nameField()
                pass
            elif token in [LLVMParser.SCOPECOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3011
                self.scopeField()
                pass
            elif token in [LLVMParser.FILECOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3012
                self.fileField()
                pass
            elif token in [LLVMParser.LINECOLON]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3013
                self.lineField()
                pass
            elif token in [LLVMParser.BASETYPECOLON]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3014
                self.baseTypeField()
                pass
            elif token in [LLVMParser.SIZECOLON]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3015
                self.sizeField()
                pass
            elif token in [LLVMParser.ALIGNCOLON]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3016
                self.alignField()
                pass
            elif token in [LLVMParser.OFFSETCOLON]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3017
                self.offsetField()
                pass
            elif token in [LLVMParser.FLAGSCOLON]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3018
                self.flagsField()
                pass
            elif token in [LLVMParser.ELEMENTSCOLON]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3019
                self.match(LLVMParser.ELEMENTSCOLON)
                self.state = 3020
                self.mdField()
                pass
            elif token in [LLVMParser.RUNTIMELANGCOLON]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3021
                self.match(LLVMParser.RUNTIMELANGCOLON)
                self.state = 3022
                self.dwarfLang()
                pass
            elif token in [LLVMParser.VTABLEHOLDERCOLON]:
                self.enterOuterAlt(localctx, 13)
                self.state = 3023
                self.match(LLVMParser.VTABLEHOLDERCOLON)
                self.state = 3024
                self.mdField()
                pass
            elif token in [LLVMParser.TEMPLATEPARAMSCOLON]:
                self.enterOuterAlt(localctx, 14)
                self.state = 3025
                self.templateParamsField()
                pass
            elif token in [LLVMParser.IDENTIFIERCOLON]:
                self.enterOuterAlt(localctx, 15)
                self.state = 3026
                self.match(LLVMParser.IDENTIFIERCOLON)
                self.state = 3027
                self.stringLit()
                pass
            elif token in [LLVMParser.DISCRIMINATORCOLON]:
                self.enterOuterAlt(localctx, 16)
                self.state = 3028
                self.match(LLVMParser.DISCRIMINATORCOLON)
                self.state = 3029
                self.mdField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiSubrangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDISUBRANGE(self):
            return self.getToken(LLVMParser.NOTDISUBRANGE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diSubrangeFields(self):
            return self.getTypedRuleContext(LLVMParser.DiSubrangeFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diSubrange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubrange" ):
                listener.enterDiSubrange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubrange" ):
                listener.exitDiSubrange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiSubrange" ):
                return visitor.visitDiSubrange(self)
            else:
                return visitor.visitChildren(self)




    def diSubrange(self):

        localctx = LLVMParser.DiSubrangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_diSubrange)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3032
            self.match(LLVMParser.NOTDISUBRANGE)
            self.state = 3033
            self.match(LLVMParser.LPAREN)
            self.state = 3034
            self.diSubrangeFields()
            self.state = 3035
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiSubrangeFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diSubrangeFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiSubrangeFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diSubrangeFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubrangeFields" ):
                listener.enterDiSubrangeFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubrangeFields" ):
                listener.exitDiSubrangeFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiSubrangeFields" ):
                return visitor.visitDiSubrangeFields(self)
            else:
                return visitor.visitChildren(self)




    def diSubrangeFields(self):

        localctx = LLVMParser.DiSubrangeFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_diSubrangeFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.COUNTCOLON or _la==LLVMParser.LOWERBOUNDCOLON:
                self.state = 3037
                self.diSubrangeFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiSubrangeFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diSubrangeField(self):
            return self.getTypedRuleContext(LLVMParser.DiSubrangeFieldContext,0)


        def diSubrangeFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiSubrangeFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diSubrangeFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubrangeFieldList" ):
                listener.enterDiSubrangeFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubrangeFieldList" ):
                listener.exitDiSubrangeFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiSubrangeFieldList" ):
                return visitor.visitDiSubrangeFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diSubrangeFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiSubrangeFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 514
        self.enterRecursionRule(localctx, 514, self.RULE_diSubrangeFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3041
            self.diSubrangeField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3048
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiSubrangeFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diSubrangeFieldList)
                    self.state = 3043
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3044
                    self.match(LLVMParser.COMMA)
                    self.state = 3045
                    self.diSubrangeField() 
                self.state = 3050
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiSubrangeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COUNTCOLON(self):
            return self.getToken(LLVMParser.COUNTCOLON, 0)

        def intOrMDField(self):
            return self.getTypedRuleContext(LLVMParser.IntOrMDFieldContext,0)


        def LOWERBOUNDCOLON(self):
            return self.getToken(LLVMParser.LOWERBOUNDCOLON, 0)

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diSubrangeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubrangeField" ):
                listener.enterDiSubrangeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubrangeField" ):
                listener.exitDiSubrangeField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiSubrangeField" ):
                return visitor.visitDiSubrangeField(self)
            else:
                return visitor.visitChildren(self)




    def diSubrangeField(self):

        localctx = LLVMParser.DiSubrangeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_diSubrangeField)
        try:
            self.state = 3055
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.COUNTCOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3051
                self.match(LLVMParser.COUNTCOLON)
                self.state = 3052
                self.intOrMDField()
                pass
            elif token in [LLVMParser.LOWERBOUNDCOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3053
                self.match(LLVMParser.LOWERBOUNDCOLON)
                self.state = 3054
                self.intLit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiEnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDIENUMERATOR(self):
            return self.getToken(LLVMParser.NOTDIENUMERATOR, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diEnumeratorFields(self):
            return self.getTypedRuleContext(LLVMParser.DiEnumeratorFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diEnumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiEnumerator" ):
                listener.enterDiEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiEnumerator" ):
                listener.exitDiEnumerator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiEnumerator" ):
                return visitor.visitDiEnumerator(self)
            else:
                return visitor.visitChildren(self)




    def diEnumerator(self):

        localctx = LLVMParser.DiEnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_diEnumerator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3057
            self.match(LLVMParser.NOTDIENUMERATOR)
            self.state = 3058
            self.match(LLVMParser.LPAREN)
            self.state = 3059
            self.diEnumeratorFields()
            self.state = 3060
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiEnumeratorFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diEnumeratorFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiEnumeratorFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diEnumeratorFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiEnumeratorFields" ):
                listener.enterDiEnumeratorFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiEnumeratorFields" ):
                listener.exitDiEnumeratorFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiEnumeratorFields" ):
                return visitor.visitDiEnumeratorFields(self)
            else:
                return visitor.visitChildren(self)




    def diEnumeratorFields(self):

        localctx = LLVMParser.DiEnumeratorFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_diEnumeratorFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.ISUNSIGNEDCOLON or _la==LLVMParser.NAMECOLON or _la==LLVMParser.VALUECOLON:
                self.state = 3062
                self.diEnumeratorFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiEnumeratorFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diEnumeratorField(self):
            return self.getTypedRuleContext(LLVMParser.DiEnumeratorFieldContext,0)


        def diEnumeratorFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiEnumeratorFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diEnumeratorFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiEnumeratorFieldList" ):
                listener.enterDiEnumeratorFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiEnumeratorFieldList" ):
                listener.exitDiEnumeratorFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiEnumeratorFieldList" ):
                return visitor.visitDiEnumeratorFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diEnumeratorFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiEnumeratorFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 522
        self.enterRecursionRule(localctx, 522, self.RULE_diEnumeratorFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3066
            self.diEnumeratorField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3073
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiEnumeratorFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diEnumeratorFieldList)
                    self.state = 3068
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3069
                    self.match(LLVMParser.COMMA)
                    self.state = 3070
                    self.diEnumeratorField() 
                self.state = 3075
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiEnumeratorFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameField(self):
            return self.getTypedRuleContext(LLVMParser.NameFieldContext,0)


        def VALUECOLON(self):
            return self.getToken(LLVMParser.VALUECOLON, 0)

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def ISUNSIGNEDCOLON(self):
            return self.getToken(LLVMParser.ISUNSIGNEDCOLON, 0)

        def boolLit(self):
            return self.getTypedRuleContext(LLVMParser.BoolLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diEnumeratorField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiEnumeratorField" ):
                listener.enterDiEnumeratorField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiEnumeratorField" ):
                listener.exitDiEnumeratorField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiEnumeratorField" ):
                return visitor.visitDiEnumeratorField(self)
            else:
                return visitor.visitChildren(self)




    def diEnumeratorField(self):

        localctx = LLVMParser.DiEnumeratorFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_diEnumeratorField)
        try:
            self.state = 3081
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.NAMECOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3076
                self.nameField()
                pass
            elif token in [LLVMParser.VALUECOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3077
                self.match(LLVMParser.VALUECOLON)
                self.state = 3078
                self.intLit()
                pass
            elif token in [LLVMParser.ISUNSIGNEDCOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3079
                self.match(LLVMParser.ISUNSIGNEDCOLON)
                self.state = 3080
                self.boolLit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiTemplateTypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDITEMPLATETYPEPARAMETER(self):
            return self.getToken(LLVMParser.NOTDITEMPLATETYPEPARAMETER, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diTemplateTypeParameterFields(self):
            return self.getTypedRuleContext(LLVMParser.DiTemplateTypeParameterFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diTemplateTypeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiTemplateTypeParameter" ):
                listener.enterDiTemplateTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiTemplateTypeParameter" ):
                listener.exitDiTemplateTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiTemplateTypeParameter" ):
                return visitor.visitDiTemplateTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def diTemplateTypeParameter(self):

        localctx = LLVMParser.DiTemplateTypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_diTemplateTypeParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3083
            self.match(LLVMParser.NOTDITEMPLATETYPEPARAMETER)
            self.state = 3084
            self.match(LLVMParser.LPAREN)
            self.state = 3085
            self.diTemplateTypeParameterFields()
            self.state = 3086
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiTemplateTypeParameterFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diTemplateTypeParameterFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiTemplateTypeParameterFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diTemplateTypeParameterFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiTemplateTypeParameterFields" ):
                listener.enterDiTemplateTypeParameterFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiTemplateTypeParameterFields" ):
                listener.exitDiTemplateTypeParameterFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiTemplateTypeParameterFields" ):
                return visitor.visitDiTemplateTypeParameterFields(self)
            else:
                return visitor.visitChildren(self)




    def diTemplateTypeParameterFields(self):

        localctx = LLVMParser.DiTemplateTypeParameterFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_diTemplateTypeParameterFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.NAMECOLON or _la==LLVMParser.TYPECOLON:
                self.state = 3088
                self.diTemplateTypeParameterFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiTemplateTypeParameterFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diTemplateTypeParameterField(self):
            return self.getTypedRuleContext(LLVMParser.DiTemplateTypeParameterFieldContext,0)


        def diTemplateTypeParameterFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiTemplateTypeParameterFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diTemplateTypeParameterFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiTemplateTypeParameterFieldList" ):
                listener.enterDiTemplateTypeParameterFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiTemplateTypeParameterFieldList" ):
                listener.exitDiTemplateTypeParameterFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiTemplateTypeParameterFieldList" ):
                return visitor.visitDiTemplateTypeParameterFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diTemplateTypeParameterFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiTemplateTypeParameterFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 530
        self.enterRecursionRule(localctx, 530, self.RULE_diTemplateTypeParameterFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3092
            self.diTemplateTypeParameterField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3099
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiTemplateTypeParameterFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diTemplateTypeParameterFieldList)
                    self.state = 3094
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3095
                    self.match(LLVMParser.COMMA)
                    self.state = 3096
                    self.diTemplateTypeParameterField() 
                self.state = 3101
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiTemplateTypeParameterFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameField(self):
            return self.getTypedRuleContext(LLVMParser.NameFieldContext,0)


        def typeField(self):
            return self.getTypedRuleContext(LLVMParser.TypeFieldContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diTemplateTypeParameterField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiTemplateTypeParameterField" ):
                listener.enterDiTemplateTypeParameterField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiTemplateTypeParameterField" ):
                listener.exitDiTemplateTypeParameterField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiTemplateTypeParameterField" ):
                return visitor.visitDiTemplateTypeParameterField(self)
            else:
                return visitor.visitChildren(self)




    def diTemplateTypeParameterField(self):

        localctx = LLVMParser.DiTemplateTypeParameterFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_diTemplateTypeParameterField)
        try:
            self.state = 3104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.NAMECOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3102
                self.nameField()
                pass
            elif token in [LLVMParser.TYPECOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3103
                self.typeField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiTemplateValueParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDITEMPLATEVALUEPARAMETER(self):
            return self.getToken(LLVMParser.NOTDITEMPLATEVALUEPARAMETER, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diTemplateValueParameterFields(self):
            return self.getTypedRuleContext(LLVMParser.DiTemplateValueParameterFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diTemplateValueParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiTemplateValueParameter" ):
                listener.enterDiTemplateValueParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiTemplateValueParameter" ):
                listener.exitDiTemplateValueParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiTemplateValueParameter" ):
                return visitor.visitDiTemplateValueParameter(self)
            else:
                return visitor.visitChildren(self)




    def diTemplateValueParameter(self):

        localctx = LLVMParser.DiTemplateValueParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_diTemplateValueParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3106
            self.match(LLVMParser.NOTDITEMPLATEVALUEPARAMETER)
            self.state = 3107
            self.match(LLVMParser.LPAREN)
            self.state = 3108
            self.diTemplateValueParameterFields()
            self.state = 3109
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiTemplateValueParameterFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diTemplateValueParameterFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiTemplateValueParameterFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diTemplateValueParameterFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiTemplateValueParameterFields" ):
                listener.enterDiTemplateValueParameterFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiTemplateValueParameterFields" ):
                listener.exitDiTemplateValueParameterFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiTemplateValueParameterFields" ):
                return visitor.visitDiTemplateValueParameterFields(self)
            else:
                return visitor.visitChildren(self)




    def diTemplateValueParameterFields(self):

        localctx = LLVMParser.DiTemplateValueParameterFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_diTemplateValueParameterFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.NAMECOLON or ((((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & ((1 << (LLVMParser.TAGCOLON - 343)) | (1 << (LLVMParser.TYPECOLON - 343)) | (1 << (LLVMParser.VALUECOLON - 343)))) != 0):
                self.state = 3111
                self.diTemplateValueParameterFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiTemplateValueParameterFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diTemplateValueParameterField(self):
            return self.getTypedRuleContext(LLVMParser.DiTemplateValueParameterFieldContext,0)


        def diTemplateValueParameterFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiTemplateValueParameterFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diTemplateValueParameterFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiTemplateValueParameterFieldList" ):
                listener.enterDiTemplateValueParameterFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiTemplateValueParameterFieldList" ):
                listener.exitDiTemplateValueParameterFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiTemplateValueParameterFieldList" ):
                return visitor.visitDiTemplateValueParameterFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diTemplateValueParameterFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiTemplateValueParameterFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 538
        self.enterRecursionRule(localctx, 538, self.RULE_diTemplateValueParameterFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3115
            self.diTemplateValueParameterField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3122
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiTemplateValueParameterFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diTemplateValueParameterFieldList)
                    self.state = 3117
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3118
                    self.match(LLVMParser.COMMA)
                    self.state = 3119
                    self.diTemplateValueParameterField() 
                self.state = 3124
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiTemplateValueParameterFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tagField(self):
            return self.getTypedRuleContext(LLVMParser.TagFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMParser.NameFieldContext,0)


        def typeField(self):
            return self.getTypedRuleContext(LLVMParser.TypeFieldContext,0)


        def VALUECOLON(self):
            return self.getToken(LLVMParser.VALUECOLON, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diTemplateValueParameterField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiTemplateValueParameterField" ):
                listener.enterDiTemplateValueParameterField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiTemplateValueParameterField" ):
                listener.exitDiTemplateValueParameterField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiTemplateValueParameterField" ):
                return visitor.visitDiTemplateValueParameterField(self)
            else:
                return visitor.visitChildren(self)




    def diTemplateValueParameterField(self):

        localctx = LLVMParser.DiTemplateValueParameterFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_diTemplateValueParameterField)
        try:
            self.state = 3130
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.TAGCOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3125
                self.tagField()
                pass
            elif token in [LLVMParser.NAMECOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3126
                self.nameField()
                pass
            elif token in [LLVMParser.TYPECOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3127
                self.typeField()
                pass
            elif token in [LLVMParser.VALUECOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3128
                self.match(LLVMParser.VALUECOLON)
                self.state = 3129
                self.mdField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDIMODULE(self):
            return self.getToken(LLVMParser.NOTDIMODULE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diModuleFields(self):
            return self.getTypedRuleContext(LLVMParser.DiModuleFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diModule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiModule" ):
                listener.enterDiModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiModule" ):
                listener.exitDiModule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiModule" ):
                return visitor.visitDiModule(self)
            else:
                return visitor.visitChildren(self)




    def diModule(self):

        localctx = LLVMParser.DiModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_diModule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3132
            self.match(LLVMParser.NOTDIMODULE)
            self.state = 3133
            self.match(LLVMParser.LPAREN)
            self.state = 3134
            self.diModuleFields()
            self.state = 3135
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiModuleFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diModuleFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiModuleFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diModuleFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiModuleFields" ):
                listener.enterDiModuleFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiModuleFields" ):
                listener.exitDiModuleFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiModuleFields" ):
                return visitor.visitDiModuleFields(self)
            else:
                return visitor.visitChildren(self)




    def diModuleFields(self):

        localctx = LLVMParser.DiModuleFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_diModuleFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.CONFIGMACROSCOLON or ((((_la - 190)) & ~0x3f) == 0 and ((1 << (_la - 190)) & ((1 << (LLVMParser.INCLUDEPATHCOLON - 190)) | (1 << (LLVMParser.ISYSROOTCOLON - 190)) | (1 << (LLVMParser.NAMECOLON - 190)))) != 0) or _la==LLVMParser.SCOPECOLON:
                self.state = 3137
                self.diModuleFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiModuleFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diModuleField(self):
            return self.getTypedRuleContext(LLVMParser.DiModuleFieldContext,0)


        def diModuleFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiModuleFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diModuleFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiModuleFieldList" ):
                listener.enterDiModuleFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiModuleFieldList" ):
                listener.exitDiModuleFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiModuleFieldList" ):
                return visitor.visitDiModuleFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diModuleFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiModuleFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 546
        self.enterRecursionRule(localctx, 546, self.RULE_diModuleFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3141
            self.diModuleField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3148
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiModuleFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diModuleFieldList)
                    self.state = 3143
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3144
                    self.match(LLVMParser.COMMA)
                    self.state = 3145
                    self.diModuleField() 
                self.state = 3150
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiModuleFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scopeField(self):
            return self.getTypedRuleContext(LLVMParser.ScopeFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMParser.NameFieldContext,0)


        def CONFIGMACROSCOLON(self):
            return self.getToken(LLVMParser.CONFIGMACROSCOLON, 0)

        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def INCLUDEPATHCOLON(self):
            return self.getToken(LLVMParser.INCLUDEPATHCOLON, 0)

        def ISYSROOTCOLON(self):
            return self.getToken(LLVMParser.ISYSROOTCOLON, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diModuleField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiModuleField" ):
                listener.enterDiModuleField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiModuleField" ):
                listener.exitDiModuleField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiModuleField" ):
                return visitor.visitDiModuleField(self)
            else:
                return visitor.visitChildren(self)




    def diModuleField(self):

        localctx = LLVMParser.DiModuleFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_diModuleField)
        try:
            self.state = 3159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.SCOPECOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3151
                self.scopeField()
                pass
            elif token in [LLVMParser.NAMECOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3152
                self.nameField()
                pass
            elif token in [LLVMParser.CONFIGMACROSCOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3153
                self.match(LLVMParser.CONFIGMACROSCOLON)
                self.state = 3154
                self.stringLit()
                pass
            elif token in [LLVMParser.INCLUDEPATHCOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3155
                self.match(LLVMParser.INCLUDEPATHCOLON)
                self.state = 3156
                self.stringLit()
                pass
            elif token in [LLVMParser.ISYSROOTCOLON]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3157
                self.match(LLVMParser.ISYSROOTCOLON)
                self.state = 3158
                self.stringLit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiNamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDINAMESPACE(self):
            return self.getToken(LLVMParser.NOTDINAMESPACE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diNamespaceFields(self):
            return self.getTypedRuleContext(LLVMParser.DiNamespaceFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diNamespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiNamespace" ):
                listener.enterDiNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiNamespace" ):
                listener.exitDiNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiNamespace" ):
                return visitor.visitDiNamespace(self)
            else:
                return visitor.visitChildren(self)




    def diNamespace(self):

        localctx = LLVMParser.DiNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_diNamespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3161
            self.match(LLVMParser.NOTDINAMESPACE)
            self.state = 3162
            self.match(LLVMParser.LPAREN)
            self.state = 3163
            self.diNamespaceFields()
            self.state = 3164
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiNamespaceFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diNamespaceFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiNamespaceFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diNamespaceFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiNamespaceFields" ):
                listener.enterDiNamespaceFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiNamespaceFields" ):
                listener.exitDiNamespaceFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiNamespaceFields" ):
                return visitor.visitDiNamespaceFields(self)
            else:
                return visitor.visitChildren(self)




    def diNamespaceFields(self):

        localctx = LLVMParser.DiNamespaceFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_diNamespaceFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.EXPORTSYMBOLSCOLON or _la==LLVMParser.NAMECOLON or _la==LLVMParser.SCOPECOLON:
                self.state = 3166
                self.diNamespaceFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiNamespaceFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diNamespaceField(self):
            return self.getTypedRuleContext(LLVMParser.DiNamespaceFieldContext,0)


        def diNamespaceFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiNamespaceFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diNamespaceFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiNamespaceFieldList" ):
                listener.enterDiNamespaceFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiNamespaceFieldList" ):
                listener.exitDiNamespaceFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiNamespaceFieldList" ):
                return visitor.visitDiNamespaceFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diNamespaceFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiNamespaceFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 554
        self.enterRecursionRule(localctx, 554, self.RULE_diNamespaceFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3170
            self.diNamespaceField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3177
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiNamespaceFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diNamespaceFieldList)
                    self.state = 3172
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3173
                    self.match(LLVMParser.COMMA)
                    self.state = 3174
                    self.diNamespaceField() 
                self.state = 3179
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiNamespaceFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scopeField(self):
            return self.getTypedRuleContext(LLVMParser.ScopeFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMParser.NameFieldContext,0)


        def EXPORTSYMBOLSCOLON(self):
            return self.getToken(LLVMParser.EXPORTSYMBOLSCOLON, 0)

        def boolLit(self):
            return self.getTypedRuleContext(LLVMParser.BoolLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diNamespaceField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiNamespaceField" ):
                listener.enterDiNamespaceField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiNamespaceField" ):
                listener.exitDiNamespaceField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiNamespaceField" ):
                return visitor.visitDiNamespaceField(self)
            else:
                return visitor.visitChildren(self)




    def diNamespaceField(self):

        localctx = LLVMParser.DiNamespaceFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_diNamespaceField)
        try:
            self.state = 3184
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.SCOPECOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3180
                self.scopeField()
                pass
            elif token in [LLVMParser.NAMECOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3181
                self.nameField()
                pass
            elif token in [LLVMParser.EXPORTSYMBOLSCOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3182
                self.match(LLVMParser.EXPORTSYMBOLSCOLON)
                self.state = 3183
                self.boolLit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiGlobalVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDIGLOBALVARIABLE(self):
            return self.getToken(LLVMParser.NOTDIGLOBALVARIABLE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diGlobalVariableFields(self):
            return self.getTypedRuleContext(LLVMParser.DiGlobalVariableFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diGlobalVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiGlobalVariable" ):
                listener.enterDiGlobalVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiGlobalVariable" ):
                listener.exitDiGlobalVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiGlobalVariable" ):
                return visitor.visitDiGlobalVariable(self)
            else:
                return visitor.visitChildren(self)




    def diGlobalVariable(self):

        localctx = LLVMParser.DiGlobalVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_diGlobalVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3186
            self.match(LLVMParser.NOTDIGLOBALVARIABLE)
            self.state = 3187
            self.match(LLVMParser.LPAREN)
            self.state = 3188
            self.diGlobalVariableFields()
            self.state = 3189
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiGlobalVariableFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diGlobalVariableFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiGlobalVariableFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diGlobalVariableFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiGlobalVariableFields" ):
                listener.enterDiGlobalVariableFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiGlobalVariableFields" ):
                listener.exitDiGlobalVariableFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiGlobalVariableFields" ):
                return visitor.visitDiGlobalVariableFields(self)
            else:
                return visitor.visitChildren(self)




    def diGlobalVariableFields(self):

        localctx = LLVMParser.DiGlobalVariableFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_diGlobalVariableFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.ALIGNCOLON or _la==LLVMParser.DECLARATIONCOLON or _la==LLVMParser.FILECOLON or ((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & ((1 << (LLVMParser.ISDEFINITIONCOLON - 204)) | (1 << (LLVMParser.ISLOCALCOLON - 204)) | (1 << (LLVMParser.LINECOLON - 204)) | (1 << (LLVMParser.LINKAGENAMECOLON - 204)) | (1 << (LLVMParser.NAMECOLON - 204)))) != 0) or _la==LLVMParser.SCOPECOLON or _la==LLVMParser.TYPECOLON:
                self.state = 3191
                self.diGlobalVariableFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiGlobalVariableFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diGlobalVariableField(self):
            return self.getTypedRuleContext(LLVMParser.DiGlobalVariableFieldContext,0)


        def diGlobalVariableFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiGlobalVariableFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diGlobalVariableFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiGlobalVariableFieldList" ):
                listener.enterDiGlobalVariableFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiGlobalVariableFieldList" ):
                listener.exitDiGlobalVariableFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiGlobalVariableFieldList" ):
                return visitor.visitDiGlobalVariableFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diGlobalVariableFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiGlobalVariableFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 562
        self.enterRecursionRule(localctx, 562, self.RULE_diGlobalVariableFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3195
            self.diGlobalVariableField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3202
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiGlobalVariableFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diGlobalVariableFieldList)
                    self.state = 3197
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3198
                    self.match(LLVMParser.COMMA)
                    self.state = 3199
                    self.diGlobalVariableField() 
                self.state = 3204
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiGlobalVariableFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameField(self):
            return self.getTypedRuleContext(LLVMParser.NameFieldContext,0)


        def scopeField(self):
            return self.getTypedRuleContext(LLVMParser.ScopeFieldContext,0)


        def linkageNameField(self):
            return self.getTypedRuleContext(LLVMParser.LinkageNameFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMParser.LineFieldContext,0)


        def typeField(self):
            return self.getTypedRuleContext(LLVMParser.TypeFieldContext,0)


        def isLocalField(self):
            return self.getTypedRuleContext(LLVMParser.IsLocalFieldContext,0)


        def isDefinitionField(self):
            return self.getTypedRuleContext(LLVMParser.IsDefinitionFieldContext,0)


        def declarationField(self):
            return self.getTypedRuleContext(LLVMParser.DeclarationFieldContext,0)


        def alignField(self):
            return self.getTypedRuleContext(LLVMParser.AlignFieldContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diGlobalVariableField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiGlobalVariableField" ):
                listener.enterDiGlobalVariableField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiGlobalVariableField" ):
                listener.exitDiGlobalVariableField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiGlobalVariableField" ):
                return visitor.visitDiGlobalVariableField(self)
            else:
                return visitor.visitChildren(self)




    def diGlobalVariableField(self):

        localctx = LLVMParser.DiGlobalVariableFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_diGlobalVariableField)
        try:
            self.state = 3215
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.NAMECOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3205
                self.nameField()
                pass
            elif token in [LLVMParser.SCOPECOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3206
                self.scopeField()
                pass
            elif token in [LLVMParser.LINKAGENAMECOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3207
                self.linkageNameField()
                pass
            elif token in [LLVMParser.FILECOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3208
                self.fileField()
                pass
            elif token in [LLVMParser.LINECOLON]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3209
                self.lineField()
                pass
            elif token in [LLVMParser.TYPECOLON]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3210
                self.typeField()
                pass
            elif token in [LLVMParser.ISLOCALCOLON]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3211
                self.isLocalField()
                pass
            elif token in [LLVMParser.ISDEFINITIONCOLON]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3212
                self.isDefinitionField()
                pass
            elif token in [LLVMParser.DECLARATIONCOLON]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3213
                self.declarationField()
                pass
            elif token in [LLVMParser.ALIGNCOLON]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3214
                self.alignField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiSubprogramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDISUBPROGRAM(self):
            return self.getToken(LLVMParser.NOTDISUBPROGRAM, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diSubprogramFields(self):
            return self.getTypedRuleContext(LLVMParser.DiSubprogramFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diSubprogram

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubprogram" ):
                listener.enterDiSubprogram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubprogram" ):
                listener.exitDiSubprogram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiSubprogram" ):
                return visitor.visitDiSubprogram(self)
            else:
                return visitor.visitChildren(self)




    def diSubprogram(self):

        localctx = LLVMParser.DiSubprogramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_diSubprogram)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3217
            self.match(LLVMParser.NOTDISUBPROGRAM)
            self.state = 3218
            self.match(LLVMParser.LPAREN)
            self.state = 3219
            self.diSubprogramFields()
            self.state = 3220
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiSubprogramFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diSubprogramFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiSubprogramFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diSubprogramFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubprogramFields" ):
                listener.enterDiSubprogramFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubprogramFields" ):
                listener.exitDiSubprogramFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiSubprogramFields" ):
                return visitor.visitDiSubprogramFields(self)
            else:
                return visitor.visitChildren(self)




    def diSubprogramFields(self):

        localctx = LLVMParser.DiSubprogramFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_diSubprogramFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.CONTAININGTYPECOLON or _la==LLVMParser.DECLARATIONCOLON or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (LLVMParser.FILECOLON - 154)) | (1 << (LLVMParser.FLAGSCOLON - 154)) | (1 << (LLVMParser.ISDEFINITIONCOLON - 154)) | (1 << (LLVMParser.ISLOCALCOLON - 154)) | (1 << (LLVMParser.ISOPTIMIZEDCOLON - 154)) | (1 << (LLVMParser.LINECOLON - 154)) | (1 << (LLVMParser.LINKAGENAMECOLON - 154)))) != 0) or _la==LLVMParser.NAMECOLON or ((((_la - 306)) & ~0x3f) == 0 and ((1 << (_la - 306)) & ((1 << (LLVMParser.SCOPECOLON - 306)) | (1 << (LLVMParser.SCOPELINECOLON - 306)) | (1 << (LLVMParser.TEMPLATEPARAMSCOLON - 306)) | (1 << (LLVMParser.THISADJUSTMENTCOLON - 306)) | (1 << (LLVMParser.THROWNTYPESCOLON - 306)) | (1 << (LLVMParser.TYPECOLON - 306)) | (1 << (LLVMParser.UNITCOLON - 306)))) != 0) or ((((_la - 382)) & ~0x3f) == 0 and ((1 << (_la - 382)) & ((1 << (LLVMParser.VARIABLESCOLON - 382)) | (1 << (LLVMParser.VIRTUALINDEXCOLON - 382)) | (1 << (LLVMParser.VIRTUALITYCOLON - 382)))) != 0):
                self.state = 3222
                self.diSubprogramFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiSubprogramFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diSubprogramField(self):
            return self.getTypedRuleContext(LLVMParser.DiSubprogramFieldContext,0)


        def diSubprogramFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiSubprogramFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diSubprogramFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubprogramFieldList" ):
                listener.enterDiSubprogramFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubprogramFieldList" ):
                listener.exitDiSubprogramFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiSubprogramFieldList" ):
                return visitor.visitDiSubprogramFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diSubprogramFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiSubprogramFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 570
        self.enterRecursionRule(localctx, 570, self.RULE_diSubprogramFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3226
            self.diSubprogramField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3233
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiSubprogramFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diSubprogramFieldList)
                    self.state = 3228
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3229
                    self.match(LLVMParser.COMMA)
                    self.state = 3230
                    self.diSubprogramField() 
                self.state = 3235
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiSubprogramFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameField(self):
            return self.getTypedRuleContext(LLVMParser.NameFieldContext,0)


        def scopeField(self):
            return self.getTypedRuleContext(LLVMParser.ScopeFieldContext,0)


        def linkageNameField(self):
            return self.getTypedRuleContext(LLVMParser.LinkageNameFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMParser.LineFieldContext,0)


        def typeField(self):
            return self.getTypedRuleContext(LLVMParser.TypeFieldContext,0)


        def isLocalField(self):
            return self.getTypedRuleContext(LLVMParser.IsLocalFieldContext,0)


        def isDefinitionField(self):
            return self.getTypedRuleContext(LLVMParser.IsDefinitionFieldContext,0)


        def SCOPELINECOLON(self):
            return self.getToken(LLVMParser.SCOPELINECOLON, 0)

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def CONTAININGTYPECOLON(self):
            return self.getToken(LLVMParser.CONTAININGTYPECOLON, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def VIRTUALITYCOLON(self):
            return self.getToken(LLVMParser.VIRTUALITYCOLON, 0)

        def dwarfVirtuality(self):
            return self.getTypedRuleContext(LLVMParser.DwarfVirtualityContext,0)


        def VIRTUALINDEXCOLON(self):
            return self.getToken(LLVMParser.VIRTUALINDEXCOLON, 0)

        def THISADJUSTMENTCOLON(self):
            return self.getToken(LLVMParser.THISADJUSTMENTCOLON, 0)

        def flagsField(self):
            return self.getTypedRuleContext(LLVMParser.FlagsFieldContext,0)


        def isOptimizedField(self):
            return self.getTypedRuleContext(LLVMParser.IsOptimizedFieldContext,0)


        def UNITCOLON(self):
            return self.getToken(LLVMParser.UNITCOLON, 0)

        def templateParamsField(self):
            return self.getTypedRuleContext(LLVMParser.TemplateParamsFieldContext,0)


        def declarationField(self):
            return self.getTypedRuleContext(LLVMParser.DeclarationFieldContext,0)


        def VARIABLESCOLON(self):
            return self.getToken(LLVMParser.VARIABLESCOLON, 0)

        def THROWNTYPESCOLON(self):
            return self.getToken(LLVMParser.THROWNTYPESCOLON, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diSubprogramField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubprogramField" ):
                listener.enterDiSubprogramField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubprogramField" ):
                listener.exitDiSubprogramField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiSubprogramField" ):
                return visitor.visitDiSubprogramField(self)
            else:
                return visitor.visitChildren(self)




    def diSubprogramField(self):

        localctx = LLVMParser.DiSubprogramFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_diSubprogramField)
        try:
            self.state = 3264
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.NAMECOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3236
                self.nameField()
                pass
            elif token in [LLVMParser.SCOPECOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3237
                self.scopeField()
                pass
            elif token in [LLVMParser.LINKAGENAMECOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3238
                self.linkageNameField()
                pass
            elif token in [LLVMParser.FILECOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3239
                self.fileField()
                pass
            elif token in [LLVMParser.LINECOLON]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3240
                self.lineField()
                pass
            elif token in [LLVMParser.TYPECOLON]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3241
                self.typeField()
                pass
            elif token in [LLVMParser.ISLOCALCOLON]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3242
                self.isLocalField()
                pass
            elif token in [LLVMParser.ISDEFINITIONCOLON]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3243
                self.isDefinitionField()
                pass
            elif token in [LLVMParser.SCOPELINECOLON]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3244
                self.match(LLVMParser.SCOPELINECOLON)
                self.state = 3245
                self.intLit()
                pass
            elif token in [LLVMParser.CONTAININGTYPECOLON]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3246
                self.match(LLVMParser.CONTAININGTYPECOLON)
                self.state = 3247
                self.mdField()
                pass
            elif token in [LLVMParser.VIRTUALITYCOLON]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3248
                self.match(LLVMParser.VIRTUALITYCOLON)
                self.state = 3249
                self.dwarfVirtuality()
                pass
            elif token in [LLVMParser.VIRTUALINDEXCOLON]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3250
                self.match(LLVMParser.VIRTUALINDEXCOLON)
                self.state = 3251
                self.intLit()
                pass
            elif token in [LLVMParser.THISADJUSTMENTCOLON]:
                self.enterOuterAlt(localctx, 13)
                self.state = 3252
                self.match(LLVMParser.THISADJUSTMENTCOLON)
                self.state = 3253
                self.intLit()
                pass
            elif token in [LLVMParser.FLAGSCOLON]:
                self.enterOuterAlt(localctx, 14)
                self.state = 3254
                self.flagsField()
                pass
            elif token in [LLVMParser.ISOPTIMIZEDCOLON]:
                self.enterOuterAlt(localctx, 15)
                self.state = 3255
                self.isOptimizedField()
                pass
            elif token in [LLVMParser.UNITCOLON]:
                self.enterOuterAlt(localctx, 16)
                self.state = 3256
                self.match(LLVMParser.UNITCOLON)
                self.state = 3257
                self.mdField()
                pass
            elif token in [LLVMParser.TEMPLATEPARAMSCOLON]:
                self.enterOuterAlt(localctx, 17)
                self.state = 3258
                self.templateParamsField()
                pass
            elif token in [LLVMParser.DECLARATIONCOLON]:
                self.enterOuterAlt(localctx, 18)
                self.state = 3259
                self.declarationField()
                pass
            elif token in [LLVMParser.VARIABLESCOLON]:
                self.enterOuterAlt(localctx, 19)
                self.state = 3260
                self.match(LLVMParser.VARIABLESCOLON)
                self.state = 3261
                self.mdField()
                pass
            elif token in [LLVMParser.THROWNTYPESCOLON]:
                self.enterOuterAlt(localctx, 20)
                self.state = 3262
                self.match(LLVMParser.THROWNTYPESCOLON)
                self.state = 3263
                self.mdField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLexicalBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDILEXICALBLOCK(self):
            return self.getToken(LLVMParser.NOTDILEXICALBLOCK, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diLexicalBlockFields(self):
            return self.getTypedRuleContext(LLVMParser.DiLexicalBlockFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diLexicalBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLexicalBlock" ):
                listener.enterDiLexicalBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLexicalBlock" ):
                listener.exitDiLexicalBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiLexicalBlock" ):
                return visitor.visitDiLexicalBlock(self)
            else:
                return visitor.visitChildren(self)




    def diLexicalBlock(self):

        localctx = LLVMParser.DiLexicalBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_diLexicalBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3266
            self.match(LLVMParser.NOTDILEXICALBLOCK)
            self.state = 3267
            self.match(LLVMParser.LPAREN)
            self.state = 3268
            self.diLexicalBlockFields()
            self.state = 3269
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLexicalBlockFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diLexicalBlockFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiLexicalBlockFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diLexicalBlockFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLexicalBlockFields" ):
                listener.enterDiLexicalBlockFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLexicalBlockFields" ):
                listener.exitDiLexicalBlockFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiLexicalBlockFields" ):
                return visitor.visitDiLexicalBlockFields(self)
            else:
                return visitor.visitChildren(self)




    def diLexicalBlockFields(self):

        localctx = LLVMParser.DiLexicalBlockFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_diLexicalBlockFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.COLUMNCOLON or _la==LLVMParser.FILECOLON or _la==LLVMParser.LINECOLON or _la==LLVMParser.SCOPECOLON:
                self.state = 3271
                self.diLexicalBlockFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLexicalBlockFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diLexicalBlockField(self):
            return self.getTypedRuleContext(LLVMParser.DiLexicalBlockFieldContext,0)


        def diLexicalBlockFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiLexicalBlockFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diLexicalBlockFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLexicalBlockFieldList" ):
                listener.enterDiLexicalBlockFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLexicalBlockFieldList" ):
                listener.exitDiLexicalBlockFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiLexicalBlockFieldList" ):
                return visitor.visitDiLexicalBlockFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diLexicalBlockFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiLexicalBlockFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 578
        self.enterRecursionRule(localctx, 578, self.RULE_diLexicalBlockFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3275
            self.diLexicalBlockField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3282
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiLexicalBlockFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diLexicalBlockFieldList)
                    self.state = 3277
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3278
                    self.match(LLVMParser.COMMA)
                    self.state = 3279
                    self.diLexicalBlockField() 
                self.state = 3284
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiLexicalBlockFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scopeField(self):
            return self.getTypedRuleContext(LLVMParser.ScopeFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMParser.LineFieldContext,0)


        def columnField(self):
            return self.getTypedRuleContext(LLVMParser.ColumnFieldContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diLexicalBlockField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLexicalBlockField" ):
                listener.enterDiLexicalBlockField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLexicalBlockField" ):
                listener.exitDiLexicalBlockField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiLexicalBlockField" ):
                return visitor.visitDiLexicalBlockField(self)
            else:
                return visitor.visitChildren(self)




    def diLexicalBlockField(self):

        localctx = LLVMParser.DiLexicalBlockFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_diLexicalBlockField)
        try:
            self.state = 3289
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.SCOPECOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3285
                self.scopeField()
                pass
            elif token in [LLVMParser.FILECOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3286
                self.fileField()
                pass
            elif token in [LLVMParser.LINECOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3287
                self.lineField()
                pass
            elif token in [LLVMParser.COLUMNCOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3288
                self.columnField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLexicalBlockFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDILEXICALBLOCKFILE(self):
            return self.getToken(LLVMParser.NOTDILEXICALBLOCKFILE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diLexicalBlockFileFields(self):
            return self.getTypedRuleContext(LLVMParser.DiLexicalBlockFileFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diLexicalBlockFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLexicalBlockFile" ):
                listener.enterDiLexicalBlockFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLexicalBlockFile" ):
                listener.exitDiLexicalBlockFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiLexicalBlockFile" ):
                return visitor.visitDiLexicalBlockFile(self)
            else:
                return visitor.visitChildren(self)




    def diLexicalBlockFile(self):

        localctx = LLVMParser.DiLexicalBlockFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_diLexicalBlockFile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3291
            self.match(LLVMParser.NOTDILEXICALBLOCKFILE)
            self.state = 3292
            self.match(LLVMParser.LPAREN)
            self.state = 3293
            self.diLexicalBlockFileFields()
            self.state = 3294
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLexicalBlockFileFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diLexicalBlockFileFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiLexicalBlockFileFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diLexicalBlockFileFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLexicalBlockFileFields" ):
                listener.enterDiLexicalBlockFileFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLexicalBlockFileFields" ):
                listener.exitDiLexicalBlockFileFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiLexicalBlockFileFields" ):
                return visitor.visitDiLexicalBlockFileFields(self)
            else:
                return visitor.visitChildren(self)




    def diLexicalBlockFileFields(self):

        localctx = LLVMParser.DiLexicalBlockFileFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_diLexicalBlockFileFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.DISCRIMINATORCOLON or _la==LLVMParser.FILECOLON or _la==LLVMParser.SCOPECOLON:
                self.state = 3296
                self.diLexicalBlockFileFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLexicalBlockFileFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diLexicalBlockFileField(self):
            return self.getTypedRuleContext(LLVMParser.DiLexicalBlockFileFieldContext,0)


        def diLexicalBlockFileFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiLexicalBlockFileFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diLexicalBlockFileFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLexicalBlockFileFieldList" ):
                listener.enterDiLexicalBlockFileFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLexicalBlockFileFieldList" ):
                listener.exitDiLexicalBlockFileFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiLexicalBlockFileFieldList" ):
                return visitor.visitDiLexicalBlockFileFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diLexicalBlockFileFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiLexicalBlockFileFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 586
        self.enterRecursionRule(localctx, 586, self.RULE_diLexicalBlockFileFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3300
            self.diLexicalBlockFileField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3307
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiLexicalBlockFileFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diLexicalBlockFileFieldList)
                    self.state = 3302
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3303
                    self.match(LLVMParser.COMMA)
                    self.state = 3304
                    self.diLexicalBlockFileField() 
                self.state = 3309
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiLexicalBlockFileFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scopeField(self):
            return self.getTypedRuleContext(LLVMParser.ScopeFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMParser.FileFieldContext,0)


        def DISCRIMINATORCOLON(self):
            return self.getToken(LLVMParser.DISCRIMINATORCOLON, 0)

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diLexicalBlockFileField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLexicalBlockFileField" ):
                listener.enterDiLexicalBlockFileField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLexicalBlockFileField" ):
                listener.exitDiLexicalBlockFileField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiLexicalBlockFileField" ):
                return visitor.visitDiLexicalBlockFileField(self)
            else:
                return visitor.visitChildren(self)




    def diLexicalBlockFileField(self):

        localctx = LLVMParser.DiLexicalBlockFileFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_diLexicalBlockFileField)
        try:
            self.state = 3314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.SCOPECOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3310
                self.scopeField()
                pass
            elif token in [LLVMParser.FILECOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3311
                self.fileField()
                pass
            elif token in [LLVMParser.DISCRIMINATORCOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3312
                self.match(LLVMParser.DISCRIMINATORCOLON)
                self.state = 3313
                self.intLit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDILOCATION(self):
            return self.getToken(LLVMParser.NOTDILOCATION, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diLocationFields(self):
            return self.getTypedRuleContext(LLVMParser.DiLocationFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLocation" ):
                listener.enterDiLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLocation" ):
                listener.exitDiLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiLocation" ):
                return visitor.visitDiLocation(self)
            else:
                return visitor.visitChildren(self)




    def diLocation(self):

        localctx = LLVMParser.DiLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_diLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3316
            self.match(LLVMParser.NOTDILOCATION)
            self.state = 3317
            self.match(LLVMParser.LPAREN)
            self.state = 3318
            self.diLocationFields()
            self.state = 3319
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLocationFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diLocationFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiLocationFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diLocationFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLocationFields" ):
                listener.enterDiLocationFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLocationFields" ):
                listener.exitDiLocationFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiLocationFields" ):
                return visitor.visitDiLocationFields(self)
            else:
                return visitor.visitChildren(self)




    def diLocationFields(self):

        localctx = LLVMParser.DiLocationFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_diLocationFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.COLUMNCOLON or _la==LLVMParser.INLINEDATCOLON or _la==LLVMParser.LINECOLON or _la==LLVMParser.SCOPECOLON:
                self.state = 3321
                self.diLocationFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLocationFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diLocationField(self):
            return self.getTypedRuleContext(LLVMParser.DiLocationFieldContext,0)


        def diLocationFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiLocationFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diLocationFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLocationFieldList" ):
                listener.enterDiLocationFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLocationFieldList" ):
                listener.exitDiLocationFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiLocationFieldList" ):
                return visitor.visitDiLocationFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diLocationFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiLocationFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 594
        self.enterRecursionRule(localctx, 594, self.RULE_diLocationFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3325
            self.diLocationField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3332
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,149,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiLocationFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diLocationFieldList)
                    self.state = 3327
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3328
                    self.match(LLVMParser.COMMA)
                    self.state = 3329
                    self.diLocationField() 
                self.state = 3334
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiLocationFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lineField(self):
            return self.getTypedRuleContext(LLVMParser.LineFieldContext,0)


        def columnField(self):
            return self.getTypedRuleContext(LLVMParser.ColumnFieldContext,0)


        def scopeField(self):
            return self.getTypedRuleContext(LLVMParser.ScopeFieldContext,0)


        def INLINEDATCOLON(self):
            return self.getToken(LLVMParser.INLINEDATCOLON, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diLocationField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLocationField" ):
                listener.enterDiLocationField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLocationField" ):
                listener.exitDiLocationField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiLocationField" ):
                return visitor.visitDiLocationField(self)
            else:
                return visitor.visitChildren(self)




    def diLocationField(self):

        localctx = LLVMParser.DiLocationFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_diLocationField)
        try:
            self.state = 3340
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.LINECOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3335
                self.lineField()
                pass
            elif token in [LLVMParser.COLUMNCOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3336
                self.columnField()
                pass
            elif token in [LLVMParser.SCOPECOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3337
                self.scopeField()
                pass
            elif token in [LLVMParser.INLINEDATCOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3338
                self.match(LLVMParser.INLINEDATCOLON)
                self.state = 3339
                self.mdField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLocalVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDILOCALVARIABLE(self):
            return self.getToken(LLVMParser.NOTDILOCALVARIABLE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diLocalVariableFields(self):
            return self.getTypedRuleContext(LLVMParser.DiLocalVariableFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diLocalVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLocalVariable" ):
                listener.enterDiLocalVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLocalVariable" ):
                listener.exitDiLocalVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiLocalVariable" ):
                return visitor.visitDiLocalVariable(self)
            else:
                return visitor.visitChildren(self)




    def diLocalVariable(self):

        localctx = LLVMParser.DiLocalVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_diLocalVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3342
            self.match(LLVMParser.NOTDILOCALVARIABLE)
            self.state = 3343
            self.match(LLVMParser.LPAREN)
            self.state = 3344
            self.diLocalVariableFields()
            self.state = 3345
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLocalVariableFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diLocalVariableFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiLocalVariableFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diLocalVariableFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLocalVariableFields" ):
                listener.enterDiLocalVariableFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLocalVariableFields" ):
                listener.exitDiLocalVariableFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiLocalVariableFields" ):
                return visitor.visitDiLocalVariableFields(self)
            else:
                return visitor.visitChildren(self)




    def diLocalVariableFields(self):

        localctx = LLVMParser.DiLocalVariableFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_diLocalVariableFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.ALIGNCOLON or _la==LLVMParser.ARGCOLON or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (LLVMParser.FILECOLON - 154)) | (1 << (LLVMParser.FLAGSCOLON - 154)) | (1 << (LLVMParser.LINECOLON - 154)))) != 0) or _la==LLVMParser.NAMECOLON or _la==LLVMParser.SCOPECOLON or _la==LLVMParser.TYPECOLON:
                self.state = 3347
                self.diLocalVariableFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLocalVariableFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diLocalVariableField(self):
            return self.getTypedRuleContext(LLVMParser.DiLocalVariableFieldContext,0)


        def diLocalVariableFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiLocalVariableFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diLocalVariableFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLocalVariableFieldList" ):
                listener.enterDiLocalVariableFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLocalVariableFieldList" ):
                listener.exitDiLocalVariableFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiLocalVariableFieldList" ):
                return visitor.visitDiLocalVariableFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diLocalVariableFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiLocalVariableFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 602
        self.enterRecursionRule(localctx, 602, self.RULE_diLocalVariableFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3351
            self.diLocalVariableField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3358
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiLocalVariableFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diLocalVariableFieldList)
                    self.state = 3353
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3354
                    self.match(LLVMParser.COMMA)
                    self.state = 3355
                    self.diLocalVariableField() 
                self.state = 3360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiLocalVariableFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameField(self):
            return self.getTypedRuleContext(LLVMParser.NameFieldContext,0)


        def ARGCOLON(self):
            return self.getToken(LLVMParser.ARGCOLON, 0)

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def scopeField(self):
            return self.getTypedRuleContext(LLVMParser.ScopeFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMParser.LineFieldContext,0)


        def typeField(self):
            return self.getTypedRuleContext(LLVMParser.TypeFieldContext,0)


        def flagsField(self):
            return self.getTypedRuleContext(LLVMParser.FlagsFieldContext,0)


        def alignField(self):
            return self.getTypedRuleContext(LLVMParser.AlignFieldContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diLocalVariableField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLocalVariableField" ):
                listener.enterDiLocalVariableField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLocalVariableField" ):
                listener.exitDiLocalVariableField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiLocalVariableField" ):
                return visitor.visitDiLocalVariableField(self)
            else:
                return visitor.visitChildren(self)




    def diLocalVariableField(self):

        localctx = LLVMParser.DiLocalVariableFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_diLocalVariableField)
        try:
            self.state = 3370
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.NAMECOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3361
                self.nameField()
                pass
            elif token in [LLVMParser.ARGCOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3362
                self.match(LLVMParser.ARGCOLON)
                self.state = 3363
                self.intLit()
                pass
            elif token in [LLVMParser.SCOPECOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3364
                self.scopeField()
                pass
            elif token in [LLVMParser.FILECOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3365
                self.fileField()
                pass
            elif token in [LLVMParser.LINECOLON]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3366
                self.lineField()
                pass
            elif token in [LLVMParser.TYPECOLON]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3367
                self.typeField()
                pass
            elif token in [LLVMParser.FLAGSCOLON]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3368
                self.flagsField()
                pass
            elif token in [LLVMParser.ALIGNCOLON]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3369
                self.alignField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDIEXPRESSION(self):
            return self.getToken(LLVMParser.NOTDIEXPRESSION, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diExpressionFields(self):
            return self.getTypedRuleContext(LLVMParser.DiExpressionFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiExpression" ):
                listener.enterDiExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiExpression" ):
                listener.exitDiExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiExpression" ):
                return visitor.visitDiExpression(self)
            else:
                return visitor.visitChildren(self)




    def diExpression(self):

        localctx = LLVMParser.DiExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_diExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3372
            self.match(LLVMParser.NOTDIEXPRESSION)
            self.state = 3373
            self.match(LLVMParser.LPAREN)
            self.state = 3374
            self.diExpressionFields()
            self.state = 3375
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiExpressionFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diExpressionFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiExpressionFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diExpressionFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiExpressionFields" ):
                listener.enterDiExpressionFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiExpressionFields" ):
                listener.exitDiExpressionFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiExpressionFields" ):
                return visitor.visitDiExpressionFields(self)
            else:
                return visitor.visitChildren(self)




    def diExpressionFields(self):

        localctx = LLVMParser.DiExpressionFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_diExpressionFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.DWARF_OP or _la==LLVMParser.INT_LIT:
                self.state = 3377
                self.diExpressionFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiExpressionFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diExpressionField(self):
            return self.getTypedRuleContext(LLVMParser.DiExpressionFieldContext,0)


        def diExpressionFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiExpressionFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diExpressionFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiExpressionFieldList" ):
                listener.enterDiExpressionFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiExpressionFieldList" ):
                listener.exitDiExpressionFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiExpressionFieldList" ):
                return visitor.visitDiExpressionFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diExpressionFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiExpressionFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 610
        self.enterRecursionRule(localctx, 610, self.RULE_diExpressionFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3381
            self.diExpressionField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3388
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiExpressionFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diExpressionFieldList)
                    self.state = 3383
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3384
                    self.match(LLVMParser.COMMA)
                    self.state = 3385
                    self.diExpressionField() 
                self.state = 3390
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiExpressionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(LLVMParser.INT_LIT, 0)

        def dwarfOp(self):
            return self.getTypedRuleContext(LLVMParser.DwarfOpContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diExpressionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiExpressionField" ):
                listener.enterDiExpressionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiExpressionField" ):
                listener.exitDiExpressionField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiExpressionField" ):
                return visitor.visitDiExpressionField(self)
            else:
                return visitor.visitChildren(self)




    def diExpressionField(self):

        localctx = LLVMParser.DiExpressionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_diExpressionField)
        try:
            self.state = 3393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.INT_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3391
                self.match(LLVMParser.INT_LIT)
                pass
            elif token in [LLVMParser.DWARF_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3392
                self.dwarfOp()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiGlobalVariableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDIGLOBALVARIABLEEXPRESSION(self):
            return self.getToken(LLVMParser.NOTDIGLOBALVARIABLEEXPRESSION, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diGlobalVariableExpressionFields(self):
            return self.getTypedRuleContext(LLVMParser.DiGlobalVariableExpressionFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diGlobalVariableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiGlobalVariableExpression" ):
                listener.enterDiGlobalVariableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiGlobalVariableExpression" ):
                listener.exitDiGlobalVariableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiGlobalVariableExpression" ):
                return visitor.visitDiGlobalVariableExpression(self)
            else:
                return visitor.visitChildren(self)




    def diGlobalVariableExpression(self):

        localctx = LLVMParser.DiGlobalVariableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_diGlobalVariableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3395
            self.match(LLVMParser.NOTDIGLOBALVARIABLEEXPRESSION)
            self.state = 3396
            self.match(LLVMParser.LPAREN)
            self.state = 3397
            self.diGlobalVariableExpressionFields()
            self.state = 3398
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiGlobalVariableExpressionFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diGlobalVariableExpressionFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiGlobalVariableExpressionFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diGlobalVariableExpressionFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiGlobalVariableExpressionFields" ):
                listener.enterDiGlobalVariableExpressionFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiGlobalVariableExpressionFields" ):
                listener.exitDiGlobalVariableExpressionFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiGlobalVariableExpressionFields" ):
                return visitor.visitDiGlobalVariableExpressionFields(self)
            else:
                return visitor.visitChildren(self)




    def diGlobalVariableExpressionFields(self):

        localctx = LLVMParser.DiGlobalVariableExpressionFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_diGlobalVariableExpressionFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.EXPRCOLON or _la==LLVMParser.VARCOLON:
                self.state = 3400
                self.diGlobalVariableExpressionFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiGlobalVariableExpressionFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diGlobalVariableExpressionField(self):
            return self.getTypedRuleContext(LLVMParser.DiGlobalVariableExpressionFieldContext,0)


        def diGlobalVariableExpressionFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiGlobalVariableExpressionFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diGlobalVariableExpressionFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiGlobalVariableExpressionFieldList" ):
                listener.enterDiGlobalVariableExpressionFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiGlobalVariableExpressionFieldList" ):
                listener.exitDiGlobalVariableExpressionFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiGlobalVariableExpressionFieldList" ):
                return visitor.visitDiGlobalVariableExpressionFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diGlobalVariableExpressionFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiGlobalVariableExpressionFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 618
        self.enterRecursionRule(localctx, 618, self.RULE_diGlobalVariableExpressionFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3404
            self.diGlobalVariableExpressionField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3411
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiGlobalVariableExpressionFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diGlobalVariableExpressionFieldList)
                    self.state = 3406
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3407
                    self.match(LLVMParser.COMMA)
                    self.state = 3408
                    self.diGlobalVariableExpressionField() 
                self.state = 3413
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiGlobalVariableExpressionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARCOLON(self):
            return self.getToken(LLVMParser.VARCOLON, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def EXPRCOLON(self):
            return self.getToken(LLVMParser.EXPRCOLON, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diGlobalVariableExpressionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiGlobalVariableExpressionField" ):
                listener.enterDiGlobalVariableExpressionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiGlobalVariableExpressionField" ):
                listener.exitDiGlobalVariableExpressionField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiGlobalVariableExpressionField" ):
                return visitor.visitDiGlobalVariableExpressionField(self)
            else:
                return visitor.visitChildren(self)




    def diGlobalVariableExpressionField(self):

        localctx = LLVMParser.DiGlobalVariableExpressionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_diGlobalVariableExpressionField)
        try:
            self.state = 3418
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.VARCOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3414
                self.match(LLVMParser.VARCOLON)
                self.state = 3415
                self.mdField()
                pass
            elif token in [LLVMParser.EXPRCOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3416
                self.match(LLVMParser.EXPRCOLON)
                self.state = 3417
                self.mdField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiObjCPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDIOBJCPROPERTY(self):
            return self.getToken(LLVMParser.NOTDIOBJCPROPERTY, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diObjCPropertyFields(self):
            return self.getTypedRuleContext(LLVMParser.DiObjCPropertyFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diObjCProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiObjCProperty" ):
                listener.enterDiObjCProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiObjCProperty" ):
                listener.exitDiObjCProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiObjCProperty" ):
                return visitor.visitDiObjCProperty(self)
            else:
                return visitor.visitChildren(self)




    def diObjCProperty(self):

        localctx = LLVMParser.DiObjCPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_diObjCProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3420
            self.match(LLVMParser.NOTDIOBJCPROPERTY)
            self.state = 3421
            self.match(LLVMParser.LPAREN)
            self.state = 3422
            self.diObjCPropertyFields()
            self.state = 3423
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiObjCPropertyFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diObjCPropertyFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiObjCPropertyFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diObjCPropertyFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiObjCPropertyFields" ):
                listener.enterDiObjCPropertyFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiObjCPropertyFields" ):
                listener.exitDiObjCPropertyFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiObjCPropertyFields" ):
                return visitor.visitDiObjCPropertyFields(self)
            else:
                return visitor.visitChildren(self)




    def diObjCPropertyFields(self):

        localctx = LLVMParser.DiObjCPropertyFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_diObjCPropertyFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.ATTRIBUTESCOLON or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (LLVMParser.FILECOLON - 154)) | (1 << (LLVMParser.GETTERCOLON - 154)) | (1 << (LLVMParser.LINECOLON - 154)))) != 0) or _la==LLVMParser.NAMECOLON or _la==LLVMParser.SETTERCOLON or _la==LLVMParser.TYPECOLON:
                self.state = 3425
                self.diObjCPropertyFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiObjCPropertyFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diObjCPropertyField(self):
            return self.getTypedRuleContext(LLVMParser.DiObjCPropertyFieldContext,0)


        def diObjCPropertyFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiObjCPropertyFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diObjCPropertyFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiObjCPropertyFieldList" ):
                listener.enterDiObjCPropertyFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiObjCPropertyFieldList" ):
                listener.exitDiObjCPropertyFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiObjCPropertyFieldList" ):
                return visitor.visitDiObjCPropertyFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diObjCPropertyFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiObjCPropertyFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 626
        self.enterRecursionRule(localctx, 626, self.RULE_diObjCPropertyFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3429
            self.diObjCPropertyField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3436
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiObjCPropertyFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diObjCPropertyFieldList)
                    self.state = 3431
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3432
                    self.match(LLVMParser.COMMA)
                    self.state = 3433
                    self.diObjCPropertyField() 
                self.state = 3438
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiObjCPropertyFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameField(self):
            return self.getTypedRuleContext(LLVMParser.NameFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMParser.LineFieldContext,0)


        def SETTERCOLON(self):
            return self.getToken(LLVMParser.SETTERCOLON, 0)

        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def GETTERCOLON(self):
            return self.getToken(LLVMParser.GETTERCOLON, 0)

        def ATTRIBUTESCOLON(self):
            return self.getToken(LLVMParser.ATTRIBUTESCOLON, 0)

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def typeField(self):
            return self.getTypedRuleContext(LLVMParser.TypeFieldContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diObjCPropertyField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiObjCPropertyField" ):
                listener.enterDiObjCPropertyField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiObjCPropertyField" ):
                listener.exitDiObjCPropertyField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiObjCPropertyField" ):
                return visitor.visitDiObjCPropertyField(self)
            else:
                return visitor.visitChildren(self)




    def diObjCPropertyField(self):

        localctx = LLVMParser.DiObjCPropertyFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_diObjCPropertyField)
        try:
            self.state = 3449
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.NAMECOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3439
                self.nameField()
                pass
            elif token in [LLVMParser.FILECOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3440
                self.fileField()
                pass
            elif token in [LLVMParser.LINECOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3441
                self.lineField()
                pass
            elif token in [LLVMParser.SETTERCOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3442
                self.match(LLVMParser.SETTERCOLON)
                self.state = 3443
                self.stringLit()
                pass
            elif token in [LLVMParser.GETTERCOLON]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3444
                self.match(LLVMParser.GETTERCOLON)
                self.state = 3445
                self.stringLit()
                pass
            elif token in [LLVMParser.ATTRIBUTESCOLON]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3446
                self.match(LLVMParser.ATTRIBUTESCOLON)
                self.state = 3447
                self.intLit()
                pass
            elif token in [LLVMParser.TYPECOLON]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3448
                self.typeField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiImportedEntityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDIIMPORTEDENTITY(self):
            return self.getToken(LLVMParser.NOTDIIMPORTEDENTITY, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diImportedEntityFields(self):
            return self.getTypedRuleContext(LLVMParser.DiImportedEntityFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diImportedEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiImportedEntity" ):
                listener.enterDiImportedEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiImportedEntity" ):
                listener.exitDiImportedEntity(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiImportedEntity" ):
                return visitor.visitDiImportedEntity(self)
            else:
                return visitor.visitChildren(self)




    def diImportedEntity(self):

        localctx = LLVMParser.DiImportedEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_diImportedEntity)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3451
            self.match(LLVMParser.NOTDIIMPORTEDENTITY)
            self.state = 3452
            self.match(LLVMParser.LPAREN)
            self.state = 3453
            self.diImportedEntityFields()
            self.state = 3454
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiImportedEntityFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diImportedEntityFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiImportedEntityFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diImportedEntityFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiImportedEntityFields" ):
                listener.enterDiImportedEntityFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiImportedEntityFields" ):
                listener.exitDiImportedEntityFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiImportedEntityFields" ):
                return visitor.visitDiImportedEntityFields(self)
            else:
                return visitor.visitChildren(self)




    def diImportedEntityFields(self):

        localctx = LLVMParser.DiImportedEntityFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_diImportedEntityFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.ENTITYCOLON or _la==LLVMParser.FILECOLON or _la==LLVMParser.LINECOLON or _la==LLVMParser.NAMECOLON or _la==LLVMParser.SCOPECOLON or _la==LLVMParser.TAGCOLON:
                self.state = 3456
                self.diImportedEntityFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiImportedEntityFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diImportedEntityField(self):
            return self.getTypedRuleContext(LLVMParser.DiImportedEntityFieldContext,0)


        def diImportedEntityFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiImportedEntityFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diImportedEntityFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiImportedEntityFieldList" ):
                listener.enterDiImportedEntityFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiImportedEntityFieldList" ):
                listener.exitDiImportedEntityFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiImportedEntityFieldList" ):
                return visitor.visitDiImportedEntityFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diImportedEntityFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiImportedEntityFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 634
        self.enterRecursionRule(localctx, 634, self.RULE_diImportedEntityFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3460
            self.diImportedEntityField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3467
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiImportedEntityFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diImportedEntityFieldList)
                    self.state = 3462
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3463
                    self.match(LLVMParser.COMMA)
                    self.state = 3464
                    self.diImportedEntityField() 
                self.state = 3469
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiImportedEntityFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tagField(self):
            return self.getTypedRuleContext(LLVMParser.TagFieldContext,0)


        def scopeField(self):
            return self.getTypedRuleContext(LLVMParser.ScopeFieldContext,0)


        def ENTITYCOLON(self):
            return self.getToken(LLVMParser.ENTITYCOLON, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMParser.LineFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMParser.NameFieldContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diImportedEntityField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiImportedEntityField" ):
                listener.enterDiImportedEntityField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiImportedEntityField" ):
                listener.exitDiImportedEntityField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiImportedEntityField" ):
                return visitor.visitDiImportedEntityField(self)
            else:
                return visitor.visitChildren(self)




    def diImportedEntityField(self):

        localctx = LLVMParser.DiImportedEntityFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_diImportedEntityField)
        try:
            self.state = 3477
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.TAGCOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3470
                self.tagField()
                pass
            elif token in [LLVMParser.SCOPECOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3471
                self.scopeField()
                pass
            elif token in [LLVMParser.ENTITYCOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3472
                self.match(LLVMParser.ENTITYCOLON)
                self.state = 3473
                self.mdField()
                pass
            elif token in [LLVMParser.FILECOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3474
                self.fileField()
                pass
            elif token in [LLVMParser.LINECOLON]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3475
                self.lineField()
                pass
            elif token in [LLVMParser.NAMECOLON]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3476
                self.nameField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiMacroContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDIMACRO(self):
            return self.getToken(LLVMParser.NOTDIMACRO, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diMacroFields(self):
            return self.getTypedRuleContext(LLVMParser.DiMacroFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diMacro

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiMacro" ):
                listener.enterDiMacro(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiMacro" ):
                listener.exitDiMacro(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiMacro" ):
                return visitor.visitDiMacro(self)
            else:
                return visitor.visitChildren(self)




    def diMacro(self):

        localctx = LLVMParser.DiMacroContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_diMacro)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3479
            self.match(LLVMParser.NOTDIMACRO)
            self.state = 3480
            self.match(LLVMParser.LPAREN)
            self.state = 3481
            self.diMacroFields()
            self.state = 3482
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiMacroFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diMacroFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiMacroFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diMacroFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiMacroFields" ):
                listener.enterDiMacroFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiMacroFields" ):
                listener.exitDiMacroFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiMacroFields" ):
                return visitor.visitDiMacroFields(self)
            else:
                return visitor.visitChildren(self)




    def diMacroFields(self):

        localctx = LLVMParser.DiMacroFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_diMacroFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.LINECOLON or _la==LLVMParser.NAMECOLON or _la==LLVMParser.TYPECOLON or _la==LLVMParser.VALUECOLON:
                self.state = 3484
                self.diMacroFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiMacroFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diMacroField(self):
            return self.getTypedRuleContext(LLVMParser.DiMacroFieldContext,0)


        def diMacroFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiMacroFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diMacroFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiMacroFieldList" ):
                listener.enterDiMacroFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiMacroFieldList" ):
                listener.exitDiMacroFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiMacroFieldList" ):
                return visitor.visitDiMacroFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diMacroFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiMacroFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 642
        self.enterRecursionRule(localctx, 642, self.RULE_diMacroFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3488
            self.diMacroField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3495
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiMacroFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diMacroFieldList)
                    self.state = 3490
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3491
                    self.match(LLVMParser.COMMA)
                    self.state = 3492
                    self.diMacroField() 
                self.state = 3497
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiMacroFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeMacinfoField(self):
            return self.getTypedRuleContext(LLVMParser.TypeMacinfoFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMParser.LineFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMParser.NameFieldContext,0)


        def VALUECOLON(self):
            return self.getToken(LLVMParser.VALUECOLON, 0)

        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diMacroField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiMacroField" ):
                listener.enterDiMacroField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiMacroField" ):
                listener.exitDiMacroField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiMacroField" ):
                return visitor.visitDiMacroField(self)
            else:
                return visitor.visitChildren(self)




    def diMacroField(self):

        localctx = LLVMParser.DiMacroFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_diMacroField)
        try:
            self.state = 3503
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.TYPECOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3498
                self.typeMacinfoField()
                pass
            elif token in [LLVMParser.LINECOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3499
                self.lineField()
                pass
            elif token in [LLVMParser.NAMECOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3500
                self.nameField()
                pass
            elif token in [LLVMParser.VALUECOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3501
                self.match(LLVMParser.VALUECOLON)
                self.state = 3502
                self.stringLit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiMacroFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTDIMACROFILE(self):
            return self.getToken(LLVMParser.NOTDIMACROFILE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def diMacroFileFields(self):
            return self.getTypedRuleContext(LLVMParser.DiMacroFileFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diMacroFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiMacroFile" ):
                listener.enterDiMacroFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiMacroFile" ):
                listener.exitDiMacroFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiMacroFile" ):
                return visitor.visitDiMacroFile(self)
            else:
                return visitor.visitChildren(self)




    def diMacroFile(self):

        localctx = LLVMParser.DiMacroFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_diMacroFile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3505
            self.match(LLVMParser.NOTDIMACROFILE)
            self.state = 3506
            self.match(LLVMParser.LPAREN)
            self.state = 3507
            self.diMacroFileFields()
            self.state = 3508
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiMacroFileFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diMacroFileFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiMacroFileFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diMacroFileFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiMacroFileFields" ):
                listener.enterDiMacroFileFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiMacroFileFields" ):
                listener.exitDiMacroFileFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiMacroFileFields" ):
                return visitor.visitDiMacroFileFields(self)
            else:
                return visitor.visitChildren(self)




    def diMacroFileFields(self):

        localctx = LLVMParser.DiMacroFileFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_diMacroFileFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.FILECOLON or _la==LLVMParser.LINECOLON or _la==LLVMParser.NODESCOLON or _la==LLVMParser.TYPECOLON:
                self.state = 3510
                self.diMacroFileFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiMacroFileFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diMacroFileField(self):
            return self.getTypedRuleContext(LLVMParser.DiMacroFileFieldContext,0)


        def diMacroFileFieldList(self):
            return self.getTypedRuleContext(LLVMParser.DiMacroFileFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diMacroFileFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiMacroFileFieldList" ):
                listener.enterDiMacroFileFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiMacroFileFieldList" ):
                listener.exitDiMacroFileFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiMacroFileFieldList" ):
                return visitor.visitDiMacroFileFieldList(self)
            else:
                return visitor.visitChildren(self)



    def diMacroFileFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiMacroFileFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 650
        self.enterRecursionRule(localctx, 650, self.RULE_diMacroFileFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3514
            self.diMacroFileField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3521
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiMacroFileFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diMacroFileFieldList)
                    self.state = 3516
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3517
                    self.match(LLVMParser.COMMA)
                    self.state = 3518
                    self.diMacroFileField() 
                self.state = 3523
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiMacroFileFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeMacinfoField(self):
            return self.getTypedRuleContext(LLVMParser.TypeMacinfoFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMParser.LineFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMParser.FileFieldContext,0)


        def NODESCOLON(self):
            return self.getToken(LLVMParser.NODESCOLON, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_diMacroFileField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiMacroFileField" ):
                listener.enterDiMacroFileField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiMacroFileField" ):
                listener.exitDiMacroFileField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiMacroFileField" ):
                return visitor.visitDiMacroFileField(self)
            else:
                return visitor.visitChildren(self)




    def diMacroFileField(self):

        localctx = LLVMParser.DiMacroFileFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_diMacroFileField)
        try:
            self.state = 3529
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.TYPECOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3524
                self.typeMacinfoField()
                pass
            elif token in [LLVMParser.LINECOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3525
                self.lineField()
                pass
            elif token in [LLVMParser.FILECOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3526
                self.fileField()
                pass
            elif token in [LLVMParser.NODESCOLON]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3527
                self.match(LLVMParser.NODESCOLON)
                self.state = 3528
                self.mdField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericDINodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTGENERICDINODE(self):
            return self.getToken(LLVMParser.NOTGENERICDINODE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def genericDINodeFields(self):
            return self.getTypedRuleContext(LLVMParser.GenericDINodeFieldsContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_genericDINode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericDINode" ):
                listener.enterGenericDINode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericDINode" ):
                listener.exitGenericDINode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericDINode" ):
                return visitor.visitGenericDINode(self)
            else:
                return visitor.visitChildren(self)




    def genericDINode(self):

        localctx = LLVMParser.GenericDINodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_genericDINode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3531
            self.match(LLVMParser.NOTGENERICDINODE)
            self.state = 3532
            self.match(LLVMParser.LPAREN)
            self.state = 3533
            self.genericDINodeFields()
            self.state = 3534
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericDINodeFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericDINodeFieldList(self):
            return self.getTypedRuleContext(LLVMParser.GenericDINodeFieldListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_genericDINodeFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericDINodeFields" ):
                listener.enterGenericDINodeFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericDINodeFields" ):
                listener.exitGenericDINodeFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericDINodeFields" ):
                return visitor.visitGenericDINodeFields(self)
            else:
                return visitor.visitChildren(self)




    def genericDINodeFields(self):

        localctx = LLVMParser.GenericDINodeFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_genericDINodeFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.HEADERCOLON or _la==LLVMParser.OPERANDSCOLON or _la==LLVMParser.TAGCOLON:
                self.state = 3536
                self.genericDINodeFieldList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericDINodeFieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericDINodeField(self):
            return self.getTypedRuleContext(LLVMParser.GenericDINodeFieldContext,0)


        def genericDINodeFieldList(self):
            return self.getTypedRuleContext(LLVMParser.GenericDINodeFieldListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_genericDINodeFieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericDINodeFieldList" ):
                listener.enterGenericDINodeFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericDINodeFieldList" ):
                listener.exitGenericDINodeFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericDINodeFieldList" ):
                return visitor.visitGenericDINodeFieldList(self)
            else:
                return visitor.visitChildren(self)



    def genericDINodeFieldList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.GenericDINodeFieldListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 658
        self.enterRecursionRule(localctx, 658, self.RULE_genericDINodeFieldList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3540
            self.genericDINodeField()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3547
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.GenericDINodeFieldListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_genericDINodeFieldList)
                    self.state = 3542
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3543
                    self.match(LLVMParser.COMMA)
                    self.state = 3544
                    self.genericDINodeField() 
                self.state = 3549
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class GenericDINodeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tagField(self):
            return self.getTypedRuleContext(LLVMParser.TagFieldContext,0)


        def HEADERCOLON(self):
            return self.getToken(LLVMParser.HEADERCOLON, 0)

        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def OPERANDSCOLON(self):
            return self.getToken(LLVMParser.OPERANDSCOLON, 0)

        def mdFields(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldsContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_genericDINodeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericDINodeField" ):
                listener.enterGenericDINodeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericDINodeField" ):
                listener.exitGenericDINodeField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericDINodeField" ):
                return visitor.visitGenericDINodeField(self)
            else:
                return visitor.visitChildren(self)




    def genericDINodeField(self):

        localctx = LLVMParser.GenericDINodeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_genericDINodeField)
        try:
            self.state = 3555
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.TAGCOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3550
                self.tagField()
                pass
            elif token in [LLVMParser.HEADERCOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3551
                self.match(LLVMParser.HEADERCOLON)
                self.state = 3552
                self.stringLit()
                pass
            elif token in [LLVMParser.OPERANDSCOLON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3553
                self.match(LLVMParser.OPERANDSCOLON)
                self.state = 3554
                self.mdFields()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILECOLON(self):
            return self.getToken(LLVMParser.FILECOLON, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_fileField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileField" ):
                listener.enterFileField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileField" ):
                listener.exitFileField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileField" ):
                return visitor.visitFileField(self)
            else:
                return visitor.visitChildren(self)




    def fileField(self):

        localctx = LLVMParser.FileFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_fileField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3557
            self.match(LLVMParser.FILECOLON)
            self.state = 3558
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsOptimizedFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISOPTIMIZEDCOLON(self):
            return self.getToken(LLVMParser.ISOPTIMIZEDCOLON, 0)

        def boolLit(self):
            return self.getTypedRuleContext(LLVMParser.BoolLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_isOptimizedField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsOptimizedField" ):
                listener.enterIsOptimizedField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsOptimizedField" ):
                listener.exitIsOptimizedField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsOptimizedField" ):
                return visitor.visitIsOptimizedField(self)
            else:
                return visitor.visitChildren(self)




    def isOptimizedField(self):

        localctx = LLVMParser.IsOptimizedFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_isOptimizedField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3560
            self.match(LLVMParser.ISOPTIMIZEDCOLON)
            self.state = 3561
            self.boolLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAGCOLON(self):
            return self.getToken(LLVMParser.TAGCOLON, 0)

        def dwarfTag(self):
            return self.getTypedRuleContext(LLVMParser.DwarfTagContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_tagField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTagField" ):
                listener.enterTagField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTagField" ):
                listener.exitTagField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTagField" ):
                return visitor.visitTagField(self)
            else:
                return visitor.visitChildren(self)




    def tagField(self):

        localctx = LLVMParser.TagFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_tagField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3563
            self.match(LLVMParser.TAGCOLON)
            self.state = 3564
            self.dwarfTag()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMECOLON(self):
            return self.getToken(LLVMParser.NAMECOLON, 0)

        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_nameField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameField" ):
                listener.enterNameField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameField" ):
                listener.exitNameField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameField" ):
                return visitor.visitNameField(self)
            else:
                return visitor.visitChildren(self)




    def nameField(self):

        localctx = LLVMParser.NameFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_nameField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3566
            self.match(LLVMParser.NAMECOLON)
            self.state = 3567
            self.stringLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZECOLON(self):
            return self.getToken(LLVMParser.SIZECOLON, 0)

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_sizeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeField" ):
                listener.enterSizeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeField" ):
                listener.exitSizeField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSizeField" ):
                return visitor.visitSizeField(self)
            else:
                return visitor.visitChildren(self)




    def sizeField(self):

        localctx = LLVMParser.SizeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_sizeField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3569
            self.match(LLVMParser.SIZECOLON)
            self.state = 3570
            self.intLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIGNCOLON(self):
            return self.getToken(LLVMParser.ALIGNCOLON, 0)

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_alignField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignField" ):
                listener.enterAlignField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignField" ):
                listener.exitAlignField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlignField" ):
                return visitor.visitAlignField(self)
            else:
                return visitor.visitChildren(self)




    def alignField(self):

        localctx = LLVMParser.AlignFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_alignField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3572
            self.match(LLVMParser.ALIGNCOLON)
            self.state = 3573
            self.intLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlagsFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLAGSCOLON(self):
            return self.getToken(LLVMParser.FLAGSCOLON, 0)

        def diFlagList(self):
            return self.getTypedRuleContext(LLVMParser.DiFlagListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_flagsField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlagsField" ):
                listener.enterFlagsField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlagsField" ):
                listener.exitFlagsField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlagsField" ):
                return visitor.visitFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def flagsField(self):

        localctx = LLVMParser.FlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_flagsField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3575
            self.match(LLVMParser.FLAGSCOLON)
            self.state = 3576
            self.diFlagList(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINECOLON(self):
            return self.getToken(LLVMParser.LINECOLON, 0)

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_lineField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineField" ):
                listener.enterLineField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineField" ):
                listener.exitLineField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineField" ):
                return visitor.visitLineField(self)
            else:
                return visitor.visitChildren(self)




    def lineField(self):

        localctx = LLVMParser.LineFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_lineField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3578
            self.match(LLVMParser.LINECOLON)
            self.state = 3579
            self.intLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPECOLON(self):
            return self.getToken(LLVMParser.SCOPECOLON, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_scopeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScopeField" ):
                listener.enterScopeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScopeField" ):
                listener.exitScopeField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScopeField" ):
                return visitor.visitScopeField(self)
            else:
                return visitor.visitChildren(self)




    def scopeField(self):

        localctx = LLVMParser.ScopeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_scopeField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3581
            self.match(LLVMParser.SCOPECOLON)
            self.state = 3582
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseTypeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BASETYPECOLON(self):
            return self.getToken(LLVMParser.BASETYPECOLON, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_baseTypeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseTypeField" ):
                listener.enterBaseTypeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseTypeField" ):
                listener.exitBaseTypeField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBaseTypeField" ):
                return visitor.visitBaseTypeField(self)
            else:
                return visitor.visitChildren(self)




    def baseTypeField(self):

        localctx = LLVMParser.BaseTypeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_baseTypeField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3584
            self.match(LLVMParser.BASETYPECOLON)
            self.state = 3585
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSETCOLON(self):
            return self.getToken(LLVMParser.OFFSETCOLON, 0)

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_offsetField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffsetField" ):
                listener.enterOffsetField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffsetField" ):
                listener.exitOffsetField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOffsetField" ):
                return visitor.visitOffsetField(self)
            else:
                return visitor.visitChildren(self)




    def offsetField(self):

        localctx = LLVMParser.OffsetFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_offsetField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3587
            self.match(LLVMParser.OFFSETCOLON)
            self.state = 3588
            self.intLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateParamsFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEMPLATEPARAMSCOLON(self):
            return self.getToken(LLVMParser.TEMPLATEPARAMSCOLON, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_templateParamsField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateParamsField" ):
                listener.enterTemplateParamsField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateParamsField" ):
                listener.exitTemplateParamsField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateParamsField" ):
                return visitor.visitTemplateParamsField(self)
            else:
                return visitor.visitChildren(self)




    def templateParamsField(self):

        localctx = LLVMParser.TemplateParamsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_templateParamsField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3590
            self.match(LLVMParser.TEMPLATEPARAMSCOLON)
            self.state = 3591
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntOrMDFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(LLVMParser.INT_LIT, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_intOrMDField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntOrMDField" ):
                listener.enterIntOrMDField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntOrMDField" ):
                listener.exitIntOrMDField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntOrMDField" ):
                return visitor.visitIntOrMDField(self)
            else:
                return visitor.visitChildren(self)




    def intOrMDField(self):

        localctx = LLVMParser.IntOrMDFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_intOrMDField)
        try:
            self.state = 3595
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.INT_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3593
                self.match(LLVMParser.INT_LIT)
                pass
            elif token in [LLVMParser.LT, LLVMParser.BANG, LLVMParser.LBRACK, LLVMParser.LBRACE, LLVMParser.NOTDIBASICTYPE, LLVMParser.NOTDICOMPILEUNIT, LLVMParser.NOTDICOMPOSITETYPE, LLVMParser.NOTDIDERIVEDTYPE, LLVMParser.NOTDIENUMERATOR, LLVMParser.NOTDIEXPRESSION, LLVMParser.NOTDIFILE, LLVMParser.NOTDIGLOBALVARIABLE, LLVMParser.NOTDIGLOBALVARIABLEEXPRESSION, LLVMParser.NOTDIIMPORTEDENTITY, LLVMParser.NOTDILEXICALBLOCK, LLVMParser.NOTDILEXICALBLOCKFILE, LLVMParser.NOTDILOCALVARIABLE, LLVMParser.NOTDILOCATION, LLVMParser.NOTDIMACRO, LLVMParser.NOTDIMACROFILE, LLVMParser.NOTDIMODULE, LLVMParser.NOTDINAMESPACE, LLVMParser.NOTDIOBJCPROPERTY, LLVMParser.NOTDISUBPROGRAM, LLVMParser.NOTDISUBRANGE, LLVMParser.NOTDISUBROUTINETYPE, LLVMParser.NOTDITEMPLATETYPEPARAMETER, LLVMParser.NOTDITEMPLATEVALUEPARAMETER, LLVMParser.DOUBLE, LLVMParser.FLOAT, LLVMParser.FP128, LLVMParser.NOTGENERICDINODE, LLVMParser.HALF, LLVMParser.LABEL, LLVMParser.METADATA, LLVMParser.NULL, LLVMParser.PPC_FP128, LLVMParser.TOKEN, LLVMParser.VOID, LLVMParser.X86_FP80, LLVMParser.X86_MMX, LLVMParser.METADATA_ID, LLVMParser.INT_TYPE, LLVMParser.LOCAL_IDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3594
                self.mdField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPECOLON(self):
            return self.getToken(LLVMParser.TYPECOLON, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_typeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeField" ):
                listener.enterTypeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeField" ):
                listener.exitTypeField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeField" ):
                return visitor.visitTypeField(self)
            else:
                return visitor.visitChildren(self)




    def typeField(self):

        localctx = LLVMParser.TypeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_typeField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3597
            self.match(LLVMParser.TYPECOLON)
            self.state = 3598
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinkageNameFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINKAGENAMECOLON(self):
            return self.getToken(LLVMParser.LINKAGENAMECOLON, 0)

        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_linkageNameField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkageNameField" ):
                listener.enterLinkageNameField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkageNameField" ):
                listener.exitLinkageNameField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinkageNameField" ):
                return visitor.visitLinkageNameField(self)
            else:
                return visitor.visitChildren(self)




    def linkageNameField(self):

        localctx = LLVMParser.LinkageNameFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_linkageNameField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3600
            self.match(LLVMParser.LINKAGENAMECOLON)
            self.state = 3601
            self.stringLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsLocalFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISLOCALCOLON(self):
            return self.getToken(LLVMParser.ISLOCALCOLON, 0)

        def boolLit(self):
            return self.getTypedRuleContext(LLVMParser.BoolLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_isLocalField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsLocalField" ):
                listener.enterIsLocalField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsLocalField" ):
                listener.exitIsLocalField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsLocalField" ):
                return visitor.visitIsLocalField(self)
            else:
                return visitor.visitChildren(self)




    def isLocalField(self):

        localctx = LLVMParser.IsLocalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_isLocalField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3603
            self.match(LLVMParser.ISLOCALCOLON)
            self.state = 3604
            self.boolLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsDefinitionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISDEFINITIONCOLON(self):
            return self.getToken(LLVMParser.ISDEFINITIONCOLON, 0)

        def boolLit(self):
            return self.getTypedRuleContext(LLVMParser.BoolLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_isDefinitionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsDefinitionField" ):
                listener.enterIsDefinitionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsDefinitionField" ):
                listener.exitIsDefinitionField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsDefinitionField" ):
                return visitor.visitIsDefinitionField(self)
            else:
                return visitor.visitChildren(self)




    def isDefinitionField(self):

        localctx = LLVMParser.IsDefinitionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_isDefinitionField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3606
            self.match(LLVMParser.ISDEFINITIONCOLON)
            self.state = 3607
            self.boolLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARATIONCOLON(self):
            return self.getToken(LLVMParser.DECLARATIONCOLON, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_declarationField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationField" ):
                listener.enterDeclarationField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationField" ):
                listener.exitDeclarationField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationField" ):
                return visitor.visitDeclarationField(self)
            else:
                return visitor.visitChildren(self)




    def declarationField(self):

        localctx = LLVMParser.DeclarationFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_declarationField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3609
            self.match(LLVMParser.DECLARATIONCOLON)
            self.state = 3610
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMNCOLON(self):
            return self.getToken(LLVMParser.COLUMNCOLON, 0)

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_columnField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnField" ):
                listener.enterColumnField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnField" ):
                listener.exitColumnField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnField" ):
                return visitor.visitColumnField(self)
            else:
                return visitor.visitChildren(self)




    def columnField(self):

        localctx = LLVMParser.ColumnFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_columnField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3612
            self.match(LLVMParser.COLUMNCOLON)
            self.state = 3613
            self.intLit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeMacinfoFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPECOLON(self):
            return self.getToken(LLVMParser.TYPECOLON, 0)

        def dwarfMacinfo(self):
            return self.getTypedRuleContext(LLVMParser.DwarfMacinfoContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_typeMacinfoField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeMacinfoField" ):
                listener.enterTypeMacinfoField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeMacinfoField" ):
                listener.exitTypeMacinfoField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeMacinfoField" ):
                return visitor.visitTypeMacinfoField(self)
            else:
                return visitor.visitChildren(self)




    def typeMacinfoField(self):

        localctx = LLVMParser.TypeMacinfoFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_typeMacinfoField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3615
            self.match(LLVMParser.TYPECOLON)
            self.state = 3616
            self.dwarfMacinfo()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChecksumkindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECKSUM_KIND(self):
            return self.getToken(LLVMParser.CHECKSUM_KIND, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_checksumkind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecksumkind" ):
                listener.enterChecksumkind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecksumkind" ):
                listener.exitChecksumkind(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChecksumkind" ):
                return visitor.visitChecksumkind(self)
            else:
                return visitor.visitChildren(self)




    def checksumkind(self):

        localctx = LLVMParser.ChecksumkindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_checksumkind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3618
            self.match(LLVMParser.CHECKSUM_KIND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiFlagListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diFlag(self):
            return self.getTypedRuleContext(LLVMParser.DiFlagContext,0)


        def diFlagList(self):
            return self.getTypedRuleContext(LLVMParser.DiFlagListContext,0)


        def VDASH(self):
            return self.getToken(LLVMParser.VDASH, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diFlagList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiFlagList" ):
                listener.enterDiFlagList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiFlagList" ):
                listener.exitDiFlagList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiFlagList" ):
                return visitor.visitDiFlagList(self)
            else:
                return visitor.visitChildren(self)



    def diFlagList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.DiFlagListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 704
        self.enterRecursionRule(localctx, 704, self.RULE_diFlagList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3621
            self.diFlag()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3628
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.DiFlagListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_diFlagList)
                    self.state = 3623
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3624
                    self.match(LLVMParser.VDASH)
                    self.state = 3625
                    self.diFlag() 
                self.state = 3630
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DiFlagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def DI_FLAG(self):
            return self.getToken(LLVMParser.DI_FLAG, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_diFlag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiFlag" ):
                listener.enterDiFlag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiFlag" ):
                listener.exitDiFlag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiFlag" ):
                return visitor.visitDiFlag(self)
            else:
                return visitor.visitChildren(self)




    def diFlag(self):

        localctx = LLVMParser.DiFlagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_diFlag)
        try:
            self.state = 3633
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.INT_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3631
                self.intLit()
                pass
            elif token in [LLVMParser.DI_FLAG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3632
                self.match(LLVMParser.DI_FLAG)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DwarfAttEncodingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def DWARF_ATT_ENCODING(self):
            return self.getToken(LLVMParser.DWARF_ATT_ENCODING, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_dwarfAttEncoding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDwarfAttEncoding" ):
                listener.enterDwarfAttEncoding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDwarfAttEncoding" ):
                listener.exitDwarfAttEncoding(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDwarfAttEncoding" ):
                return visitor.visitDwarfAttEncoding(self)
            else:
                return visitor.visitChildren(self)




    def dwarfAttEncoding(self):

        localctx = LLVMParser.DwarfAttEncodingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_dwarfAttEncoding)
        try:
            self.state = 3637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.INT_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3635
                self.intLit()
                pass
            elif token in [LLVMParser.DWARF_ATT_ENCODING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3636
                self.match(LLVMParser.DWARF_ATT_ENCODING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DwarfCCContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def DWARF_CC(self):
            return self.getToken(LLVMParser.DWARF_CC, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_dwarfCC

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDwarfCC" ):
                listener.enterDwarfCC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDwarfCC" ):
                listener.exitDwarfCC(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDwarfCC" ):
                return visitor.visitDwarfCC(self)
            else:
                return visitor.visitChildren(self)




    def dwarfCC(self):

        localctx = LLVMParser.DwarfCCContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_dwarfCC)
        try:
            self.state = 3641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.INT_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3639
                self.intLit()
                pass
            elif token in [LLVMParser.DWARF_CC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3640
                self.match(LLVMParser.DWARF_CC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DwarfLangContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def DWARF_LANG(self):
            return self.getToken(LLVMParser.DWARF_LANG, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_dwarfLang

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDwarfLang" ):
                listener.enterDwarfLang(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDwarfLang" ):
                listener.exitDwarfLang(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDwarfLang" ):
                return visitor.visitDwarfLang(self)
            else:
                return visitor.visitChildren(self)




    def dwarfLang(self):

        localctx = LLVMParser.DwarfLangContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_dwarfLang)
        try:
            self.state = 3645
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.INT_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3643
                self.intLit()
                pass
            elif token in [LLVMParser.DWARF_LANG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3644
                self.match(LLVMParser.DWARF_LANG)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DwarfMacinfoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def DWARF_MACINFO(self):
            return self.getToken(LLVMParser.DWARF_MACINFO, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_dwarfMacinfo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDwarfMacinfo" ):
                listener.enterDwarfMacinfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDwarfMacinfo" ):
                listener.exitDwarfMacinfo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDwarfMacinfo" ):
                return visitor.visitDwarfMacinfo(self)
            else:
                return visitor.visitChildren(self)




    def dwarfMacinfo(self):

        localctx = LLVMParser.DwarfMacinfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_dwarfMacinfo)
        try:
            self.state = 3649
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.INT_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3647
                self.intLit()
                pass
            elif token in [LLVMParser.DWARF_MACINFO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3648
                self.match(LLVMParser.DWARF_MACINFO)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DwarfOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DWARF_OP(self):
            return self.getToken(LLVMParser.DWARF_OP, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_dwarfOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDwarfOp" ):
                listener.enterDwarfOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDwarfOp" ):
                listener.exitDwarfOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDwarfOp" ):
                return visitor.visitDwarfOp(self)
            else:
                return visitor.visitChildren(self)




    def dwarfOp(self):

        localctx = LLVMParser.DwarfOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_dwarfOp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3651
            self.match(LLVMParser.DWARF_OP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DwarfTagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def DWARF_TAG(self):
            return self.getToken(LLVMParser.DWARF_TAG, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_dwarfTag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDwarfTag" ):
                listener.enterDwarfTag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDwarfTag" ):
                listener.exitDwarfTag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDwarfTag" ):
                return visitor.visitDwarfTag(self)
            else:
                return visitor.visitChildren(self)




    def dwarfTag(self):

        localctx = LLVMParser.DwarfTagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_dwarfTag)
        try:
            self.state = 3655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.INT_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3653
                self.intLit()
                pass
            elif token in [LLVMParser.DWARF_TAG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3654
                self.match(LLVMParser.DWARF_TAG)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DwarfVirtualityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def DWARF_VIRTUALITY(self):
            return self.getToken(LLVMParser.DWARF_VIRTUALITY, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_dwarfVirtuality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDwarfVirtuality" ):
                listener.enterDwarfVirtuality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDwarfVirtuality" ):
                listener.exitDwarfVirtuality(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDwarfVirtuality" ):
                return visitor.visitDwarfVirtuality(self)
            else:
                return visitor.visitChildren(self)




    def dwarfVirtuality(self):

        localctx = LLVMParser.DwarfVirtualityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_dwarfVirtuality)
        try:
            self.state = 3659
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.INT_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3657
                self.intLit()
                pass
            elif token in [LLVMParser.DWARF_VIRTUALITY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3658
                self.match(LLVMParser.DWARF_VIRTUALITY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmissionKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intLit(self):
            return self.getTypedRuleContext(LLVMParser.IntLitContext,0)


        def FULLDEBUG(self):
            return self.getToken(LLVMParser.FULLDEBUG, 0)

        def LINETABLESONLY(self):
            return self.getToken(LLVMParser.LINETABLESONLY, 0)

        def NODEBUG(self):
            return self.getToken(LLVMParser.NODEBUG, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_emissionKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmissionKind" ):
                listener.enterEmissionKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmissionKind" ):
                listener.exitEmissionKind(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmissionKind" ):
                return visitor.visitEmissionKind(self)
            else:
                return visitor.visitChildren(self)




    def emissionKind(self):

        localctx = LLVMParser.EmissionKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_emissionKind)
        try:
            self.state = 3665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.INT_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3661
                self.intLit()
                pass
            elif token in [LLVMParser.FULLDEBUG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3662
                self.match(LLVMParser.FULLDEBUG)
                pass
            elif token in [LLVMParser.LINETABLESONLY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3663
                self.match(LLVMParser.LINETABLESONLY)
                pass
            elif token in [LLVMParser.NODEBUG]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3664
                self.match(LLVMParser.NODEBUG)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeValuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValueList(self):
            return self.getTypedRuleContext(LLVMParser.TypeValueListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_typeValues

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeValues" ):
                listener.enterTypeValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeValues" ):
                listener.exitTypeValues(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeValues" ):
                return visitor.visitTypeValues(self)
            else:
                return visitor.visitChildren(self)




    def typeValues(self):

        localctx = LLVMParser.TypeValuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_typeValues)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LLVMParser.LT) | (1 << LLVMParser.LBRACK) | (1 << LLVMParser.LBRACE))) != 0) or ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (LLVMParser.DOUBLE - 126)) | (1 << (LLVMParser.FLOAT - 126)) | (1 << (LLVMParser.FP128 - 126)) | (1 << (LLVMParser.HALF - 126)))) != 0) or _la==LLVMParser.LABEL or _la==LLVMParser.METADATA or _la==LLVMParser.PPC_FP128 or ((((_la - 351)) & ~0x3f) == 0 and ((1 << (_la - 351)) & ((1 << (LLVMParser.TOKEN - 351)) | (1 << (LLVMParser.VOID - 351)) | (1 << (LLVMParser.X86_FP80 - 351)) | (1 << (LLVMParser.X86_MMX - 351)))) != 0) or _la==LLVMParser.INT_TYPE or _la==LLVMParser.LOCAL_IDENT:
                self.state = 3667
                self.typeValueList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMParser.TypeValueContext,0)


        def typeValueList(self):
            return self.getTypedRuleContext(LLVMParser.TypeValueListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_typeValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeValueList" ):
                listener.enterTypeValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeValueList" ):
                listener.exitTypeValueList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeValueList" ):
                return visitor.visitTypeValueList(self)
            else:
                return visitor.visitChildren(self)



    def typeValueList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.TypeValueListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 726
        self.enterRecursionRule(localctx, 726, self.RULE_typeValueList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3671
            self.typeValue()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3677
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,186,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.TypeValueListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeValueList)
                    self.state = 3673
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3674
                    self.typeValue() 
                self.state = 3679
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CommaSepTypeValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMParser.TypeValueContext,0)


        def commaSepTypeValueList(self):
            return self.getTypedRuleContext(LLVMParser.CommaSepTypeValueListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_commaSepTypeValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommaSepTypeValueList" ):
                listener.enterCommaSepTypeValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommaSepTypeValueList" ):
                listener.exitCommaSepTypeValueList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommaSepTypeValueList" ):
                return visitor.visitCommaSepTypeValueList(self)
            else:
                return visitor.visitChildren(self)



    def commaSepTypeValueList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.CommaSepTypeValueListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 728
        self.enterRecursionRule(localctx, 728, self.RULE_commaSepTypeValueList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3681
            self.typeValue()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3688
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.CommaSepTypeValueListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_commaSepTypeValueList)
                    self.state = 3683
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3684
                    self.match(LLVMParser.COMMA)
                    self.state = 3685
                    self.typeValue() 
                self.state = 3690
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_typeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeValue" ):
                listener.enterTypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeValue" ):
                listener.exitTypeValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeValue" ):
                return visitor.visitTypeValue(self)
            else:
                return visitor.visitChildren(self)




    def typeValue(self):

        localctx = LLVMParser.TypeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_typeValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3691
            self.llvmType(0)
            self.state = 3692
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeConstsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConstList(self):
            return self.getTypedRuleContext(LLVMParser.TypeConstListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_typeConsts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConsts" ):
                listener.enterTypeConsts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConsts" ):
                listener.exitTypeConsts(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConsts" ):
                return visitor.visitTypeConsts(self)
            else:
                return visitor.visitChildren(self)




    def typeConsts(self):

        localctx = LLVMParser.TypeConstsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_typeConsts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LLVMParser.LT) | (1 << LLVMParser.LBRACK) | (1 << LLVMParser.LBRACE))) != 0) or ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (LLVMParser.DOUBLE - 126)) | (1 << (LLVMParser.FLOAT - 126)) | (1 << (LLVMParser.FP128 - 126)) | (1 << (LLVMParser.HALF - 126)))) != 0) or _la==LLVMParser.LABEL or _la==LLVMParser.METADATA or _la==LLVMParser.PPC_FP128 or ((((_la - 351)) & ~0x3f) == 0 and ((1 << (_la - 351)) & ((1 << (LLVMParser.TOKEN - 351)) | (1 << (LLVMParser.VOID - 351)) | (1 << (LLVMParser.X86_FP80 - 351)) | (1 << (LLVMParser.X86_MMX - 351)))) != 0) or _la==LLVMParser.INT_TYPE or _la==LLVMParser.LOCAL_IDENT:
                self.state = 3694
                self.typeConstList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeConstListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMParser.TypeConstContext,0)


        def typeConstList(self):
            return self.getTypedRuleContext(LLVMParser.TypeConstListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_typeConstList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstList" ):
                listener.enterTypeConstList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstList" ):
                listener.exitTypeConstList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstList" ):
                return visitor.visitTypeConstList(self)
            else:
                return visitor.visitChildren(self)



    def typeConstList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.TypeConstListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 734
        self.enterRecursionRule(localctx, 734, self.RULE_typeConstList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3698
            self.typeConst()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3705
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.TypeConstListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeConstList)
                    self.state = 3700
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3701
                    self.match(LLVMParser.COMMA)
                    self.state = 3702
                    self.typeConst() 
                self.state = 3707
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def constant(self):
            return self.getTypedRuleContext(LLVMParser.ConstantContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_typeConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConst" ):
                listener.enterTypeConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConst" ):
                listener.exitTypeConst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConst" ):
                return visitor.visitTypeConst(self)
            else:
                return visitor.visitChildren(self)




    def typeConst(self):

        localctx = LLVMParser.TypeConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_typeConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3708
            self.llvmType(0)
            self.state = 3709
            self.constant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIGN(self):
            return self.getToken(LLVMParser.ALIGN, 0)

        def INT_LIT(self):
            return self.getToken(LLVMParser.INT_LIT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_alignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignment" ):
                listener.enterAlignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignment" ):
                listener.exitAlignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlignment" ):
                return visitor.visitAlignment(self)
            else:
                return visitor.visitChildren(self)




    def alignment(self):

        localctx = LLVMParser.AlignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_alignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3711
            self.match(LLVMParser.ALIGN)
            self.state = 3712
            self.match(LLVMParser.INT_LIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllocSizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOCSIZE(self):
            return self.getToken(LLVMParser.ALLOCSIZE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def INT_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMParser.INT_LIT)
            else:
                return self.getToken(LLVMParser.INT_LIT, i)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_allocSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllocSize" ):
                listener.enterAllocSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllocSize" ):
                listener.exitAllocSize(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllocSize" ):
                return visitor.visitAllocSize(self)
            else:
                return visitor.visitChildren(self)




    def allocSize(self):

        localctx = LLVMParser.AllocSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_allocSize)
        try:
            self.state = 3724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3714
                self.match(LLVMParser.ALLOCSIZE)
                self.state = 3715
                self.match(LLVMParser.LPAREN)
                self.state = 3716
                self.match(LLVMParser.INT_LIT)
                self.state = 3717
                self.match(LLVMParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3718
                self.match(LLVMParser.ALLOCSIZE)
                self.state = 3719
                self.match(LLVMParser.LPAREN)
                self.state = 3720
                self.match(LLVMParser.INT_LIT)
                self.state = 3721
                self.match(LLVMParser.COMMA)
                self.state = 3722
                self.match(LLVMParser.INT_LIT)
                self.state = 3723
                self.match(LLVMParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOTS(self):
            return self.getToken(LLVMParser.DOTS, 0)

        def argList(self):
            return self.getTypedRuleContext(LLVMParser.ArgListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgs" ):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = LLVMParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 3726
                self.match(LLVMParser.DOTS)

            elif la_ == 2:
                self.state = 3727
                self.argList(0)

            elif la_ == 3:
                self.state = 3728
                self.argList(0)
                self.state = 3729
                self.match(LLVMParser.COMMA)
                self.state = 3730
                self.match(LLVMParser.DOTS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg(self):
            return self.getTypedRuleContext(LLVMParser.ArgContext,0)


        def argList(self):
            return self.getTypedRuleContext(LLVMParser.ArgListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_argList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgList" ):
                listener.enterArgList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgList" ):
                listener.exitArgList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgList" ):
                return visitor.visitArgList(self)
            else:
                return visitor.visitChildren(self)



    def argList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.ArgListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 744
        self.enterRecursionRule(localctx, 744, self.RULE_argList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3735
            self.arg()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3742
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.ArgListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_argList)
                    self.state = 3737
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3738
                    self.match(LLVMParser.COMMA)
                    self.state = 3739
                    self.arg() 
                self.state = 3744
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramAttrs(self):
            return self.getTypedRuleContext(LLVMParser.ParamAttrsContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def optAddrSpace(self):
            return self.getTypedRuleContext(LLVMParser.OptAddrSpaceContext,0)


        def STAR(self):
            return self.getToken(LLVMParser.STAR, 0)

        def concreteNonRecType(self):
            return self.getTypedRuleContext(LLVMParser.ConcreteNonRecTypeContext,0)


        def metadataType(self):
            return self.getTypedRuleContext(LLVMParser.MetadataTypeContext,0)


        def metadata(self):
            return self.getTypedRuleContext(LLVMParser.MetadataContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg" ):
                listener.enterArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg" ):
                listener.exitArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArg" ):
                return visitor.visitArg(self)
            else:
                return visitor.visitChildren(self)




    def arg(self):

        localctx = LLVMParser.ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_arg)
        try:
            self.state = 3758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3750
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 3745
                    self.llvmType(0)
                    self.state = 3746
                    self.optAddrSpace()
                    self.state = 3747
                    self.match(LLVMParser.STAR)
                    pass

                elif la_ == 2:
                    self.state = 3749
                    self.concreteNonRecType()
                    pass


                self.state = 3752
                self.paramAttrs()
                self.state = 3753
                self.value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3755
                self.metadataType()
                self.state = 3756
                self.metadata()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicOrderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACQ_REL(self):
            return self.getToken(LLVMParser.ACQ_REL, 0)

        def ACQUIRE(self):
            return self.getToken(LLVMParser.ACQUIRE, 0)

        def MONOTONIC(self):
            return self.getToken(LLVMParser.MONOTONIC, 0)

        def RELEASE(self):
            return self.getToken(LLVMParser.RELEASE, 0)

        def SEQ_CST(self):
            return self.getToken(LLVMParser.SEQ_CST, 0)

        def UNORDERED(self):
            return self.getToken(LLVMParser.UNORDERED, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_atomicOrdering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicOrdering" ):
                listener.enterAtomicOrdering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicOrdering" ):
                listener.exitAtomicOrdering(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomicOrdering" ):
                return visitor.visitAtomicOrdering(self)
            else:
                return visitor.visitChildren(self)




    def atomicOrdering(self):

        localctx = LLVMParser.AtomicOrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_atomicOrdering)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3760
            _la = self._input.LA(1)
            if not(_la==LLVMParser.ACQ_REL or _la==LLVMParser.ACQUIRE or _la==LLVMParser.MONOTONIC or _la==LLVMParser.RELEASE or _la==LLVMParser.SEQ_CST or _la==LLVMParser.UNORDERED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptCallingConvContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callingConv(self):
            return self.getTypedRuleContext(LLVMParser.CallingConvContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_optCallingConv

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptCallingConv" ):
                listener.enterOptCallingConv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptCallingConv" ):
                listener.exitOptCallingConv(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptCallingConv" ):
                return visitor.visitOptCallingConv(self)
            else:
                return visitor.visitChildren(self)




    def optCallingConv(self):

        localctx = LLVMParser.OptCallingConvContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_optCallingConv)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 28)) & ~0x3f) == 0 and ((1 << (_la - 28)) & ((1 << (LLVMParser.AMDGPU_CS - 28)) | (1 << (LLVMParser.AMDGPU_ES - 28)) | (1 << (LLVMParser.AMDGPU_GS - 28)) | (1 << (LLVMParser.AMDGPU_HS - 28)) | (1 << (LLVMParser.AMDGPU_KERNEL - 28)) | (1 << (LLVMParser.AMDGPU_LS - 28)) | (1 << (LLVMParser.AMDGPU_PS - 28)) | (1 << (LLVMParser.AMDGPU_VS - 28)) | (1 << (LLVMParser.ANYREGCC - 28)) | (1 << (LLVMParser.ARM_AAPCSCC - 28)) | (1 << (LLVMParser.ARM_AAPCS_VFPCC - 28)) | (1 << (LLVMParser.ARM_APCSCC - 28)) | (1 << (LLVMParser.AVR_INTRCC - 28)) | (1 << (LLVMParser.AVR_SIGNALCC - 28)) | (1 << (LLVMParser.CC - 28)) | (1 << (LLVMParser.CCC - 28)) | (1 << (LLVMParser.COLDCC - 28)) | (1 << (LLVMParser.CXX_FAST_TLSCC - 28)))) != 0) or ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (LLVMParser.FASTCC - 150)) | (1 << (LLVMParser.GHCCC - 150)) | (1 << (LLVMParser.HHVMCC - 150)) | (1 << (LLVMParser.HHVM_CCC - 150)) | (1 << (LLVMParser.INTEL_OCL_BICC - 150)))) != 0) or ((((_la - 232)) & ~0x3f) == 0 and ((1 << (_la - 232)) & ((1 << (LLVMParser.MSP430_INTRCC - 232)) | (1 << (LLVMParser.PRESERVE_ALLCC - 232)) | (1 << (LLVMParser.PRESERVE_MOSTCC - 232)) | (1 << (LLVMParser.PTX_DEVICE - 232)) | (1 << (LLVMParser.PTX_KERNEL - 232)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (LLVMParser.SPIR_FUNC - 326)) | (1 << (LLVMParser.SPIR_KERNEL - 326)) | (1 << (LLVMParser.SWIFTCC - 326)) | (1 << (LLVMParser.WEBKIT_JSCC - 326)))) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (LLVMParser.WIN64CC - 390)) | (1 << (LLVMParser.X86_64_SYSVCC - 390)) | (1 << (LLVMParser.X86_FASTCALLCC - 390)) | (1 << (LLVMParser.X86_INTRCC - 390)) | (1 << (LLVMParser.X86_REGCALLCC - 390)) | (1 << (LLVMParser.X86_STDCALLCC - 390)) | (1 << (LLVMParser.X86_THISCALLCC - 390)) | (1 << (LLVMParser.X86_VECTORCALLCC - 390)))) != 0):
                self.state = 3762
                self.callingConv()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallingConvContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMDGPU_CS(self):
            return self.getToken(LLVMParser.AMDGPU_CS, 0)

        def AMDGPU_ES(self):
            return self.getToken(LLVMParser.AMDGPU_ES, 0)

        def AMDGPU_GS(self):
            return self.getToken(LLVMParser.AMDGPU_GS, 0)

        def AMDGPU_HS(self):
            return self.getToken(LLVMParser.AMDGPU_HS, 0)

        def AMDGPU_KERNEL(self):
            return self.getToken(LLVMParser.AMDGPU_KERNEL, 0)

        def AMDGPU_LS(self):
            return self.getToken(LLVMParser.AMDGPU_LS, 0)

        def AMDGPU_PS(self):
            return self.getToken(LLVMParser.AMDGPU_PS, 0)

        def AMDGPU_VS(self):
            return self.getToken(LLVMParser.AMDGPU_VS, 0)

        def ANYREGCC(self):
            return self.getToken(LLVMParser.ANYREGCC, 0)

        def ARM_AAPCS_VFPCC(self):
            return self.getToken(LLVMParser.ARM_AAPCS_VFPCC, 0)

        def ARM_AAPCSCC(self):
            return self.getToken(LLVMParser.ARM_AAPCSCC, 0)

        def ARM_APCSCC(self):
            return self.getToken(LLVMParser.ARM_APCSCC, 0)

        def AVR_INTRCC(self):
            return self.getToken(LLVMParser.AVR_INTRCC, 0)

        def AVR_SIGNALCC(self):
            return self.getToken(LLVMParser.AVR_SIGNALCC, 0)

        def CCC(self):
            return self.getToken(LLVMParser.CCC, 0)

        def COLDCC(self):
            return self.getToken(LLVMParser.COLDCC, 0)

        def CXX_FAST_TLSCC(self):
            return self.getToken(LLVMParser.CXX_FAST_TLSCC, 0)

        def FASTCC(self):
            return self.getToken(LLVMParser.FASTCC, 0)

        def GHCCC(self):
            return self.getToken(LLVMParser.GHCCC, 0)

        def HHVM_CCC(self):
            return self.getToken(LLVMParser.HHVM_CCC, 0)

        def HHVMCC(self):
            return self.getToken(LLVMParser.HHVMCC, 0)

        def INTEL_OCL_BICC(self):
            return self.getToken(LLVMParser.INTEL_OCL_BICC, 0)

        def MSP430_INTRCC(self):
            return self.getToken(LLVMParser.MSP430_INTRCC, 0)

        def PRESERVE_ALLCC(self):
            return self.getToken(LLVMParser.PRESERVE_ALLCC, 0)

        def PRESERVE_MOSTCC(self):
            return self.getToken(LLVMParser.PRESERVE_MOSTCC, 0)

        def PTX_DEVICE(self):
            return self.getToken(LLVMParser.PTX_DEVICE, 0)

        def PTX_KERNEL(self):
            return self.getToken(LLVMParser.PTX_KERNEL, 0)

        def SPIR_FUNC(self):
            return self.getToken(LLVMParser.SPIR_FUNC, 0)

        def SPIR_KERNEL(self):
            return self.getToken(LLVMParser.SPIR_KERNEL, 0)

        def SWIFTCC(self):
            return self.getToken(LLVMParser.SWIFTCC, 0)

        def WEBKIT_JSCC(self):
            return self.getToken(LLVMParser.WEBKIT_JSCC, 0)

        def WIN64CC(self):
            return self.getToken(LLVMParser.WIN64CC, 0)

        def X86_64_SYSVCC(self):
            return self.getToken(LLVMParser.X86_64_SYSVCC, 0)

        def X86_FASTCALLCC(self):
            return self.getToken(LLVMParser.X86_FASTCALLCC, 0)

        def X86_INTRCC(self):
            return self.getToken(LLVMParser.X86_INTRCC, 0)

        def X86_REGCALLCC(self):
            return self.getToken(LLVMParser.X86_REGCALLCC, 0)

        def X86_STDCALLCC(self):
            return self.getToken(LLVMParser.X86_STDCALLCC, 0)

        def X86_THISCALLCC(self):
            return self.getToken(LLVMParser.X86_THISCALLCC, 0)

        def X86_VECTORCALLCC(self):
            return self.getToken(LLVMParser.X86_VECTORCALLCC, 0)

        def CC(self):
            return self.getToken(LLVMParser.CC, 0)

        def INT_LIT(self):
            return self.getToken(LLVMParser.INT_LIT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_callingConv

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallingConv" ):
                listener.enterCallingConv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallingConv" ):
                listener.exitCallingConv(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallingConv" ):
                return visitor.visitCallingConv(self)
            else:
                return visitor.visitChildren(self)




    def callingConv(self):

        localctx = LLVMParser.CallingConvContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_callingConv)
        try:
            self.state = 3806
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.AMDGPU_CS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3765
                self.match(LLVMParser.AMDGPU_CS)
                pass
            elif token in [LLVMParser.AMDGPU_ES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3766
                self.match(LLVMParser.AMDGPU_ES)
                pass
            elif token in [LLVMParser.AMDGPU_GS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3767
                self.match(LLVMParser.AMDGPU_GS)
                pass
            elif token in [LLVMParser.AMDGPU_HS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3768
                self.match(LLVMParser.AMDGPU_HS)
                pass
            elif token in [LLVMParser.AMDGPU_KERNEL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3769
                self.match(LLVMParser.AMDGPU_KERNEL)
                pass
            elif token in [LLVMParser.AMDGPU_LS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3770
                self.match(LLVMParser.AMDGPU_LS)
                pass
            elif token in [LLVMParser.AMDGPU_PS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3771
                self.match(LLVMParser.AMDGPU_PS)
                pass
            elif token in [LLVMParser.AMDGPU_VS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3772
                self.match(LLVMParser.AMDGPU_VS)
                pass
            elif token in [LLVMParser.ANYREGCC]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3773
                self.match(LLVMParser.ANYREGCC)
                pass
            elif token in [LLVMParser.ARM_AAPCS_VFPCC]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3774
                self.match(LLVMParser.ARM_AAPCS_VFPCC)
                pass
            elif token in [LLVMParser.ARM_AAPCSCC]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3775
                self.match(LLVMParser.ARM_AAPCSCC)
                pass
            elif token in [LLVMParser.ARM_APCSCC]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3776
                self.match(LLVMParser.ARM_APCSCC)
                pass
            elif token in [LLVMParser.AVR_INTRCC]:
                self.enterOuterAlt(localctx, 13)
                self.state = 3777
                self.match(LLVMParser.AVR_INTRCC)
                pass
            elif token in [LLVMParser.AVR_SIGNALCC]:
                self.enterOuterAlt(localctx, 14)
                self.state = 3778
                self.match(LLVMParser.AVR_SIGNALCC)
                pass
            elif token in [LLVMParser.CCC]:
                self.enterOuterAlt(localctx, 15)
                self.state = 3779
                self.match(LLVMParser.CCC)
                pass
            elif token in [LLVMParser.COLDCC]:
                self.enterOuterAlt(localctx, 16)
                self.state = 3780
                self.match(LLVMParser.COLDCC)
                pass
            elif token in [LLVMParser.CXX_FAST_TLSCC]:
                self.enterOuterAlt(localctx, 17)
                self.state = 3781
                self.match(LLVMParser.CXX_FAST_TLSCC)
                pass
            elif token in [LLVMParser.FASTCC]:
                self.enterOuterAlt(localctx, 18)
                self.state = 3782
                self.match(LLVMParser.FASTCC)
                pass
            elif token in [LLVMParser.GHCCC]:
                self.enterOuterAlt(localctx, 19)
                self.state = 3783
                self.match(LLVMParser.GHCCC)
                pass
            elif token in [LLVMParser.HHVM_CCC]:
                self.enterOuterAlt(localctx, 20)
                self.state = 3784
                self.match(LLVMParser.HHVM_CCC)
                pass
            elif token in [LLVMParser.HHVMCC]:
                self.enterOuterAlt(localctx, 21)
                self.state = 3785
                self.match(LLVMParser.HHVMCC)
                pass
            elif token in [LLVMParser.INTEL_OCL_BICC]:
                self.enterOuterAlt(localctx, 22)
                self.state = 3786
                self.match(LLVMParser.INTEL_OCL_BICC)
                pass
            elif token in [LLVMParser.MSP430_INTRCC]:
                self.enterOuterAlt(localctx, 23)
                self.state = 3787
                self.match(LLVMParser.MSP430_INTRCC)
                pass
            elif token in [LLVMParser.PRESERVE_ALLCC]:
                self.enterOuterAlt(localctx, 24)
                self.state = 3788
                self.match(LLVMParser.PRESERVE_ALLCC)
                pass
            elif token in [LLVMParser.PRESERVE_MOSTCC]:
                self.enterOuterAlt(localctx, 25)
                self.state = 3789
                self.match(LLVMParser.PRESERVE_MOSTCC)
                pass
            elif token in [LLVMParser.PTX_DEVICE]:
                self.enterOuterAlt(localctx, 26)
                self.state = 3790
                self.match(LLVMParser.PTX_DEVICE)
                pass
            elif token in [LLVMParser.PTX_KERNEL]:
                self.enterOuterAlt(localctx, 27)
                self.state = 3791
                self.match(LLVMParser.PTX_KERNEL)
                pass
            elif token in [LLVMParser.SPIR_FUNC]:
                self.enterOuterAlt(localctx, 28)
                self.state = 3792
                self.match(LLVMParser.SPIR_FUNC)
                pass
            elif token in [LLVMParser.SPIR_KERNEL]:
                self.enterOuterAlt(localctx, 29)
                self.state = 3793
                self.match(LLVMParser.SPIR_KERNEL)
                pass
            elif token in [LLVMParser.SWIFTCC]:
                self.enterOuterAlt(localctx, 30)
                self.state = 3794
                self.match(LLVMParser.SWIFTCC)
                pass
            elif token in [LLVMParser.WEBKIT_JSCC]:
                self.enterOuterAlt(localctx, 31)
                self.state = 3795
                self.match(LLVMParser.WEBKIT_JSCC)
                pass
            elif token in [LLVMParser.WIN64CC]:
                self.enterOuterAlt(localctx, 32)
                self.state = 3796
                self.match(LLVMParser.WIN64CC)
                pass
            elif token in [LLVMParser.X86_64_SYSVCC]:
                self.enterOuterAlt(localctx, 33)
                self.state = 3797
                self.match(LLVMParser.X86_64_SYSVCC)
                pass
            elif token in [LLVMParser.X86_FASTCALLCC]:
                self.enterOuterAlt(localctx, 34)
                self.state = 3798
                self.match(LLVMParser.X86_FASTCALLCC)
                pass
            elif token in [LLVMParser.X86_INTRCC]:
                self.enterOuterAlt(localctx, 35)
                self.state = 3799
                self.match(LLVMParser.X86_INTRCC)
                pass
            elif token in [LLVMParser.X86_REGCALLCC]:
                self.enterOuterAlt(localctx, 36)
                self.state = 3800
                self.match(LLVMParser.X86_REGCALLCC)
                pass
            elif token in [LLVMParser.X86_STDCALLCC]:
                self.enterOuterAlt(localctx, 37)
                self.state = 3801
                self.match(LLVMParser.X86_STDCALLCC)
                pass
            elif token in [LLVMParser.X86_THISCALLCC]:
                self.enterOuterAlt(localctx, 38)
                self.state = 3802
                self.match(LLVMParser.X86_THISCALLCC)
                pass
            elif token in [LLVMParser.X86_VECTORCALLCC]:
                self.enterOuterAlt(localctx, 39)
                self.state = 3803
                self.match(LLVMParser.X86_VECTORCALLCC)
                pass
            elif token in [LLVMParser.CC]:
                self.enterOuterAlt(localctx, 40)
                self.state = 3804
                self.match(LLVMParser.CC)
                self.state = 3805
                self.match(LLVMParser.INT_LIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptComdatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comdat(self):
            return self.getTypedRuleContext(LLVMParser.ComdatContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_optComdat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptComdat" ):
                listener.enterOptComdat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptComdat" ):
                listener.exitOptComdat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptComdat" ):
                return visitor.visitOptComdat(self)
            else:
                return visitor.visitChildren(self)




    def optComdat(self):

        localctx = LLVMParser.OptComdatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_optComdat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 3808
                self.comdat()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComdatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMDAT(self):
            return self.getToken(LLVMParser.COMDAT, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def comdatName(self):
            return self.getTypedRuleContext(LLVMParser.ComdatNameContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_comdat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComdat" ):
                listener.enterComdat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComdat" ):
                listener.exitComdat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComdat" ):
                return visitor.visitComdat(self)
            else:
                return visitor.visitChildren(self)




    def comdat(self):

        localctx = LLVMParser.ComdatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_comdat)
        try:
            self.state = 3817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3811
                self.match(LLVMParser.COMDAT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3812
                self.match(LLVMParser.COMDAT)
                self.state = 3813
                self.match(LLVMParser.LPAREN)
                self.state = 3814
                self.comdatName()
                self.state = 3815
                self.match(LLVMParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DereferenceableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEREFERENCEABLE(self):
            return self.getToken(LLVMParser.DEREFERENCEABLE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def INT_LIT(self):
            return self.getToken(LLVMParser.INT_LIT, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def DEREFERENCEABLE_OR_NULL(self):
            return self.getToken(LLVMParser.DEREFERENCEABLE_OR_NULL, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_dereferenceable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereferenceable" ):
                listener.enterDereferenceable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereferenceable" ):
                listener.exitDereferenceable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereferenceable" ):
                return visitor.visitDereferenceable(self)
            else:
                return visitor.visitChildren(self)




    def dereferenceable(self):

        localctx = LLVMParser.DereferenceableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_dereferenceable)
        try:
            self.state = 3827
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.DEREFERENCEABLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3819
                self.match(LLVMParser.DEREFERENCEABLE)
                self.state = 3820
                self.match(LLVMParser.LPAREN)
                self.state = 3821
                self.match(LLVMParser.INT_LIT)
                self.state = 3822
                self.match(LLVMParser.RPAREN)
                pass
            elif token in [LLVMParser.DEREFERENCEABLE_OR_NULL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3823
                self.match(LLVMParser.DEREFERENCEABLE_OR_NULL)
                self.state = 3824
                self.match(LLVMParser.LPAREN)
                self.state = 3825
                self.match(LLVMParser.INT_LIT)
                self.state = 3826
                self.match(LLVMParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptDLLStorageClassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dllStorageClass(self):
            return self.getTypedRuleContext(LLVMParser.DllStorageClassContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_optDLLStorageClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptDLLStorageClass" ):
                listener.enterOptDLLStorageClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptDLLStorageClass" ):
                listener.exitOptDLLStorageClass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptDLLStorageClass" ):
                return visitor.visitOptDLLStorageClass(self)
            else:
                return visitor.visitChildren(self)




    def optDLLStorageClass(self):

        localctx = LLVMParser.OptDLLStorageClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_optDLLStorageClass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.DLLEXPORT or _la==LLVMParser.DLLIMPORT:
                self.state = 3829
                self.dllStorageClass()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DllStorageClassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DLLEXPORT(self):
            return self.getToken(LLVMParser.DLLEXPORT, 0)

        def DLLIMPORT(self):
            return self.getToken(LLVMParser.DLLIMPORT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_dllStorageClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDllStorageClass" ):
                listener.enterDllStorageClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDllStorageClass" ):
                listener.exitDllStorageClass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDllStorageClass" ):
                return visitor.visitDllStorageClass(self)
            else:
                return visitor.visitChildren(self)




    def dllStorageClass(self):

        localctx = LLVMParser.DllStorageClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_dllStorageClass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3832
            _la = self._input.LA(1)
            if not(_la==LLVMParser.DLLEXPORT or _la==LLVMParser.DLLIMPORT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptExactContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXACT(self):
            return self.getToken(LLVMParser.EXACT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_optExact

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptExact" ):
                listener.enterOptExact(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptExact" ):
                listener.exitOptExact(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptExact" ):
                return visitor.visitOptExact(self)
            else:
                return visitor.visitChildren(self)




    def optExact(self):

        localctx = LLVMParser.OptExactContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_optExact)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.EXACT:
                self.state = 3834
                self.match(LLVMParser.EXACT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exceptionArgList(self):
            return self.getTypedRuleContext(LLVMParser.ExceptionArgListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_exceptionArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionArgs" ):
                listener.enterExceptionArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionArgs" ):
                listener.exitExceptionArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptionArgs" ):
                return visitor.visitExceptionArgs(self)
            else:
                return visitor.visitChildren(self)




    def exceptionArgs(self):

        localctx = LLVMParser.ExceptionArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_exceptionArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LLVMParser.LT) | (1 << LLVMParser.LBRACK) | (1 << LLVMParser.LBRACE))) != 0) or ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (LLVMParser.DOUBLE - 126)) | (1 << (LLVMParser.FLOAT - 126)) | (1 << (LLVMParser.FP128 - 126)) | (1 << (LLVMParser.HALF - 126)))) != 0) or _la==LLVMParser.LABEL or _la==LLVMParser.METADATA or _la==LLVMParser.PPC_FP128 or ((((_la - 351)) & ~0x3f) == 0 and ((1 << (_la - 351)) & ((1 << (LLVMParser.TOKEN - 351)) | (1 << (LLVMParser.VOID - 351)) | (1 << (LLVMParser.X86_FP80 - 351)) | (1 << (LLVMParser.X86_MMX - 351)))) != 0) or _la==LLVMParser.INT_TYPE or _la==LLVMParser.LOCAL_IDENT:
                self.state = 3837
                self.exceptionArgList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exceptionArg(self):
            return self.getTypedRuleContext(LLVMParser.ExceptionArgContext,0)


        def exceptionArgList(self):
            return self.getTypedRuleContext(LLVMParser.ExceptionArgListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_exceptionArgList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionArgList" ):
                listener.enterExceptionArgList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionArgList" ):
                listener.exitExceptionArgList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptionArgList" ):
                return visitor.visitExceptionArgList(self)
            else:
                return visitor.visitChildren(self)



    def exceptionArgList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.ExceptionArgListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 768
        self.enterRecursionRule(localctx, 768, self.RULE_exceptionArgList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3841
            self.exceptionArg()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3848
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.ExceptionArgListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exceptionArgList)
                    self.state = 3843
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3844
                    self.match(LLVMParser.COMMA)
                    self.state = 3845
                    self.exceptionArg() 
                self.state = 3850
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExceptionArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(LLVMParser.ValueContext,0)


        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def optAddrSpace(self):
            return self.getTypedRuleContext(LLVMParser.OptAddrSpaceContext,0)


        def STAR(self):
            return self.getToken(LLVMParser.STAR, 0)

        def concreteNonRecType(self):
            return self.getTypedRuleContext(LLVMParser.ConcreteNonRecTypeContext,0)


        def metadataType(self):
            return self.getTypedRuleContext(LLVMParser.MetadataTypeContext,0)


        def metadata(self):
            return self.getTypedRuleContext(LLVMParser.MetadataContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_exceptionArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionArg" ):
                listener.enterExceptionArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionArg" ):
                listener.exitExceptionArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptionArg" ):
                return visitor.visitExceptionArg(self)
            else:
                return visitor.visitChildren(self)




    def exceptionArg(self):

        localctx = LLVMParser.ExceptionArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_exceptionArg)
        try:
            self.state = 3863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3856
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 3851
                    self.llvmType(0)
                    self.state = 3852
                    self.optAddrSpace()
                    self.state = 3853
                    self.match(LLVMParser.STAR)
                    pass

                elif la_ == 2:
                    self.state = 3855
                    self.concreteNonRecType()
                    pass


                self.state = 3858
                self.value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3860
                self.metadataType()
                self.state = 3861
                self.metadata()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noneConst(self):
            return self.getTypedRuleContext(LLVMParser.NoneConstContext,0)


        def localIdent(self):
            return self.getTypedRuleContext(LLVMParser.LocalIdentContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_exceptionScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionScope" ):
                listener.enterExceptionScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionScope" ):
                listener.exitExceptionScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptionScope" ):
                return visitor.visitExceptionScope(self)
            else:
                return visitor.visitChildren(self)




    def exceptionScope(self):

        localctx = LLVMParser.ExceptionScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_exceptionScope)
        try:
            self.state = 3867
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.NONE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3865
                self.noneConst()
                pass
            elif token in [LLVMParser.LOCAL_IDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3866
                self.localIdent()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FastMathFlagsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fastMathFlagList(self):
            return self.getTypedRuleContext(LLVMParser.FastMathFlagListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_fastMathFlags

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFastMathFlags" ):
                listener.enterFastMathFlags(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFastMathFlags" ):
                listener.exitFastMathFlags(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFastMathFlags" ):
                return visitor.visitFastMathFlags(self)
            else:
                return visitor.visitChildren(self)




    def fastMathFlags(self):

        localctx = LLVMParser.FastMathFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_fastMathFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.AFN or _la==LLVMParser.ARCP or _la==LLVMParser.CONTRACT or _la==LLVMParser.FAST or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (LLVMParser.NINF - 240)) | (1 << (LLVMParser.NNAN - 240)) | (1 << (LLVMParser.NSZ - 240)) | (1 << (LLVMParser.REASSOC - 240)))) != 0):
                self.state = 3869
                self.fastMathFlagList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FastMathFlagListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fastMathFlag(self):
            return self.getTypedRuleContext(LLVMParser.FastMathFlagContext,0)


        def fastMathFlagList(self):
            return self.getTypedRuleContext(LLVMParser.FastMathFlagListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_fastMathFlagList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFastMathFlagList" ):
                listener.enterFastMathFlagList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFastMathFlagList" ):
                listener.exitFastMathFlagList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFastMathFlagList" ):
                return visitor.visitFastMathFlagList(self)
            else:
                return visitor.visitChildren(self)



    def fastMathFlagList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.FastMathFlagListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 776
        self.enterRecursionRule(localctx, 776, self.RULE_fastMathFlagList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3873
            self.fastMathFlag()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3879
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.FastMathFlagListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_fastMathFlagList)
                    self.state = 3875
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3876
                    self.fastMathFlag() 
                self.state = 3881
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FastMathFlagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AFN(self):
            return self.getToken(LLVMParser.AFN, 0)

        def ARCP(self):
            return self.getToken(LLVMParser.ARCP, 0)

        def CONTRACT(self):
            return self.getToken(LLVMParser.CONTRACT, 0)

        def FAST(self):
            return self.getToken(LLVMParser.FAST, 0)

        def NINF(self):
            return self.getToken(LLVMParser.NINF, 0)

        def NNAN(self):
            return self.getToken(LLVMParser.NNAN, 0)

        def NSZ(self):
            return self.getToken(LLVMParser.NSZ, 0)

        def REASSOC(self):
            return self.getToken(LLVMParser.REASSOC, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_fastMathFlag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFastMathFlag" ):
                listener.enterFastMathFlag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFastMathFlag" ):
                listener.exitFastMathFlag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFastMathFlag" ):
                return visitor.visitFastMathFlag(self)
            else:
                return visitor.visitChildren(self)




    def fastMathFlag(self):

        localctx = LLVMParser.FastMathFlagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_fastMathFlag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3882
            _la = self._input.LA(1)
            if not(_la==LLVMParser.AFN or _la==LLVMParser.ARCP or _la==LLVMParser.CONTRACT or _la==LLVMParser.FAST or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (LLVMParser.NINF - 240)) | (1 << (LLVMParser.NNAN - 240)) | (1 << (LLVMParser.NSZ - 240)) | (1 << (LLVMParser.REASSOC - 240)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FpredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FALSE(self):
            return self.getToken(LLVMParser.FALSE, 0)

        def OEQ(self):
            return self.getToken(LLVMParser.OEQ, 0)

        def OGE(self):
            return self.getToken(LLVMParser.OGE, 0)

        def OGT(self):
            return self.getToken(LLVMParser.OGT, 0)

        def OLE(self):
            return self.getToken(LLVMParser.OLE, 0)

        def OLT(self):
            return self.getToken(LLVMParser.OLT, 0)

        def ONE(self):
            return self.getToken(LLVMParser.ONE, 0)

        def ORD(self):
            return self.getToken(LLVMParser.ORD, 0)

        def TRUE(self):
            return self.getToken(LLVMParser.TRUE, 0)

        def UEQ(self):
            return self.getToken(LLVMParser.UEQ, 0)

        def UGE(self):
            return self.getToken(LLVMParser.UGE, 0)

        def UGT(self):
            return self.getToken(LLVMParser.UGT, 0)

        def ULE(self):
            return self.getToken(LLVMParser.ULE, 0)

        def ULT(self):
            return self.getToken(LLVMParser.ULT, 0)

        def UNE(self):
            return self.getToken(LLVMParser.UNE, 0)

        def UNO(self):
            return self.getToken(LLVMParser.UNO, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_fpred

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFpred" ):
                listener.enterFpred(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFpred" ):
                listener.exitFpred(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFpred" ):
                return visitor.visitFpred(self)
            else:
                return visitor.visitChildren(self)




    def fpred(self):

        localctx = LLVMParser.FpredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_fpred)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3884
            _la = self._input.LA(1)
            if not(_la==LLVMParser.FALSE or ((((_la - 263)) & ~0x3f) == 0 and ((1 << (_la - 263)) & ((1 << (LLVMParser.OEQ - 263)) | (1 << (LLVMParser.OGE - 263)) | (1 << (LLVMParser.OGT - 263)) | (1 << (LLVMParser.OLE - 263)) | (1 << (LLVMParser.OLT - 263)) | (1 << (LLVMParser.ONE - 263)) | (1 << (LLVMParser.ORD - 263)))) != 0) or ((((_la - 353)) & ~0x3f) == 0 and ((1 << (_la - 353)) & ((1 << (LLVMParser.TRUE - 353)) | (1 << (LLVMParser.UEQ - 353)) | (1 << (LLVMParser.UGE - 353)) | (1 << (LLVMParser.UGT - 353)) | (1 << (LLVMParser.ULE - 353)) | (1 << (LLVMParser.ULT - 353)) | (1 << (LLVMParser.UNE - 353)) | (1 << (LLVMParser.UNO - 353)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncAttrsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funcAttrList(self):
            return self.getTypedRuleContext(LLVMParser.FuncAttrListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_funcAttrs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncAttrs" ):
                listener.enterFuncAttrs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncAttrs" ):
                listener.exitFuncAttrs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncAttrs" ):
                return visitor.visitFuncAttrs(self)
            else:
                return visitor.visitChildren(self)




    def funcAttrs(self):

        localctx = LLVMParser.FuncAttrsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_funcAttrs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.state = 3886
                self.funcAttrList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncAttrListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funcAttr(self):
            return self.getTypedRuleContext(LLVMParser.FuncAttrContext,0)


        def funcAttrList(self):
            return self.getTypedRuleContext(LLVMParser.FuncAttrListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_funcAttrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncAttrList" ):
                listener.enterFuncAttrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncAttrList" ):
                listener.exitFuncAttrList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncAttrList" ):
                return visitor.visitFuncAttrList(self)
            else:
                return visitor.visitChildren(self)



    def funcAttrList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.FuncAttrListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 784
        self.enterRecursionRule(localctx, 784, self.RULE_funcAttrList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3890
            self.funcAttr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3896
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,210,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.FuncAttrListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_funcAttrList)
                    self.state = 3892
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3893
                    self.funcAttr() 
                self.state = 3898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,210,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FuncAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrGroupID(self):
            return self.getTypedRuleContext(LLVMParser.AttrGroupIDContext,0)


        def ALIGN(self):
            return self.getToken(LLVMParser.ALIGN, 0)

        def EQSIGN(self):
            return self.getToken(LLVMParser.EQSIGN, 0)

        def INT_LIT(self):
            return self.getToken(LLVMParser.INT_LIT, 0)

        def ALIGNSTACK(self):
            return self.getToken(LLVMParser.ALIGNSTACK, 0)

        def alignment(self):
            return self.getTypedRuleContext(LLVMParser.AlignmentContext,0)


        def allocSize(self):
            return self.getTypedRuleContext(LLVMParser.AllocSizeContext,0)


        def stackAlignment(self):
            return self.getTypedRuleContext(LLVMParser.StackAlignmentContext,0)


        def stringLit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMParser.StringLitContext)
            else:
                return self.getTypedRuleContext(LLVMParser.StringLitContext,i)


        def ALWAYSINLINE(self):
            return self.getToken(LLVMParser.ALWAYSINLINE, 0)

        def ARGMEMONLY(self):
            return self.getToken(LLVMParser.ARGMEMONLY, 0)

        def BUILTIN(self):
            return self.getToken(LLVMParser.BUILTIN, 0)

        def COLD(self):
            return self.getToken(LLVMParser.COLD, 0)

        def CONVERGENT(self):
            return self.getToken(LLVMParser.CONVERGENT, 0)

        def INACCESSIBLEMEM_OR_ARGMEMONLY(self):
            return self.getToken(LLVMParser.INACCESSIBLEMEM_OR_ARGMEMONLY, 0)

        def INACCESSIBLEMEMONLY(self):
            return self.getToken(LLVMParser.INACCESSIBLEMEMONLY, 0)

        def INLINEHINT(self):
            return self.getToken(LLVMParser.INLINEHINT, 0)

        def JUMPTABLE(self):
            return self.getToken(LLVMParser.JUMPTABLE, 0)

        def MINSIZE(self):
            return self.getToken(LLVMParser.MINSIZE, 0)

        def NAKED(self):
            return self.getToken(LLVMParser.NAKED, 0)

        def NOBUILTIN(self):
            return self.getToken(LLVMParser.NOBUILTIN, 0)

        def NODUPLICATE(self):
            return self.getToken(LLVMParser.NODUPLICATE, 0)

        def NOIMPLICITFLOAT(self):
            return self.getToken(LLVMParser.NOIMPLICITFLOAT, 0)

        def NOINLINE(self):
            return self.getToken(LLVMParser.NOINLINE, 0)

        def NONLAZYBIND(self):
            return self.getToken(LLVMParser.NONLAZYBIND, 0)

        def NORECURSE(self):
            return self.getToken(LLVMParser.NORECURSE, 0)

        def NOREDZONE(self):
            return self.getToken(LLVMParser.NOREDZONE, 0)

        def NORETURN(self):
            return self.getToken(LLVMParser.NORETURN, 0)

        def NOUNWIND(self):
            return self.getToken(LLVMParser.NOUNWIND, 0)

        def OPTNONE(self):
            return self.getToken(LLVMParser.OPTNONE, 0)

        def OPTSIZE(self):
            return self.getToken(LLVMParser.OPTSIZE, 0)

        def READNONE(self):
            return self.getToken(LLVMParser.READNONE, 0)

        def READONLY(self):
            return self.getToken(LLVMParser.READONLY, 0)

        def RETURNS_TWICE(self):
            return self.getToken(LLVMParser.RETURNS_TWICE, 0)

        def SAFESTACK(self):
            return self.getToken(LLVMParser.SAFESTACK, 0)

        def SANITIZE_ADDRESS(self):
            return self.getToken(LLVMParser.SANITIZE_ADDRESS, 0)

        def SANITIZE_HWADDRESS(self):
            return self.getToken(LLVMParser.SANITIZE_HWADDRESS, 0)

        def SANITIZE_MEMORY(self):
            return self.getToken(LLVMParser.SANITIZE_MEMORY, 0)

        def SANITIZE_THREAD(self):
            return self.getToken(LLVMParser.SANITIZE_THREAD, 0)

        def SPECULATABLE(self):
            return self.getToken(LLVMParser.SPECULATABLE, 0)

        def SSP(self):
            return self.getToken(LLVMParser.SSP, 0)

        def SSPREQ(self):
            return self.getToken(LLVMParser.SSPREQ, 0)

        def SSPSTRONG(self):
            return self.getToken(LLVMParser.SSPSTRONG, 0)

        def STRICTFP(self):
            return self.getToken(LLVMParser.STRICTFP, 0)

        def UWTABLE(self):
            return self.getToken(LLVMParser.UWTABLE, 0)

        def WRITEONLY(self):
            return self.getToken(LLVMParser.WRITEONLY, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_funcAttr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncAttr" ):
                listener.enterFuncAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncAttr" ):
                listener.exitFuncAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncAttr" ):
                return visitor.visitFuncAttr(self)
            else:
                return visitor.visitChildren(self)




    def funcAttr(self):

        localctx = LLVMParser.FuncAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_funcAttr)
        try:
            self.state = 3951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3899
                self.attrGroupID()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3900
                self.match(LLVMParser.ALIGN)
                self.state = 3901
                self.match(LLVMParser.EQSIGN)
                self.state = 3902
                self.match(LLVMParser.INT_LIT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3903
                self.match(LLVMParser.ALIGNSTACK)
                self.state = 3904
                self.match(LLVMParser.EQSIGN)
                self.state = 3905
                self.match(LLVMParser.INT_LIT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3906
                self.alignment()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3907
                self.allocSize()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3908
                self.stackAlignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3909
                self.stringLit()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3910
                self.stringLit()
                self.state = 3911
                self.match(LLVMParser.EQSIGN)
                self.state = 3912
                self.stringLit()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3914
                self.match(LLVMParser.ALWAYSINLINE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3915
                self.match(LLVMParser.ARGMEMONLY)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3916
                self.match(LLVMParser.BUILTIN)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3917
                self.match(LLVMParser.COLD)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3918
                self.match(LLVMParser.CONVERGENT)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3919
                self.match(LLVMParser.INACCESSIBLEMEM_OR_ARGMEMONLY)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3920
                self.match(LLVMParser.INACCESSIBLEMEMONLY)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3921
                self.match(LLVMParser.INLINEHINT)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 3922
                self.match(LLVMParser.JUMPTABLE)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 3923
                self.match(LLVMParser.MINSIZE)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 3924
                self.match(LLVMParser.NAKED)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 3925
                self.match(LLVMParser.NOBUILTIN)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 3926
                self.match(LLVMParser.NODUPLICATE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 3927
                self.match(LLVMParser.NOIMPLICITFLOAT)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 3928
                self.match(LLVMParser.NOINLINE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 3929
                self.match(LLVMParser.NONLAZYBIND)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 3930
                self.match(LLVMParser.NORECURSE)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 3931
                self.match(LLVMParser.NOREDZONE)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 3932
                self.match(LLVMParser.NORETURN)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 3933
                self.match(LLVMParser.NOUNWIND)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 3934
                self.match(LLVMParser.OPTNONE)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 3935
                self.match(LLVMParser.OPTSIZE)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 3936
                self.match(LLVMParser.READNONE)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 3937
                self.match(LLVMParser.READONLY)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 3938
                self.match(LLVMParser.RETURNS_TWICE)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 3939
                self.match(LLVMParser.SAFESTACK)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 3940
                self.match(LLVMParser.SANITIZE_ADDRESS)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 3941
                self.match(LLVMParser.SANITIZE_HWADDRESS)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 3942
                self.match(LLVMParser.SANITIZE_MEMORY)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 3943
                self.match(LLVMParser.SANITIZE_THREAD)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 3944
                self.match(LLVMParser.SPECULATABLE)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 3945
                self.match(LLVMParser.SSP)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 3946
                self.match(LLVMParser.SSPREQ)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 3947
                self.match(LLVMParser.SSPSTRONG)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 3948
                self.match(LLVMParser.STRICTFP)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 3949
                self.match(LLVMParser.UWTABLE)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 3950
                self.match(LLVMParser.WRITEONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptInBoundsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INBOUNDS(self):
            return self.getToken(LLVMParser.INBOUNDS, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_optInBounds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptInBounds" ):
                listener.enterOptInBounds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptInBounds" ):
                listener.exitOptInBounds(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptInBounds" ):
                return visitor.visitOptInBounds(self)
            else:
                return visitor.visitChildren(self)




    def optInBounds(self):

        localctx = LLVMParser.OptInBoundsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_optInBounds)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.INBOUNDS:
                self.state = 3953
                self.match(LLVMParser.INBOUNDS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndicesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def indexList(self):
            return self.getTypedRuleContext(LLVMParser.IndexListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_indices

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndices" ):
                listener.enterIndices(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndices" ):
                listener.exitIndices(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndices" ):
                return visitor.visitIndices(self)
            else:
                return visitor.visitChildren(self)




    def indices(self):

        localctx = LLVMParser.IndicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_indices)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.COMMA:
                self.state = 3956
                self.match(LLVMParser.COMMA)
                self.state = 3957
                self.indexList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index(self):
            return self.getTypedRuleContext(LLVMParser.IndexContext,0)


        def indexList(self):
            return self.getTypedRuleContext(LLVMParser.IndexListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_indexList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexList" ):
                listener.enterIndexList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexList" ):
                listener.exitIndexList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexList" ):
                return visitor.visitIndexList(self)
            else:
                return visitor.visitChildren(self)



    def indexList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.IndexListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 792
        self.enterRecursionRule(localctx, 792, self.RULE_indexList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3961
            self.index()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3968
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,214,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.IndexListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_indexList)
                    self.state = 3963
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3964
                    self.match(LLVMParser.COMMA)
                    self.state = 3965
                    self.index() 
                self.state = 3970
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,214,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class IndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(LLVMParser.INT_LIT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex" ):
                return visitor.visitIndex(self)
            else:
                return visitor.visitChildren(self)




    def index(self):

        localctx = LLVMParser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3971
            self.match(LLVMParser.INT_LIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IPredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(LLVMParser.EQ, 0)

        def NE(self):
            return self.getToken(LLVMParser.NE, 0)

        def SGE(self):
            return self.getToken(LLVMParser.SGE, 0)

        def SGT(self):
            return self.getToken(LLVMParser.SGT, 0)

        def SLE(self):
            return self.getToken(LLVMParser.SLE, 0)

        def SLT(self):
            return self.getToken(LLVMParser.SLT, 0)

        def UGE(self):
            return self.getToken(LLVMParser.UGE, 0)

        def UGT(self):
            return self.getToken(LLVMParser.UGT, 0)

        def ULE(self):
            return self.getToken(LLVMParser.ULE, 0)

        def ULT(self):
            return self.getToken(LLVMParser.ULT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_iPred

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIPred" ):
                listener.enterIPred(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIPred" ):
                listener.exitIPred(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIPred" ):
                return visitor.visitIPred(self)
            else:
                return visitor.visitChildren(self)




    def iPred(self):

        localctx = LLVMParser.IPredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_iPred)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3973
            _la = self._input.LA(1)
            if not(_la==LLVMParser.EQ or _la==LLVMParser.NE or ((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (LLVMParser.SGE - 314)) | (1 << (LLVMParser.SGT - 314)) | (1 << (LLVMParser.SLE - 314)) | (1 << (LLVMParser.SLT - 314)) | (1 << (LLVMParser.UGE - 314)) | (1 << (LLVMParser.UGT - 314)) | (1 << (LLVMParser.ULE - 314)) | (1 << (LLVMParser.ULT - 314)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptLinkageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def linkage(self):
            return self.getTypedRuleContext(LLVMParser.LinkageContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_optLinkage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptLinkage" ):
                listener.enterOptLinkage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptLinkage" ):
                listener.exitOptLinkage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptLinkage" ):
                return visitor.visitOptLinkage(self)
            else:
                return visitor.visitChildren(self)




    def optLinkage(self):

        localctx = LLVMParser.OptLinkageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_optLinkage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (LLVMParser.APPENDING - 39)) | (1 << (LLVMParser.AVAILABLE_EXTERNALLY - 39)) | (1 << (LLVMParser.COMMON - 39)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (LLVMParser.INTERNAL - 201)) | (1 << (LLVMParser.LINKONCE - 201)) | (1 << (LLVMParser.LINKONCE_ODR - 201)))) != 0) or _la==LLVMParser.PRIVATE or _la==LLVMParser.WEAK or _la==LLVMParser.WEAK_ODR:
                self.state = 3975
                self.linkage()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinkageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APPENDING(self):
            return self.getToken(LLVMParser.APPENDING, 0)

        def AVAILABLE_EXTERNALLY(self):
            return self.getToken(LLVMParser.AVAILABLE_EXTERNALLY, 0)

        def COMMON(self):
            return self.getToken(LLVMParser.COMMON, 0)

        def INTERNAL(self):
            return self.getToken(LLVMParser.INTERNAL, 0)

        def LINKONCE(self):
            return self.getToken(LLVMParser.LINKONCE, 0)

        def LINKONCE_ODR(self):
            return self.getToken(LLVMParser.LINKONCE_ODR, 0)

        def PRIVATE(self):
            return self.getToken(LLVMParser.PRIVATE, 0)

        def WEAK(self):
            return self.getToken(LLVMParser.WEAK, 0)

        def WEAK_ODR(self):
            return self.getToken(LLVMParser.WEAK_ODR, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_linkage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkage" ):
                listener.enterLinkage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkage" ):
                listener.exitLinkage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinkage" ):
                return visitor.visitLinkage(self)
            else:
                return visitor.visitChildren(self)




    def linkage(self):

        localctx = LLVMParser.LinkageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_linkage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3978
            _la = self._input.LA(1)
            if not(((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (LLVMParser.APPENDING - 39)) | (1 << (LLVMParser.AVAILABLE_EXTERNALLY - 39)) | (1 << (LLVMParser.COMMON - 39)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (LLVMParser.INTERNAL - 201)) | (1 << (LLVMParser.LINKONCE - 201)) | (1 << (LLVMParser.LINKONCE_ODR - 201)))) != 0) or _la==LLVMParser.PRIVATE or _la==LLVMParser.WEAK or _la==LLVMParser.WEAK_ODR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptExternLinkageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externLinkage(self):
            return self.getTypedRuleContext(LLVMParser.ExternLinkageContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_optExternLinkage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptExternLinkage" ):
                listener.enterOptExternLinkage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptExternLinkage" ):
                listener.exitOptExternLinkage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptExternLinkage" ):
                return visitor.visitOptExternLinkage(self)
            else:
                return visitor.visitChildren(self)




    def optExternLinkage(self):

        localctx = LLVMParser.OptExternLinkageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_optExternLinkage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.EXTERNAL or _la==LLVMParser.EXTERN_WEAK:
                self.state = 3980
                self.externLinkage()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternLinkageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERN_WEAK(self):
            return self.getToken(LLVMParser.EXTERN_WEAK, 0)

        def EXTERNAL(self):
            return self.getToken(LLVMParser.EXTERNAL, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_externLinkage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternLinkage" ):
                listener.enterExternLinkage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternLinkage" ):
                listener.exitExternLinkage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternLinkage" ):
                return visitor.visitExternLinkage(self)
            else:
                return visitor.visitChildren(self)




    def externLinkage(self):

        localctx = LLVMParser.ExternLinkageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_externLinkage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3983
            _la = self._input.LA(1)
            if not(_la==LLVMParser.EXTERNAL or _la==LLVMParser.EXTERN_WEAK):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandBundlesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(LLVMParser.LBRACK, 0)

        def operandBundleList(self):
            return self.getTypedRuleContext(LLVMParser.OperandBundleListContext,0)


        def RBRACK(self):
            return self.getToken(LLVMParser.RBRACK, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_operandBundles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperandBundles" ):
                listener.enterOperandBundles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperandBundles" ):
                listener.exitOperandBundles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperandBundles" ):
                return visitor.visitOperandBundles(self)
            else:
                return visitor.visitChildren(self)




    def operandBundles(self):

        localctx = LLVMParser.OperandBundlesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_operandBundles)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 3985
                self.match(LLVMParser.LBRACK)
                self.state = 3986
                self.operandBundleList(0)
                self.state = 3987
                self.match(LLVMParser.RBRACK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandBundleListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operandBundle(self):
            return self.getTypedRuleContext(LLVMParser.OperandBundleContext,0)


        def operandBundleList(self):
            return self.getTypedRuleContext(LLVMParser.OperandBundleListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_operandBundleList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperandBundleList" ):
                listener.enterOperandBundleList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperandBundleList" ):
                listener.exitOperandBundleList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperandBundleList" ):
                return visitor.visitOperandBundleList(self)
            else:
                return visitor.visitChildren(self)



    def operandBundleList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.OperandBundleListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 808
        self.enterRecursionRule(localctx, 808, self.RULE_operandBundleList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3992
            self.operandBundle()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3998
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,218,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.OperandBundleListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_operandBundleList)
                    self.state = 3994
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3995
                    self.operandBundle() 
                self.state = 4000
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,218,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class OperandBundleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def typeValues(self):
            return self.getTypedRuleContext(LLVMParser.TypeValuesContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_operandBundle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperandBundle" ):
                listener.enterOperandBundle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperandBundle" ):
                listener.exitOperandBundle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperandBundle" ):
                return visitor.visitOperandBundle(self)
            else:
                return visitor.visitChildren(self)




    def operandBundle(self):

        localctx = LLVMParser.OperandBundleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_operandBundle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4001
            self.stringLit()
            self.state = 4002
            self.match(LLVMParser.LPAREN)
            self.state = 4003
            self.typeValues()
            self.state = 4004
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverflowFlagsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def overflowFlagList(self):
            return self.getTypedRuleContext(LLVMParser.OverflowFlagListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_overflowFlags

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverflowFlags" ):
                listener.enterOverflowFlags(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverflowFlags" ):
                listener.exitOverflowFlags(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverflowFlags" ):
                return visitor.visitOverflowFlags(self)
            else:
                return visitor.visitChildren(self)




    def overflowFlags(self):

        localctx = LLVMParser.OverflowFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_overflowFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.NSW or _la==LLVMParser.NUW:
                self.state = 4006
                self.overflowFlagList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverflowFlagListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def overflowFlag(self):
            return self.getTypedRuleContext(LLVMParser.OverflowFlagContext,0)


        def overflowFlagList(self):
            return self.getTypedRuleContext(LLVMParser.OverflowFlagListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_overflowFlagList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverflowFlagList" ):
                listener.enterOverflowFlagList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverflowFlagList" ):
                listener.exitOverflowFlagList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverflowFlagList" ):
                return visitor.visitOverflowFlagList(self)
            else:
                return visitor.visitChildren(self)



    def overflowFlagList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.OverflowFlagListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 814
        self.enterRecursionRule(localctx, 814, self.RULE_overflowFlagList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4010
            self.overflowFlag()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4016
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,220,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.OverflowFlagListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_overflowFlagList)
                    self.state = 4012
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4013
                    self.overflowFlag() 
                self.state = 4018
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class OverflowFlagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NSW(self):
            return self.getToken(LLVMParser.NSW, 0)

        def NUW(self):
            return self.getToken(LLVMParser.NUW, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_overflowFlag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverflowFlag" ):
                listener.enterOverflowFlag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverflowFlag" ):
                listener.exitOverflowFlag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverflowFlag" ):
                return visitor.visitOverflowFlag(self)
            else:
                return visitor.visitChildren(self)




    def overflowFlag(self):

        localctx = LLVMParser.OverflowFlagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_overflowFlag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4019
            _la = self._input.LA(1)
            if not(_la==LLVMParser.NSW or _la==LLVMParser.NUW):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamAttrsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramAttrList(self):
            return self.getTypedRuleContext(LLVMParser.ParamAttrListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_paramAttrs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamAttrs" ):
                listener.enterParamAttrs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamAttrs" ):
                listener.exitParamAttrs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamAttrs" ):
                return visitor.visitParamAttrs(self)
            else:
                return visitor.visitChildren(self)




    def paramAttrs(self):

        localctx = LLVMParser.ParamAttrsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_paramAttrs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.state = 4021
                self.paramAttrList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamAttrListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramAttr(self):
            return self.getTypedRuleContext(LLVMParser.ParamAttrContext,0)


        def paramAttrList(self):
            return self.getTypedRuleContext(LLVMParser.ParamAttrListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_paramAttrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamAttrList" ):
                listener.enterParamAttrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamAttrList" ):
                listener.exitParamAttrList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamAttrList" ):
                return visitor.visitParamAttrList(self)
            else:
                return visitor.visitChildren(self)



    def paramAttrList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.ParamAttrListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 820
        self.enterRecursionRule(localctx, 820, self.RULE_paramAttrList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4025
            self.paramAttr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4031
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,222,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.ParamAttrListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_paramAttrList)
                    self.state = 4027
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4028
                    self.paramAttr() 
                self.state = 4033
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,222,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParamAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alignment(self):
            return self.getTypedRuleContext(LLVMParser.AlignmentContext,0)


        def dereferenceable(self):
            return self.getTypedRuleContext(LLVMParser.DereferenceableContext,0)


        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def BYVAL(self):
            return self.getToken(LLVMParser.BYVAL, 0)

        def INALLOCA(self):
            return self.getToken(LLVMParser.INALLOCA, 0)

        def INREG(self):
            return self.getToken(LLVMParser.INREG, 0)

        def NEST(self):
            return self.getToken(LLVMParser.NEST, 0)

        def NOALIAS(self):
            return self.getToken(LLVMParser.NOALIAS, 0)

        def NOCAPTURE(self):
            return self.getToken(LLVMParser.NOCAPTURE, 0)

        def NONNULL(self):
            return self.getToken(LLVMParser.NONNULL, 0)

        def READNONE(self):
            return self.getToken(LLVMParser.READNONE, 0)

        def READONLY(self):
            return self.getToken(LLVMParser.READONLY, 0)

        def RETURNED(self):
            return self.getToken(LLVMParser.RETURNED, 0)

        def SIGNEXT(self):
            return self.getToken(LLVMParser.SIGNEXT, 0)

        def SRET(self):
            return self.getToken(LLVMParser.SRET, 0)

        def SWIFTERROR(self):
            return self.getToken(LLVMParser.SWIFTERROR, 0)

        def SWIFTSELF(self):
            return self.getToken(LLVMParser.SWIFTSELF, 0)

        def WRITEONLY(self):
            return self.getToken(LLVMParser.WRITEONLY, 0)

        def ZEROEXT(self):
            return self.getToken(LLVMParser.ZEROEXT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_paramAttr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamAttr" ):
                listener.enterParamAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamAttr" ):
                listener.exitParamAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamAttr" ):
                return visitor.visitParamAttr(self)
            else:
                return visitor.visitChildren(self)




    def paramAttr(self):

        localctx = LLVMParser.ParamAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_paramAttr)
        try:
            self.state = 4053
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.ALIGN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4034
                self.alignment()
                pass
            elif token in [LLVMParser.DEREFERENCEABLE, LLVMParser.DEREFERENCEABLE_OR_NULL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4035
                self.dereferenceable()
                pass
            elif token in [LLVMParser.STRING_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4036
                self.stringLit()
                pass
            elif token in [LLVMParser.BYVAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4037
                self.match(LLVMParser.BYVAL)
                pass
            elif token in [LLVMParser.INALLOCA]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4038
                self.match(LLVMParser.INALLOCA)
                pass
            elif token in [LLVMParser.INREG]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4039
                self.match(LLVMParser.INREG)
                pass
            elif token in [LLVMParser.NEST]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4040
                self.match(LLVMParser.NEST)
                pass
            elif token in [LLVMParser.NOALIAS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4041
                self.match(LLVMParser.NOALIAS)
                pass
            elif token in [LLVMParser.NOCAPTURE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4042
                self.match(LLVMParser.NOCAPTURE)
                pass
            elif token in [LLVMParser.NONNULL]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4043
                self.match(LLVMParser.NONNULL)
                pass
            elif token in [LLVMParser.READNONE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4044
                self.match(LLVMParser.READNONE)
                pass
            elif token in [LLVMParser.READONLY]:
                self.enterOuterAlt(localctx, 12)
                self.state = 4045
                self.match(LLVMParser.READONLY)
                pass
            elif token in [LLVMParser.RETURNED]:
                self.enterOuterAlt(localctx, 13)
                self.state = 4046
                self.match(LLVMParser.RETURNED)
                pass
            elif token in [LLVMParser.SIGNEXT]:
                self.enterOuterAlt(localctx, 14)
                self.state = 4047
                self.match(LLVMParser.SIGNEXT)
                pass
            elif token in [LLVMParser.SRET]:
                self.enterOuterAlt(localctx, 15)
                self.state = 4048
                self.match(LLVMParser.SRET)
                pass
            elif token in [LLVMParser.SWIFTERROR]:
                self.enterOuterAlt(localctx, 16)
                self.state = 4049
                self.match(LLVMParser.SWIFTERROR)
                pass
            elif token in [LLVMParser.SWIFTSELF]:
                self.enterOuterAlt(localctx, 17)
                self.state = 4050
                self.match(LLVMParser.SWIFTSELF)
                pass
            elif token in [LLVMParser.WRITEONLY]:
                self.enterOuterAlt(localctx, 18)
                self.state = 4051
                self.match(LLVMParser.WRITEONLY)
                pass
            elif token in [LLVMParser.ZEROEXT]:
                self.enterOuterAlt(localctx, 19)
                self.state = 4052
                self.match(LLVMParser.ZEROEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOTS(self):
            return self.getToken(LLVMParser.DOTS, 0)

        def paramList(self):
            return self.getTypedRuleContext(LLVMParser.ParamListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParams" ):
                listener.enterParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParams" ):
                listener.exitParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParams" ):
                return visitor.visitParams(self)
            else:
                return visitor.visitChildren(self)




    def params(self):

        localctx = LLVMParser.ParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.state = 4055
                self.match(LLVMParser.DOTS)

            elif la_ == 2:
                self.state = 4056
                self.paramList(0)

            elif la_ == 3:
                self.state = 4057
                self.paramList(0)
                self.state = 4058
                self.match(LLVMParser.COMMA)
                self.state = 4059
                self.match(LLVMParser.DOTS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(LLVMParser.ParamContext,0)


        def paramList(self):
            return self.getTypedRuleContext(LLVMParser.ParamListContext,0)


        def COMMA(self):
            return self.getToken(LLVMParser.COMMA, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)



    def paramList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.ParamListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 826
        self.enterRecursionRule(localctx, 826, self.RULE_paramList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4064
            self.param()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4071
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,225,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.ParamListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_paramList)
                    self.state = 4066
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4067
                    self.match(LLVMParser.COMMA)
                    self.state = 4068
                    self.param() 
                self.state = 4073
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,225,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def llvmType(self):
            return self.getTypedRuleContext(LLVMParser.LlvmTypeContext,0)


        def paramAttrs(self):
            return self.getTypedRuleContext(LLVMParser.ParamAttrsContext,0)


        def localIdent(self):
            return self.getTypedRuleContext(LLVMParser.LocalIdentContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = LLVMParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_param)
        try:
            self.state = 4081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4074
                self.llvmType(0)
                self.state = 4075
                self.paramAttrs()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4077
                self.llvmType(0)
                self.state = 4078
                self.paramAttrs()
                self.state = 4079
                self.localIdent()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptPreemptionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preemptionSpecifier(self):
            return self.getTypedRuleContext(LLVMParser.PreemptionSpecifierContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_optPreemptionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptPreemptionSpecifier" ):
                listener.enterOptPreemptionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptPreemptionSpecifier" ):
                listener.exitOptPreemptionSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptPreemptionSpecifier" ):
                return visitor.visitOptPreemptionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def optPreemptionSpecifier(self):

        localctx = LLVMParser.OptPreemptionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_optPreemptionSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.DSO_LOCAL or _la==LLVMParser.DSO_PREEMPTABLE:
                self.state = 4083
                self.preemptionSpecifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreemptionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DSO_LOCAL(self):
            return self.getToken(LLVMParser.DSO_LOCAL, 0)

        def DSO_PREEMPTABLE(self):
            return self.getToken(LLVMParser.DSO_PREEMPTABLE, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_preemptionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreemptionSpecifier" ):
                listener.enterPreemptionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreemptionSpecifier" ):
                listener.exitPreemptionSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreemptionSpecifier" ):
                return visitor.visitPreemptionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def preemptionSpecifier(self):

        localctx = LLVMParser.PreemptionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_preemptionSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4086
            _la = self._input.LA(1)
            if not(_la==LLVMParser.DSO_LOCAL or _la==LLVMParser.DSO_PREEMPTABLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnAttrsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnAttrList(self):
            return self.getTypedRuleContext(LLVMParser.ReturnAttrListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_returnAttrs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnAttrs" ):
                listener.enterReturnAttrs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnAttrs" ):
                listener.exitReturnAttrs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnAttrs" ):
                return visitor.visitReturnAttrs(self)
            else:
                return visitor.visitChildren(self)




    def returnAttrs(self):

        localctx = LLVMParser.ReturnAttrsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_returnAttrs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.ALIGN or _la==LLVMParser.DEREFERENCEABLE or _la==LLVMParser.DEREFERENCEABLE_OR_NULL or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (LLVMParser.INREG - 196)) | (1 << (LLVMParser.NOALIAS - 196)) | (1 << (LLVMParser.NONNULL - 196)))) != 0) or _la==LLVMParser.SIGNEXT or _la==LLVMParser.ZEROEXT or _la==LLVMParser.STRING_LIT:
                self.state = 4088
                self.returnAttrList(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnAttrListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnAttr(self):
            return self.getTypedRuleContext(LLVMParser.ReturnAttrContext,0)


        def returnAttrList(self):
            return self.getTypedRuleContext(LLVMParser.ReturnAttrListContext,0)


        def getRuleIndex(self):
            return LLVMParser.RULE_returnAttrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnAttrList" ):
                listener.enterReturnAttrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnAttrList" ):
                listener.exitReturnAttrList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnAttrList" ):
                return visitor.visitReturnAttrList(self)
            else:
                return visitor.visitChildren(self)



    def returnAttrList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMParser.ReturnAttrListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 836
        self.enterRecursionRule(localctx, 836, self.RULE_returnAttrList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4092
            self.returnAttr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 4098
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,229,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LLVMParser.ReturnAttrListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_returnAttrList)
                    self.state = 4094
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 4095
                    self.returnAttr() 
                self.state = 4100
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ReturnAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alignment(self):
            return self.getTypedRuleContext(LLVMParser.AlignmentContext,0)


        def dereferenceable(self):
            return self.getTypedRuleContext(LLVMParser.DereferenceableContext,0)


        def stringLit(self):
            return self.getTypedRuleContext(LLVMParser.StringLitContext,0)


        def INREG(self):
            return self.getToken(LLVMParser.INREG, 0)

        def NOALIAS(self):
            return self.getToken(LLVMParser.NOALIAS, 0)

        def NONNULL(self):
            return self.getToken(LLVMParser.NONNULL, 0)

        def SIGNEXT(self):
            return self.getToken(LLVMParser.SIGNEXT, 0)

        def ZEROEXT(self):
            return self.getToken(LLVMParser.ZEROEXT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_returnAttr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnAttr" ):
                listener.enterReturnAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnAttr" ):
                listener.exitReturnAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnAttr" ):
                return visitor.visitReturnAttr(self)
            else:
                return visitor.visitChildren(self)




    def returnAttr(self):

        localctx = LLVMParser.ReturnAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_returnAttr)
        try:
            self.state = 4109
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LLVMParser.ALIGN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4101
                self.alignment()
                pass
            elif token in [LLVMParser.DEREFERENCEABLE, LLVMParser.DEREFERENCEABLE_OR_NULL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4102
                self.dereferenceable()
                pass
            elif token in [LLVMParser.STRING_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4103
                self.stringLit()
                pass
            elif token in [LLVMParser.INREG]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4104
                self.match(LLVMParser.INREG)
                pass
            elif token in [LLVMParser.NOALIAS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4105
                self.match(LLVMParser.NOALIAS)
                pass
            elif token in [LLVMParser.NONNULL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4106
                self.match(LLVMParser.NONNULL)
                pass
            elif token in [LLVMParser.SIGNEXT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4107
                self.match(LLVMParser.SIGNEXT)
                pass
            elif token in [LLVMParser.ZEROEXT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4108
                self.match(LLVMParser.ZEROEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECTION(self):
            return self.getToken(LLVMParser.SECTION, 0)

        def STRING_LIT(self):
            return self.getToken(LLVMParser.STRING_LIT, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSection" ):
                listener.enterSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSection" ):
                listener.exitSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSection" ):
                return visitor.visitSection(self)
            else:
                return visitor.visitChildren(self)




    def section(self):

        localctx = LLVMParser.SectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4111
            self.match(LLVMParser.SECTION)
            self.state = 4112
            self.match(LLVMParser.STRING_LIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StackAlignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIGNSTACK(self):
            return self.getToken(LLVMParser.ALIGNSTACK, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def INT_LIT(self):
            return self.getToken(LLVMParser.INT_LIT, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_stackAlignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackAlignment" ):
                listener.enterStackAlignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackAlignment" ):
                listener.exitStackAlignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStackAlignment" ):
                return visitor.visitStackAlignment(self)
            else:
                return visitor.visitChildren(self)




    def stackAlignment(self):

        localctx = LLVMParser.StackAlignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_stackAlignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4114
            self.match(LLVMParser.ALIGNSTACK)
            self.state = 4115
            self.match(LLVMParser.LPAREN)
            self.state = 4116
            self.match(LLVMParser.INT_LIT)
            self.state = 4117
            self.match(LLVMParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptSyncScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYNCSCOPE(self):
            return self.getToken(LLVMParser.SYNCSCOPE, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def STRING_LIT(self):
            return self.getToken(LLVMParser.STRING_LIT, 0)

        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_optSyncScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptSyncScope" ):
                listener.enterOptSyncScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptSyncScope" ):
                listener.exitOptSyncScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptSyncScope" ):
                return visitor.visitOptSyncScope(self)
            else:
                return visitor.visitChildren(self)




    def optSyncScope(self):

        localctx = LLVMParser.OptSyncScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_optSyncScope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LLVMParser.SYNCSCOPE:
                self.state = 4119
                self.match(LLVMParser.SYNCSCOPE)
                self.state = 4120
                self.match(LLVMParser.LPAREN)
                self.state = 4121
                self.match(LLVMParser.STRING_LIT)
                self.state = 4122
                self.match(LLVMParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThreadLocalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THREAD_LOCAL(self):
            return self.getToken(LLVMParser.THREAD_LOCAL, 0)

        def LPAREN(self):
            return self.getToken(LLVMParser.LPAREN, 0)

        def tlsModel(self):
            return self.getTypedRuleContext(LLVMParser.TlsModelContext,0)


        def RPAREN(self):
            return self.getToken(LLVMParser.RPAREN, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_threadLocal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThreadLocal" ):
                listener.enterThreadLocal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThreadLocal" ):
                listener.exitThreadLocal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThreadLocal" ):
                return visitor.visitThreadLocal(self)
            else:
                return visitor.visitChildren(self)




    def threadLocal(self):

        localctx = LLVMParser.ThreadLocalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_threadLocal)
        try:
            self.state = 4131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4125
                self.match(LLVMParser.THREAD_LOCAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4126
                self.match(LLVMParser.THREAD_LOCAL)
                self.state = 4127
                self.match(LLVMParser.LPAREN)
                self.state = 4128
                self.tlsModel()
                self.state = 4129
                self.match(LLVMParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TlsModelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIALEXEC(self):
            return self.getToken(LLVMParser.INITIALEXEC, 0)

        def LOCALDYNAMIC(self):
            return self.getToken(LLVMParser.LOCALDYNAMIC, 0)

        def LOCALEXEC(self):
            return self.getToken(LLVMParser.LOCALEXEC, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_tlsModel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTlsModel" ):
                listener.enterTlsModel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTlsModel" ):
                listener.exitTlsModel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTlsModel" ):
                return visitor.visitTlsModel(self)
            else:
                return visitor.visitChildren(self)




    def tlsModel(self):

        localctx = LLVMParser.TlsModelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_tlsModel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4133
            _la = self._input.LA(1)
            if not(((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (LLVMParser.INITIALEXEC - 192)) | (1 << (LLVMParser.LOCALDYNAMIC - 192)) | (1 << (LLVMParser.LOCALEXEC - 192)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnnamedAddrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_UNNAMED_ADDR(self):
            return self.getToken(LLVMParser.LOCAL_UNNAMED_ADDR, 0)

        def UNNAMED_ADDR(self):
            return self.getToken(LLVMParser.UNNAMED_ADDR, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_unnamedAddr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnamedAddr" ):
                listener.enterUnnamedAddr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnamedAddr" ):
                listener.exitUnnamedAddr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnnamedAddr" ):
                return visitor.visitUnnamedAddr(self)
            else:
                return visitor.visitChildren(self)




    def unnamedAddr(self):

        localctx = LLVMParser.UnnamedAddrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_unnamedAddr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4135
            _la = self._input.LA(1)
            if not(_la==LLVMParser.LOCAL_UNNAMED_ADDR or _la==LLVMParser.UNNAMED_ADDR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(LLVMParser.DEFAULT, 0)

        def HIDDEN_VISIB(self):
            return self.getToken(LLVMParser.HIDDEN_VISIB, 0)

        def PROTECTED(self):
            return self.getToken(LLVMParser.PROTECTED, 0)

        def getRuleIndex(self):
            return LLVMParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = LLVMParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4137
            _la = self._input.LA(1)
            if not(_la==LLVMParser.DEFAULT or _la==LLVMParser.HIDDEN_VISIB or _la==LLVMParser.PROTECTED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[3] = self.topLevelEntityList_sempred
        self._predicates[16] = self.globalAttrList_sempred
        self._predicates[31] = self.metadataNodeList_sempred
        self._predicates[36] = self.useListOrderList_sempred
        self._predicates[46] = self.llvmType_sempred
        self._predicates[61] = self.typeList_sempred
        self._predicates[111] = self.gepConstIndexList_sempred
        self._predicates[130] = self.basicBlockList_sempred
        self._predicates[134] = self.instructionList_sempred
        self._predicates[187] = self.incList_sempred
        self._predicates[196] = self.clauseList_sempred
        self._predicates[206] = self.caseList_sempred
        self._predicates[209] = self.labelList_sempred
        self._predicates[220] = self.mdFieldList_sempred
        self._predicates[227] = self.metadataAttachmentList_sempred
        self._predicates[229] = self.commaSepMetadataAttachmentList_sempred
        self._predicates[233] = self.diCompileUnitFieldList_sempred
        self._predicates[237] = self.diFileFieldList_sempred
        self._predicates[241] = self.diBasicTypeFieldList_sempred
        self._predicates[245] = self.diSubroutineTypeFieldList_sempred
        self._predicates[249] = self.diDerivedTypeFieldList_sempred
        self._predicates[253] = self.diCompositeTypeFieldList_sempred
        self._predicates[257] = self.diSubrangeFieldList_sempred
        self._predicates[261] = self.diEnumeratorFieldList_sempred
        self._predicates[265] = self.diTemplateTypeParameterFieldList_sempred
        self._predicates[269] = self.diTemplateValueParameterFieldList_sempred
        self._predicates[273] = self.diModuleFieldList_sempred
        self._predicates[277] = self.diNamespaceFieldList_sempred
        self._predicates[281] = self.diGlobalVariableFieldList_sempred
        self._predicates[285] = self.diSubprogramFieldList_sempred
        self._predicates[289] = self.diLexicalBlockFieldList_sempred
        self._predicates[293] = self.diLexicalBlockFileFieldList_sempred
        self._predicates[297] = self.diLocationFieldList_sempred
        self._predicates[301] = self.diLocalVariableFieldList_sempred
        self._predicates[305] = self.diExpressionFieldList_sempred
        self._predicates[309] = self.diGlobalVariableExpressionFieldList_sempred
        self._predicates[313] = self.diObjCPropertyFieldList_sempred
        self._predicates[317] = self.diImportedEntityFieldList_sempred
        self._predicates[321] = self.diMacroFieldList_sempred
        self._predicates[325] = self.diMacroFileFieldList_sempred
        self._predicates[329] = self.genericDINodeFieldList_sempred
        self._predicates[352] = self.diFlagList_sempred
        self._predicates[363] = self.typeValueList_sempred
        self._predicates[364] = self.commaSepTypeValueList_sempred
        self._predicates[367] = self.typeConstList_sempred
        self._predicates[372] = self.argList_sempred
        self._predicates[384] = self.exceptionArgList_sempred
        self._predicates[388] = self.fastMathFlagList_sempred
        self._predicates[392] = self.funcAttrList_sempred
        self._predicates[396] = self.indexList_sempred
        self._predicates[404] = self.operandBundleList_sempred
        self._predicates[407] = self.overflowFlagList_sempred
        self._predicates[410] = self.paramAttrList_sempred
        self._predicates[413] = self.paramList_sempred
        self._predicates[418] = self.returnAttrList_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def topLevelEntityList_sempred(self, localctx:TopLevelEntityListContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def globalAttrList_sempred(self, localctx:GlobalAttrListContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def metadataNodeList_sempred(self, localctx:MetadataNodeListContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def useListOrderList_sempred(self, localctx:UseListOrderListContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def llvmType_sempred(self, localctx:LlvmTypeContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def typeList_sempred(self, localctx:TypeListContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

    def gepConstIndexList_sempred(self, localctx:GepConstIndexListContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def basicBlockList_sempred(self, localctx:BasicBlockListContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         

    def instructionList_sempred(self, localctx:InstructionListContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def incList_sempred(self, localctx:IncListContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         

    def clauseList_sempred(self, localctx:ClauseListContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         

    def caseList_sempred(self, localctx:CaseListContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def labelList_sempred(self, localctx:LabelListContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         

    def mdFieldList_sempred(self, localctx:MdFieldListContext, predIndex:int):
            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         

    def metadataAttachmentList_sempred(self, localctx:MetadataAttachmentListContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def commaSepMetadataAttachmentList_sempred(self, localctx:CommaSepMetadataAttachmentListContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 1)
         

    def diCompileUnitFieldList_sempred(self, localctx:DiCompileUnitFieldListContext, predIndex:int):
            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

    def diFileFieldList_sempred(self, localctx:DiFileFieldListContext, predIndex:int):
            if predIndex == 18:
                return self.precpred(self._ctx, 1)
         

    def diBasicTypeFieldList_sempred(self, localctx:DiBasicTypeFieldListContext, predIndex:int):
            if predIndex == 19:
                return self.precpred(self._ctx, 1)
         

    def diSubroutineTypeFieldList_sempred(self, localctx:DiSubroutineTypeFieldListContext, predIndex:int):
            if predIndex == 20:
                return self.precpred(self._ctx, 1)
         

    def diDerivedTypeFieldList_sempred(self, localctx:DiDerivedTypeFieldListContext, predIndex:int):
            if predIndex == 21:
                return self.precpred(self._ctx, 1)
         

    def diCompositeTypeFieldList_sempred(self, localctx:DiCompositeTypeFieldListContext, predIndex:int):
            if predIndex == 22:
                return self.precpred(self._ctx, 1)
         

    def diSubrangeFieldList_sempred(self, localctx:DiSubrangeFieldListContext, predIndex:int):
            if predIndex == 23:
                return self.precpred(self._ctx, 1)
         

    def diEnumeratorFieldList_sempred(self, localctx:DiEnumeratorFieldListContext, predIndex:int):
            if predIndex == 24:
                return self.precpred(self._ctx, 1)
         

    def diTemplateTypeParameterFieldList_sempred(self, localctx:DiTemplateTypeParameterFieldListContext, predIndex:int):
            if predIndex == 25:
                return self.precpred(self._ctx, 1)
         

    def diTemplateValueParameterFieldList_sempred(self, localctx:DiTemplateValueParameterFieldListContext, predIndex:int):
            if predIndex == 26:
                return self.precpred(self._ctx, 1)
         

    def diModuleFieldList_sempred(self, localctx:DiModuleFieldListContext, predIndex:int):
            if predIndex == 27:
                return self.precpred(self._ctx, 1)
         

    def diNamespaceFieldList_sempred(self, localctx:DiNamespaceFieldListContext, predIndex:int):
            if predIndex == 28:
                return self.precpred(self._ctx, 1)
         

    def diGlobalVariableFieldList_sempred(self, localctx:DiGlobalVariableFieldListContext, predIndex:int):
            if predIndex == 29:
                return self.precpred(self._ctx, 1)
         

    def diSubprogramFieldList_sempred(self, localctx:DiSubprogramFieldListContext, predIndex:int):
            if predIndex == 30:
                return self.precpred(self._ctx, 1)
         

    def diLexicalBlockFieldList_sempred(self, localctx:DiLexicalBlockFieldListContext, predIndex:int):
            if predIndex == 31:
                return self.precpred(self._ctx, 1)
         

    def diLexicalBlockFileFieldList_sempred(self, localctx:DiLexicalBlockFileFieldListContext, predIndex:int):
            if predIndex == 32:
                return self.precpred(self._ctx, 1)
         

    def diLocationFieldList_sempred(self, localctx:DiLocationFieldListContext, predIndex:int):
            if predIndex == 33:
                return self.precpred(self._ctx, 1)
         

    def diLocalVariableFieldList_sempred(self, localctx:DiLocalVariableFieldListContext, predIndex:int):
            if predIndex == 34:
                return self.precpred(self._ctx, 1)
         

    def diExpressionFieldList_sempred(self, localctx:DiExpressionFieldListContext, predIndex:int):
            if predIndex == 35:
                return self.precpred(self._ctx, 1)
         

    def diGlobalVariableExpressionFieldList_sempred(self, localctx:DiGlobalVariableExpressionFieldListContext, predIndex:int):
            if predIndex == 36:
                return self.precpred(self._ctx, 1)
         

    def diObjCPropertyFieldList_sempred(self, localctx:DiObjCPropertyFieldListContext, predIndex:int):
            if predIndex == 37:
                return self.precpred(self._ctx, 1)
         

    def diImportedEntityFieldList_sempred(self, localctx:DiImportedEntityFieldListContext, predIndex:int):
            if predIndex == 38:
                return self.precpred(self._ctx, 1)
         

    def diMacroFieldList_sempred(self, localctx:DiMacroFieldListContext, predIndex:int):
            if predIndex == 39:
                return self.precpred(self._ctx, 1)
         

    def diMacroFileFieldList_sempred(self, localctx:DiMacroFileFieldListContext, predIndex:int):
            if predIndex == 40:
                return self.precpred(self._ctx, 1)
         

    def genericDINodeFieldList_sempred(self, localctx:GenericDINodeFieldListContext, predIndex:int):
            if predIndex == 41:
                return self.precpred(self._ctx, 1)
         

    def diFlagList_sempred(self, localctx:DiFlagListContext, predIndex:int):
            if predIndex == 42:
                return self.precpred(self._ctx, 1)
         

    def typeValueList_sempred(self, localctx:TypeValueListContext, predIndex:int):
            if predIndex == 43:
                return self.precpred(self._ctx, 1)
         

    def commaSepTypeValueList_sempred(self, localctx:CommaSepTypeValueListContext, predIndex:int):
            if predIndex == 44:
                return self.precpred(self._ctx, 1)
         

    def typeConstList_sempred(self, localctx:TypeConstListContext, predIndex:int):
            if predIndex == 45:
                return self.precpred(self._ctx, 1)
         

    def argList_sempred(self, localctx:ArgListContext, predIndex:int):
            if predIndex == 46:
                return self.precpred(self._ctx, 1)
         

    def exceptionArgList_sempred(self, localctx:ExceptionArgListContext, predIndex:int):
            if predIndex == 47:
                return self.precpred(self._ctx, 1)
         

    def fastMathFlagList_sempred(self, localctx:FastMathFlagListContext, predIndex:int):
            if predIndex == 48:
                return self.precpred(self._ctx, 1)
         

    def funcAttrList_sempred(self, localctx:FuncAttrListContext, predIndex:int):
            if predIndex == 49:
                return self.precpred(self._ctx, 1)
         

    def indexList_sempred(self, localctx:IndexListContext, predIndex:int):
            if predIndex == 50:
                return self.precpred(self._ctx, 1)
         

    def operandBundleList_sempred(self, localctx:OperandBundleListContext, predIndex:int):
            if predIndex == 51:
                return self.precpred(self._ctx, 1)
         

    def overflowFlagList_sempred(self, localctx:OverflowFlagListContext, predIndex:int):
            if predIndex == 52:
                return self.precpred(self._ctx, 1)
         

    def paramAttrList_sempred(self, localctx:ParamAttrListContext, predIndex:int):
            if predIndex == 53:
                return self.precpred(self._ctx, 1)
         

    def paramList_sempred(self, localctx:ParamListContext, predIndex:int):
            if predIndex == 54:
                return self.precpred(self._ctx, 1)
         

    def returnAttrList_sempred(self, localctx:ReturnAttrListContext, predIndex:int):
            if predIndex == 55:
                return self.precpred(self._ctx, 1)
         




